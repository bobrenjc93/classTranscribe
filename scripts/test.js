[ '../captions/first/Full_Lecture_Video_13_Part_1-mjain.json',
  '../captions/first/Full_Lecture_Video_13_Part_1-pvaj.json',
  '../captions/first/Full_Lecture_Video_14_Part_5-jyl2.json',
  '../captions/first/Full_Lecture_Video_6_Part_2-mjain2.json',
  '../captions/first/Full_Lecture_Video_6_Part_3-mjain2.json',
  '../captions/first/Full_Lecture_Video_6_Part_6-pvaj.json',
  '../captions/first/Full_Lecture_Video_7_Part_2-mjain2.json' ]
// Part 1
[{"text":"you can think of this buffer as something that we call a ring buffer","width":640},{"text":"where it's not you've kind of taken the two ends of the buffer that we're using and connected them on the other side","width":640},{"text":"so now i need to be able to put things in and take them out and i could just chase my own tail forever and never worry about running off the end","width":640},{"text":"so conceptually theres a number of things that i have to have to make this work","width":448},{"text":"so if i'm the producer what do i need to know","width":256},{"text":"what does the producer need to know","width":448},{"text":"the producer is putting things in","width":320},{"text":"it needs to be able to hit that","width":384},{"text":"so the producer","width":64},{"text":"what i filled up my ring","width":256},{"text":"ok so lets say im starting from nothing and the producer wants to put something in","width":320},{"text":"what's the first thing it needs to know","width":192},{"text":"where to put it!","width":64},{"text":"okay so let's have a pointer in here that says okay in","width":576},{"text":"im going to put it in there","width":128},{"text":"i just started some place random","width":64},{"text":"if i was smart my underlying data structure might have started right there","width":512},{"text":"yeah i wouldve wrapped the two ends","width":64},{"text":"okay so now that the producer has put something in","width":192},{"text":"what does the producer have to do","width":128},{"text":"it can't n isn't write anymore","width":512},{"text":"right you have to increment in","width":256},{"text":"to now point here","width":128},{"text":"that's where my next one would be","width":192},{"text":"so that's my producer","width":128},{"text":"what did my consumer need to know","width":256},{"text":"ill tell you it's out","width":192},{"text":"a pointer to what","width":192},{"text":"the first one that i want to take out","width":320},{"text":"so in this case it's here","width":128},{"text":"i'll make the consumer blue","width":192},{"text":"and as the consumer puts things in here, it's gonna slowly increment in","width":704},{"text":"to be there","width":64},{"text":"and as the consumer takes things out","width":320},{"text":"it will","width":320},{"text":"delete them out of the queue, out of the ring buffer althoguh i guess it really doens't matter and that's the next one to take out","width":704},{"text":"so there are two things i have to be careful about","width":256},{"text":"whats the first thing that you said before","width":64},{"text":"i have to make sure that i dont what?","width":192},{"text":"i wnat to make sure that i don't overwrite data that hasn't been read yet","width":320},{"text":"my writers write, my producer is producing","width":192},{"text":"this is a big ring buffer","width":192},{"text":"i should've a smaller one","width":128},{"text":"okay i'm putting things in","width":128},{"text":"do i have to stop yet? no","width":256},{"text":"i can stop here","width":64},{"text":"but","width":64},{"text":"can i keep going?","width":192},{"text":"no","width":64},{"text":"i have to make sure i dont whoops that in","width":256},{"text":"i have to make sure i dont overflow my buffers","width":320},{"text":"and now for the output","width":320},{"text":"for the consumer the consumer is going to start taking things out","width":448},{"text":"let's say it gets here","width":320},{"text":"it can still take that out","width":128},{"text":"but now it takes that last one out","width":192},{"text":"and now my out is here","width":320},{"text":"can it take anything out anymore?","width":192},{"text":"no","width":64},{"text":"if i allowed the consumer to take something out at this point i would call that underflow","width":448},{"text":"overflow means that the producer produces too much and overwrites good data","width":256},{"text":"underflow means that my consumer is trying to take out something that's not there","width":384},{"text":"so those are two things we wnat to make sure don't happen we we're implementing a ring buffer","width":512},{"text":"so theres no underflow, and there's no overflow","width":192},{"text":"now i know you guys have done semaphores and you guys have done condition variables","width":448},{"text":"we're going to implement a solution for a ring buffer","width":64},{"text":"and of course we have a number of properties that we want to be able to have true for this solution","width":576},{"text":"and to start with we dont want any particular busy waiting","width":192},{"text":"so we want to mkae sure that our semaphores and condition variables are set up properly","width":384},{"text":"and we dont have to have any kind of deadlock","width":256},{"text":"i know you guys haven't talked specifically about what deadlock means, but at a minimum it's going to mean that someone can't move forward","width":512},{"text":"so we want to be able to look at both of these things","width":192},{"text":"we want to implement a solutoin that can do that","width":256},{"text":"our first solution im going to give you my basic solution","width":448},{"text":"and from there","width":128},{"text":"i've been told you guys like to sit down and come up with your own solutions","width":512},{"text":"so i'm going to give you a basic first start","width":1984},{"text":"so certainly whats the first thing that we need in our globals and initilazliation variables","width":512},{"text":"what are we trying to manage","width":192},{"text":"our buffer! right?","width":192},{"text":"so we need a buffer","width":128},{"text":"so i'm going to have a ","width":384},{"text":"and im gonna say im just going to have a 16 alright","width":448},{"text":"and then i need our two variables. what were the two variables i said we needed?","width":448},{"text":"in and out","width":64},{"text":"so since they are just pointers into my data structure","width":384},{"text":"they can just be integers","width":128},{"text":"im going to have an integer in and and integer out","width":320},{"text":"where should they both start","width":320},{"text":"they start at the same place? they start at diferent places?","width":640},{"text":"they start at 0?","width":64},{"text":"what should we do","width":64},{"text":"0","width":64},{"text":"we're going to initialize both in and out to be 0","width":512},{"text":"so i'm going to give you a basic in queue and i want you to tlel me if this works","width":576},{"text":"so i'm going to say for my enqueue im goign to put something in","width":384},{"text":"im going to put my value in whatever the in value is and increment in","width":768},{"text":"and my dequeue is im going to say that i have some result","width":448},{"text":"im going to save out my result becasue i want to use it later","width":192}],
// Part 1
[{"text":"well","width":192},{"text":"you can think of this buffer","width":192},{"text":"as a ","width":64},{"text":"as something that we call a","width":192},{"text":"ring buffer","width":64},{"text":"where","width":64},{"text":"its not","width":192},{"text":"you have kind of taken","width":128},{"text":"the two ends of the buffer","width":192},{"text":"that we were using","width":128},{"text":"and have connected them ","width":128},{"text":"on the other side ","width":64},{"text":"right","width":64},{"text":"and now ","width":64},{"text":"we need be able to put things in","width":320},{"text":"and take them out","width":64},{"text":"and ","width":64},{"text":"I could just","width":64},{"text":"chase my own tail","width":128},{"text":"forever","width":64},{"text":"and never working about","width":192},{"text":"running off the end","width":64},{"text":"so conceptually","width":64},{"text":"there are a number of things","width":128},{"text":"that I have to have","width":128},{"text":"to be able to make this work","width":192},{"text":"so I am the producer","width":128},{"text":"what do I need to know","width":64},{"text":"what is the producer need to know ","width":384},{"text":"for thee","width":64},{"text":"the producer is putting things in","width":256},{"text":"yeah","width":64},{"text":"the producer is","width":704},{"text":"what is filling up my array basically","width":256},{"text":"say Im starting off with an array","width":192},{"text":"so lets have a pointer in here","width":192},{"text":"that says","width":64},{"text":"okay","width":64},{"text":"uhmm","width":64},{"text":"in","width":64},{"text":"im going to put it in there","width":256},{"text":"I just started at some place random","width":192},{"text":"if Im smart","width":128},{"text":"my underlying datastructure","width":256},{"text":"might have just started right there","width":192},{"text":"yeah, I would have wrapped the two ends","width":64},{"text":"okay so now","width":64},{"text":"that the producer has put something in","width":256},{"text":"what does the produce have to do","width":256},{"text":"in isnt right anymroe","width":192},{"text":"you have to increment in","width":192},{"text":"to now point here","width":128},{"text":"theres were my next one will be","width":192},{"text":"so thats my produce","width":320},{"text":"what does my consumer need to know","width":256},{"text":"Ill tell you","width":128},{"text":"its out","width":64},{"text":"a pointer to","width":192},{"text":"what","width":64},{"text":"the first one that I wanted to take out","width":320},{"text":"the first case is ere","width":192},{"text":"Ill make the consumer blue","width":192},{"text":"and as the","width":64},{"text":"consumer puts things in here","width":192},{"text":"its going to slowly increment in","width":256},{"text":"to be there","width":64},{"text":"and as the consumer takes things out","width":256},{"text":"it will","width":320},{"text":"delete them out of the ring buffer","width":320},{"text":"although I guess it really doesnt matter","width":256},{"text":"and that is the next one to take out","width":192},{"text":"so there are two things that we have to be careful about","width":256},{"text":"what is the first thing that we said before","width":64},{"text":"I have to make sure that I dont want","width":128},{"text":"so I want to make sure that I dont overwrite data","width":512},{"text":"that has already been written to","width":192},{"text":"so my producer is producing","width":192},{"text":"so Im putting things in","width":192},{"text":"but do I have to stop yet?","width":192},{"text":"No","width":64},{"text":"I can stop here","width":192},{"text":"but","width":64},{"text":"can I keep going?","width":128},{"text":"no.","width":64},{"text":"I have to make sure that I dont","width":192},{"text":"oops","width":64},{"text":"thats in","width":64},{"text":"I have to make sure that","width":192},{"text":"I dont overflow my buffers","width":128},{"text":"and now","width":64},{"text":"for the output","width":256},{"text":"for the consumer","width":128},{"text":"the consumer is going to start taking things out","width":384},{"text":"say it gets here","width":128},{"text":"he can still take that out","width":192},{"text":"but now it takes the last one out","width":256},{"text":"and now my out is here","width":256},{"text":"can it take anything out anymore","width":256},{"text":"?","width":64},{"text":"no","width":64},{"text":"if my program allowed the consumer","width":256},{"text":"to take something out at this point","width":448},{"text":"Id call that underflow","width":128},{"text":"Overflow means that","width":64},{"text":"my producer produces too much","width":64},{"text":"and overwrites the data","width":192},{"text":"and underflow","width":64},{"text":"is that my consumer tries to take out the data","width":384},{"text":"thats not there","width":128},{"text":"theres no underflow","width":192},{"text":"and theres no overflow","width":192},{"text":"I know you guys have done semaphores","width":384},{"text":"and I know you guys have done","width":384},{"text":"conditioned variables","width":64},{"text":"were going to implement","width":64},{"text":"a solution for a ring buffer","width":128},{"text":"and of course we have a number of properies","width":320},{"text":"we want to be able to have true","width":256},{"text":"we dont want to have any particuar decision waiting","width":512},{"text":"particular busy waiting","width":64},{"text":"so we want to make sure that our semephores","width":384},{"text":"and conditioned variables","width":192},{"text":"are set up correctly","width":64},{"text":"and","width":64},{"text":"we dont want to ","width":128},{"text":"have any kind of deadlock","width":192},{"text":"I know you guys havent talked specifically about what deadock means","width":832},{"text":"but at a mimum","width":64},{"text":"its going to mean","width":128},{"text":"that somebody cant move forward","width":192},{"text":"so we want to be able to look at both these things","width":384},{"text":"and we want an implementation that can do that","width":320},{"text":"first solution","width":128},{"text":"Im going to give you ","width":128},{"text":"my basic solution ","width":128},{"text":"and from there","width":128},{"text":"Ive bee told you guys like to sit down","width":448},{"text":"and come up with your own solutions right?","width":256},{"text":"let me put this back up there now","width":192},{"text":"so...","width":64},{"text":"how do you zoom on this thing","width":512},{"text":"oh there it is","width":192},{"text":"okay","width":128},{"text":"let me know if thats good enough for you","width":448},{"text":"Im going to give you a basic first start","width":256},{"text":"so what is the first thing that we need","width":320},{"text":"in our globals and initialized variables","width":256},{"text":"what are we trying to manage?","width":256},{"text":"Our buffer right?","width":192},{"text":"so we need a buffer","width":128},{"text":"so, Im going to have a","width":192},{"text":"and Im going to say","width":192},{"text":"Im just going to have a 16","width":320},{"text":"and then Im going to need the two variables","width":320},{"text":"what were the two variables I said we needed","width":64},{"text":"in and out","width":64},{"text":"since theyre just pointers into my data structure","width":512},{"text":"they can just be integers","width":128},{"text":"Ill have an integer in ","width":192},{"text":"and an integer out","width":128},{"text":"where should they both start?","width":192},{"text":"they start at the same place","width":384},{"text":"do we start them at different places","width":384},{"text":"do we start them at zero","width":192},{"text":"what should be do?","width":128},{"text":"we are going to initialize both in ","width":320},{"text":"to be zero ","width":128},{"text":"and my out to be zero","width":256},{"text":"so Im going to give you a basic enqueue","width":384},{"text":"and I want you to tell me if this works","width":192},{"text":"so for my enqueue","width":128},{"text":"Im going to put something in....","width":192},{"text":"my value","width":128},{"text":"and Im going to put something in","width":64},{"text":"my value","width":256},{"text":"Im going to put my value in","width":192},{"text":"awhatever the int value is","width":256},{"text":"and incredmetn","width":256},{"text":"and my dequeue is ","width":192},{"text":"Im going to say ","width":128},{"text":"I have som results","width":64},{"text":"Im not gonna talk about my result","width":64},{"text":"cus Im going to use it later","width":64}],
// Part 5
[{"text":"So, it turns out that this, uh, circular wait is not sufficient for, uh, determining whether there's deadlock. It is necessary. If there's no circular wait, there's no deadlock.","width":1088},{"text":"I mean, if there's a circle in the graph, it doesn't mean there's deadlock. So there are four conditions. They are Kaufmann's conditions.","width":704},{"text":"The first one is mutual exclusion. It means that only one process can use a resource at a time.","width":576},{"text":"The process claims exclusive control of the resource they require.","width":384},{"text":"So if we're only dealing with writers, writers require exclusive access to that critical section.","width":576},{"text":"If we're only looking at readers, there's no exclusive access. They can all look at the same time. So we have to have exclusive access. A lock impies exclusive access.","width":896},{"text":"There is also something called hold-and-wait. Hold-and-wait says that the prcoess that the process holding the resources allocated to them is waiting for additional resources. ","width":896},{"text":"If we go back to our last two examples here, ","width":512},{"text":"IN this case, the first one, P1 is holding B","width":448},{"text":"And waiting for C","width":128},{"text":"In this case, P1 gave up B","width":256},{"text":"And then was waiting for C, and so in this case doesn't have any hold and wait","width":512},{"text":"So, in a sense a hold and wait","width":512},{"text":"a process has a resource","width":256},{"text":"it has an arrow coming in, and .is waiting for another resource so it has an arrow coming out","width":640},{"text":"The third thing is that there are no preemptive conditions","width":384},{"text":"this means nothing can be taken out","width":256},{"text":"so this instead of A releasing B2, I'm going to force A to release B2","width":704},{"text":"Once you have it, it's never given away","width":256},{"text":"So the north and south goings ","width":320},{"text":"There is no pre-emption.","width":256},{"text":"A circular chain of prcoesses exists. ","width":384},{"text":"So, there is actually a law on the books","width":256},{"text":"that said in Kansas, when two trains approach each other at a crossing, both shall come to a full stop ad neither shall start up again until the other has gone","width":1280},{"text":"Yeah, not so good","width":128},{"text":"Total deadlock. They both can't make any progress.","width":448},{"text":"This is a train, I'm not using a stack.","width":1472},{"text":"Ok I'm not sure I understand your solution.","width":832},{"text":"Ok, so give the north going train the priority and the south always has to give up.","width":640},{"text":"So that would break it.","width":128},{"text":"What","width":192},{"text":"condition would that break?","width":320},{"text":"Yeah, there's no pre-emption here, and in doing so you've gotten rid of the cycles too.","width":896},{"text":"Any other ways of fixing it?","width":192},{"text":"Let's see...did I have any others?","width":320},{"text":"Priority, uh...","width":128},{"text":"You could make one back up.","width":128},{"text":"But all of them have to be able to break one of the conditions.","width":576},{"text":"So let's go with one more simple example.","width":256},{"text":"Two students need a pen and paper.","width":192},{"text":"I need to know if there's deadlock here.","width":320},{"text":"Two students share pen and paper.","width":192},{"text":"Is there deadlock there?","width":128},{"text":"It breaks mutual exclusion.","width":192},{"text":"Both students agree to grab pen before paper.","width":448},{"text":"Which one does that break?","width":256},{"text":"I always grab pen before paper. This is no circular wait.","width":1216},{"text":"Because I'm always waiting for the pen","width":320},{"text":"and then I'm waiting for the paper.","width":192},{"text":"If they randomly did it, then we would have the cycle","width":448},{"text":"and they both get one or none","width":192},{"text":"Hold and wait","width":192},{"text":"Last one, students I have the pen and you give up the paper","width":768},{"text":"There's your preemption","width":192},{"text":"This leads us to the dining philosophers problem","width":384},{"text":"How many people have heard of this problem before?","width":512},{"text":"This is the canonical computer science problem.","width":256},{"text":"We have N philosophers and N forks","width":320},{"text":"BUT you need two forks to eat","width":192},{"text":"You can do this with chopsticks too","width":512},{"text":"But you only pick up one at a time","width":192}],
// Part 2
[{"text":"alright so here's what these two lines do","width":192},{"text":"they're basically saying hey operating system, I need some extra bytes","width":256},{"text":"heres how many","width":128},{"text":"talking to your operating system is very slow","width":192},{"text":"thats gonna take several microseconds to complete","width":192},{"text":"and then we're gonna say here, chosen","width":448},{"text":"im going to set this pointer to be sbrk and then call sbrk on size","width":256},{"text":"guess what that does. that also says to the operating system i need now size bytes","width":320},{"text":"they're actually calling sbrk 4 times","width":256},{"text":"to say alright give me some byte not only for the struct but give me some bytes in order for to satisfy the users request","width":448},{"text":"and what we're doing with the asterisk each time is raising the rule to mar raising the threshold for where our heap finishes","width":512},{"text":"so now we're gotten set up our little struct","width":192},{"text":"we'll set it's size","width":192},{"text":"we'll set that it's free","width":128},{"text":"and we'll set the next pointer to equal to metadata and we change the metadata chosen to the pointer","width":448},{"text":"and what've doen here is insert our new entry into the beginning of the linked list","width":320},{"text":"so the next time we call free or malloc we're gonna see this newly created entry inside our linked list","width":576},{"text":"and then finally we say back to the user here's the memory of size bytes that you needed","width":384},{"text":"questions about this code?","width":640},{"text":"yes","width":256},{"text":"if chosen is bigger than the amount of space that you need","width":832},{"text":"yes","width":64},{"text":"so","width":128},{"text":"what this code does not do","width":192},{"text":"is do anything without spare space","width":192},{"text":"it's got a very simple view of the world","width":256},{"text":"its view of the world is","width":64},{"text":"yeah i've got a block here that was previously allocated, a block here, some memory here","width":384},{"text":"and if you want to say to this first memory then it's obviously not going to give you that and it would give you say this block","width":768},{"text":"and youd say well what about this space back here","width":256},{"text":"can we use that","width":64},{"text":"should we add another entry because maybe in the moment someone will malloc and attempt to make a smaller space","width":384},{"text":"ah too bad","width":64},{"text":"okay so we've got some fragmentation inside each of these allocations","width":448},{"text":"if we dont have a perfect fit","width":64},{"text":"yes","width":512},{"text":"ah right","width":512},{"text":"okay","width":64},{"text":"so","width":64},{"text":"before this line","width":128},{"text":"we've got metadata","width":256},{"text":"pointing to our first entry","width":256},{"text":"yes this is my little struct now","width":320},{"text":"which then has a next pointer with points to another with has a next one which opints to a nother one","width":256},{"text":"and so on and so on and so on","width":128},{"text":"so what we do","width":128},{"text":"is ","width":64},{"text":"we set up our new struct","width":192},{"text":"so its next pointer ","width":256},{"text":"points to the old beginning of the linked list","width":448},{"text":"alright so when you see equals","width":128},{"text":"just remember when you see equals","width":192},{"text":"your copying bit patterns","width":64},{"text":"you're just changing one pointer to look at the same thing as aanother pointer","width":320},{"text":"and then the next line is meaningful","width":192},{"text":"that we've changed that variable metadata","width":64},{"text":"to look to our new link","width":192},{"text":"any other questions","width":832},{"text":"alright then","width":256},{"text":"so","width":64},{"text":"okay yes","width":896},{"text":"get your spectacles on","width":128},{"text":"i did this too small today and it was tiny","width":128},{"text":"when can a system use COW","width":320},{"text":"moooo","width":64},{"text":"that's a moot point","width":128},{"text":"no","width":64},{"text":"COW","width":64},{"text":"cow stands for copy on write","width":256},{"text":"here's the idea","width":256},{"text":"you now can share a resource","width":192},{"text":"providing neither of us actually tries to change it","width":256},{"text":"and we can do that very quickly","width":256},{"text":"well the day that one of that you and i actualy need to write to that resource, that's when we're asked to duplicated it","width":384},{"text":"we'll do it very quickly before the other person notices","width":384},{"text":"so you can defer the actual copying process, the duplication process, until a change or modification happens","width":512},{"text":"ah this is a common idea for performance because quite often it turns out that we don't actually need to write to something or modify something","width":896},{"text":"so if you can detect when something is about to change","width":64},{"text":"maybe you're writing an alloc class or youre the operating system","width":256},{"text":"we dont actually need to initialize stuff or copy stuff until it actually is required","width":448},{"text":"and so","width":128},{"text":"a little brain teaser i have to today","width":320},{"text":"is how can we improve calloc performace here","width":256},{"text":"so COW is just copy on write","width":128},{"text":"so its a way to have shared data structures until something mutable happens","width":704},{"text":"until a change happens, and that way, we can use our resources efficiently","width":384},{"text":"well lets just see what you remember from previous lectures","width":320},{"text":"what's realloc","width":64},{"text":"it's when you change your mind","width":384},{"text":"oh okay remember those bytes i malloc, actually i decided i need more bytes","width":384},{"text":"so we can use malloc when i say i'm creating an array","width":320},{"text":"and i keep going around an array","width":128},{"text":"and i decide to say remember that array i made","width":128},{"text":"turns out it's not large enough","width":128},{"text":"okay so realloc works but there's a big caveat","width":256},{"text":"as youve just seen how malloc actually places things","width":384},{"text":"it could be that we can't keep the user data inside the same memory address anymore","width":256},{"text":"so when you call realloc be prepared to update your pointers with the return result of realloc","width":448},{"text":"so i've got an array","width":64},{"text":"that i previously created say from realloc or malloc or calloc","width":384},{"text":"then don't just say you know what im gonna make it larger","width":448},{"text":"i'm gonna make it say 100x 100 entries larger","width":704},{"text":"infact, let me just change this code a little bit","width":448},{"text":"let's say that ","width":128},{"text":"you called calloc","width":128},{"text":"and","width":64},{"text":"i've got like a size of thing","width":256},{"text":"something","width":128},{"text":"and i've got like 50 entries here","width":192},{"text":"and then you say you know what actually 50 wasn't enough","width":448},{"text":"im going to double my space","width":128},{"text":"i've just managed to write two errors in 2 lines","width":256},{"text":"actually both of those were in the second line","width":320}],
// Part 3
[{"text":"so its his two gauges the first is to my variable array i didnt build it to update","width":704},{"text":"and so it could be that during testing everything is fine but later one it turns out that im trying to change the size of realloc and actually had to move my array of emulate i didnt update it","width":960},{"text":"so make sure you use a return value","width":192},{"text":"this second error is awful","width":128},{"text":"and im going to tell you know its because life is short","width":256},{"text":"and please please never make this error","width":128},{"text":"unless youre trying to confuse someone else","width":192},{"text":"this is a fantastic gotcha","width":192},{"text":"does that code really allocate enough things for 100 entries","width":512},{"text":"no it allocates 100 bytes","width":320},{"text":"what we forgot to do was multiply it by the sizeof() our entries","width":576},{"text":"so don't just plug in N here or number of items remember that calloc realloc and malloc work with bytes","width":640},{"text":"and we didnt allocate enough bytes","width":128},{"text":"which means later on","width":128},{"text":"when we start putting things in our array we're going to go past the end of the array","width":256},{"text":"and exciting things can happen called segfaults and data corruption","width":384},{"text":"so start and pause whenever you see realloc are you actually passing the right number of bytes","width":576},{"text":"and when you see sizeof() are you calculating the size of the right type","width":128},{"text":"okay","width":128},{"text":"thankfully now no one in this room is ever going to mkae that error again","width":384},{"text":"we'll just let university of whatever make those errors","width":64},{"text":"okay","width":64},{"text":"so","width":64},{"text":"what do remember about calloc","width":256},{"text":"what does calloc do","width":128},{"text":"okay it takes two arguments","width":128},{"text":"and it multiplies them together to determine the number of bytes","width":384},{"text":"what else how is it different from malloc","width":192},{"text":"it clears the memory","width":64},{"text":"yes","width":64},{"text":"calloc now only gives you back a pointer to some memory","width":128},{"text":"it zeros out all that memory as well","width":256},{"text":"for","width":64},{"text":"you","width":64},{"text":"so we go back to java arrays","width":192},{"text":"we said hey i need a new integer array","width":128},{"text":"a graet way to implement that would be to use calloc","width":256},{"text":"so of course then","width":128},{"text":"calloc is much slower","width":64},{"text":"we actualyl have to write to all those memory locations","width":256},{"text":"and you remember talking to memory is really slow","width":64},{"text":"especially when you need to talk to lots of it","width":192},{"text":"so the reason that we dont necessarily always call calloc is because sometimes we know that our program is going to write into every memory location","width":768},{"text":"so we don't even have to waste time zeroing it out first","width":256},{"text":"so it zeros the bytes","width":128},{"text":"so you can write a loop to do this","width":768},{"text":"but ill give you a little hint","width":256},{"text":"if youre ever writing a calloc and you want it to be performant","width":320},{"text":"then remember when you do the operating system and say hey i need some new bytes","width":448},{"text":"i guarantee you those bytes will be zero","width":192},{"text":"because the kernel the operating system does not want to give you some memory that is being used by a different process","width":576},{"text":"maybe its got a password in it","width":64},{"text":"maybe its got a secret key in it","width":64},{"text":"maybe its got stuff that you shouldnt have access to","width":192},{"text":"so for security","width":64},{"text":"you will get bytes which are zero","width":256},{"text":"so if you know that you're getting new bytes","width":256},{"text":"you can reliably","width":64},{"text":"you dont actually have to zero those out","width":192},{"text":"but only if you know that youre getting them fresh from the operating system","width":384},{"text":"youre not just using memory thats already part of your process","width":64},{"text":"boundary tags we haven't talked about much","width":576},{"text":"but we have talked about indirectly","width":192},{"text":"the last lecture","width":128},{"text":"i gave you an idea about whenever we did an allocation","width":192},{"text":"we could actually store the size of our allocated area","width":576},{"text":"at the beginning and the end of each part","width":192},{"text":"so rather than having a separate struct like we saw at the beginning of this lecture","width":192},{"text":"we could actually hide inside here how many bytes this is","width":320},{"text":"so this say is 16 bytes","width":128},{"text":"put 16 here","width":128},{"text":"this is 20","width":64},{"text":"so if we do these tags at the beginning and end","width":384},{"text":"then when we come to do something like a free","width":256},{"text":"i know that because these are like train couches becuase theyre next door to each other if i just go backwards enough bytes","width":640},{"text":"i can actually read how big the previous allocation was","width":192},{"text":"and that allows me to manipulate these values","width":256},{"text":"and to maintain a list what's been allocated","width":192},{"text":"as part of this train","width":192},{"text":"as part of these tags which are next to each other","width":256},{"text":"alright","width":128},{"text":"so when actually return from malloc","width":256},{"text":"we wouldn't return the beginning of the carriage if you like, no we look a few bytes in","width":384},{"text":"and say okay here's that area for you to play with","width":320},{"text":"you can put whatever data you want inside this bit here","width":256},{"text":"because you asked for 8 bytes in the middle","width":192},{"text":"but becuase the users code was broken","width":192},{"text":"it kept going","width":128},{"text":"say someone didn't actually request enough bytes","width":448},{"text":"so as a result of that","width":64},{"text":"the user code just destroyed our metainformating inside here","width":448},{"text":"in fact it could've kept going as well","width":64},{"text":"this might seem to work until the day the code calls free","width":704},{"text":"becuase now you're free implementation assumes that it can read these values correctly","width":576},{"text":"but as we've just seen the values here are gone","width":384},{"text":"theyve been replaced by whatever the user code happened to write in there or the rest of the program actually did","width":576},{"text":"so now you linkedlist manipulation and your calculations are","width":320},{"text":"ha ha ha","width":64},{"text":"might be updating arbitrary pieces of memory","width":384},{"text":"and youre adding whatever the values are that we in her","width":256},{"text":"heres an example where a buffer overflow could make your perfectly reasonable code do bad things","width":448},{"text":"now it could make it say write arbitrary values into arbitrary different locations","width":256},{"text":"which is why buffer overflows are so dangerous","width":256},{"text":"cuz your lucky what happens is when you call free your program crashes","width":320},{"text":"so when your program crashes during free its probably because something bad happened earlier to the heap","width":576},{"text":"so how can we stop that","width":256},{"text":"what can we do","width":128},{"text":"lets say youve inherited a program where it just crashes strangely on free","width":576},{"text":"how could you try to figure out whats going on","width":256}],
// Part 6
[{"text":"okay","width":192},{"text":"right lets run this, see what happens","width":192},{"text":"and it wont quite work, cus uhhh gcc will say \"hey I've no idea.. what\"","width":448},{"text":"uhhh doesn't know what sleep is, and shouldn't know what pthread is either","width":832},{"text":"so lets fix this","width":128},{"text":"we need uhmm","width":128},{"text":"pthread.h","width":64},{"text":"and also on our options down here","width":64},{"text":"we have to tell the compiler","width":192},{"text":"please","width":64},{"text":"I really wanna compile with pthread","width":256},{"text":"there we go","width":128},{"text":"... what. okay! ","width":576},{"text":"right great","width":64},{"text":"so it printed out..","width":128},{"text":"dead code..","width":128},{"text":"so what I want to show you is...","width":256},{"text":"look we passed in a pointer to something over here","width":384},{"text":"and then inside our function called beans, we just printed the pointer value","width":192},{"text":"we did not try to follow the pointer value","width":128},{"text":"if I tried to print out the string of deadcode, ","width":320},{"text":"it will probably crash","width":128},{"text":"its probably not a valid memory address to read","width":64},{"text":"okay ","width":64},{"text":"and now my machine is getting hot","width":320},{"text":"why? because there the cpu","width":64},{"text":"kept runnign","width":128},{"text":"uhmmm it it it, my program never finished","width":192},{"text":"right, the first cpu is still running","width":384},{"text":"so what have we just proved","width":320},{"text":"we have just proven","width":256},{"text":"that we can do two things at the same time","width":64},{"text":"inside one process","width":128},{"text":"what do you think happens","width":192},{"text":"if I make a hundred threads","width":256},{"text":"my machine ","width":320},{"text":"might only have say a couple of cpus","width":192},{"text":"so how is it going to run","width":192},{"text":"those threads","width":64},{"text":"if Ive only got 2 actual cpus","width":256},{"text":"so what I do, is","width":320},{"text":"let one thread done","width":64},{"text":"and when it finishes","width":64},{"text":"it says","width":64},{"text":"next thread I know youve been waiting for a while","width":448},{"text":"you can have the cpu next","width":64},{"text":"actually its cleverer than that","width":192},{"text":"every 10 milliseconds or so","width":256},{"text":"a little hardware timer goes off","width":64},{"text":"and the operating systems scheduler comes up","width":256},{"text":"and it says","width":256},{"text":"you have been having the cpu for too long","width":192},{"text":"Im going to get this other thread","width":256},{"text":"that has been waiting for so long","width":256},{"text":"and so im going to allow it to run","width":256},{"text":"so the operating system","width":64},{"text":"treats memory, the cpu and other resouces","width":320},{"text":"as scarce resources","width":192},{"text":"and tries to allocate them very efficiently","width":256},{"text":"and the different parts of the running system","width":64},{"text":"that wants to have access","width":128},{"text":"and how we schedule that ","width":192},{"text":"is actual an area of research","width":192},{"text":"so we have passed in something","width":256},{"text":"what we have passed in here","width":256},{"text":"lets make our program","width":64},{"text":"return something","width":64},{"text":"so ","width":64},{"text":"Ill return another void pointer","width":192},{"text":"lets call it one two three four","width":320},{"text":"how do I get that from another thread?","width":256},{"text":"Well, this time Im going to call another thread","width":320},{"text":"pthread join","width":128},{"text":"so pthread join","width":128},{"text":"is a bit like","width":64},{"text":"wait","width":64},{"text":"it say","width":192},{"text":"dont continue","width":64},{"text":"until this thread has finished","width":128},{"text":"and uhh","width":128},{"text":"lets just grab it","width":128},{"text":"okay","width":64},{"text":"here is the thread I care about","width":384},{"text":"so lets just pass in the id number","width":256},{"text":"that we have before","width":128},{"text":"and uhmm","width":64},{"text":"I better have","width":64},{"text":"some where to store it","width":192},{"text":"right","width":64},{"text":"so now I just need a void pointer","width":256},{"text":"and I need the address of that void pointer","width":256},{"text":"and so lets finally print out the value of that","width":384},{"text":"okay, so","width":320},{"text":"what did we see of it here","width":192},{"text":"we have still got two thread","width":256},{"text":"then the new thread","width":192},{"text":"the second thread","width":128},{"text":"slept for 2 seconds","width":128},{"text":"the main thread","width":64},{"text":"the first thread say","width":128},{"text":"okay","width":64},{"text":"Im just going to join","width":128},{"text":"Im just gonna join","width":64},{"text":"so it gets paused","width":128},{"text":"because its waiting for that second thread to finish","width":384},{"text":"and then the second thread finally prints out","width":320},{"text":"what it is given","width":64},{"text":"and then we can get the value in the first thread using pthread join","width":576},{"text":"theres another way to exit thread","width":256},{"text":"and that way is called pthread_exit","width":384},{"text":"right","width":64},{"text":"so lets exit with something","width":128},{"text":"uhhh","width":64},{"text":"lets exit with","width":128},{"text":"ohh I dont know","width":64},{"text":"hello!","width":192},{"text":"oh, wrong way","width":640},{"text":"did I...","width":704},{"text":"ohh, yes","width":704},{"text":"okay Im ","width":64},{"text":"going to cast it as a void ** pointer","width":320},{"text":"there we go","width":64},{"text":"if you call pthread_exit","width":128},{"text":"youre telling the system","width":320},{"text":"Im done with this","width":128},{"text":"but my cpu for this thread","width":256},{"text":"does not need to execute","width":128},{"text":"any more","width":64},{"text":"so this time","width":128},{"text":"my thread called pthread_join","width":256},{"text":"prints out","width":64},{"text":"hello world and hello","width":192},{"text":"instead of the other return value","width":256},{"text":"soo","width":64},{"text":"pthread_join","width":128},{"text":"the exit here basically says","width":256},{"text":"Im done","width":64},{"text":"andd with that","width":128},{"text":"weve finished","width":64},{"text":"have a wonderful section tomorrow","width":256},{"text":"if you have any questions and ask me now","width":256},{"text":"there were three students","width":128},{"text":"who forget to put the exam key","width":256},{"text":"and btw your quiz scores are in your subversion","width":320},{"text":"if you are one of those students","width":64},{"text":"come down and we can sort that out now","width":64}],
// Part 2
[{"text":"pthread_exit that just means no more for this thread","width":512},{"text":"that particular chef has walked out of the kitchen","width":384},{"text":"and will never come back","width":128},{"text":"so before you call pthread_exit make sure your thread has cleaned up any resources that it might have acquired","width":576},{"text":"questions?","width":128},{"text":"yes","width":64},{"text":"okay so when thread finishes it can finish in two different ways","width":832},{"text":"it can call pthread_exit","width":192},{"text":"or it can return","width":192},{"text":"a value theyre actually equivalent","width":192},{"text":"so this is a way to send some information back to the rest of the process","width":704},{"text":"and we had an example down here of calling pthread_join and saying okay what did that thread say at the end","width":320},{"text":"and you dont have to use this mechanism","width":192},{"text":"its actually kind of common to make a struct and pass that to pthread_create","width":576},{"text":"but thats the purpose of pthread_exit and this return is that you can get the exit value","width":384},{"text":"okay?","width":128},{"text":"so let's see how","width":256},{"text":"let's say you want to more than just avoid pointer","width":192},{"text":"what we could do here is define some sort of struct","width":512},{"text":"i won't bother with the struct definiton","width":192},{"text":"ill say hey lets have some memory","width":64},{"text":"ill call it my todo struct","width":704},{"text":"calloc sizeof() todo","width":256},{"text":"and i just need one of them and i would set","width":320},{"text":"woop","width":64},{"text":"set things up on this","width":256},{"text":"hey like a start blah blah blah","width":320},{"text":"please stop","width":64},{"text":"0","width":64},{"text":"exit value in here etc","width":256},{"text":"so i could use this struct because both my main program and thread then knows about this struct becuase i can","width":384},{"text":"pass it in","width":64},{"text":"so that allows me to assemble a whole body of information i want to pass to the other thread","width":576},{"text":"okay so lets keep goign through our little questions here","width":384},{"text":"so when would you call pthread_exit in your main method","width":256},{"text":"well this is typically done in sort of simple or small programs where we say most of the work is going to happen by most of my other threads, and then my program can finish after all of those other threads have finished","width":768},{"text":"so we would do this if theres no cleanup in the main thread","width":448},{"text":"and i would be happy just to wait until all threads are done","width":896},{"text":"so this is the equivalent of saying last person out of the kitchen turn out the lights and the process will finish","width":640},{"text":"okay so i gave you two ways that a thread can be terminated just now","width":448},{"text":"i said it can return from its function so we could return a value and i gave you like that 12345 thing","width":576},{"text":"so if you return from the function that is orgiinally started with the thread","width":448},{"text":"i also showed you that you could call pthread_exit","width":256},{"text":"but there's 4 ways","width":256},{"text":"what are the 2 other ways might a thread exit","width":192},{"text":"yes!","width":704},{"text":"yes!","width":128},{"text":"if someone calls pthread_cancel on that chef","width":192},{"text":"they're done","width":64},{"text":"so if a thread is in the cancel state it may exit","width":320},{"text":"and how else might a pthread","width":320},{"text":"yes the whole process dies","width":128},{"text":"so if another thread for example segfaults, that it's for all of your processes","width":384},{"text":"segfault is like blowing up the entire chemistry lab or the entire kitchen","width":384},{"text":"the entire thing is gone. the whole process is gone","width":64},{"text":"we need a valid process in order for our threads to finish","width":256},{"text":"well so talk about pthread_join its actually got 2 purposes","width":448},{"text":"we can wait for the thread to finish","width":192},{"text":"and get its exit value","width":384},{"text":"the other thing it does is free up resources","width":640},{"text":"okay what resources might that be","width":640},{"text":"every thread has some space inside a process memory for its stack","width":448},{"text":"and any thread has an exit status, an exit value","width":384},{"text":"the lab is going to keep those around because who knows, maybe in the future someone is going to call pthread join on a thread","width":640},{"text":"so we can only release those resources after pthread_join has been called","width":320},{"text":"if you're writing a short simple program and you don't care about these things then fine","width":256},{"text":"but when you want to write longer running programs that don't have resource leaks you should call pthread_join on every thread","width":384},{"text":"so pthread_cancel youre giving a chef a little thread marching orders to say hey leave","width":1088},{"text":"okay im cancelling you i dont want anymore of your work","width":320},{"text":"that stuff i told you to do? don't do it anymore","width":256},{"text":"pthread_exit says \"I'm done\"","width":384},{"text":"and btw here's my result","width":128},{"text":"so its an act by the thread to say i don't want to do anymore work","width":320},{"text":"the point i was making was that you know that when you return from mian the process is done","width":1472},{"text":"you know that when you call exit, the process is done","width":384},{"text":"pthread_exit has a supple part of the specification that says the main thread is finished","width":832},{"text":"well the process continues until all threads are finsihed","width":576},{"text":"correct yes","width":704},{"text":"so if i called pthread_exit after printing hi","width":576},{"text":"now the process is done","width":64},{"text":"so its the last chef out turns out the light to the whole process","width":320}],
[ '../captions/second/Full_Lecture_Video_14_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_14_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_14_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_14_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_31_Part_0-sshan7.json',
  '../captions/second/Full_Lecture_Video_31_Part_1-sshan7.json',
  '../captions/second/Full_Lecture_Video_31_Part_2-sshan7.json',
  '../captions/second/Full_Lecture_Video_31_Part_3-sshan7.json',
  '../captions/second/Full_Lecture_Video_31_Part_4-sshan7.json',
  '../captions/second/Full_Lecture_Video_31_Part_5-sshan7.json',
  '../captions/second/Full_Lecture_Video_31_Part_6-sshan7.json',
  '../captions/second/Full_Lecture_Video_32_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_32_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_32_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_32_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_32_Part_4-omelvin2.json',
  '../captions/second/Full_Lecture_Video_32_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_32_Part_6-omelvin2.json',
  '../captions/second/Full_Lecture_Video_6_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_6_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_4-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_7_Part_6-omelvin2.json' ]
// Part 0
[{"text":"Now let's get started. Your stuck with me for one more day and not only that, I have a cold, so I apologize for any sniffling or coughing I might do in your ears. I think we can get through this okay, I'll just make you guys talk more. ","width":1324.1818182468414},{"text":"We didn't quite finish up talking about the reader-writer problem so I put it on you guys to come up with a better solution","width":552.1818182468414},{"text":"But just to go back a little bit, we left off with this improved solution.","width":494.18181824684143},{"text":"It wasn't quite as perfect as written on the page.","width":280.18181824684143},{"text":"We have the lock and we do while our writing and then we do some reading and then we tell them that there's a reader","width":699.1818182468414},{"text":"And then when it's done we do some reader, then when it's done we tell the reader's gone. ","width":283.18181824684143},{"text":"And then we signal that someone else can take the turn","width":353.18181824684143},{"text":"And then we unlock the lock","width":120.18181824684143},{"text":"And then pretty much the same thing on the writer side","width":192.18181824684143},{"text":"There were three problems with this","width":427.18181824684143},{"text":"Two of them were problematic and one of them was functional - completely functional. What are some simple fixes we can make? What was the first problem?","width":1003.1818182468414},{"text":"Yeah so what is happening here; who's getting woken up here?","width":380.18181824684143},{"text":"Only one reader. Only one reader. So we want to make sure we wake up all the readers so we do a cond_broadcast","width":828.1818182468414},{"text":"What are the other problems? What part if it is causing that? ","width":755.1818182468414},{"text":"So the lock/unlock being here, right. Okay, I lock, so no one else can get into that critical section until I unlock. Which means we only allow one reader at a time. How do we fix this?","width":1655.1818182468414},{"text":"Do I have to do the same thing for the writer? Why not? We only want one writer anyway, okay.","width":539.1818182468414},{"text":"This works, there's nothing functional wrong with this. This is good, now we get our multiple readers, multiple writers","width":415.18181824684143},{"text":"But it still has one more problem. Anyone remember what it is?","width":556.1818182468414},{"text":"Yeah? Yes, so the writer--what's stopping the writer from getting in?","width":618.1818182468414},{"text":"This right here. We only have one writer, so I don't need to worry about this","width":408.18181824684143},{"text":"Okay. And it means that unless the writer has gotten into the critical section, every reader that comes along--once one reader comes along and gets in, the writer gets blocked","width":821.1818182468414},{"text":"And now readers come in, readers leave, readers come in, readers leave. If that reader count never goes down to 0 we're going to starve the writer.","width":554.1818182468414},{"text":"In the real world this could be a really bad thing because I could be making a change, and delaying that update that the writer is trying to make. And the readers are working on old data. So this is not a good thing to starve our writers.","width":963.1818182468414},{"text":"And the goal for the last part of the class was to write a better solution","width":510.18181824684143},{"text":"I asked you guys to think about this while you were away from class. I can give you two minutes to think about it and pull it back in again then we can go over the solution","width":730.1818182468414},{"text":"Talk to your neighbors. Think about what you would do to fix this and make it work","width":278.18181824684143},{"text":"[silence while the class works]","width":6548.181818246841}],
// Part 1
[{"text":"so did anyone come up with a way to not deadlock our writers without telling me the code what would your approach be to not let the writers deadlock?","width":1098.1818182468414},{"text":"so one way would be to broadcast to the writers first then the readers","width":294.18181824684143},{"text":"im not sure that would entirely fix the problem because even if i broadcast the writers","width":364.18181824684143},{"text":"wait let's go back to this code for a second","width":218.18181824684143},{"text":"even if i broadcast here to the writers","width":167.18181824684143},{"text":"the writer will wake up but there's still readers inside and it'll still block","width":245.18181824684143},{"text":"so it's a good try ","width":105.18181824684143},{"text":"so it's the right approach you have to do somehting that gives preference to the writers","width":303.18181824684143},{"text":"that's how we're gonna fix this. say that one more time","width":1227.1818182468414},{"text":"so one thing you can do is put a number of make sure no one reads forever","width":361.18181824684143},{"text":"so the solution i have is not gonna break the problem of someone reading forever","width":325.18181824684143},{"text":"if somebody reads forever i'm never gonna let a writer in","width":206.18181824684143},{"text":"so ummm ","width":149.18181824684143},{"text":"that is a limitation of the solution i'm gonna show you","width":215.18181824684143},{"text":"even if you just let even if you say that your reader can be in there for 10 seconds","width":372.18181824684143},{"text":"let's do it that way","width":55.18181824684143},{"text":"instead of giving it a time limit","width":150.18181824684143},{"text":"you can still have every second a reader comes along","width":281.18181824684143},{"text":"so probably we should put a limit on the solution i'm gonna show you","width":236.18181824684143},{"text":"to make sure that the reader's not gonna stay in forever","width":753.1818182468414},{"text":"it would be really good if we could have them enter in the order in which they receive","width":229.18181824684143},{"text":"did anybody come up with a solution kinda like that?","width":600.1818182468414},{"text":"yeah, that's pretty close to what I'm gonna do","width":117.18181824684143},{"text":"so basically what i'm gonna show you is a way to say ok","width":195.18181824684143},{"text":"i have a waiting flag","width":125.18181824684143},{"text":"if a writers coming in and writer's waiting i'm gonna send a waiting flag","width":263.18181824684143},{"text":"and if there's a writer waiting","width":109.18181824684143},{"text":"i'm not gonna let anymore readers in","width":140.18181824684143},{"text":"and whatever reader are in i'm gonna drop through","width":208.18181824684143},{"text":"and those readers once they're done ","width":156.18181824684143},{"text":"the writers next","width":112.18181824684143},{"text":"and i'll show you how that works","width":255.18181824684143},{"text":"you know what i have the code here not gonna write the whole thing down","width":526.1818182468414},{"text":"we can look over it","width":58.18181824684143},{"text":"ok so here's my reader and my writer","width":234.18181824684143},{"text":"so i've added ","width":213.18181824684143},{"text":"here","width":63.18181824684143},{"text":"i now have two","width":184.18181824684143},{"text":"two counters","width":159.18181824684143},{"text":"that have to do with readers instead of just 1","width":216.18181824684143},{"text":"this one says that i have a want to enter the critical section. so this one says \"writer's waiting\"","width":753.1818182468414},{"text":"and this one says","width":178.18181824684143},{"text":"writers writing","width":522.1818182468414},{"text":"what value can this one have","width":442.18181824684143},{"text":"what value can the writers waiting hve","width":326.18181824684143},{"text":"okay what value can this one have","width":144.18181824684143},{"text":"the writers writing","width":95.18181824684143},{"text":"just one","width":38.18181824684143},{"text":"how about this one here","width":175.18181824684143},{"text":"no","width":46.18181824684143},{"text":"i can have lots of writers writing","width":157.18181824684143},{"text":"it just tells me that there are writers waiting","width":149.18181824684143},{"text":"okay and as long as there's waiting","width":312.18181824684143},{"text":"this one says as long as there's writers waiting instead of writers writing","width":292.18181824684143},{"text":"i'm gonna block my reader","width":165.18181824684143},{"text":"and","width":61.18181824684143},{"text":"this part","width":129.18181824684143},{"text":"right here","width":73.18181824684143},{"text":"says that as long as there's a writer writing","width":142.18181824684143},{"text":"i'm not gonna drop out of my condtion wait while loop","width":308.18181824684143},{"text":"okay","width":53.18181824684143},{"text":"so what's gonna happen is 1 writer's gonna come along","width":265.18181824684143},{"text":"it's going to ","width":226.18181824684143},{"text":"say that somebody's reading say we have 1 reader  in there","width":137.18181824684143},{"text":"let's let the reader go first","width":117.18181824684143},{"text":"reader comes in ","width":188.18181824684143},{"text":"i need my variables set here","width":157.18181824684143},{"text":"so we have","width":146.18181824684143},{"text":"writers ","width":139.18181824684143},{"text":"writing","width":93.18181824684143},{"text":"and","width":53.18181824684143},{"text":"reading","width":310.18181824684143},{"text":"and they all start off as","width":175.18181824684143},{"text":"0","width":202.18181824684143},{"text":"so i have a reader that comes along","width":141.18181824684143},{"text":"it's gonna come along here and check to see if there's writers it's gonna say no no writers","width":293.18181824684143},{"text":"so ","width":76.18181824684143},{"text":"uhh","width":38.18181824684143},{"text":"it's gonna fall through the condition variable i don't have to wait and then it's gonna increment writing, reading i'm sorry","width":429.18181824684143},{"text":"it's gonna stay in reading here for a second","width":120.18181824684143},{"text":"let's leave it there for a minute","width":125.18181824684143},{"text":"to make sure that the writers are gonna be able to get through","width":222.18181824684143},{"text":"so now i have a writer its gonna incrament it's gonna acquire the lock so it can change the writers value ok so now i have one writer waiting","width":628.1818182468414},{"text":"but now i need to check somebody's reading am i gonna fall out of this loop?","width":363.18181824684143},{"text":"yes or no","width":323.18181824684143},{"text":"can i pass this line?","width":354.18181824684143},{"text":"alright i'm gonna do while reading or writing am i reading or writing?","width":283.18181824684143},{"text":"yes","width":32.18181824684143},{"text":"so i do my condition wait","width":71.18181824684143},{"text":"so now my first writer is blocked here","width":368.18181824684143},{"text":"and","width":41.18181824684143},{"text":"what happens when it calls the condition variable?","width":167.18181824684143},{"text":"it releases the lock","width":202.18181824684143},{"text":"so","width":111.18181824684143},{"text":"and now i have another writer come along","width":149.18181824684143},{"text":"same thing happens i'm gonna increment my writers to 2","width":223.18181824684143},{"text":"and my second one ","width":113.18181824684143},{"text":"is gonna block right there","width":148.18181824684143},{"text":"is that clear?","width":68.18181824684143},{"text":"yeah?","width":653.1818182468414},{"text":"nothing's happened yet right we haven't been signaled yet so now","width":237.18181824684143},{"text":"let's go back to this reader","width":103.18181824684143},{"text":"so this reader's done","width":340.18181824684143},{"text":"it gets the lock it decrements reading now to 0","width":266.18181824684143},{"text":"and","width":45.18181824684143},{"text":"it signals everyobdy","width":169.18181824684143},{"text":"that will wake up it's doing a signal broadcast","width":193.18181824684143},{"text":"it will wake up both of the writers","width":256.18181824684143},{"text":"both of the writers will acquire the lock 1 at a time","width":214.18181824684143},{"text":"right they're not gonna do it at the same time","width":85.18181824684143},{"text":"the first one that acquires the lock will say ","width":152.18181824684143},{"text":"is reading 0?","width":113.18181824684143},{"text":"yes","width":36.18181824684143},{"text":"is writing 0?","width":81.18181824684143},{"text":"yes","width":63.18181824684143},{"text":"so","width":35.18181824684143},{"text":"that one can fall throgh","width":151.18181824684143},{"text":"and","width":30.18181824684143},{"text":"it can now","width":170.18181824684143},{"text":"set writing to 1","width":157.18181824684143},{"text":"and there's somebody writing","width":174.18181824684143},{"text":"ok","width":87.18181824684143},{"text":"so now","width":74.18181824684143},{"text":"if you look at another reader coming along","width":253.18181824684143},{"text":"it's gonna say is there are there writers waiting?","width":252.18181824684143},{"text":"yes","width":56.18181824684143},{"text":"ok now wait","width":377.18181824684143},{"text":"what did i just trade off","width":170.18181824684143},{"text":"this is not a perfect solution either","width":158.18181824684143},{"text":"yeah?","width":183.18181824684143},{"text":"there's no better way for the readers so i now put the priority on the writers instead of on the readers","width":481.18181824684143},{"text":"there are solutons","width":195.18181824684143},{"text":"for having counters and allowing them to go in step by step i don't think lawrence was having you going through the priority solutions so this is the one he wanted me to go through with you","width":1051.1818182468414}],
// Part 2
[{"text":"no there's no order right there's no ordering i this because everytime you do a condition broadcast","width":523.1818182468414},{"text":"there's no queue","width":71.18181824684143},{"text":"it just picks one","width":114.18181824684143},{"text":"it's possible that the operating system implemented as a queue and it took the frst one that asked for it","width":425.18181824684143},{"text":"but theres no guarantee of that","width":137.18181824684143},{"text":"you don't know how the operating sytem implemented a condiion signal","width":936.1818182468414},{"text":"why am i unlokcing the mutex when i do a write ","width":324.18181824684143},{"text":"there's actually a reason for it","width":279.18181824684143},{"text":"what happens when i unlock","width":105.18181824684143},{"text":"we said we didn't need it before but actually we do","width":161.18181824684143},{"text":"why do we need it?","width":318.18181824684143},{"text":"right. so we want anybody who's coming in reader or writer","width":400.18181824684143},{"text":"we want them to be sitting on the condition variables","width":228.18181824684143},{"text":"here and here","width":96.18181824684143},{"text":"the only way for them to get to the condition variable is if the lock is unlocked","width":283.18181824684143},{"text":"while theres a writer writing","width":83.18181824684143},{"text":"that doesn't mean another writers' going to get in","width":156.18181824684143},{"text":"it just means another writer will get to the condition variable","width":672.1818182468414},{"text":"that clear? can let it gel. anybody have anymore questions?","width":541.1818182468414},{"text":"because i want to move on to the topic we are suppoesd to be talking about today which is deadlock","width":459.18181824684143},{"text":"ok","width":213.18181824684143},{"text":"so i'm going to do something that i know lawrence never does but i'm going to use some slides","width":984.1818182468414},{"text":"dr seuss' birthday was on monday so i thought we would honor him with the ultimate deadlock","width":419.18181824684143},{"text":"actually if you take algorithms sometimes people talk about cat in the hat which is recursion","width":314.18181824684143},{"text":"dr seuess seemed to have an affinity for algorithms","width":269.18181824684143},{"text":"one of the things that we didn't necessarily see this specific problem of deadlock when we looked at the readers and writers problem but we did see in the circular buffer but we did see things getting stuck","width":1026.1818182468414},{"text":"and the canonical example of deadlock is these are the north going and south going zacks","width":491.18181824684143},{"text":"they both walk up to each other and they go \"I'm not moving. I want your spot\"","width":386.18181824684143},{"text":"and the other one wats my spot","width":167.18181824684143},{"text":"and neither one is willing to make any adjustments and they're stuck","width":399.18181824684143},{"text":"this is the canonical deadlock","width":150.18181824684143},{"text":"what's happening is i'm waiting for him to move and he's waiting for me to move","width":367.18181824684143},{"text":"and with that we create something that is actually very easily to notice that there is deadlock in the system","width":517.1818182468414},{"text":"so we see deadlock everyday","width":286.18181824684143},{"text":"anybody living you know who's ever lived in a city you've seen deadlock on the streets any time","width":351.18181824684143},{"text":"and it could be caused by lots of different things","width":115.18181824684143},{"text":"it could be caused by some idiot driving into the middle of the streeet and stopping there and deciding what to do","width":585.1818182468414},{"text":"and all the other traffice come along and starts going yeah um we're stuck","width":463.18181824684143},{"text":"and it doesn't even have to be you konw an indecisvie problem","width":353.18181824684143},{"text":"it could just be that there's lots of traffic and a car pulls into the intersection and can't make it all l the way across and you're going to have the same problem","width":719.1818182468414},{"text":"this is what we call gridlock","width":151.18181824684143},{"text":"gridlock is deadlock","width":86.18181824684143},{"text":"nobody can move","width":66.18181824684143},{"text":"everybody is waiting for some other spot that doesn't exist","width":282.18181824684143},{"text":"even if the cars that were blocking it in the first place are gone it still can't go anywhere","width":402.18181824684143},{"text":"what we're going to see is that the main problem here is that the first car is waiting for the left car to move the left car is waiting for the bottom car to move and the bottom car is waiting for the right car to move and so and so forth","width":771.1818182468414},{"text":"and again the same problem that we had with the north going and southgoing with the zacks","width":213.18181824684143},{"text":"is that we can't get anywhere","width":193.18181824684143},{"text":"so essentially","width":215.18181824684143},{"text":"deadlock is a situation where ","width":235.18181824684143},{"text":"we have processes if you want to get away from the cars and the dr seuss characters","width":293.18181824684143},{"text":"we have processes that are waiting for an event that will never occur","width":381.18181824684143},{"text":"and it turns out that","width":235.18181824684143},{"text":"this doesn't even have to be multiple processes","width":211.18181824684143},{"text":"typically it is multple processes and if","width":279.18181824684143},{"text":"they can't make any progress","width":158.18181824684143},{"text":"then the system is deadlocked","width":234.18181824684143},{"text":"turns out that a single source can deadlock itself","width":350.18181824684143},{"text":"it's waiting for some resource how do you think it could deadlock itself?","width":570.1818182468414},{"text":"anybody?","width":247.18181824684143},{"text":"i have one process and it's moving along","width":452.18181824684143},{"text":"it's it's waiting for something","width":675.1818182468414},{"text":"if i have a condition variable that i set to something and then in that same thread or same process i then went to go","width":475.18181824684143},{"text":"or  unlock even","width":63.18181824684143},{"text":"you don't need to be as complex as a condition variable","width":184.18181824684143},{"text":"i set a lock to locked","width":198.18181824684143},{"text":"and then i'm moving along and then in that same control thread i say unlock","width":373.18181824684143},{"text":"i'm stuck if nobody else is going to touch that","width":131.18181824684143},{"text":"so i can deadlock myself by not using locks and unlocks correctly","width":432.18181824684143},{"text":"so there's also something called livelock","width":283.18181824684143},{"text":"can i have a volunteer come up here for a second","width":262.18181824684143},{"text":"just a simple. i'm not going to hurt anybody i promise. just stand right here for a second, come on","width":620.1818182468414},{"text":"people in the front","width":93.18181824684143},{"text":"i'm going to give you an example","width":110.18181824684143},{"text":"ok","width":149.18181824684143},{"text":"first we're going to be the zacks","width":202.18181824684143},{"text":"stand there","width":64.18181824684143},{"text":"ok","width":76.18181824684143},{"text":"we can't go anywhere","width":73.18181824684143},{"text":"ok but now he's going to be really nice and say ok i'm going to move to the side so you can move to the side","width":433.18181824684143},{"text":"ok","width":59.18181824684143},{"text":"try again","width":170.18181824684143},{"text":"one more time","width":58.18181824684143},{"text":"ok you can go back to your seat","width":86.18181824684143},{"text":"that's called livelock","width":93.18181824684143},{"text":"did we  get anywhere?","width":122.18181824684143},{"text":"no","width":52.18181824684143},{"text":"but we're standing there","width":53.18181824684143},{"text":"you ever done that in the hallway where you just go back in forth in front of somebody?","width":311.18181824684143},{"text":"that's exaclty what livelock is","width":92.18181824684143},{"text":"we were moving","width":90.18181824684143},{"text":"we were potentially making progress","width":140.18181824684143},{"text":"potentially doing something","width":128.18181824684143},{"text":"but we were not making any progress","width":85.18181824684143},{"text":"and we never got past where we wanted to be","width":155.18181824684143},{"text":"so in terms of processes we're going to see that processes can sometimes try to avoid deadlock ","width":521.1818182468414},{"text":"by essentially","width":95.18181824684143},{"text":"he was trying to avoid deadlock by saying ok \"i'm going to be good and say you can have the spot\" so they're releasiing a resource","width":609.1818182468414},{"text":"but then i say no i want another one","width":126.18181824684143},{"text":"so whatever algorthms you design to try to avoid deadlock could create this livelock situation","width":459.18181824684143}],
// Part 3
[{"text":"there's lots of different things you can do to deal with deadlock","width":523.1818182468414},{"text":"you can try to prevent it. this is probably the most expensive thing that you can do","width":418.18181824684143},{"text":"you have to understand exactly how your system exists. you have to understand all the states in your system","width":419.18181824684143},{"text":"you have to be able to look at it, run from algorithms on it and say that nothing in the system, no program, no application can cause deadlock","width":582.1818182468414},{"text":"to be able to do that, you have to be very,very pessimistic","width":240.18181824684143},{"text":"because even if we're dealing with the zacks aren't very nice, if two of them never met, it's never gonna be a problem.","width":593.1818182468414},{"text":"so only if they actually meet that they cause deadlock","width":296.18181824684143},{"text":"a number of systems might try to do something like detection and recovery","width":299.18181824684143},{"text":"so detected that there was deadlock and now we're gonna come up some algorithms to recover from it","width":512.1818182468414},{"text":"avoidance is kinda somewhere in between. we're gonna look at our system and come up with systems that don't come up with dealdock","width":593.1818182468414},{"text":"a little bit more expensive than detection","width":183.18181824684143},{"text":"not quite as expensive as total prevention","width":193.18181824684143},{"text":"and then if you really have trouble you can have your system operator sit there and fix things that's your worst case - you don't want to do that","width":564.1818182468414},{"text":"does anybody know what unix/linux does","width":303.18181824684143},{"text":"for deadlock prevention","width":128.18181824684143},{"text":"or detection or avoidance or whatever","width":253.18181824684143},{"text":"anybody know?","width":158.18181824684143},{"text":"wanna take a guess?","width":130.18181824684143},{"text":"how does linux deal with deadlock?","width":425.18181824684143},{"text":"how many people think it does deadlock prevention?","width":275.18181824684143},{"text":"detection and recovery?","width":234.18181824684143},{"text":"avoidance?","width":223.18181824684143},{"text":"manual intervention?","width":163.18181824684143},{"text":"you wanna know what it does? nothing","width":341.18181824684143},{"text":"this is called the ostrich approach, you stick your head in the sand and ignore deadlock ever happening. that is pretty much what they decide","width":536.1818182468414},{"text":"they leave it up to the application writers to make sure they don't deadlock","width":320.18181824684143},{"text":"so, the nice thing about this is that none of the expensive components of prevention or recovery or detection need to be implemented","width":567.1818182468414},{"text":"they just say everything's faster and if it's rare is it really worth the overhead?","width":469.18181824684143},{"text":"the assumption is that it's rare and we're not going to use it or if it's really important for a particular application that that application take care of it","width":567.1818182468414},{"text":"that being said you can't ignore it because it's part of this class and i'm gonna talk to you about how to figure out what's going on with deadlock","width":519.1818182468414},{"text":"to be able to do so","width":157.18181824684143},{"text":"i wanna be able to model ","width":779.1818182468414},{"text":"i want be able to model my processes and my resource that they wanna use in a graph and this is called a resource allocation graph","width":532.1818182468414},{"text":"and my resource allocation graph has two components","width":267.18181824684143},{"text":"it has ","width":333.18181824684143},{"text":"it has processes which are these circles ","width":301.18181824684143},{"text":"and it has resources which are the squares","width":353.18181824684143},{"text":"and what i'm gonna do is i'm going to take an arrow","width":408.18181824684143},{"text":"from a resource to a process","width":207.18181824684143},{"text":"that means that p1 is using r1","width":284.18181824684143},{"text":"and i'm going to take an arrow from a process to a resource saying that p1 requested r2","width":614.1818182468414},{"text":"so this would be","width":327.18181824684143},{"text":"process 1 is using standard out","width":218.18181824684143},{"text":"process 1 has acquired a lock","width":273.18181824684143},{"text":"the second half, the right half would be","width":156.18181824684143},{"text":"some other process acquired a lock already and p2 is asking for it but doesn't get it until the other process has given it up","width":591.1818182468414},{"text":"so, why do we go through the bother of this? well it turns out that if we look at resource allocation graphs they have this great property that tell us how to deal with deadlock or how to detect deadlock, or how to detect deadlock","width":1132.1818182468414},{"text":"let's say we have this situation now where r1 acquires, sorry, p1 acquires r1","width":573.1818182468414},{"text":"so process 1 has acquires some resource","width":204.18181824684143},{"text":"and p2 has acquired a different resource","width":216.18181824684143},{"text":"but now","width":174.18181824684143},{"text":"p2 is gonna request that first resource that p1 has and p1 is gonna request the resource that p2 had","width":708.1818182468414},{"text":"what's gonna happen?","width":115.18181824684143},{"text":"so, if they're gonna hold on to these resources and they can't make any progress until they get the second resource, we've now created something called circular wait they're both waiting for something","width":824.1818182468414},{"text":"the zack's were each waiting for the other to move","width":191.18181824684143},{"text":"the cars at the intersection were each waiting for the other to move","width":194.18181824684143},{"text":"this is called circular wait","width":170.18181824684143},{"text":"and this type of cycle in a resource allocation graph tells us that there's dedlock","width":447.18181824684143},{"text":"so, on your handouts from today, you guys have some examples that we're going to go through","width":593.1818182468414},{"text":"so let me switch over to our examples","width":568.1818182468414},{"text":"can you guys see that okay or do you want me to put it on the center screen too?","width":820.1818182468414},{"text":"so, i'll help you through the first one","width":230.18181824684143},{"text":"the first one, here's my boxes","width":331.18181824684143},{"text":"and lawrence was calling them candyboxes and they hold candy","width":203.18181824684143},{"text":"and there's one piece of candy in the box and whoever gets it get's to take it and i guess when they're done they put it back. kinda gross","width":547.1818182468414},{"text":"so if you heard him say candyboxes he meant the resource squares and the resource allocation boses","width":503.18181824684143},{"text":"now how many processes do i have","width":140.18181824684143},{"text":"i have process 1 and process 2 so i'm gonna write p1 and p2","width":402.18181824684143},{"text":"and the way i read this is process 1 requests resource a and resource b","width":428.18181824684143},{"text":"so process 1 requests it and there's no arrows coming out of the resource","width":413.18181824684143},{"text":"that means that no one's using it right now and p1 can acquire it so i draw an arrow to p1","width":439.18181824684143},{"text":"because that means that p1 has acquired","width":303.18181824684143},{"text":"a","width":37.18181824684143},{"text":"and b","width":175.18181824684143},{"text":"now,","width":134.18181824684143},{"text":"process 2 comes along so this is time","width":309.18181824684143},{"text":"for each of these, down is time","width":118.18181824684143},{"text":"now p1 says i'm gonna request ","width":156.18181824684143},{"text":"oh i guess there's a 3rd one here","width":313.18181824684143},{"text":"p2 requests process c sorry process 2 requests resource c, which way does the arrow go?","width":606.1818182468414},{"text":"to p2","width":155.18181824684143},{"text":"towards p2","width":87.18181824684143},{"text":"and, what about b?","width":261.18181824684143},{"text":"which way does the arrow go?","width":177.18181824684143},{"text":"towards the resource or towards the process?","width":160.18181824684143},{"text":"towards the resource because a already has it","width":267.18181824684143},{"text":"is there a deadlock here?","width":212.18181824684143},{"text":"no why not?","width":193.18181824684143},{"text":"there's no cycle i don't have my circular wait, okay","width":262.18181824684143}],
// Part 0
[{"text":"alright! do we have sound, testing testing yes great! ","width":1423},{"text":"good morning and welcome to cs 241","width":139},{"text":"here's what we're going to do today","width":78},{"text":"i'm going to cast your minds back to 1991","width":401},{"text":"when a little while ago yes tim berners-lee posted the following","width":388},{"text":"the world wide web an executive summary","width":188},{"text":"the WWW project merges the techniques of information retrieval and hypertext to make an easy but powerful global information system. ","width":460},{"text":"little did he know that he would be so right.","width":184},{"text":"i'll skip on to the other fun bits like","width":173},{"text":"\"to follow a link are really clicks with a mouse! these are the only operations necessary to access the entire world of data!\" ","width":455},{"text":"he also says inside the same posting that ","width":140},{"text":"\"making a web is as simple as writing a  few sgml files\"","width":235},{"text":"so html actually has a history before that which was a larger markup language called sgml","width":412},{"text":"eventually as you know we decided to use a slightly simplified markup language called html","width":334},{"text":"the www model gets over frustrating incompatibilities of data format between and suppliers and readers by allowing negotiation of format between a smart browser and a smart server","width":727},{"text":"so here was tim berners lee's insight, is that","width":169},{"text":"what we need to figure out is not the coding and the making it work on all kinds of platforms,","width":297},{"text":"yes we need to do that,","width":71},{"text":"but it's actually the protocol that is important","width":204},{"text":"the protocol between the client and the server","width":291},{"text":"the summary does not describe the many exciting opened up by the WWW project ","width":356},{"text":"remember at this point he's just talking to a few friends at CERN, a physics lab in Europe","width":322},{"text":"such as efficient document caching, a reduction of redundant out of date copies and use of knowledge daemons ","width":375},{"text":"there is more information in the online project blah blah blah","width":141},{"text":"here, here's a very simple prototype","width":96},{"text":"128.14 and it gives you an IP address ","width":201},{"text":"i found an early version of his code","width":242},{"text":"version 0.2","width":161},{"text":"it has some bugs in it, it's not even secure","width":147},{"text":"but i thought it'd fun to show you the code because here's what your'e going to do in lab tomorow","width":223},{"text":"you're going to write a web server","width":188},{"text":"i'm going to give you half the code you fill in the rest","width":125},{"text":"and you're actually going to use mmap to be able to serve the files back onto a web page","width":428},{"text":"and here's the thing about searching","width":452},{"text":"at the other end of the scale, large information providers may provide an http server with full text or keyword indexing","width":597},{"text":"was tim berners-lee actually thinking about google at this point? ","width":408},{"text":"i think maybe not, i think maybe at the time he was thinking about servers that would actually index documents on that machine","width":561},{"text":"not about machines that were powerful enough to index the whole WWW project","width":385},{"text":"but anyways, next time i meet him i'll ask him what he meant by that comment","width":345},{"text":"so yeah, i'll include this text in tomorrow's section, you can read it yourself","width":437},{"text":"so let's turn to today's handout ","width":684},{"text":"alright, so just as a warmup exercise, how do we mount a disk image?","width":393},{"text":"so let's say i've given you a file and that file actually represents a complete file system","width":316},{"text":"what do i need to say? ","width":240},{"text":"well you're going to use the mount command","width":251},{"text":"because it's a file, a stream of bytes, we actually need to use a loopback so we're going to need the -t option because we need to turn it into a block based device ","width":985},{"text":"we give it a reference to a file and we give it a point on our existing file system","width":338},{"text":"where we would like that file system to appear","width":247},{"text":"but the big big idea is 'hey i'm mounting it' i'm adding to my existing file system","width":407},{"text":"then i can cd into it and potentially change the files of that file system","width":354},{"text":"okay, what is the set uid bit?","width":212},{"text":"what's the purpose of that?","width":168},{"text":"so on a file i can set the uid bit and if I do what happens when people execute a file with that bit set? ","width":947},{"text":"yes! that's right, it's the process that has started is not started as you as the caller","width":664},{"text":"it's started under the user of the owner of the file ","width":473},{"text":"so for example, if we have a program called sudo, which we do","width":361},{"text":"and the owner of that is root","width":219},{"text":"then if i've set the UID bit ","width":375},{"text":"then when you execute sudo, it doesn't execute as you","width":206},{"text":"it actually gets all the privileges of root. so that's a kind of typical use of suid. my goodness, that's not your eyes, that is this projector. there we go, that's a bit better, right.","width":668},{"text":"so if for example you wanted to have a program that made some symbolic links and mounted a directory ","width":568},{"text":"and you wanted to do all this stuff that requires root and it requires admin access","width":396},{"text":"you might make a program and then by using suid ","width":408},{"text":"you could then allow other non admin people to run your script and for this script to do administrative things for them ","width":734},{"text":"so let's turn our attention to mmap ","width":295},{"text":"the purpose of mmap is to give us virtual memory that is backed by a file","width":566},{"text":"and when we try to read or write those virtual memory addresses ","width":254},{"text":"the kernel will automatically read or write to the file ","width":347},{"text":"that's on the file system","width":172},{"text":"we don't need to bother with reading it into our data structure","width":226},{"text":"our data structure can simply just be at that address","width":324},{"text":"okay well let me ask you now um, mention that","width":157},{"text":"we've actually got a couple of options ","width":419},{"text":"first of all ","width":74},{"text":"you have to choose one","width":49},{"text":"you have to say ","width":44},{"text":"when i'm going to call mmap, i either want a private copy or a shared copy","width":835},{"text":"so","width":88},{"text":"here's what happens if it's private","width":122},{"text":"you say","width":94},{"text":"any changes i make to my data structure","width":407},{"text":"i don't want them to be pushed back onto the disk","width":209},{"text":"i just want my own private copy","width":319},{"text":"so now ","width":69},{"text":"it's like saying ","width":46},{"text":"okay, load this stuff in, i'm going to scribble all over it and i don't want anybody else to know about it","width":303},{"text":"it's my own private copy, right?","width":152},{"text":"and in fact for efficiency, we don't make an immediate copy of these pages, we do it only when a process attempts to write to those pieces of memory","width":747},{"text":"in other words, if i started four copies of your program, i don't need four times as much ram ","width":511},{"text":"i will only actually make a copy of a frame when you attempt to write into it","width":192}],
// Part 1
[{"text":"so map private uses copy on write","width":726},{"text":"for each uh frame of memory, so for each four kilobyte block","width":357},{"text":"behind the scenes it will copy it only when you attempt to write it","width":229},{"text":"and that copy is then just like any regular memory that you might have made on the heap","width":326},{"text":"once your program is gone, it's gone, there's no store of it","width":290},{"text":"it's also private toward a particular process","width":196},{"text":"map shared on the other hand is useful when we're going to want to fork a process","width":651},{"text":"and then our child and the parent will see the same physical piece of memory","width":528},{"text":"so any changes that the child does, the parent will see, to that frame of memory","width":306},{"text":"also, it will copy the contents back to the file that we opened","width":553},{"text":"so, it's doubly shared, right","width":124},{"text":"it says um","width":278},{"text":"that i'm going to use this for interprocess communication between my child and my parent","width":483},{"text":"and also i'm going to copy ","width":527},{"text":"back to the file","width":512},{"text":"right so this is two useful ways of using mmap ","width":271},{"text":"so most of the time you're probably going to want to say ","width":117},{"text":"ok, i want to see it shared","width":275},{"text":"so early versions of mmap did just that","width":135},{"text":"but we realized that actually maybe sometimes we want to be able to share things with a child and the parent process and not actually have any file on the disk at all","width":778},{"text":"we just want to set up some physical ram that it could be seen inside two processes","width":466},{"text":"and uh if you want to do that you can, you just need to pass in ","width":368},{"text":"map anonymous ","width":124},{"text":"by the way if you actually want to work on os x, you need to use map","width":450},{"text":"they are synonymous but so this means 'hey i don't actually have a file i just want to mess with virtual memory so that i've got a page of memory or more that i can share between a child and a parent process'","width":1270},{"text":"what can i do with that, well i might want to simple write values in","width":275},{"text":"you can also share a semaphore ","width":254},{"text":"remember semaphores? these counting things where i can increment the count","width":372},{"text":"if i attempt to decrement the count, it might block if my count attempts to go beneath 0? ","width":470},{"text":"so now i can actually use this to synchronize between two different processes","width":405},{"text":"we're not gonna go into the details of how to set up a semaphore inside shared memory but a google search ","width":438},{"text":"thanks to the world wide web","width":319},{"text":"will let you do that","width":72},{"text":"right, we can find easy example source code to do that, so that's beyond cs 241. just hey, back of your mind, know that this exists should you ever need to do this ","width":698},{"text":"okay so let's have a look at some example code","width":350},{"text":"how can we use mmap well we opened a file descriptor ","width":372},{"text":"okay so let's open a particular file called \"alice\" ","width":192},{"text":"i'm going to open it as read only","width":354},{"text":"and then i call mmap ","width":80},{"text":"so i'm going to map today one page 4096 bytes and then we can talk about how we want to use these bytes","width":709},{"text":"and uh we've got three little bitwise flags that we or together ","width":302},{"text":"so there's proc read, proc write, and caught exec","width":343},{"text":"yes! i want to execute my files! my bytes1","width":316},{"text":"off with the head","width":91},{"text":"said the queen","width":215},{"text":"what's the purpose of these bits?","width":313},{"text":"do they affect the file on disk? ","width":353},{"text":"no, remember with virtual memory we actually declare how our process can use different pieces of addresses","width":566},{"text":"yes we can have some addresses that don't map to any piece of physical ram ","width":283},{"text":"other addresses might map to some physical ram that we're sharing with hundreds of other processes","width":363},{"text":"for example, lib.c, the c library","width":212},{"text":"lots and lots of processes want to use the code inside that so rather than having multiple copies inside our physical ram, we just have one copy and have lots of mappings to that","width":724},{"text":"for that physical memory to be secure then ","width":159},{"text":"we better make sure that all of our different processes can only read it","width":470},{"text":"also, we can have another layer of security to say 'actually we're not going to let the cpu execute opcodes from arbitrary pieces of memory' ","width":672},{"text":"so we can actually say that our memory is executable or not ","width":538},{"text":"so we're not going to put any executable code in today, we're not trying to build say a virtual machine that's going to compile source code into executable bytes today","width":628},{"text":"we just want to have some memory that's read or write","width":236},{"text":"okay ","width":117},{"text":"so i've got two examples here ","width":248},{"text":"one where i've got the text of alice with the looking glass ","width":253},{"text":"another one where i've got the text of justin bieber's best lyrics ","width":323},{"text":"it's a very short file","width":290},{"text":"and you can tell me which one of these will work and which one of them won't","width":2544},{"text":"and why","width":115},{"text":"so there's a clue ","width":40},{"text":"one of these will work one of these won't","width":340},{"text":"yes!","width":476},{"text":"yes! right! so","width":133},{"text":"we've put some options to say that we want to write to it ","width":332},{"text":"","width":2},{"text":"and in fact here we are trying later to write to it","width":131},{"text":"look i'm just using a pointer into memory and i'm trying to write the first two lines of the jabberwockee poem","width":585},{"text":"but i said that my mapping should be shared ","width":199},{"text":"in other words changes i make to my virtual memory ","width":341},{"text":"should eventually be pushed back into the file ","width":346},{"text":"and if i try to do this","width":302},{"text":"here's what will happen","width":51},{"text":"mmap will fial","width":82},{"text":"and in fact i'll get back the address","width":308},{"text":"negative one","width":52},{"text":"so you'll often see code that compares the pointer to -1 ","width":347},{"text":"if it is, then we know that mmap failed ","width":192}],
// Part 2
[{"text":"now my code didn't attempt to do any error checking, so i'm just trying to strcat straight into this address which would be -1","width":626},{"text":"and so i will probably get a segfault ","width":274},{"text":"in my code ","width":217},{"text":"um, i didn't talk about map file and in fact map file is the default and in fact you can it's not necessary to specify","width":608},{"text":"but you'll notice that all these things are bitwise OR-ed ","width":226},{"text":"so we build up a single integer that represents all of these flags","width":220},{"text":"right so, we've got this one we've shared","width":191},{"text":"this one which is map private","width":149},{"text":"and here's the great thing is that when we specify map private it means to this particular process","width":466},{"text":"so we can read justin's lyrics if we want","width":389},{"text":"but fortunately we think they're a bit of a cow, so we can do copy on write","width":446},{"text":"so we can actually overwrite to our heart's content all of his lyrics if we wish to","width":428},{"text":"unfortunately, we can't change what comes what comes out of his mouth","width":218},{"text":"he gets to keep his own copy of his lyrics file","width":177},{"text":"we're only going to change what's inside ram","width":167},{"text":"what's inisde our memory","width":204},{"text":"so this is allowed, this is okay even though we said that the file itself is read only","width":403},{"text":"and we want to write into it ","width":141},{"text":"we're doing that because memory is private","width":273},{"text":"and so we get to store our own copy in memory","width":646},{"text":"okay um ","width":120},{"text":"if you do want to write, once you finished changing things","width":391},{"text":"then it's important to call munmap ","width":467},{"text":"to release these resources","width":740},{"text":"right to say 'okay i've finished with this particular mapping'","width":410},{"text":"at which point","width":45},{"text":"the system may get around to writing it out to disk if you set it up that way","width":332},{"text":"but it doesn't have to immediately and in fact for performance there's no reason  why it might do it between now and some point in the distant distant future ","width":573},{"text":"so there's one other useful thing i'm not gonna test this but hey if you ever use this mechanism ","width":315},{"text":"if you want to force your changes to be sent back to the file system ","width":333},{"text":"call msync","width":297},{"text":"it's like nsync, but more musical i'm sorry terrible joke, ","width":285},{"text":"right, is that how you spell msync? who knows. okay, they're a boy band, they were allegedly popular ","width":830},{"text":"i probably misspelled it ","width":59},{"text":"anyways, so!","width":121},{"text":"yes, do this but realize if you call msync to many times then you're going to have slow performance because then you're waiting for your pages of memory to be written back to disk ","width":890},{"text":"okay, so ","width":66},{"text":"we know enough now to start playing with mmap ","width":170},{"text":"remember if it doesn't work actually find out what the error message was and think about your options","width":438},{"text":"what kind of memory mapping do i want to use","width":159},{"text":"so let's use this ","width":77},{"text":"and this hints now for how we're going to create our first tim berners-lee kind of web server","width":623},{"text":"let's say we want to serve a file back to a client ","width":212},{"text":"we actually want to send some bytes","width":244},{"text":"we've already made our socket code","width":244},{"text":"and we've already set up a file descriptor","width":173},{"text":"so somewhere previously i've done something like ","width":237},{"text":"okay let's do fd-open on something i've got back from my accept call something like that ","width":903},{"text":"so now i can start receiving and sending bytes using the c library to the client","width":357},{"text":"and now i want to send the file ","width":271},{"text":"okay, so the http protocol says you should write a few lines of text at the beginning like the MIME type, like the content length","width":509},{"text":"so yeah pretend i've written those lines","width":134},{"text":"now i just want to send the bytes, okay","width":154},{"text":"here's how we can do it","width":87},{"text":"first of all","width":68},{"text":"remember stat? let's use stat to find out the actual size of our file ","width":424},{"text":"then i'm actually going to open it so i just need my read-only flag here ","width":409},{"text":"that's easy enough we've got that up there","width":172},{"text":"and then i want to map that into memory","width":311},{"text":"okay","width":90},{"text":"this is where you come in","width":105},{"text":"what would you write","width":132},{"text":"have a look up here to see if you can figure out the options ","width":130},{"text":"what options do you need? because once you've got that pointer, we'll check if it's not equal to -1","width":429},{"text":"we can just call fwrite to send those bytes in memory!","width":260},{"text":"we'll say look here's the bytes i want to send, send me 1*this number of bytes, and send it to this file descriptor","width":414},{"text":"bam we're done!","width":82},{"text":"we have the WWW thank you very much i am tim berners-lee","width":287},{"text":"anyways, so, right, or you've got missing just this line, so this is the one line that's missing between us and finishing our WWW web server","width":637},{"text":"alright, now it's up to you. what are you going to write in this line? take 2 minutes to see if you can write this line ","width":269},{"text":"you can write it down here if you want if you're out of space","width":436},{"text":"what options do you need for mmap? ","width":6055},{"text":"okay, so what do we need? right","width":249},{"text":"i'm not going to spend any special options today, we need to pass in how many bytes we actually want to map from the file","width":576},{"text":"we only want to read through it ","width":192}],
// Part 3
[{"text":"and ","width":334},{"text":"actually we could write map ","width":195},{"text":"shared map, private, it doesn't matter in this case because we're just going to be reading or writing, I'm sorry, just reading from it","width":413},{"text":"and we pass in our file descriptor, here we go, and we don't need any offsets","width":390},{"text":"so something like that should work and we'll check to see if that gives us back a reasonable address pointer and if it does great i have immediate access to the bytes in that file","width":944},{"text":"don't forget at the end to use unmap and munmap or else very quickly you're going to run out of virtual memory when your WWW project becomes popular","width":1208},{"text":"okay, right so let's have a demo now of actually using this to talk to two different processes","width":1533},{"text":"great, so here's my program","width":234},{"text":"if we wanted to quit, we could print say the line number of where we failed ","width":744},{"text":"so i'm going to in here see if my mmap failed and if it did i'm going to simply quit","width":418},{"text":"and my macro quit will include the file and the line numbers so in debugging this, i can see where the problem is","width":758},{"text":"alright so let's have a go at this ","width":153},{"text":"i'm using map_anon because i'm using this on os x (on a mac) and i don't have a file descriptor to pass in because i'm just trying to communicate between a child and a process ","width":843},{"text":"okay, so once i've got the address, here's my plan ","width":221},{"text":"i'm going to treat it as pointing to some integers ","width":424},{"text":"then i call fork and now i have two processes ","width":224},{"text":"in the, in one process","width":279},{"text":"let's see what have we got","width":88},{"text":"so that's the parent process, so in the parent process i'm going to write these two values 10 and 20 and in the other process","width":671},{"text":"okay, here's my attempt at synchronization, we're just going to sleep for a second to make sure the other process has finished ","width":462},{"text":"and then we're going to read the values of shared","width":166},{"text":"so i've got two processes remember but they're sharing one frame","width":426},{"text":"okay, so we'll add those together and see what we get ","width":223},{"text":"okay, do you think this will work? let's have a plan, see what happens","width":413},{"text":"alright, so we run gcc","width":465},{"text":"invalid argument and of course we've got a crazy address","width":253},{"text":"why, what did we do wrong? ","width":806},{"text":"okay, here's what we did wrong, you've got to choose one, you've got to choose either shared or private so in our options here we","width":618},{"text":"we definitely need anon or anonymous because we don't have a file descriptor but we have to say ","width":437},{"text":"an options, so suppose we did private, what do you think the result would be","width":739},{"text":"ah, we got 0 in the other process! why? because we made it private!","width":364},{"text":"okay, what we wanted was... we shared the memory, okay so let's fix this","width":797},{"text":"and a second later, yay! great! ","width":132},{"text":"right, so there we go, we've managed to toggle information using memory mapped operations between one process and another process ","width":584},{"text":"pretty cool huh?","width":107},{"text":"well i think it's pretty cool and i think memory mapped files are fantastic when you have a lot of binary data or text data ","width":374},{"text":"and you want to be able to write simple code to read it and manipulate it ","width":322},{"text":"you'll often find it's very very easy to \"okay just map the whole file\" then call strcomp or call a regular expression on the whole file","width":601},{"text":"and we'll let the virtual memory automatically load those pages into memory for us","width":661},{"text":"okay any questions about mmap?","width":428},{"text":"okay, right, time for part two!","width":383},{"text":"this is one of the few times i'm going to use powerpoint, so sit back, relax, turn your brain off","width":397},{"text":"you know how i feel about powerpoint, but i've got a few things to say and i've got a few slides which are actually useful","width":350},{"text":"we're going to talk today about file systems from a very different perspective ","width":305},{"text":"i'm going to talk about file systems by what can we do when think beyond just a single disk and how can we make our file systems robust?","width":952},{"text":"okay, this is not a new question, and one answer to this is RAID","width":233},{"text":"so we'll talk about RAID","width":160},{"text":"and then at the very end of this i'm going to talk about well suppose your problems are bigger than just a single disk array ","width":512},{"text":"suppose you want to start a company like Google","width":277},{"text":"how can you make a file system that works even beyond a single data center? so what do some of those challenges look like?","width":468},{"text":"and i'm just going to cherry pick a few items out of that and give you a reference if you have intentions of building a file system or building a company as big as google","width":740},{"text":"right so let's talk about RAID","width":163},{"text":"you've probably heard of RAID, it's relevant today even if you're using RAID, but i'm going to talk a little about the history about where it came from ","width":461},{"text":"it comes from redundant array of inexpensive disks ","width":356},{"text":"so here's where what we got there, first of all due to moore's law where we can pack more transistors on our silicon, and so we saw CPU speeds doubling very quickly","width":990},{"text":"however, disks themselves were not increasing in speed","width":469},{"text":"yes we learned how to pack more information on them, but the time to access any one piece of information was still dominated by the speed it took for the disk to rotate around","width":827},{"text":"so you've probably heard about say 7200RPM or 10000RPM ","width":408},{"text":"this sounds like it's spinning very fast, but if you work that out in terms of milliseconds, it's still a long time before it can rotate back to the right spot","width":548},{"text":"so we have a rotation time and seek time of actually physically moving the head to the right track on the disk, it takes time","width":656},{"text":"even if you can move it very quickly you still have to allow for it to settle","width":237},{"text":"so disks are slow ","width":105},{"text":"so why don't we spread our disks over multiple disks? ","width":236},{"text":"secondly the cost of our disks started to fall dramatically","width":265},{"text":"so it became apparent that rather than having one massive really reliable disk, let's actually use cheaper more commodity hardware and instead think algorithmically of how we can improve the rather vile reliability of our data stored on disk","width":1150},{"text":"so that's just a little bit of historical backdrop","width":128}],
// Part 4
[{"text":"okay, so what are we going to do we're going to take our data and push the bits somehow across multiple disks","width":587},{"text":"multiple physical disks and in that way we should be able to improve performance because now our i/o channels are talking to multiple disks simultaneously","width":596},{"text":"however, our disks are unreliable","width":261},{"text":"and if was to buy a disk today, the promised 30000 hours of performance before it failed, then if i had 100 disks that means that i expect my data on average to exists for two weeks before probability before it goes bad","width":1431},{"text":"the thirty thousand hours is not a big figure as soon as you have large disk arrays","width":424},{"text":"okay if you're wondering how big is thirty thousand hours, if you work forty hours you get to about 2000 hours per year ","width":794},{"text":"if you work 24 hours a day you get some small multiple of that","width":456},{"text":"so we're talking about a disk that supposedly lasts a few years","width":316},{"text":"and as you can see we've shortened it down to just two weeks ","width":183},{"text":"so we're going to have to think about how it'll solve this problem of making sure that our disks, our data is reliable if we have a disk failing on average every two weeks","width":862},{"text":"okay, so one thing we could do is simply copy the data to two disks!","width":501},{"text":"this is called mirroring and you today can go and buy little enclosures that support RAID 1","width":416},{"text":"and all they have is two identical disks and they send it to both","width":218},{"text":"and if one disk fails then it doesn't matter you've still got the data on your other disk","width":503},{"text":"hopefully the disk array tells you when one disk has died, and hopefully it tells you which disk has died because you're going to be replacing one of them right?","width":723},{"text":"so the good news is that if i do this, then my reads are suddenly typically twice as fast! because now i've got potentially two different disks from read from ","width":659},{"text":"so i can actually execute two reads concurrently at the same time and using the disk","width":380},{"text":"however in terms of writing i've got to bring both disks into sync and then so i have a lowest common denominator and so my writes are no faster","width":761},{"text":"plus i've doubled the cost of the storage and that's a hard pill to swallow, maybe we can do better than that well anyways there's RAID 1","width":650},{"text":"alright, today i'm just going to talk about RAID 1, raid 3, raid 5","width":269},{"text":"I don't want to confuse you with too many different levels, so we can at least see how these things were solved","width":316},{"text":"right so RAID 3 let's use parity codes","width":344},{"text":"and for this example we're going to choose odd even, we'll chose even parity ","width":487},{"text":"which means we're always going to write an even number of 1s","width":210},{"text":"so if you give me a value that has an odd number of ones in binary data, then my parity bit will also include a 1","width":660},{"text":"why don't i do that, well that means that i can recover my bits if any one of those bits are lost","width":938},{"text":"does that make sense?","width":196},{"text":"alright, didn't we play this game inside CS 125 right? ","width":444},{"text":"here, let me write down a number, here it is, and i'm going to make sure that i've written an even number of ones okay, there we go","width":591},{"text":"so here's the number you gave me, here's my parity bit","width":324},{"text":"if somebody came along and said haha! you can't have that bit anymore i'm not gonna tell you what it is","width":379},{"text":"then i can look across all of the bits i wrote and reverse engineer it, right? I can say","width":291},{"text":"oh look i've got an odd number of bits and therefore this missing bit must have been a 1","width":594},{"text":"great, so here's our plan, is that we'll buy another disk to store our parity bit in ","width":424},{"text":"and we'll have a say disk for every other bit","width":648},{"text":"so in my little example, if i'm writing bytes, octets, then i just need to buy 9 disks","width":504},{"text":"so i've already increased the cost of my system by one extra disk","width":504},{"text":"yes, the disk has gone ","width":324},{"text":"there is no disk, right?","width":71},{"text":"it's died","width":79},{"text":"we're not trying to deal with bad data, we're trying to deal with missing data","width":280},{"text":"literally the disk stops spinning","width":149},{"text":"it gets hot, whataever, right. it just makes awful clunking noises and refuses to talk","width":418},{"text":"yes, yes, right so this system's only good for being able to recover one bit ","width":491},{"text":"right, so i would need all of these in other disks","width":194},{"text":"alright so i have my disk 1, disk 3, disk 4, disk 5, disk 6","width":837},{"text":"okay any disadvantages to this?","width":123},{"text":"it's pretty cheap, yeah, but now my write performance is limited because i have to always be updating parity information as well","width":740},{"text":"okay so here's a little attempt with this. suppose i have a 4 bit computer and 4 bit data ","width":441},{"text":"then i've got my four disks, my data, and a check disk as well for storing the parity bit","width":359},{"text":"so if i'm storing this 1001","width":187},{"text":"great, that is already even, so i can just write zero, and in these other examples there is say for the light blue one","width":524},{"text":"i wrote an odd valued value, so my parity bit, my check disk, includes a 1","width":443},{"text":"right, let's kill a disk there we go. right so","width":277},{"text":"you now believe me that if one of my disks dies, oops, there we go. suffered from a small nuclear explosion","width":430},{"text":"then i can recover all of the data that was actually originally on that disk by reading all of my other disks ","width":668},{"text":"i can now write a little process and reverse engineers what should have been written on that disk 2","width":578},{"text":"and i do that for my entire data set","width":374},{"text":"okay","width":83},{"text":"there any problems with this? let's think about the chances of another disk dying whilest we're trying to recover the data","width":717},{"text":"so we've got this mean time to failure ","width":145},{"text":"and mean time to repair ","width":274},{"text":"and yeah we can recover the data but it assumes that bad things don't happen whilst we are doing the recovery process ","width":878},{"text":"so with raid 1, we'd copy all of the data off one good version back onto a new disk","width":465},{"text":"with raid 3, we need to go through all the data on all the disks using the parity to recover it","width":512}],
// Part 5
[{"text":"so um what is this probability ","width":178},{"text":"well this is a worked example of the probability of a second failure","width":508},{"text":"is determined by the time to repair ","width":404},{"text":"divided by the mean time to failure divided by the number of disks","width":222},{"text":"and so if we plug in some typical values","width":227},{"text":"then we discover we've got a .009 chance of losing all of our data","width":546},{"text":"of that one of our disks dying whilst we're trying to recover our data","width":423},{"text":"it turns out that this mathematic figure is completely wrong","width":530},{"text":"it's not true in real life","width":395},{"text":"have you heard of murphy's law?","width":293},{"text":"murphy's law turns out to be extremely true for RAID disks ","width":359},{"text":"if something goes wrong, and there's other versions that say look if bad things happened once they're going to happen a second time","width":499},{"text":"or similar chinese proverbs as well","width":249},{"text":"why do you think the second disk dying whilst you're trying to recover is much more likely? there's actually two reasons, yes!","width":738},{"text":"yeah, thanks! look if disks had been bought from the same supplier, from the same batch, they're probably going to expire about the same time","width":496},{"text":"you know that little bit of grit inside the bearing that caused it to heat up and eventually warp?","width":296},{"text":"well that's caused because part of the manufacturing process is sprinkling grit on that spot and if one disk fails after 2000 hours, then probably another one as well","width":757},{"text":"the second thing to realize is that this repair process is really hard on the disks ","width":512},{"text":"you're going to reading out all of the data and probably trying to use the disk array for whatever production requirement you have at the same time","width":708},{"text":"so not only are you trying to sweep through the entire data set, your production process is saying","width":322},{"text":"yeah i need this data i need this data i need to write this I need to write this","width":183},{"text":"so you're stressing your disk drive","width":207},{"text":"much more than normal operation","width":759},{"text":"so another department inside this campus experienced this very same problem and it turned out that even though they had RAID, their two mistakes were a) to assume that RAID was perfect and b) not to have any monitoring to tell them when their RAID had failed","width":1390},{"text":"and so they experienced this very problem that during the repair, a second disk failed, and that was it","width":658},{"text":"it was gone","width":140},{"text":"and their backup was several months old, whoops","width":483},{"text":"alright, so um back to our RAID 3","width":342},{"text":"our performance is only so so because we need to update the check disk for every write","width":510},{"text":"right so lastly let's look at raid 5","width":404},{"text":"and raid 5 mixes it up a little bit ","width":208},{"text":"or actually literally","width":136},{"text":"here's the trick: for different data blocks we'll put the parity bit inside a different disk ","width":568},{"text":"we're interleaving the parity across multiple disks ","width":374},{"text":"so now we've reduced the bottleneck of storing all the parity information on the same disk and in fact we can now allow multiple reads and writes in parallel","width":916},{"text":"right so that's the short intro to raid 1 3 and 5","width":269},{"text":"that's all i expect you to know for cs 241","width":235},{"text":"let's stand back even further and actually talk about a bigger problem which is ","width":404},{"text":"okay how do i make something which is even bigger than a data center","width":287},{"text":"if i want to have a file system that spans planetary sized data","width":356},{"text":"so for example, you're google and you're storing everybody's gmail and you thought running out of storage space on EWS was bad","width":783},{"text":"this is from a google engineer","width":135},{"text":"you know you have a large storage system when you get notified at a petabyte of storage left","width":439},{"text":"I wish I had that problem on my laptop, right? I'm sorry, I've only got a petabyte of storage left. so how could we build a file system that is at this scale? ","width":1051},{"text":"okay, well what kind of issues do we have? yeah we know that disks fail ","width":223},{"text":"and in fact google takes the approach of buying very low commodity hardware and expecting failure and instead putting software and algorithmic refinements on top of commodity hardware ","width":1105},{"text":"the stories of when google was scaling up other companies couldn't believe the trash that google was bringing into data centers","width":481},{"text":"why are you bringing in that old dell box? don't you expect it to fail? the google guys were like \"yes! we expect it to fail! but that's okay\"","width":384}],
// Part 6
[{"text":"they were more interested in keeping their costs down","width":205},{"text":"so they have hundreds of thousands of disks and so we expect a large number to fail","width":477},{"text":"but it's not just single disks failing, we could have a whole rack go out, power could go out","width":351},{"text":"the network cable could be severed. the network port could go bad. etc etc etc","width":498},{"text":"all of these things could take down parts of our file system and we need it to be resilient to these kinds of problems at different levels","width":610},{"text":"so how do we do it","width":93},{"text":"okay, back in 2001 ","width":90},{"text":"the google file system was pretty simple","width":101},{"text":"hey let's just keep 3 copies of every file and we'll put them in distributed places","width":329},{"text":"so we'll have one in the east coast, one in the west, and one i can't remember","width":361},{"text":"and google at the time was pretty america centric","width":231},{"text":"these days google has much broader reach of course and much more of its data is stored outside of the US","width":642},{"text":"so what do we do","width":189},{"text":"we use something called reed-solomon codes, where rather than storing at actual data that you wish to store, we store an encrypted or transformed version of that data","width":1007},{"text":"and that transformation uses our s codes","width":155},{"text":"now you've actually already played with reed-solomon codes if you have a) played a cd ","width":529},{"text":"the data on a cd uses reed-solomon codes because CDs get stretched","width":265},{"text":"in fact reed-solomon codes can cope with a scratch up to about a millimeter or so","width":300},{"text":"or b) you have communicated with a space probe","width":281},{"text":"so, if you've talked to voyager, or mars path finder, you're using reed-solomon codes","width":494},{"text":"i imagine a is more likely than b, but you never know! this is uiuc, right?","width":511},{"text":"these codes then are very good with bursty and unreliable and missing pieces of data and what's amazing about these little mathematical objects is that their expense is pretty lightweight","width":1191},{"text":"that space trade-off of reed-solomon codes is pretty small","width":300},{"text":"so we use reed-solomon codes and we only need 1.5 times redundancy ","width":287},{"text":"so that's how google solves it","width":299},{"text":"i've put a link in these slides for those who are interested in this stuff","width":188},{"text":"there's lots of great sort of war stories and tidbits about this","width":402},{"text":"but here's what you need to know for cs 241 is that we need to think about file systems beyond a mere data center and ","width":688},{"text":"one of the approaches to cope with missing data is to use coding theory and to represent our data on the disk","width":709},{"text":"okay, right, so that's all i've got for today","width":212},{"text":"have a wonderful week and have fun tomorrow in section finishing a streaming webcam and also writing the WWW project and finishing the web server","width":832}],
// Part 0
[{"text":"[introduction]","width":1687.1818182468414},{"text":"alright good morning and welcome to the signal version of CS241","width":331.18181824684143},{"text":"here's what we're going to do today","width":114.18181824684143},{"text":"we briefly talked about signals way back at the beginning of the course","width":304.18181824684143},{"text":"cast your mind back to when we were creating processes and we said that hey when a process dies the parent gets notified","width":426.18181824684143},{"text":"we get a SIGCHILD right?","width":101.18181824684143},{"text":"and we talked about SIGINT for when you press control C as a way to stop a process","width":293.18181824684143},{"text":"or if you want to stop a process and you don't want it to prevent you","width":373.18181824684143},{"text":"you would call SIGKILL yes?","width":214.18181824684143},{"text":"and SIGKILL you cannot catch it you will terminate that process","width":458.18181824684143},{"text":"there's actually quite a bit more to signals and that's what we're going to talk about today","width":233.18181824684143},{"text":"and we're going to show you how to prevent signals from arriving at your process","width":383.18181824684143},{"text":"we're going to talk about some of the terminology about this","width":161.18181824684143},{"text":"and finally how to do it correctly with threads as well","width":425.18181824684143},{"text":"right so I've got two signals","width":306.18181824684143},{"text":"here they are, oh I need a volunteer thank you for volunteering","width":323.18181824684143},{"text":"you look like your busy, in fact, thank you for volunteering as well","width":218.18181824684143},{"text":"okay right","width":280.18181824684143},{"text":"a signal remember is an interrupt so we can interrupt a process from doing something by throwing a signal at it","width":466.18181824684143},{"text":"okay so here's an I not for illinois but for SIGINT right there we go","width":357.18181824684143},{"text":"okay so come over here you're the kernal","width":176.18181824684143},{"text":"thank you, here's my process","width":154.18181824684143},{"text":"okay and of course if I type control C","width":202.18181824684143},{"text":"we can deliver the signal to the process throw it at them","width":348.18181824684143},{"text":"ok look he caught it, right","width":155.18181824684143},{"text":"it appears that this process has installed a signal handler and has caught the signal","width":566.1818182468414},{"text":"so we delivered it, the process caught it, but the process carries on","width":304.18181824684143},{"text":"right? it didn't stop","width":120.18181824684143},{"text":"there are some signals however called like SIGKILL","width":186.18181824684143},{"text":"that cannot be caught","width":209.18181824684143},{"text":"if we were to send this then of course we know that the process dies","width":219.18181824684143},{"text":"now where can these signals come from?","width":91.18181824684143},{"text":"they can come of course from the process itself","width":230.18181824684143},{"text":"the process itself could say hey I'd like to send myself a signal right?","width":184.18181824684143},{"text":"you'd like to raise that crazy idea yes?","width":144.18181824684143},{"text":"and in fact the system call to do this is called raise","width":198.18181824684143},{"text":"so if you call raise, what you're doing is you're sending a signal to yourself","width":246.18181824684143},{"text":"alright so if you were to kill yourself you call raise SIGKILL","width":176.18181824684143},{"text":"if you want to send yourself SIGINT you say raise SIGINT","width":259.18181824684143},{"text":"now here's the exciting part, is that actually","width":283.18181824684143},{"text":"you can block signals","width":144.18181824684143},{"text":"you can block specific signals","width":287.18181824684143},{"text":"here's your signal mask","width":104.18181824684143},{"text":"if you'd like to hold that in front of you","width":183.18181824684143},{"text":"the amazing thing about this signal mask is that it actually stops ","width":291.18181824684143},{"text":"well we can set it to stop a lot of signals but we'll set it up to say block SIGINT","width":446.18181824684143},{"text":"because guess what if we want to send SIGKILL I don't care what you do with your mask this is getting delivered","width":324.18181824684143},{"text":"SIGKILL you cannot block but you can stop","width":262.18181824684143},{"text":"SIGINT","width":119.18181824684143},{"text":"now if you set up that mask","width":357.18181824684143},{"text":"okay? what do you think is going to happen to the signal","width":583.1818182468414},{"text":"you're going to block it right? so it's going to rebound off that piece of paper","width":313.18181824684143},{"text":"good guess but not correct, here's what happens to the signal","width":189.18181824684143},{"text":"if you're going to hold this and look as if you're going to throw it at the process","width":320.18181824684143},{"text":"no just hold it like your like practically in a sporting magazine or something","width":413.18181824684143},{"text":"here's what happens, the operating system says okay you've set up your mask, here's what I'll do","width":391.18181824684143},{"text":"this signal is pending","width":213.18181824684143},{"text":"I'm ready to deliver it to the process anytime you drop your guard down","width":420.18181824684143},{"text":"so anytime this mask goes down, we're going to send a signal","width":467.18181824684143},{"text":"how are your arms doing? yeah okay","width":178.18181824684143},{"text":"right so I'm interested to see some of the terminology right? we've got a pending signal","width":319.18181824684143},{"text":"so the word pending is the idea between when we created the signal and when we wish to deliver it","width":534.1818182468414},{"text":"so what happens if you think at this moment in time","width":220.18181824684143},{"text":"we start pressing control C control C control C control C or we start raise SIGINT raise SIGINT raise SIGINT we keep trying to raise more signals","width":470.18181824684143},{"text":"do we get a backlog of all of these signals ready to be thrown at the process?","width":352.18181824684143},{"text":"hundreds of balls about to arrive at you any moment you change your SIGMASK and let through SIGINT","width":622.1818182468414},{"text":"actually no, there's not a queue of the","width":277.18181824684143},{"text":"if you have raised SIGINT, if you've generate a signal, there's only one SIGINT to be delivered","width":617.1818182468414},{"text":"whilst we stay in this kind of captured moment in time, think back to par shell and when we talked about preventing zombies yes","width":602.1818182468414},{"text":"and we installed a signal handler to catch sigchild right?","width":391.18181824684143},{"text":"there's actually a race condition, oh you know what a race condition means now","width":183.18181824684143},{"text":"there's a race condition, suppose two children finish at exactly the same time or close to the same time","width":455.18181824684143},{"text":"it could be that we've generated SIGCHILD here","width":242.18181824684143},{"text":"and we're not going to generate another SIGCHILD for all of the other children that finish at the same time","width":331.18181824684143},{"text":"so actually the code that we wrote a while ago is not sufficient because there can't be a queue of the same kind of signal","width":663.1818182468414},{"text":"I can still have other signals for example my SIGKILL","width":220.18181824684143},{"text":"and I can deliver that but there's never a queue of multiple ones","width":213.18181824684143},{"text":"okay why is this? well imagine in an implementation where these signals are really just little bits","width":329.18181824684143},{"text":"we've got a little bit ready to fly just like a hardware interrupt where I've got a particular interrupt coming from the particular device","width":443.18181824684143},{"text":"I've got a particular signal I want to deliver to a particular process","width":430.18181824684143},{"text":"now the other thing we should talk about is what happens if this process calls fork","width":333.18181824684143},{"text":"and this process calls exec","width":173.18181824684143},{"text":"what might happen to my pending signals?","width":173.18181824684143},{"text":"what might happen to my SIGMASK","width":311.18181824684143},{"text":"the other thing we have to think about is what happens if this is no longer just a single threaded process but now uses say pthreads","width":564.1818182468414},{"text":"what should we do there?","width":93.18181824684143},{"text":"so suppose you are a pthread process okay?","width":205.18181824684143},{"text":"so in other words you've been compiled with pthreads","width":209.18181824684143},{"text":"and now you call pthread_create","width":317.18181824684143},{"text":"here's what happens if you call pthread_create","width":143.18181824684143},{"text":"you've now got two threads running yes?","width":120.18181824684143},{"text":"here's the great news, the second thread inherits your mask","width":395.18181824684143},{"text":"alright? so now they're both blocked from SIGINT","width":147.18181824684143}],
// Part 1
[{"text":"what do you think happens if I change my mask?","width":675.1818182468414},{"text":"here's what happen: the signal will be delivered to the process","width":301.18181824684143},{"text":"and caught by me","width":170.18181824684143},{"text":"[something]","width":163.18181824684143},{"text":"okay right so the signal in this case was delivered to me","width":176.18181824684143},{"text":"right but it couldn't happen until one of us dropped our guard","width":262.18181824684143},{"text":"here you go catch raise that","width":103.18181824684143},{"text":"so right what do you think happens if we both get rid of our masks","width":395.18181824684143},{"text":"it's arbitrary, who's going to throw it?","width":223.18181824684143},{"text":"okay who gets the signal? it's random, whichever thread the operating system decides to interrupt with a signal okay?","width":509.18181824684143},{"text":"so that's the basics of signal, give our volunteers a round of applause","width":293.18181824684143},{"text":"thank you very much","width":103.18181824684143},{"text":"why the virtual demo? because sometimes there's more interesting than simply going okay here's the technical details ","width":314.18181824684143},{"text":"yes there's a lot of just little annoying technical details but that's okay because you're illinois students","width":373.18181824684143},{"text":"you're used to being annoyed","width":133.18181824684143},{"text":"oh wait, that's not right","width":157.18181824684143},{"text":"so I'm going to run through some of these details they are on the notes, they are on the man pages etc","width":406.18181824684143},{"text":"and there will be a multiple choice quiz on this and I'll generate the practice exam shortly","width":625.1818182468414},{"text":"alright so what have we got?","width":133.18181824684143},{"text":"let's talk about some of this terminology","width":402.18181824684143},{"text":"right so we've talked about generating signals","width":213.18181824684143},{"text":"what do we are doing? well somewhere deep inside the kernel we've got a little bit set that says okay we want to deliver this particular signal to...","width":633.1818182468414},{"text":"to a particular process","width":183.18181824684143},{"text":"what's it mean if a signal is pending?","width":157.18181824684143},{"text":"it's that time interval between when we've generated it and when we've delivered it","width":350.18181824684143},{"text":"to the process","width":107.18181824684143},{"text":"okay so it's the period of time...","width":689.1818182468414},{"text":"between when we generated it and delivered it","width":563.1818182468414},{"text":"we know what it means for a signal to be blocked now","width":183.18181824684143},{"text":"it means the process has a signal mask that is preventing that signal from being delivered","width":458.18181824684143},{"text":"it's like putting a stop on your mail","width":299.18181824684143},{"text":"right? we don't just discard the signal, it just waits until we can actually deliver it","width":535.1818182468414},{"text":"what does caught mean? it means you've installed some sort of signal handler","width":338.18181824684143},{"text":"and you've decided to take care of that, process that signal in your own fashion","width":653.1818182468414},{"text":"in your own special way","width":64.18181824684143},{"text":"and then finally disposition","width":279.18181824684143},{"text":"right how do you feel about lady gaga's music","width":686.1818182468414},{"text":"okay pretty bad at the front here, that's your disposition to that particular signal","width":466.18181824684143},{"text":"what' your disposition to this lecture","width":303.18181824684143},{"text":"good so far, okay, phew","width":193.18181824684143},{"text":"that's another disposition so our disposition is what are we going to do? how do we feel about a particular signal?","width":754.1818182468414},{"text":"you know that we can install signal handlers","width":155.18181824684143},{"text":"and we can have different actions that occur for different kinds of signals","width":359.18181824684143},{"text":"you know that some signals can't be caught","width":182.18181824684143},{"text":"but for all of the other ones we can set up a particular disposition","width":258.18181824684143},{"text":"so thinking in terms of an implementation","width":205.18181824684143},{"text":"you could just think of a disposition as a table of function pointers","width":803.1818182468414},{"text":"so one function for each signal","width":304.18181824684143},{"text":"in other words, if I get a SIGINT go in here and execute this code","width":216.18181824684143},{"text":"so when I install a signal handler, I am changing a particular disposition to that particular signal","width":415.18181824684143},{"text":"right so basically it's wutchu gonna do when you get a particular signal?","width":292.18181824684143},{"text":"wutchu gonna do when you get SIGINT, wutchu you gonna do if you get SIGTERM, wutchu gonna do if you get SIGCHILD, etc","width":307.18181824684143},{"text":"that's your disposition, the sum of all of those actions is your disposition to signals","width":1014.1818182468414},{"text":"right okay let's have some guesses then","width":278.18181824684143},{"text":"do you think your signal disposition is on a per thread or per process basis?","width":373.18181824684143},{"text":"make your guess now and I'll tell you the correct answer in five four three and the answer is process!","width":503.18181824684143},{"text":"it's on a per process","width":528.1818182468414},{"text":"so signals are delivered to processes","width":1047.1818182468414},{"text":"what do you think the signal disposition is of your child?","width":389.18181824684143},{"text":"is it reset to the default?","width":173.18181824684143},{"text":"or is it a clone of the parent?","width":287.18181824684143},{"text":"make your guess now and I'll tell you in five four three two.. it's a clone!","width":508.18181824684143},{"text":"or the same as the parent","width":384.18181824684143},{"text":"in other words if you set up your parent to say ignore SIGINTs when you call fork","width":496.18181824684143},{"text":"so will your child","width":159.18181824684143},{"text":"so this is a bit you know the apple doesn't fall far from the tree","width":444.18181824684143},{"text":"if you like rythm and bass, maybe your offspring will as well","width":482.18181824684143},{"text":"but if you call exec","width":463.18181824684143},{"text":"it's reset","width":1082.1818182468414},{"text":"right, so now we can start talking a little bit about the code","width":333.18181824684143},{"text":"so where would I call SIGPROCMASK?","width":352.18181824684143},{"text":"when I don't want yellow balls thrown at me","width":897.1818182468414},{"text":"if you say that during an interview they'll think you're crazy","width":265.18181824684143},{"text":"right so what's a better answer for SIGPROCMASK?","width":264.18181824684143},{"text":"using the correct terminology of signals","width":742.1818182468414},{"text":"what am I doing with my mask?","width":177.18181824684143},{"text":"blocking, yes!","width":117.18181824684143},{"text":"we set up a mask to temporarily block signals","width":332.18181824684143}],
// Part 2
[{"text":"if you are working with a single threaded process and use sigprocmask","width":416.18181824684143},{"text":"guess what, if you're compiling with pthreads, then use pthread_sigmask","width":491.18181824684143},{"text":"this allows you to have different masks for different threads","width":897.1818182468414},{"text":"so now we can talk about whether a signal will be delivered","width":519.1818182468414},{"text":"for a multithreaded process","width":215.18181824684143},{"text":"and we saw that it will be delivered","width":532.1818182468414},{"text":"to one thread and it can be any thread that is not blocking the signal","width":2151.1818182468414},{"text":"so what does this mean in practice? in practice this means typically in our initialization code before we called pthread_create","width":619.1818182468414},{"text":"let's just try and block everything, let's just serve a big mask and say hey we don't want to know about signals right now","width":393.18181824684143},{"text":"and then later in one particular thread, we'll say we'll deliver signals to this particular thread","width":370.18181824684143},{"text":"and we'll lower our guard, we'll lower the mask for that particular thread","width":358.18181824684143},{"text":"so what's it mean when a thread actually gets a signal","width":163.18181824684143},{"text":"it means that thread is going to be stopped from executing the code that it's currently working on","width":343.18181824684143},{"text":"and they are going to steal it","width":104.18181824684143},{"text":"we're going to use its stack","width":132.18181824684143},{"text":"to execute the code that we write inside the signal handler","width":387.18181824684143},{"text":"so anything it was in the middle of doing, let's say it was in the middle of malloc, let's say it was in the middle of updating a data structure","width":515.1818182468414},{"text":"that is put on hold","width":170.18181824684143},{"text":"whilst we do whatever is inside our signal handler","width":183.18181824684143},{"text":"this is why things can be signal unsafe","width":307.18181824684143},{"text":"suppose your halfway through updating your data structure or suppose malloc is updating its data structure","width":348.18181824684143},{"text":"and then you try to go in and do something to that datastructure","width":246.18181824684143},{"text":"whoops now you're reading and writing from the wrong bytes","width":387.18181824684143},{"text":"we can't use mutex locks for this to prevent this because we are actually stealing the thread in order to run our signal handler code","width":783.1818182468414},{"text":"so I'll talk about a way around this in a moment where we can take a lot more careful control about when and how we handle particular signals","width":722.1818182468414},{"text":"okay so how do I learn more about this?","width":319.18181824684143},{"text":"on linux, not on your mac, but on linux, in section 7, there's a whole long article all about signals","width":603.1818182468414},{"text":"so we use -s7 to say go to section 7 and we can read all about that","width":939.1818182468414},{"text":"so let's talk about appending signals","width":141.18181824684143},{"text":"remember appending signals is our signals we're about to throw","width":534.1818182468414},{"text":"and pending signals work in the opposite way to our signal disposition","width":410.18181824684143},{"text":"that when we call fork the new child has nothing","width":550.1818182468414},{"text":"on the other hand if you call exec some sort of exec call","width":488.18181824684143},{"text":"pending signals are preserved","width":256.18181824684143},{"text":"so that means you could do something like that following","width":197.18181824684143},{"text":"let's fork and then in the child...","width":446.18181824684143},{"text":"we know there's nothing appending yet because we've just forked right?","width":303.18181824684143},{"text":"so let's deliberately raise something here","width":763.1818182468414},{"text":"okay so I'm going to raise SIGINT","width":225.18181824684143},{"text":"now if I hadn't done a signal mask at this point that could be delivered straight away","width":338.18181824684143},{"text":"whoops I've just managed to control C myself","width":337.18181824684143},{"text":"but instead in this little example, we're going to suppose...","width":402.18181824684143},{"text":"we've already set our mask","width":602.1818182468414},{"text":"suppose our mask already includes SIGINT, in other words, I'm not...","width":286.18181824684143},{"text":"going to accept your SIGINTs right now, talk to the hand right? I'm blocking this","width":275.18181824684143},{"text":"but the next thing we do is we exec something","width":626.1818182468414},{"text":"wahahaha what happens now?","width":406.18181824684143},{"text":"pending signals preserved","width":167.18181824684143},{"text":"the mask gets reset","width":160.18181824684143},{"text":"because that's what happens when you...","width":255.18181824684143},{"text":"oh, wait wait","width":243.18181824684143},{"text":"I'm certain that if in my exec code, if that now changes the mask, it can get my control C, I could actually interrupt a process before it has even started up by generating a pending signal","width":1249.1818182468414},{"text":"so my other process will get the signal later when the mask is changed","width":847.1818182468414},{"text":"and we won't say generated, we'll say delivered!","width":1501.1818182468414},{"text":"so reasoning about signals and working with them is tricky because we have to think about the timing of when things happen and we have to be careful about what our masks are","width":1165.1818182468414},{"text":"right so I've talked about pending signals","width":343.18181824684143},{"text":"if I want to send a signal, if I'm inside a multithreaded program I want to send a particular thread I can use pthread_kill","width":803.1818182468414},{"text":"if I want to just send a signal to my whole process I can send raise, if I want to send it to another process, I can use kill","width":837.1818182468414},{"text":"so signals are at the process level","width":220.18181824684143},{"text":"however, in a multithreaded process which thread actually catches them and performs a signal handler that you've installed","width":668.1818182468414},{"text":"is dependent on the signal mask of all your processes","width":372.18181824684143}],
// Part 3
[{"text":"right so we talked about creating signals and sending them","width":656.1818182468414},{"text":"let's actually work with them now","width":248.18181824684143},{"text":"I mentioned signals at the beginning of this class, I mean at the very beginning of the semester","width":294.18181824684143},{"text":"here's the bad news","width":105.18181824684143},{"text":"signal should not be used for multithreaded programs","width":535.1818182468414},{"text":"and in fact if you read the linux documentation it would typically say signal should not be used","width":338.18181824684143},{"text":"don't use signal!","width":82.18181824684143},{"text":"why not?","width":97.18181824684143},{"text":"well a) it's not really supported in multithreaded processes but also b) it's definition was inprecise","width":427.18181824684143},{"text":"so the way that signals are delivered on different operating systems","width":423.18181824684143},{"text":"is ambiguous","width":128.18181824684143},{"text":"so fine you managed to get something working on linux and that's all you care about use signal, but the better option is to use sigaction","width":558.1818182468414},{"text":"where we have a lot more control over what happens when we generate signals","width":614.1818182468414},{"text":"now in addition to installing a signal handler with sigaction instead of signal","width":388.18181824684143},{"text":"there's two other ways of dealing with signals, one is to create a file descriptor","width":453.18181824684143},{"text":"like a file, that we can read from a stream and what we read from is bytes that tell us about what signals have happened","width":501.18181824684143},{"text":"I'm not going to talk about it inside 241 just other than the fact that hey you should know about this and it's a pretty good way of working with signals","width":592.1818182468414},{"text":"so you could open one of these inside your own specialized thread and start pulling signals from that file descriptor","width":571.1818182468414},{"text":"and interpreting those bytes","width":153.18181824684143},{"text":"another way is to use sigwait","width":288.18181824684143},{"text":"where sigwait blocks until a signal happens and then it gives you details about which signal occurred and we'll have a look at that today","width":731.1818182468414},{"text":"in fact, let's take a break from a moment because I realize this is a lot of factual stuff and let you know about this","width":966.1818182468414},{"text":"so I've got fifty questions for you","width":259.18181824684143},{"text":"and this is going to be worth four percent of your grade","width":368.18181824684143},{"text":"and it's purpose it to help prepare you for the final exam","width":403.18181824684143},{"text":"so here's the idea is it's a little homework","width":257.18181824684143},{"text":"feel free to work in pairs, what i'd like you to do is actually try and research and try to understand the answers","width":330.18181824684143},{"text":"because we're not going to grade this purely on correctness","width":177.18181824684143},{"text":"we more care about the fact that you took the time into learning these answers because many of these questions come up in real interviews as well","width":576.1818182468414},{"text":"so I've got fifty questions for you, actually the fifty first question is optional","width":414.18181824684143},{"text":"it's this, it's draw an imaginary picture of you battling your most evil or tricky CS241 CS programming bug","width":504.18181824684143},{"text":"so looking forward to seeing dinosaurs or whatever","width":280.18181824684143},{"text":"however else you imagine working on that so can you give me a hand handing these out?","width":577.1818182468414},{"text":"here we go","width":90.18181824684143},{"text":"if you could hand some of these out for me that would be fantastic","width":423.18181824684143},{"text":"you will find that some of these are merely code writing exercises","width":284.18181824684143},{"text":"I encourage you actually writing out the code by hand because that's what you're going to do in the final exam","width":681.1818182468414},{"text":"some of these are based on information inside the wikibook","width":386.18181824684143},{"text":"and some of these will require a quick google search to find the answer","width":249.18181824684143},{"text":"maybe we haven't talked about it directly inside lecture yet","width":590.1818182468414},{"text":"feel free to write your answers in note form, like i said...","width":294.18181824684143},{"text":"this is about doing exam prep and getting points for it as well okay?","width":336.18181824684143},{"text":"so the purpose is to help you review the CS241 material","width":976.1818182468414},{"text":"yes I'll make additional copy","width":251.18181824684143},{"text":"right let's go to aux pc","width":383.18181824684143},{"text":"[silence]","width":2023.1818182468414},{"text":"okay so now I've got the code version of the demo that we did at the beginning of lecture","width":615.1818182468414},{"text":"we're going to set up our proc mask, our process mask","width":610.1818182468414},{"text":"so that a particular signal can't be sent to our process, can't be delivered to our process","width":1010.1818182468414},{"text":"right so what's the plan here?","width":174.18181824684143},{"text":"well, a long long long time ago, signal sets just used to be an integer","width":523.1818182468414},{"text":"however, there was a concern that the number of signals might exceed the number of bits inside the integer on any one platform","width":405.18181824684143},{"text":"so to make a more cross platformed solution we have this type called a sigset_t","width":390.18181824684143},{"text":"and then there are functions either set all bits, clear all bits, set one bit, etc etc etc","width":684.1818182468414},{"text":"we're looking at an example then when we are going to set all the bits inside this little bit mask","width":665.1818182468414},{"text":"and then we're going to use that","width":346.18181824684143},{"text":"and as you can see this sigprocmac actually allows us to discover the old signal proc, the old mask again","width":456.18181824684143},{"text":"so that later on in my code, I can restore the original signal mask","width":463.18181824684143},{"text":"so it's typical in well engineered programs then to at the very beginning of the process raise all the guards, raise the whole mask up so that...","width":699.1818182468414},{"text":"so that no signals get delivered early on, not until we're ready for them","width":353.18181824684143},{"text":"until we're ready to open shop","width":253.18181824684143},{"text":"right so we're calling sigprocmask we're saying okay I want to set the mask","width":479.18181824684143},{"text":"to my new mask so that's hey stop everything....","width":283.18181824684143},{"text":"and then we raise SIGINT in other words we're pressing control C on ourselves we're trying to interrupt this process","width":606.1818182468414},{"text":"now as you and I know, because we set the procmask, that means that that signal is...","width":423.18181824684143},{"text":"generated but it's not delivered, it's in a pending state","width":318.18181824684143}],
// Part 4
[{"text":"so now we can carry on, let's change our signal proc mask to whatever it used to be","width":618.1818182468414},{"text":"we'll print exiting and we'll return zero","width":141.18181824684143},{"text":"right so let's see what happens, how far will we get in this program before it finishes?","width":1059.1818182468414},{"text":"alright so we've sent out SIGINT nothing happened but then we changed the procmask again and that turned out to be our doom, our downfall","width":542.1818182468414},{"text":"by resetting signalprocmask to what it used to be, the signal could be delivered","width":316.18181824684143},{"text":"and of course what's the default behavior for SIGINT?","width":282.18181824684143},{"text":"kill the process. yes?","width":420.18181824684143},{"text":"there can be a delay","width":231.18181824684143},{"text":"so the system does not make any guarantees about when the signal will be delivered","width":414.18181824684143},{"text":"typically it will be as soon as you make an operating system call","width":242.18181824684143},{"text":"and that brings me on to my friday demo, I want to show you something really cool which is not directly related to signals","width":381.18181824684143},{"text":"but go on quick question","width":658.1818182468414},{"text":"yes, we're going to do that in a moment, we're going to make a thread to handle signals","width":252.18181824684143},{"text":"which is a nice engineering solution to working with signals","width":246.18181824684143},{"text":"but no I want to show you something called strace","width":295.18181824684143},{"text":"strace allows us to look inside the matrix, it allows us to see the operating system calls, it gives us a system trace","width":529.1818182468414},{"text":"of what a function is doing","width":263.18181824684143},{"text":"alright? so","width":100.18181824684143},{"text":"let me show you the code once more of...","width":297.18181824684143},{"text":"my little demo here, here it is okay","width":151.18181824684143},{"text":"we are going to set the um...","width":207.18181824684143},{"text":"called sigfillset, sigprocmask, we're going to write sending sig out, we're going to raise, etc","width":447.18181824684143},{"text":"so that's the code, now let's run this again","width":333.18181824684143},{"text":"with strace","width":488.18181824684143},{"text":"wahhhh lots of output okay, let's...","width":353.18181824684143},{"text":"scroll up here and make it a little bit smaller","width":588.1818182468414},{"text":"okay","width":333.18181824684143},{"text":"we can see every single system call that ran as part of this process","width":407.18181824684143},{"text":"you probably recognize quite a few of them right now","width":200.18181824684143},{"text":"first of all, what do we do? well after forking we had to call exec to actually load the process","width":507.18181824684143},{"text":"then we called break to discover where the beginning of the heap was","width":151.18181824684143},{"text":"we called mmap and we said we want to be able to read and write into this space","width":273.18181824684143},{"text":"we want it to be private, anonymous, etc ","width":199.18181824684143},{"text":"and just give me some space 4096 bytes","width":213.18181824684143},{"text":"negative one at the end tells me it's not associated with any file descriptor","width":233.18181824684143},{"text":"and then we call open on this LD thing and then we call fstat on that","width":503.18181824684143},{"text":"we call oh yeah it returns three","width":426.18181824684143},{"text":"sorry file descriptor three","width":226.18181824684143},{"text":"and then we call mmap to get that into memory","width":153.18181824684143},{"text":"give me a private copy with this file descriptor","width":192.18181824684143},{"text":"and here's the address that it goes in","width":113.18181824684143},{"text":"then we load the C library","width":279.18181824684143},{"text":"also file descriptor three because we closed it and we're going to mmap that","width":331.18181824684143},{"text":"so we're pulling the C library into our file system","width":222.18181824684143},{"text":"sorry into our virtual memory","width":271.18181824684143},{"text":"okay so we set up a few more memory mapped regions","width":263.18181824684143},{"text":"okay and here's the beginning of our code","width":268.18181824684143},{"text":"we are setting the signal masks","width":293.18181824684143},{"text":"see that puts being turned into a low level write call","width":380.18181824684143},{"text":"so a tgkill thing","width":181.18181824684143},{"text":"which is a low level version of our raise","width":201.18181824684143},{"text":"and then we set the signal process mask again","width":266.18181824684143},{"text":"and that's when our process gets interrupted by SIGINT","width":460.18181824684143},{"text":"so this is pretty cool right? you can actually see what a process does","width":337.18181824684143},{"text":"at the operating system level","width":96.18181824684143},{"text":"you can get between any process and all of the kernel calls","width":281.18181824684143},{"text":"that means that we can set our process up into lala neverland and make arbitrary return values to anything that asks for the system to do","width":926.1818182468414},{"text":"so strace is very powerful","width":133.18181824684143},{"text":"you can shim into every operating system call and see what it's being called with and see the return values","width":378.18181824684143},{"text":"right so that's our sigprocmask little demo","width":315.18181824684143},{"text":"let's go back to the handout","width":693.1818182468414},{"text":"right so I mentioned this hey instead of using signal, use sigaction","width":327.18181824684143},{"text":"here's how we use sigaction","width":141.18181824684143},{"text":"we need to give it a signal number and we also set up one of these structs","width":350.18181824684143},{"text":"struct sigaction with everything we need to do or we want to say what to do when a signal is delivered","width":609.1818182468414},{"text":"okay how do we set it up?","width":198.18181824684143},{"text":"inside my struct, I could have a regular handler just like we did with signal","width":478.18181824684143},{"text":"here's the function that should be called when the signal is delivered","width":347.18181824684143},{"text":"there's actually another function which allows me to get a lot more information about the signal","width":443.18181824684143},{"text":"but we're not going to talk about it in 241 but if you wanted to write a more complicated signal handler you might use this other function prototype instead","width":493.18181824684143},{"text":"okay what's different tough is that there's a mask","width":309.18181824684143},{"text":"a set of signals and these flags","width":192.18181824684143},{"text":"and it's important to remember to set up these other two items","width":383.18181824684143},{"text":"so here we go, here's some example code, right we're going to have our little struct","width":282.18181824684143},{"text":"we'll set up our handlers so that's our callback function","width":363.18181824684143},{"text":"let's do something with that mask","width":123.18181824684143},{"text":"I'll tell you what that mask does at the moment, typically you either empty it or fill it","width":283.18181824684143},{"text":"and then with our flags, typically you either set this to zero or sa_restart","width":476.18181824684143},{"text":"and then finally okay let's register for SIGINT","width":259.18181824684143},{"text":"this information","width":63.18181824684143},{"text":"so this set of signals","width":319.18181824684143},{"text":"does not affect delivery of the signal, this set of signals says what should be my mask when I'm actually inside the signal handler","width":1179.1818182468414},{"text":"so for example, if I'm handling a SIGINT","width":300.18181824684143},{"text":"do I want to block all other signals","width":174.18181824684143},{"text":"do I want to prevent a SIGTERM from coming in","width":273.18181824684143},{"text":"now for our typical easy little programs","width":157.18181824684143},{"text":"naw we don't need to worry about them, we don't need to care about these race conditions","width":193.18181824684143},{"text":"but if you're writing something complicated when you might have to say prevent SIG control C","width":439.18181824684143},{"text":"but also make sure that realtime information, realtime signals are always processed","width":364.18181824684143},{"text":"then you might actually use this to work out which signals can temporarily block another signal of a lesser priority to you from being executed","width":672.1818182468414},{"text":"of a lesser priority to you from being executed","width":640.1818182468414}],
// Part 5
[{"text":"right so we'll just say hey we don't care","width":186.18181824684143},{"text":"we'll let all of the signals interrupt us","width":228.18181824684143},{"text":"right so that's a quick outline of this","width":129.18181824684143},{"text":"let's have a look at page two","width":259.18181824684143},{"text":"cause we're going to use it","width":214.18181824684143},{"text":"alright let's fix the code we wrote at the very beginning of the semester then","width":264.18181824684143},{"text":"when we talked about eating zombies","width":226.18181824684143},{"text":"how do we eat zombies? we call waitpid on them","width":225.18181824684143},{"text":"on the parent","width":533.1818182468414},{"text":"so our problem is that this signal handler","width":303.18181824684143},{"text":"isn't going to be called every time a child exits","width":274.18181824684143},{"text":"because if I have two children exiting at the same time, I might only get one signal","width":324.18181824684143},{"text":"remember? if a signal is pending, it has been generated","width":223.18181824684143},{"text":"I don't start queuing them up","width":159.18181824684143},{"text":"so if I had two children finishing at about the same time","width":291.18181824684143},{"text":"or if I have temporarily blocked all of my signals then..","width":330.18181824684143},{"text":"then I want to be able to eat multiple zombies","width":211.18181824684143},{"text":"so here's how we can do that, the better code to do this then is to keep calling waitpid until there's no more zombies left to reap, until there's no more zombies left to find","width":637.1818182468414},{"text":"right so here's the typical way of doing this ","width":135.18181824684143},{"text":"there's a  flag we can put in here to say actually...","width":584.1818182468414},{"text":"don't wait just return immediately if there is no more children to..","width":534.1818182468414},{"text":"no more zombies to find then let me know about it","width":275.18181824684143},{"text":"[silence]","width":1783.1818182468414},{"text":"and so we better put this inside a loop so here's our plan","width":524.1818182468414},{"text":"we'll say while the exit value is a valid child address","width":375.18181824684143},{"text":"so while this is greater than zero","width":157.18181824684143},{"text":"then I know I've got a valid pid","width":335.18181824684143},{"text":"and go around again","width":87.18181824684143},{"text":"and eventually I'll run out of child processes to reap","width":509.18181824684143},{"text":"okay how we doing for time? good","width":191.18181824684143},{"text":"so now it's your turn","width":193.18181824684143},{"text":"can you remember what to put inside this?","width":152.18181824684143},{"text":"so we've set up our signal hander","width":178.18181824684143},{"text":"how do we correctly install it?","width":194.18181824684143},{"text":"[silence]","width":4762.181818246841},{"text":"okay right so ","width":147.18181824684143},{"text":"we've set up the handler","width":66.18181824684143},{"text":"we better set up this mask","width":133.18181824684143},{"text":"if clearing zombies is the most important thing and we don't want to be interrupted by anything, not even say control C","width":469.18181824684143},{"text":"then let's say that we'll set the mask...","width":829.1818182468414},{"text":"on a...","width":128.18181824684143},{"text":"let's say mask.. what's that? it's going to be sa.sa_mask","width":406.18181824684143},{"text":"[writing]","width":694.1818182468414},{"text":"and then finally flags we could just say zero","width":348.18181824684143},{"text":"but there's something that's useful for real programs which is sa_restart","width":684.1818182468414},{"text":"so if you install signal handlers with sa_restart","width":217.18181824684143},{"text":"you're making your life a little bit easier in the rest of your program","width":267.18181824684143},{"text":"if you were to read say about write or read","width":349.18181824684143},{"text":"other function calls at the system levle","width":195.18181824684143},{"text":"sorry, other system calls","width":118.18181824684143},{"text":"you discover that some of them will simply return immediately without doing anything","width":303.18181824684143},{"text":"and give you an error which is E_interrupted or E_retry","width":282.18181824684143},{"text":"and E_interrupted means hey I was interrupted by a signal so I chose not to do anything","width":358.18181824684143},{"text":"ah thanks operating system, that's really helpful","width":164.18181824684143},{"text":"why don't you try again? do you want to play again?","width":136.18181824684143},{"text":"and so we have to write code that checks for the specific error condition that says I was interrupted and I want to restart","width":563.1818182468414},{"text":"well specifying this restart parameter in here...","width":264.18181824684143},{"text":"makes our programming a little bit easier because the number of times that happens is reduced","width":338.18181824684143},{"text":"it's I'm afraid not 100%","width":173.18181824684143},{"text":"but, it does do the restart for you automatically on some function calls","width":513.1818182468414},{"text":"again it's not worth knowing the big list, it's just worth actually going to say man -s7 signals and reading more about it if you are interested","width":709.1818182468414}],
// Part 6
[{"text":"great okay so we've got time for a final little demo","width":433.18181824684143},{"text":"and what we're going to do is instead of the system stealing one of our threads","width":573.1818182468414},{"text":"to handle a signal","width":227.18181824684143},{"text":"we are going to explicitly create a thread","width":180.18181824684143},{"text":"that pulls signals one at a time and handles them","width":222.18181824684143},{"text":"so its more code to write","width":181.18181824684143},{"text":"but it's less likely to.. it own't suffer from asynchronous signal problems if we're careful about how we...","width":609.1818182468414},{"text":"process our signals","width":82.18181824684143},{"text":"so let's.. I'll show you what I mean","width":216.18181824684143},{"text":"so what we're looking at today is... using SIGWAIT","width":566.1818182468414},{"text":"and I'm going to put that inside a thread","width":250.18181824684143},{"text":"who's only job is to say okay tell me the next signal that's delivered","width":825.1818182468414},{"text":"we can tell it in this case the mask is which signals do I care about","width":283.18181824684143},{"text":"[silence]","width":1467.1818182468414},{"text":"so if I get a SIGINT, do some code, if I get SIGTERM do some code","width":335.18181824684143},{"text":"so for example, Java, if you sent it a SIGHUP will print out a whole load of debugging information about the garbage collector and other internals of the...","width":833.1818182468414},{"text":"stack traces and other internals of the JVM","width":143.18181824684143},{"text":"the apache webserver if you send it a SIGHUP signal will reread its configuration files","width":410.18181824684143},{"text":"so that you can make updates to the webserver without having to restart the process and deny people that are currently connected to it","width":549.1818182468414},{"text":"so this might be a way to do this, you could say oh look if I've got um...","width":348.18181824684143},{"text":"SIGHUP","width":107.18181824684143},{"text":"if I get this signal... then print something out or","width":307.18181824684143},{"text":"reread my configuration data","width":238.18181824684143},{"text":"today I'm just going to show you a demo with just a couple of these","width":264.18181824684143},{"text":"and we've got a little default case for our own purposes that calls fprintf","width":254.18181824684143},{"text":"which we wouldn't call normally inside the signal handler","width":233.18181824684143},{"text":"because it could be that the thread that we've stolen it from is already inside fprintf or inside malloc etc","width":454.18181824684143},{"text":"but by using our own explicit thread, we can do this, we can do it in a safe way","width":432.18181824684143},{"text":"right so let's have a look at a demo...","width":451.18181824684143},{"text":"yay okay great","width":528.1818182468414},{"text":"right so here's our plan","width":112.18181824684143},{"text":"we will set because we're a multithreaded process","width":415.18181824684143},{"text":"we will set our sigmask before creating other threads","width":300.18181824684143},{"text":"so that when we create a new thread, it inherits the same mask","width":291.18181824684143},{"text":"and our default mask today rather than just saying okay ignore everything","width":303.18181824684143},{"text":"what I'm going to do is addset and just put in two bits","width":245.18181824684143},{"text":"the bit for SIGINT and the bit for SIGTERM","width":190.18181824684143},{"text":"that means that if someone sends me a SIGINT of course there's no thread that is prepared to catch it","width":489.18181824684143},{"text":"both threads are blocking these signals","width":546.1818182468414},{"text":"and here's my application code","width":160.18181824684143},{"text":"sleep one, print dot and because I want to see the dots immediately I'm turning to my C library to immediately flush anything inside the C buffers","width":496.18181824684143},{"text":"so we can see the dots appear one a second","width":423.18181824684143},{"text":"and inside my thread, here we go, today I've got my...","width":400.18181824684143},{"text":"my important code that's going to present some debugging information","width":166.18181824684143},{"text":"what is that? oh it's just the name of the signal that was delivered","width":287.18181824684143},{"text":"okay so let's compile this","width":271.18181824684143},{"text":"right if I was going to compile it...","width":261.18181824684143},{"text":"like this, what will we see?","width":290.18181824684143},{"text":"it will complain right? undefined reference no one defined pthread_sigmask","width":299.18181824684143},{"text":"what we forgot to do is to tell gcc that we're trying to compile a multithreaded program so...","width":406.18181824684143},{"text":"here we go let's give it a pthread option good and now we've got ourselves a little demo","width":478.18181824684143},{"text":"and every second it's printing out dot and then flushing the buffer","width":240.18181824684143},{"text":"so if we now send it a signal...","width":342.18181824684143},{"text":"our single thread wakes up, returns from SIGWAIT and runs the code inside that case statement which just prints out SIGINT","width":437.18181824684143},{"text":"where did the control C come from? oh that's just the shell telling us that it sent a control C","width":353.18181824684143},{"text":"and so I can say ok stop stop stop stop stop and of course it never stops","width":486.18181824684143},{"text":"alright and but I can still call SIGQUIT and that will terminate the program","width":383.18181824684143},{"text":"and with that have a wonderful weekend and I'll publish a online version of these questions in subversion. thank you very much!","width":703.1818182468414},{"text":"thank you very much!","width":64.18181824684143}],
// Part 0
[{"text":" morning cs 241. how are you this morning","width":673.1818182468414},{"text":"great. okay. so here's what we're going to do today. we are going to talk about memory allocation","width":342.18181824684143},{"text":"we're going to look at some code that some ta's wrote last semester","width":226.18181824684143},{"text":"and then we're going to jump into a new topic called threads","width":337.18181824684143},{"text":"and this is where we can actually get more than one CPU to work on our process at a time","width":608.1818182468414},{"text":"let's start with this. let's have a look at this code that the TA's wrote","width":330.18181824684143},{"text":"they actually wrote a version of malloc() and free()","width":242.18181824684143},{"text":"i want to show you that it is possible to write some code that works and we'll see how it goes","width":574.1818182468414},{"text":"first we'll define a struct and we use typedef because we're lazy and we don't want to have to keep writing struct everytime we refer to this memory object","width":825.1818182468414},{"text":"and so in the future we can just say metadata_entry_t, that's just a shorthand","width":364.18181824684143},{"text":"typedef is just saying here's an alias","width":175.18181824684143},{"text":"and this is what we're going to have inside our little struct. we have a ptr that we'll be using for the user memory","width":391.18181824684143},{"text":"we want to know how many bytes to use","width":103.18181824684143},{"text":"we want to know are we talking about memory that's currently in use by the program or is it free. is it available for a future malloc()","width":570.1818182468414},{"text":"and finally here is what we're using a linked list so we can walk through these things","width":531.1818182468414},{"text":"so this is going to be our metadata, our information about what memory our malloc() has actually created or freed","width":412.18181824684143},{"text":"and so this will be the beginning of our linkedlist","width":229.18181824684143},{"text":"ok, so now let's have a look at the malloc() implementation","width":256.18181824684143},{"text":"we want to know how many bytes do they want. so we're going to look through our linkedlist and look for the appropriate block that we can reuse","width":821.1818182468414},{"text":"let's walk through our list and we can obviously we only care about entries which are free. we don't want to use a block that is currently in use that's currently been allocated for some purpose","width":605.1818182468414},{"text":"but i've missed out some code here so it's going to be your job to figure out what code is here","width":351.18181824684143},{"text":"also what placement strategy is this using. remember we talked about different strategies in the last lecture","width":588.1818182468414},{"text":"which one is this using and how do we change the code to implement a different placement strategy so you choose a different one and then figure out how to alter it","width":586.1818182468414},{"text":"and then there's more code down here. so what's this second half of the code do","width":271.18181824684143},{"text":"so that's going to be our challenge for the next 5 minutes: what's the missing code","width":263.18181824684143},{"text":"change the strategy that this is using and what does the rest of the code do. why is it doing what it's doing?","width":488.18181824684143},{"text":"and you may also want to have a look at the free() and i'll walk around and answer any quesitons  on this or this week's assignment","width":953.1818182468414},{"text":"silence","width":12169.181818246841}],
// Part 1
[{"text":"silence","width":10418.181818246841},{"text":"so here's how this works","width":160.18181824684143},{"text":"we're calling malloc() and we're going to look through all the previous allocations that we've ever made","width":517.1818182468414},{"text":"and we're going to see if any of those allocations we've made are free","width":447.18181824684143},{"text":"so we want to check if they're free","width":113.18181824684143},{"text":"and we want to make sure that the block of memory is of sufficient sie","width":430.18181824684143},{"text":"so let's check into our entry that size is at least equal to the requested size","width":891.1818182468414},{"text":"if it is, then maybe we can use that use that block. now we could at this point say hey great i've found a block but instead we're going to change our chosen pointer if the following is true","width":965.1818182468414},{"text":"either we haven't chosen anything yet or the size of the allocation we're looking at is even smaller then the previous block we've found","width":983.1818182468414},{"text":"in other words what kind of placement strategy are we using","width":288.18181824684143},{"text":"best fit! yes, this is best fit","width":413.18181824684143},{"text":"if i was using a tinder analogy, this would be like a best match you go through all the matches okay yeah","width":736.1818182468414},{"text":"of course sometimes you don't want to take that long and we could do a first fit: oh, yeah, that'll do","width":600.1818182468414},{"text":"so at that point we could say break out of this loop as soon as chosen is non-null so we could change our code somehow","width":460.18181824684143},{"text":"so for example if i were to put break in here then i can break out of the loop","width":337.18181824684143},{"text":"or i could have changed the conditions of the while loop to say while chosen is non null","width":338.18181824684143},{"text":"but yeah this is best fit and we go around and look at those allocations until we've actually exhausted all of them","width":893.1818182468414},{"text":"so it could be that we've found some space some previously allocated space that is not being used and in which case life is easy","width":524.1818182468414},{"text":"so if chosen is free then all we need to do is update that entry to say actually it's no longer free its being used","width":494.18181824684143},{"text":"and we can immediately return and we'll tell the user code to use the memory found at that pointer","width":1035.1818182468414},{"text":"so that was the easy case","width":81.18181824684143},{"text":"let's take a break for a moment and now let's look at how free works because later on when the C code is finished with the memory, it's going to have to do the same trick again once with the meta data, so here we are going to that linked list","width":1047.1818182468414},{"text":"eventually we find the entry that the user was using and we can mark it as available","width":711.1818182468414},{"text":"this works but its not very efficient. you can see that as we have more allocations in our linked list this code is going to get slower and slower","width":768.1818182468414},{"text":"our free is order n","width":413.18181824684143},{"text":"so this is not a very good implementation. which is why you get it for free","width":405.18181824684143},{"text":"maybe we can do better than this. rather than having a separate linked list maybe we can actually come up with a better solution. but anyway, now let's go back to our malloc","width":793.1818182468414},{"text":"now let's actually see what this code does. if we weren't successful in finding in any memory","width":462.18181824684143},{"text":"instead we call this sbrk() thing we say okay if chosen equals sbrk then sbrk and we pass in the size of the struct","width":680.1818182468414},{"text":"whenever you use sizeof() stop and pause and think come back come back, are you actually pausing in the right thing to sizeof()","width":479.18181824684143},{"text":"sizeof() works at compile time. the compiler uses the type that you give it","width":323.18181824684143},{"text":"the sizeof a struct is not the same thing as the size of the pointer to a struct and it's a common error to pass in the wrong thing","width":563.1818182468414},{"text":"sizeof() an array is not the same thing as an entry of that array","width":264.18181824684143}],
// Part 0
[{"text":"Ok, it's 11 o'clock. Good morning class how are you?","width":777.1818182468414},{"text":"Alright how's your shpar looking?","width":209.18181824684143},{"text":"I imagine some of you are celebrating that shpar is finished.","width":229.18181824684143},{"text":"Except of course you know it's not,","width":114.18181824684143},{"text":"because what we expect you to do now is actually not just make code that appears to work, but code that you are proud of.","width":472.18181824684143},{"text":"Code that is probably commented, code that has nice variables, code that you give someone else and they could maintain it.","width":397.18181824684143},{"text":"Some of the worst things about writing sloppy code is someone has to come back to you and say,","width":191.18181824684143},{"text":"\"What was this going on here?\" \"I have no idea I wrote that yesterday.\"","width":331.18181824684143},{"text":"Now's your chance to put your coding skills to test, not just to make something that works, but to make something that works well.","width":435.18181824684143},{"text":"And we'll do a finally code review next week on Thursday.","width":288.18181824684143},{"text":"We'll have some other things for you to do before that, but we'll announce that via email. ","width":483.18181824684143},{"text":"Here's what we're going to talk about today. We're going to talk about using threads.","width":238.18181824684143},{"text":"Threads are cool because we can now make our single process do multiple things.","width":368.18181824684143},{"text":"And threads are cool because they allow multiple threads to share the same memory and the rest of the state of your process.","width":592.1818182468414},{"text":"So if you've opened a file descriptor in one thread, you can use it inside another thread.","width":351.18181824684143},{"text":"The exciting thing happens, though, when you have to wait for one thread to complete something.","width":323.18181824684143},{"text":"And for that, we need to worry about synchronization.","width":289.18181824684143},{"text":"And that's what sets your programming apart from things you've seen inside CS 225 and 125, earlier courses and other people that might have just picked up some programming.","width":637.1818182468414},{"text":"The ability to work with multiple threads correctly so that it always works when not just ten users are on your website, but a thousand users are on your website","width":499.18181824684143},{"text":"or you've got multiple CPUs inside your tablet, or your phone, or your watch, then that's where synchronization comes in.","width":519.1818182468414},{"text":"But anyway, let's get started. Little question, little memory question for you.","width":346.18181824684143},{"text":"My thread calls pthread twice, pthread_create twice, how many stacks does my process have?","width":797.1818182468414},{"text":"Ok, let's pick someone at random. Hi! What's your answer?","width":585.1818182468414},{"text":"If you said one, guess again.","width":301.18181824684143},{"text":"Any advances on one?","width":293.18181824684143},{"text":"If you said two, thanks for playing, but almost correct, off by one.","width":240.18181824684143},{"text":"It's three! Why?","width":531.1818182468414},{"text":"Thank you, yes! We get a thread for free at the beginning.","width":236.18181824684143},{"text":"One thread must be calling main, our CPU must be executing code at main","width":308.18181824684143},{"text":"All we did by calling pthread_create twice is we got ourselves two additional threads.","width":412.18181824684143},{"text":"And remember, each thread needs a stack. Why?","width":243.18181824684143},{"text":"Well we're calling functions. We have to put those automatic variables somewhere.","width":236.18181824684143},{"text":"And, when we return from a function, we have to remember where we're going to go back to. So again, that goes on the stack.","width":385.18181824684143},{"text":"So for each thread there is a stack and we have three threads in our process.","width":549.1818182468414},{"text":"So if my code called created twice, that means I could be doing three things at the same time.","width":416.18181824684143},{"text":"Ok, so I've been talking about processes for quite a bit, and talking about threads. What are some of the differences between them?","width":645.1818182468414},{"text":"Which is bigger?","width":132.18181824684143},{"text":"A process, yes. How much bigger?","width":393.18181824684143},{"text":"It's HUGE! Our process is a massive object!","width":204.18181824684143},{"text":"It's got file descriptors. It's got a big virtual memory space.","width":427.18181824684143},{"text":"Threads are tiny. they live inside a process.","width":303.18181824684143},{"text":"If you killed a process, that's it for all of your threads. They don't have anywhere to run anymore.","width":425.18181824684143},{"text":"So your process represents the sandbox. Everything that your threads can do will live inside a process.","width":554.1818182468414},{"text":"So our process has security.","width":341.18181824684143},{"text":"It's got virtual memory.","width":182.18181824684143},{"text":"It's got an exit status.","width":208.18181824684143},{"text":"Threads live inside a process, and they just represent what you want the CPU to do.","width":591.1818182468414},{"text":"They represent the code, the position in the code that is currently being executed.","width":538.1818182468414},{"text":"So that means if you kill a process, ha ha that's it. All of your threads are done.","width":219.18181824684143},{"text":"So if you send, say, an alarm signal to your process, all of your threads will disappear.","width":635.1818182468414},{"text":"If the process disappears, all of them have gone. This is an important point. They just live inside.","width":604.1818182468414},{"text":"So if we've created all these threads, perhaps we want to stop them.","width":331.18181824684143},{"text":"Guess what, you can do that and here's what you'd call. You'd call pthread_cancel.","width":390.18181824684143},{"text":"Let's have a look at pthread_cancel.","width":172.18181824684143},{"text":"How could I cancel a thread?","width":294.18181824684143},{"text":"Easy, just send in that id that we got from pthread_create and you can cancel a thread.","width":394.18181824684143},{"text":"I don't want to spend too much time on this because, in practice, no one bothers to use this.","width":528.1818182468414},{"text":"Here's why. Imagine you are making a fantastic meal for Friday night your potential boyfriend, girlfriend, dog is coming over,","width":794.1818182468414},{"text":"and your cooking like a storm here. And then suddenly, BAM! your activity is cancelled.","width":364.18181824684143},{"text":"The kitchen is in complete disarray. It hasn't been cleaned up. What a mess!","width":379.18181824684143},{"text":"It's extremely rare that we can just cancel something and not have to clean things up.","width":298.18181824684143},{"text":"So what examples might we have.","width":119.18181824684143},{"text":"Well let's say you have a thread that's kind of calculating new digits of pi, or discovering prime numbers,","width":541.1818182468414},{"text":"or trying to mine bitcoins like you've come up with a new currency called CS241coins or something.","width":441.18181824684143},{"text":"You can probably cancel that. It was just a CPU intensive job.","width":262.18181824684143},{"text":"But if there's any kind of resources, then maybe we shouldn't just call this cancel and leave everything in disarray.","width":419.18181824684143},{"text":"So in practice what we tend to do is actually make a variable to tell our threads, \"Oh by the way, you should stop at some point.\"","width":585.1818182468414},{"text":"And if you call this pthread_cancel, things don't even stop immediately.","width":244.18181824684143},{"text":"Typically they will stop when that particular thread makes a system call, like open or read.","width":418.18181824684143},{"text":"We can discover all of the calls just by looking at the man pages.","width":243.18181824684143},{"text":"So this will be like the moment that your chef opens the oven door we say, ","width":314.18181824684143},{"text":"\"ok, you're out of here, we've quit you, we've cancelled you, no more work for you.\"","width":372.18181824684143},{"text":"So what a mess. We don't tend to do that.","width":173.18181824684143},{"text":"So let's write something that can be cancelled.","width":285.18181824684143},{"text":"We want to call pthread_create. What do we pass in? A pointer to our little identifier.","width":357.18181824684143},{"text":"We don't need any parameters. What's next? Oh yes, the function.","width":302.18181824684143},{"text":"I called it my funct, and an initial value. Let's just pass in NULL to begin with.","width":436.18181824684143},{"text":"And this will go on forever.","width":325.18181824684143}],
// Part 1
[{"text":"Alright, so, this little function can say initially we are going to just sleep for one second","width":566.1818182468414},{"text":"and then put something like \"HI!\".","width":263.18181824684143},{"text":"Ok, right, so its gonna print \"HI!\"","width":192.18181824684143},{"text":"So, now, I've got a program that is going to use two CPU's, if I have two CPU's.","width":535.1818182468414},{"text":"Uh oh, what happens if I only have one CPU?","width":365.18181824684143},{"text":"The scheduler!  The Linux Kernel is going to say \"okay, you get access to the CPU for say 10 milliseconds or 100 milliseconds","width":651.1818182468414},{"text":"and after that amount of time, I'm going to take you off the CPU and let the other thread use it.","width":378.18181824684143},{"text":"And if we do this faster enough, like 10 milliseconds or so","width":226.18181824684143},{"text":"then those slow humans will never notice, that actually only one thread at a time is on each CPU core","width":583.1818182468414},{"text":"And if it turns out that you make a system call like \"open\" or \"read\" and it takes time for us to read that stuff from the disk","width":455.18181824684143},{"text":"Then you don't need the CPU because you are waiting for stuff so I can give the CPU to someone else.","width":265.18181824684143},{"text":"So the scheduler has to make those decisions and make them well.","width":183.18181824684143},{"text":"Ok, so for example this sleep, you don't need any CPU to sleep.  I can let another thread use that.","width":454.18181824684143},{"text":"So, what were we going to do here...","width":162.18181824684143},{"text":"Oh yes, let's change this so we can cancel our little \"HI\" function.","width":273.18181824684143},{"text":"We'll sleep for 3 seconds here and then change to something like \"please_stop\".","width":495.18181824684143},{"text":"And then I will just loop forever.","width":228.18181824684143},{"text":"So, what do were want to do here?  We want to say \"while (!please_stop)\" keep going around.","width":404.18181824684143},{"text":"And finally, let's have a global variable...there we go.","width":281.18181824684143},{"text":"We know in C that our global variables are initialized to zero.","width":239.18181824684143},{"text":"Let's run this and see what mistakes we made.","width":128.18181824684143},{"text":"(waiting)","width":642.1818182468414},{"text":"Ok, alright.  Whoops, we didn't declare the thread id.  So, what's that?  \"pthread_id\" I believe.","width":512.1818182468414},{"text":"(waiting)","width":869.1818182468414},{"text":"(grumbling)","width":113.18181824684143},{"text":"","width":218.18181824684143},{"text":"Oh, I just put a \"t\"","width":181.18181824684143},{"text":"","width":227.18181824684143},{"text":"How about that?","width":71.18181824684143},{"text":"","width":284.18181824684143},{"text":"Yay!.  Ok, alright.","width":127.18181824684143},{"text":"","width":54.18181824684143},{"text":"So we print \"HI!\".  Our main thread sleeps for a bit and then calls \"please_stop\"","width":409.18181824684143},{"text":"And our little thread that is going around the loop says \"oh, look at that global variable, I better stop\".","width":224.18181824684143},{"text":"Now I use global variables for a quick demonstration. Obviously we could put that inside a struct.","width":257.18181824684143},{"text":"We could pass something to the working thread inside here and we could use that to communicate with the other struct","width":653.1818182468414},{"text":"so we could have some control if we agree to share some memory.","width":256.18181824684143},{"text":"","width":90.18181824684143},{"text":"Now I can hear my CPU fan going.","width":173.18181824684143},{"text":"(fan noises)","width":117.18181824684143},{"text":"Do you hear that?  Good.","width":213.18181824684143},{"text":"Because the CPU is constantly doing that little while loop in the main thread.","width":230.18181824684143},{"text":"So let's do something better than that.","width":232.18181824684143},{"text":"","width":3.1818182468414298},{"text":"What we would like to do of course is wait for the other thread to finish.","width":252.18181824684143},{"text":"One way to do that is to say \"pthread_join\" and say \"here is the thread that we want to finished\"","width":370.18181824684143},{"text":"And we would like to know it's exit value.","width":197.18181824684143},{"text":"There we go.  We can find out what it is.","width":153.18181824684143},{"text":"Alright, here is my exit value and we can say return something here","width":588.1818182468414},{"text":"So what when we call \"pthread_join\" again, this second thread is going to not require anymore CPU time.","width":441.18181824684143},{"text":"Because not it is waiting for the other thread to exit.","width":256.18181824684143},{"text":"","width":398.18181824684143},{"text":"So that is one way to write this program.","width":127.18181824684143},{"text":"","width":153.18181824684143},{"text":"I can also talk about \"pthread_exit\"","width":642.1818182468414},{"text":"Let's write a very dangerous program.","width":196.18181824684143},{"text":"This is the \"_killer_monsters_take_over_the_world\".","width":782.1818182468414},{"text":"You will agree that we probably should not run that function, yes?","width":373.18181824684143},{"text":"Well that's okay, because I am going to call pthread_exit before it.","width":497.18181824684143},{"text":"And I do not need a return value.","width":237.18181824684143},{"text":"\"pthread_exit()\" says \"hey, I am the chef and I am done.  I'm leaving the kitchen for good\".","width":615.1818182468414},{"text":"If you call pthread_exit then, you are saying \"this is the thread's return value\" and no more code will be run by that thread.","width":597.1818182468414},{"text":"\"_killer_monsters_take_over_the_world\" will never happen.","width":193.18181824684143},{"text":"","width":269.18181824684143},{"text":"This stuff about having \"exitvalue\" and \"pthread_join\" in this case, that is never going to happen.","width":437.18181824684143},{"text":"\"pthread_exit()\" simply means \"I am done\".","width":323.18181824684143},{"text":"","width":20.18181824684143},{"text":"A little bit of knowledge for you, if you call \"pthread_exit()\" inside the main thread, the original thread, like we did just did","width":561.1818182468414},{"text":"the rest of the process will actually keep on running.","width":193.18181824684143},{"text":"The pthread library actually says \"you know what?  I am actually not going to quit this process immediately","width":227.18181824684143},{"text":"I am going to wait until ALL threads have finished\".","width":255.18181824684143},{"text":"","width":326.18181824684143},{"text":"Let's prove that.  Let's call \"pthread_exit()\" here.","width":320.18181824684143},{"text":"","width":89.18181824684143},{"text":"I'm going to comment this out so it compiles.","width":193.18181824684143},{"text":"","width":163.18181824684143},{"text":"Instead I will call ... nah, this is good.","width":514.1818182468414},{"text":"So then, what will my program do now?","width":320.18181824684143},{"text":"","width":200.18181824684143},{"text":"That's right, it is just going to keep printing \"HI!\".","width":146.18181824684143},{"text":"It is not going to take over the world.","width":283.18181824684143},{"text":"Instead what we did is we created another thread and our main thread exited.","width":448.18181824684143},{"text":"","width":254.18181824684143},{"text":"So, let's go back to this.","width":128.18181824684143},{"text":"","width":157.18181824684143},{"text":"Let's answer some of these questions.","width":143.18181824684143},{"text":"What is the difference between exit and pthread_exit?","width":191.18181824684143},{"text":"What does exit do?","width":260.18181824684143},{"text":"It kills the whole process.","width":75.18181824684143},{"text":"Yes, it says \"Hey, this process is done and here's the exit value.","width":380.18181824684143},{"text":"By the way, it also does a little few extra things for you.","width":195.18181824684143},{"text":"If you've written to the C output buffers, like stdout and stderr or anything else","width":303.18181824684143},{"text":"those get flushed and those file streams get closed for you.","width":192.18181824684143},{"text":"","width":420.18181824684143},{"text":"So if you call exit, all of your threads are gone.","width":353.18181824684143},{"text":"\"We're done\"","width":232.18181824684143},{"text":"Your process is done.  And it doesn't matter which pthread calls exit().","width":382.18181824684143},{"text":"You are saying \"This whole process is done. Wrap up the shop, close all of the kitchens.  We're gone.\"","width":390.18181824684143}],
// Part 2
[{"text":"pthread_exit that just means no more for this thread","width":697.1818182468414},{"text":"that particular chef has walked out of the kitchen","width":259.18181824684143},{"text":"and will never come back","width":157.18181824684143},{"text":"so before you call pthread_exit","width":141.18181824684143},{"text":"make sure your thread has cleaned up any resources that it might have acquired","width":369.18181824684143},{"text":"questions?","width":169.18181824684143},{"text":"yes?","width":268.18181824684143},{"text":"ok so umm when a thread finishes","width":352.18181824684143},{"text":"it can finish in two different ways, it can..","width":275.18181824684143},{"text":"call pthread_exit","width":243.18181824684143},{"text":"or can return","width":73.18181824684143},{"text":"in fact, they are actually equivalent","width":490.18181824684143},{"text":"so this is a way to send some information back to the rest of the process","width":373.18181824684143},{"text":"and we had an example down here calling pthread_join","width":207.18181824684143},{"text":"and saying \"what did that thread say at the end?\"","width":173.18181824684143},{"text":"and you don't have to use this mechanism","width":202.18181824684143},{"text":"is actually common to make a struct and pass that to pthread_create","width":572.1818182468414},{"text":"That's the purpose of pthread_exit and this return here is that you can get the exit value","width":675.1818182468414},{"text":"let's say that you wanted more than just a void pointer","width":260.18181824684143},{"text":"what we can do here is","width":255.18181824684143},{"text":"define some sort of struct","width":190.18181824684143},{"text":"umm i won't bother the struct definition","width":180.18181824684143},{"text":"i'll say hey, let's have some memory and i'll call it \"my to do struct\"","width":589.1818182468414},{"text":"ok so","width":205.18181824684143},{"text":"calloc( sizeof(todo)) and i just need one of them","width":339.18181824684143},{"text":"and then i would set..oops","width":396.18181824684143},{"text":"set things up on this","width":91.18181824684143},{"text":"hey like..umm..","width":120.18181824684143},{"text":"you know.. start.. blah blah blah","width":200.18181824684143},{"text":"please stop..umm zero","width":168.18181824684143},{"text":"exit value in here, etc.","width":93.18181824684143},{"text":"so i could use this struct","width":97.18181824684143},{"text":"because both my main program and my thread that knows about this struct","width":236.18181824684143},{"text":"cause i can..","width":143.18181824684143},{"text":"pass in it","width":160.18181824684143},{"text":"so that allows me to assemble a whole body of information that i want to pass to the other thread","width":560.1818182468414},{"text":"ok let's get back to our little questions here","width":177.18181824684143},{"text":"why would you call pthread_exit in your main method","width":232.18181824684143},{"text":"well, this is typically done in kind of simple or small programs","width":213.18181824684143},{"text":"where we say most of the work is actually going to happen by all of my other threads","width":255.18181824684143},{"text":"and my program can finish after all of those other threads have finished","width":485.18181824684143},{"text":"so we would do this if there was no clean up in the main thread","width":652.1818182468414},{"text":"and we'll be happy just to wait","width":330.18181824684143},{"text":"until","width":132.18181824684143},{"text":"all thread are done","width":313.18181824684143},{"text":"so this is equivalent of saying hey last person out of the kitchens turn out the lights","width":315.18181824684143},{"text":"and the process will finish","width":253.18181824684143},{"text":"so I gave you two ways that a thread can be terminated just now, I said it could return from its function","width":494.18181824684143},{"text":"so.. we could .. return a value and i gave you that 0x12345 thing","width":375.18181824684143},{"text":"so..","width":158.18181824684143},{"text":"if you return from the function that was originally started by the thread","width":223.18181824684143},{"text":"i also showed you that you could call pthread_exit","width":336.18181824684143},{"text":"but apparently there's four ways","width":218.18181824684143},{"text":"What other two ways might a thread exit?","width":219.18181824684143},{"text":"and i have mentioned them already in this lecture","width":671.1818182468414},{"text":"yes!","width":142.18181824684143},{"text":"yes! if someone calls pthread_cancel() on that chef","width":218.18181824684143},{"text":"they're done, okay yes","width":103.18181824684143},{"text":"so if a thread is in a cancelled state, it may exit","width":358.18181824684143},{"text":"and how else might a pthread ... yes?!","width":242.18181824684143},{"text":"yeah, the whole process dies","width":117.18181824684143},{"text":"so if another thread for example, segfaults","width":173.18181824684143},{"text":"that's it for all of your processes","width":143.18181824684143},{"text":"segfaults if like blurring up the entire chemistry lab or the entire kitchen","width":343.18181824684143},{"text":"the whole thing is gone","width":68.18181824684143},{"text":"the whole process is gone","width":110.18181824684143},{"text":"we need a valid process in order for our threads to finish","width":263.18181824684143},{"text":"let's talk about pthread_join","width":131.18181824684143},{"text":"it actually has two purposes.. we can wait ","width":363.18181824684143},{"text":"for a thread to finish","width":412.18181824684143},{"text":"and get its exit value","width":473.18181824684143},{"text":"the other thing it does is..free up resources","width":733.1818182468414},{"text":"okay what resources might that be?","width":219.18181824684143},{"text":"well","width":42.18181824684143},{"text":"every thread has some space in its process memory for its stack","width":418.18181824684143},{"text":"and every thread has an exit status, an exit value","width":367.18181824684143},{"text":"the library is going to keep them around","width":200.18181824684143},{"text":"because who knows, someone will call pthread_join on the thread","width":246.18181824684143},{"text":"so we can only release those resources after pthread_join has been called","width":426.18181824684143},{"text":"if you're writing a short simple program and you don't about these things then fine","width":239.18181824684143},{"text":"but when you want to write longer running programs that don't have resource leaks","width":227.18181824684143},{"text":"you should call pthread_join on every process, i mean, every thread yes","width":851.1818182468414},{"text":"so pthread_cancel, you're giving a chef another thread the marching order to say hey leave","width":492.18181824684143},{"text":"okay. I'm canceling you, i don't want any more of your work","width":152.18181824684143},{"text":"I'm canceling..you know that stuff i told you to do? don't do it anymore, okay?","width":388.18181824684143},{"text":"so..","width":77.18181824684143},{"text":"pthread_exit says","width":137.18181824684143},{"text":"i'm done","width":83.18181824684143},{"text":"and by the way, here's my result","width":68.18181824684143},{"text":"and i ..","width":44.18181824684143},{"text":"so it's an act by the thread that says i don't want to do anymore work","width":415.18181824684143},{"text":"yes?","width":493.18181824684143},{"text":"yes!","width":236.18181824684143},{"text":"oh okay, right","width":259.18181824684143},{"text":"the point i was making here is..","width":245.18181824684143},{"text":"that you know that when you return from main, the process is done","width":233.18181824684143},{"text":"you know that when you call exit, the process is done","width":388.18181824684143},{"text":"okay","width":57.18181824684143},{"text":"pthread_exit has a supple part of the specification","width":319.18181824684143},{"text":"that says the main threads is finished, but the process continues until all threads are finished","width":1571.1818182468414},{"text":"corrrrrrect! yes","width":113.18181824684143},{"text":"so, if i called pthread_exit() after printing  - eh","width":445.18181824684143},{"text":"hi","width":62.18181824684143},{"text":"right? now the process is done","width":204.18181824684143},{"text":"so it's the last chef out that turns out the lights to the whole process","width":315.18181824684143}],
// Part 3
[{"text":"So, i have thrown pthread_exit at you, pthread_join, pthread_cancel, etc","width":575.1818182468414},{"text":"This is an exposure to the words in the vernacular, this stuff is not going to sink until you play with it","width":342.18181824684143},{"text":"So, i encode to play a lot with these things and to write little programs and see what happens","width":732.1818182468414},{"text":"Okay, if we don't call pthread_join on a thread, we get a resource leak","width":488.18181824684143},{"text":"And eventually","width":162.18181824684143},{"text":"We wouldn't be able to make anymore threads","width":311.18181824684143},{"text":"We can't reuse the same memory address from the original stack","width":210.18181824684143},{"text":"We are still hanging on to the exit value so we are using up more memory","width":831.1818182468414},{"text":"Okay so the next thing","width":403.18181824684143},{"text":"Take a look at this kind of typical kind of code here","width":445.18181824684143},{"text":"And the...this..something wrong with it","width":289.18181824684143},{"text":"What question is: What?","width":98.18181824684143},{"text":"And how could we fix it? How could we make it valid?","width":228.18181824684143},{"text":"Now your first instinct might be .. HOLD ON IT TAKES A VOID STAR POINTER","width":220.18181824684143},{"text":"That's okay","width":82.18181824684143},{"text":"All i'm doing is passing in a pointer","width":224.18181824684143},{"text":"To start","width":116.18181824684143},{"text":"So that..","width":126.18181824684143},{"text":"My new thread can read a value","width":165.18181824684143},{"text":"Presumably, this 42","width":293.18181824684143},{"text":"So, what do you think might be wrong with that?","width":195.18181824684143},{"text":"Just take a moment to talk it over with your neighbors or neighbor and see how we might fix it","width":507.18181824684143},{"text":"I'll walk around in case you got any questions - [silence]","width":6393.181818246841},{"text":"What did your neighbor say?","width":105.18181824684143},{"text":"What did YOUR neighbor say?","width":100.18181824684143},{"text":"*whisper from student*  - It was out of scope","width":95.18181824684143},{"text":"Ok we got a scope problem","width":177.18181824684143},{"text":"Yeah, so, first of all there is no security","width":290.18181824684143},{"text":"It's okay for one thread to access another thread's stack, it's not like we're going to get a segmentation fault","width":545.1818182468414},{"text":"The hardware doesn't know or doesn't care two threads are stomping over each other's stacks","width":558.1818182468414},{"text":"But we do have a scoping problem","width":183.18181824684143},{"text":"And it's this: we're passing in the address of start","width":327.18181824684143},{"text":"And start, as we know, lives on the stack","width":187.18181824684143},{"text":"How long is that address going to be valid for?","width":280.18181824684143},{"text":"Answer: Not very long, we're about to return from this function","width":353.18181824684143},{"text":"So, when will my funct start?","width":344.18181824684143},{"text":"Answer: I don't know, it's up to the kernel to eventually decide get around this other thread","width":523.1818182468414},{"text":"Maybe we'll put this first thread on pause beforehand and give pro to the new thread","width":283.18181824684143},{"text":"Or maybe this new thread will start much later on .. 100 milliseconds time","width":443.18181824684143},{"text":"By which point, what will be at this particular address?","width":249.18181824684143},{"text":"Could be anything right?","width":81.18181824684143},{"text":"It could be our original value, it could be being reused by a completely different function at this point","width":409.18181824684143},{"text":"So our problem is with time","width":115.18181824684143},{"text":"Our problem is that we gave the address something and that variable is no longer in scope","width":457.18181824684143},{"text":"Alright, how can we fix this?","width":130.18181824684143},{"text":"Well","width":66.18181824684143},{"text":"One trick is to say: I'm going to put this magic word static in here","width":375.18181824684143},{"text":"And if I do that, it's no longer an automatic variable","width":153.18181824684143},{"text":"It lives just once as a global variable inside my whole process","width":498.18181824684143},{"text":"But that is pretty heavy handed","width":406.18181824684143},{"text":"Alright, now I only use this start variable and I better keep its value until i'm sure another thread is run","width":809.1818182468414},{"text":"How else can we fix it? We could use malloc()","width":357.18181824684143},{"text":"And allocate some memory in the heap","width":307.18181824684143},{"text":"We would have run into the same problem if we immediately called free","width":387.18181824684143},{"text":"In this thread","width":135.18181824684143},{"text":"Because we would have created some heap memory","width":216.18181824684143},{"text":"Passed a pointer to it and immediately freed it. OH NO WHOOPS","width":223.18181824684143},{"text":"I didn't give my new thread any time to actually read that memory","width":357.18181824684143},{"text":"So if you do use malloc() ","width":213.18181824684143},{"text":"Don't immediately free it, instead..","width":228.18181824684143},{"text":"Let this function","width":169.18181824684143},{"text":"Free it after it runs","width":239.18181824684143},{"text":"One thread can create heap memory and another thread can actually free it","width":213.18181824684143},{"text":"That's perfectly fine, they all live inside the same process","width":293.18181824684143},{"text":"And there's one heap","width":357.18181824684143},{"text":"I think another way this might be valid is before we turning","width":335.18181824684143},{"text":"We could call pthread_join","width":299.18181824684143},{"text":"On the thread","width":194.18181824684143},{"text":"If we did that, we know that the new thread that is going to run my funct will actually finish before this function returns","width":684.1818182468414},{"text":"So we've solved our timing problem","width":128.18181824684143},{"text":"We've made sure that we don't finish that this variable doesn't go out of scope","width":326.18181824684143},{"text":"Until the other thread has finished","width":216.18181824684143},{"text":"We have just encapsulated from a time point of view","width":221.18181824684143},{"text":"The running time of this other function and made sure that the running is within the scope of this start thread's function","width":516.1818182468414}],
// Part 4
[{"text":"Yes","width":398.18181824684143},{"text":"Yeah","width":155.18181824684143},{"text":"Ok right. So what happens if you put static inside a function?","width":271.18181824684143},{"text":"Yes, so the variable itself lives forever, but static makes it a secret variable.","width":413.18181824684143},{"text":"yes the scope of it, the name start, is only available inside that function","width":403.18181824684143},{"text":"but the actual storage of that variable is for the lifetime of the process","width":300.18181824684143},{"text":"thats like one of those awful interview questions","width":200.18181824684143},{"text":"hey whats on page 37 of the C standard?","width":156.18181824684143},{"text":"i dont know. I didn't write it","width":323.18181824684143},{"text":"Knowing precisely how static works is an exercise left for the advanced C programmer","width":424.18181824684143},{"text":"But by defining static, the life time of the memory is for the duration of the process. other questions? yes?","width":1094.1818182468414},{"text":"To cast an int to a void pointer, no that's the other way of solving, if you're sure that a void pointer has enough bits to represent the parameter you're trying to pass in","width":883.1818182468414},{"text":"You can also just say, look void","width":255.18181824684143},{"text":"Let me choose a different value like 71","width":272.18181824684143},{"text":"That means, I gotta type as a pointer to some memory","width":212.18181824684143},{"text":"I'm not going to say what kind of pointer yet","width":140.18181824684143},{"text":"Im going to pass in this value 71","width":223.18181824684143},{"text":"you can do that providing you write the code to the other end to simply cast it","width":330.18181824684143},{"text":"if you attempt to read at memory 71","width":261.18181824684143},{"text":"oops, you'll get a segfault","width":516.1818182468414},{"text":"I will not talk about that right now, but yes, that's another way of solving this problem","width":630.1818182468414},{"text":"How about this one?","width":247.18181824684143},{"text":"So what I want to do here is that I want to send","width":261.18181824684143},{"text":"my value of i from 0 to 9 to some new threads","width":595.1818182468414},{"text":"So each one can get a value","width":266.18181824684143},{"text":"Why does this code not work?","width":280.18181824684143},{"text":"So take a moment with your neighbor to review it and I'll start writing it up as a demonstration - [silence]","width":6108.181818246841},{"text":"Ok so here's a version of that code","width":432.18181824684143},{"text":"The first thing we might comment is what might this code print out?","width":213.18181824684143},{"text":"It might jsut print out hello world and nothing else","width":152.18181824684143},{"text":"it could be that we return from our main before those other threads ahave  a chance to start up","width":399.18181824684143},{"text":"Before those chefs can be employed and waltz into our kitchens, the process itself is exited because we've returned from main","width":579.1818182468414},{"text":"alright, how should we stop that?","width":124.18181824684143},{"text":"Well we could just call pthread_join on every one of those ids","width":232.18181824684143},{"text":"But you and I know we can call pthread_exit() here and leave it up to the system to finish a process when all the other threads have exited. ok right, so let's run this","width":1308.1818182468414},{"text":"And this is the output we get","width":223.18181824684143},{"text":"Im printing out the value that's actually sent to each new thread and also the actual pointer we've got as well","width":705.1818182468414},{"text":"the first comment is look at all these numbers! They're all the same","width":245.18181824684143},{"text":"And it seems to work.","width":125.18181824684143},{"text":"If we only tested this with 6 threads, we think our code is fantastic! look at the all the threads I'm starting","width":368.18181824684143},{"text":"But instead I get 0,1,2,3,4,5 and four 10's. Why? yes?","width":1343.1818182468414},{"text":" So the for loop finished","width":286.18181824684143},{"text":"So, for the early threads, what happened?","width":169.18181824684143},{"text":"well we ran our loop, we start a thread. well we ran our loop, we start a thread. well we ran our loop, we start a thread","width":360.18181824684143},{"text":"For the remaining threads, it so happened we went around the loop and those threads did not start. ","width":303.18181824684143},{"text":"They weren't scheduled on the CPU","width":177.18181824684143},{"text":"They're going to be. It's just they didn't start straight away","width":341.18181824684143},{"text":"Eventually they do start","width":193.18181824684143},{"text":"And theyre all given the same address","width":190.18181824684143},{"text":"the address of i","width":129.18181824684143},{"text":"it just happens to be a stack variable in my main thread","width":211.18181824684143},{"text":"by the time they started, we've already incremented the value","width":250.18181824684143},{"text":"it had already been incremented up to 10","width":439.18181824684143},{"text":"and we saw that they really are looking at the same variable because we've printed out the variable that was given to us","width":464.18181824684143},{"text":"and that address, 7fe blah, blah, blah","width":405.18181824684143},{"text":"is just part of the stack of the main thread","width":523.1818182468414},{"text":"So let's to fix it","width":188.18181824684143},{"text":"We could make a struct for each of our threads using malloc()","width":311.18181824684143},{"text":"Or we can make an array in global","width":159.18181824684143},{"text":"but let's do the trick that you suggested","width":236.18181824684143},{"text":"lets just cast this","width":225.18181824684143},{"text":"to a void pointer","width":170.18181824684143},{"text":"because we're C programmers and we know what we're doing. said every C programmer. and what do we get? whoops","width":1019.1818182468414},{"text":"Absolute garbage, yes","width":120.18181824684143}],
// Part 5
[{"text":"Ok, so this time, yeah, look each address","width":417.18181824684143},{"text":"that was given to our program","width":133.18181824684143},{"text":"is valid. But we shouldn't try to dereference it. ","width":246.18181824684143},{"text":"We should actually just try to say, ","width":187.18181824684143},{"text":"look, I know you gave me a pointer to","width":104.18181824684143},{"text":"some memory, but I was kidding.","width":119.18181824684143},{"text":"i'm not actually interested in ","width":88.18181824684143},{"text":"using as a pointer to some memory","width":91.18181824684143},{"text":"I just want to cast it back.","width":75.18181824684143},{"text":"Change that current bit pattern","width":77.18181824684143},{"text":"you got as a pointer to a bit pattern that","width":145.18181824684143},{"text":"now represents an int.","width":81.18181824684143},{"text":"Do not pass go.","width":74.18181824684143},{"text":"Do not attempt to read memory at that location","width":173.18181824684143},{"text":"otherwise bad things will happen","width":91.18181824684143},{"text":"So, here's another way of actually getting the right results.","width":223.18181824684143},{"text":"So there we go. Now we have all of our numbers","width":237.18181824684143},{"text":"And something you might notice thats surprising","width":171.18181824684143},{"text":"is that it doesn't count up","width":187.18181824684143},{"text":"0 8 7 6 5 4 3 2 1 9","width":360.18181824684143},{"text":"Why?","width":547.1818182468414},{"text":"Does someone dare speak that hasn't spoken yet in CS241?","width":517.1818182468414},{"text":"Yes, in the back!","width":329.18181824684143},{"text":"Yes, thank you.","width":35.18181824684143},{"text":"There's no guarantee when that thread is going to stop.","width":182.18181824684143},{"text":"and in fact it might be paused half way","width":110.18181824684143},{"text":"the scheduler might say ","width":80.18181824684143},{"text":"actually, I know I was going to give you the ","width":116.18181824684143},{"text":"kitchen","width":52.18181824684143},{"text":"I was going to give you the CPU, but actually I've decided to give the CPU to another thread, so ","width":351.18181824684143},{"text":"we don't know when they're going to start, we don't know how much time they're going to get","width":233.18181824684143},{"text":"because the scheduler is part of the operating system","width":275.18181824684143},{"text":"is trying to make best use of all possible resources","width":191.18181824684143},{"text":"so we have something running but we don't necessarily know in what order those threads","width":193.18181824684143},{"text":"are going to run. yes?","width":472.18181824684143},{"text":"if I had 10 CPUs it could be that every thread is given a separate CPU","width":383.18181824684143},{"text":"of course it depends on what else is happening on your system, right? it could be that I've SSH'd into your box, it could be that your tablet is also using one of those threads update the screen at the same time. maybe check your email, etc.","width":748.1818182468414},{"text":"so it is possible to try to schedule threads on different CPUs, but in practice it doesn't always happen the way that you actually specify it. yes?","width":1068.1818182468414},{"text":"yes, you can set the priority of different threads. anyway, enough of this, let's have a look at page two ","width":1833.1818182468414},{"text":"there are various C library functions that you've probably played with already like strtok() when we wrote our shell, or \"hey I actually wanna know what the error number is as a string\"","width":893.1818182468414},{"text":"and if you read the man pages of these, you'll say \"oh they're not thread safe\". ok everythings broken. what does it mean that not everythings thread safe? it means here be demons. here's where you can write code that looks fine, pases code reviews, passes simple tests and breaks when you put it into the next hart monitor","width":1559.1818182468414},{"text":"so let's see an example of this","width":283.18181824684143},{"text":"here's some kind of typical code, let's find out if it's thread safe or not","width":562.1818182468414},{"text":"and perhaps you could figure out what might happen if this little two message function was called using multiple threads. so what might happen if two threads happened to call this function at the same time? why's it not safe? why could bad things happened?","width":6748.181818246841},{"text":"yes?","width":123.18181824684143},{"text":"[silence]","width":639.1818182468414}],
// Part 6
[{"text":"So if you don't have enough CPUs to run all the threads, the scheduler says \"I've got this stuff to do\", and puts them in a queue. And we'll  be talking about that when we talk about schedulers.","width":879.1818182468414},{"text":"Every thread, every process from the scheduler's point of view is either in a runnable state or running, or finished, or about to start so part of its job is to keep track of that","width":827.1818182468414},{"text":"Okay so we've got a little function. Its job is to turn a number into a string, and we wrote some implementation, we've got some memory, and it's not thread safe. Why? Yes, at the back?","width":1559.1818182468414},{"text":"Yes! So if you make something static there can be only one. This is the highlight of the variables. So we've got a single piece of memory, called result. And all threads if they call this will therefore be writing over the same piece of memory. So if you have two threads that are doing this about the same time then they're going to corrupt each other's result. It's like you and I trying to share a secret piece of paper, and I come back to it and I'm like \"what's this writing on it? I didn't write it before.\" We need to make sure that doesn't happen in our program.","width":2508.1818182468414},{"text":"So we've got a problem here. How can we fix it? I know! Let's just make a temporary variable, an automatic variable, and be done. Yes? It's Friday, the best code is always written on Fridays. It's actually not true. You can actually do data analytics on check-ins and see how many bugs are generated by code on Fridays. Fridays and Monday mornings are the worst. So what mistake have we made now? Okay yes we are returning the pointer to some local memory and after the variable goes out of scope that is not longer valid, that area on the stack is going to be reused for other functions we call","width":3186.1818182468414},{"text":"So we can't just do that","width":119.18181824684143},{"text":"Okay, so how can we fix this? Well one thing we can do is not use any memory inside here at all. Instead we'll change this to take a pointer to some external memory.","width":1187.1818182468414},{"text":"And if you look at the c-library, you'll actually see this has happened over time. There were early versions of functions which just declared things, say, using static. The nice thing about that is it's cheap. We don't have to wait for malloc() to find us memory. ","width":1007.1818182468414},{"text":"But the bad news is that it's not thread safe. So later versions of similar functions allow us to pass in a pointer to some memory that can be used.  ","width":919.1818182468414},{"text":"So I'll come back to twelve in a moment. First of all, there's a quiz on Monday!","width":522.1818182468414},{"text":"What? What? Yes, it will be about fork(), exec(), basic synchro stuff and I/O. ","width":678.1818182468414},{"text":"Here is a hint about some stuff that might be on the quiz, and you can find references to all these things inside the wikibook.","width":1246.1818182468414},{"text":"Is it comprehensive? I'm not quite sure what you mean by that. Will there be things on there which are challenging questions? Absolutely, yeah. They will include gotchas so know the difference between sizeof() a type and sizeof() pointer of a type. It will include code that is good and bad, you are expected to notice when it is bad. ","width":1462.1818182468414},{"text":"I have a habit of writing multiple choice questions which state things like \"hey which one of the following statements is not true?\" So that means you have to recognize false statements which are not true","width":659.1818182468414},{"text":"Right, let's just finish of with these then. The advantage of threads over forking processes: Hey, they share memory, so it is easy for us to communicate between threads. Very very easy","width":1135.1818182468414},{"text":"They're also very cheap. And you too can create a new thread, just call pthread_create()! It's trivial, it's easy! So can I fork a process with multiple threads? ","width":1060.1818182468414},{"text":"Yes, but don't. ","width":668.1818182468414},{"text":"Unless you know what you're doing. Unless you're really sure you know what you're doing. Unless you're crazy and you're really sure you know what you're doing","width":376.18181824684143},{"text":"And you want to maintain this code for the rest of your life","width":146.18181824684143},{"text":"So here's why: when you do this, the only thread which survives this cloning is--you know how I said \"Fork, you're gonna clone everything\"? I lied! --the one thread that calls fork() continues. ","width":914.1818182468414},{"text":"In the copy, in the clone. All of the other threads have disappeared. They no longer run","width":460.18181824684143},{"text":"So now all of the other threads in the clone that were doing things have just disappeared. They may have been in the middle of calling malloc(). They may have been in the middle of doing something important. And now the good work that they were doing has disappeared. So that's why in practice it's extremely difficult to write good programs that fork() AFTER they've created more than one running thread.","width":1569.1818182468414},{"text":"So yes, if you want a world of pain.  Otherwise, try not to.","width":375.18181824684143},{"text":"So let's finish with this: condition variables, semaphores, and mutexes. ","width":297.18181824684143},{"text":"This is the meat of the couse","width":381.18181824684143},{"text":"This is the cool stuff. This is the stuff that is going to make your head explode","width":276.18181824684143},{"text":"These are the primitives we are going to learn about so we can communicate with our threads.","width":433.18181824684143},{"text":"So we can make sure that our threads pause while another thread finishes its work","width":285.18181824684143},{"text":"So that we can make sure that threads don't step on each other's memory structures.","width":323.18181824684143},{"text":"So that we can have ten threads write to a single structure and know that the result is valid at the end. ","width":408.18181824684143},{"text":"So that we can have threads that don't fill up buffers then spin and use up CPUs, instead intelligently use the CPU","width":571.1818182468414},{"text":"And we'll be talking about those next week. Have  a wonderful weekend.  Look out for an email from me about the next assignment and the MP. Thank you very much and I'll be here for questions. For those of you that forgot to write down your exam key on the last exam we can find your exam script right now. I know there was like two of you. One percent of the class failed to write down their exam key. So let's fix that","width":1663.1818182468414}],
