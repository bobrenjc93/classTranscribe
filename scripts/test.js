[ '../captions/first/Full_Lecture_Video_13_Part_3-mliu.json',
  '../captions/first/Full_Lecture_Video_13_Part_4-mliu.json',
  '../captions/first/Full_Lecture_Video_14_Part_1-vraj.json',
  '../captions/first/Full_Lecture_Video_14_Part_3-vraj.json',
  '../captions/first/Full_Lecture_Video_14_Part_4-jpand2.json' ]
// Part 3
[{"text":"gets in your brain Ok","width":192},{"text":"Solution No2","width":64},{"text":"Get that up there","width":256},{"text":"OkaY!!","width":64},{"text":"we've added semphores and locks","width":768},{"text":"I have two sempahores, S1 and S2","width":256},{"text":"S1 represents my spaces","width":256},{"text":"and my ring buffer","width":192},{"text":"and S2 represents the number of items the i've put in my ring buffer","width":448},{"text":"if you think about it","width":128},{"text":"If i have space, i can put htings in it","width":192},{"text":"if i have items in my queue i can take thigns out","width":256},{"text":"what happens to a semapho","width":704},{"text":"when you do sem_wait","width":128},{"text":"What does it do to the value of the sempah","width":320},{"text":"oh did you guys talk about counting semphores?","width":576},{"text":"YEAH!!!","width":128},{"text":"if you noticed that we initialized one of these to 16 and one of these to 0","width":192},{"text":"these are counting semphores","width":128},{"text":"not just mutexes","width":128},{"text":"counting semaphores","width":256},{"text":"if i initalized it to 16, what can i do","width":64},{"text":"i can call sem_wait ","width":192},{"text":"how many times?","width":64},{"text":"15 ","width":64},{"text":"and I can call sem_post ","width":192},{"text":"if i'm starting sem_pos 16 times.","width":256},{"text":"so it's giving me this ability to call sem_wait, m_queue 16 times","width":384},{"text":"or dequeue 16 items","width":64},{"text":"But that's gonna be my counters to help me decided","width":448},{"text":"how many items i have, and how many spaces i have","width":192},{"text":"So my sem_wait on this one is gonna try to decrement ","width":512},{"text":"and sem_post, increment","width":192},{"text":"sem_wait increment","width":512},{"text":"Sorry","width":64},{"text":"back","width":64},{"text":"decrement","width":128},{"text":"sem_post","width":64},{"text":"increment","width":64},{"text":"so take a minute and look at this, and I can tell you this doesn't work","width":768},{"text":"maybe you can tell me why. Talk to you neighbors","width":320},{"text":"say that one more time","width":1152},{"text":"Yes","width":512},{"text":"So i have initialized it to 0 but my max is 16","width":704},{"text":"s2, i've initialized it to 0 with a max of 0","width":448},{"text":"Let me double check the actual interface of Sem_wait while you're looking at this","width":1728},{"text":"Sorry, i take that back. Ignore the first zero. S1 is the first zero","width":2432},{"text":"S1 is the semaphore, the zero is just wether they shared the the cross processes","width":512},{"text":"S1 is initalized to 16 and S2 to 0","width":512},{"text":"What's wrong","width":4544},{"text":"Yeah?","width":256},{"text":"so we're calling sem_wait and sem_post on the same sempahore","width":1024},{"text":"my values are gonna change","width":256},{"text":"i'm gonna decrement and increment it right away","width":384},{"text":"hwo is gonna affect my dequeue","width":320},{"text":"yeah?","width":256},{"text":"i'm going to call sem_wait on s1, which initialized to 16, that's good","width":768},{"text":"i have 16 spaces. I'm gonna put something in. I'm gonno do sem_post and that's gonna increment it, and im gonna be forever be able to put things int","width":576}],
// Part 4
[{"text":"what was S2 intialized to ? 0","width":256},{"text":"which is Okay, there's nothing in there","width":384},{"text":"but","width":64},{"text":"i'm never changing it","width":256},{"text":"but i'm waiting forever","width":256},{"text":"my dequeue is never getting into anything","width":576},{"text":"and my enqueu is gonan run on forever","width":384},{"text":"so if we look at our requirements","width":64},{"text":"one of the things we asked for is that have we stopped overflow from happening","width":256},{"text":"is there overflow in this example","width":576},{"text":"what was the definition of overflow","width":320},{"text":"overwriting good data with something i'm trying to put in","width":576},{"text":"do we have overflow here? Yes, because the writer is going around writing writing and writing","width":448},{"text":"do you have underflow? Not really","width":384},{"text":"Why not?","width":64},{"text":"yes because dequeue can never really take out anything","width":192},{"text":"so you can really have underflow if you can't take anything out","width":192},{"text":"so this didn't work","width":320},{"text":"what else do you want to say about this","width":256},{"text":"do we have a race condition?","width":128},{"text":"is there any race conditions in here?","width":384},{"text":"no ","width":128},{"text":"why not?","width":64},{"text":"we've got our locks. So we can only have one enqueue in there at the same time","width":256},{"text":"and our dequeue is never going anywhere so it doesn't really matter","width":320},{"text":"actually it's gonna acquire the lock and it's gonna wait, and it's gonna block everybody from doing anything","width":832},{"text":"once anyone trying to call enqueue, the whole system is gonna come to a standstill","width":64},{"text":"so, we do have a deadlock","width":384},{"text":"and we'll talk more about deadlock on wednesday","width":320},{"text":"so, lets' move on","width":512},{"text":"we still have s1 and s2","width":640},{"text":"still initialized to 16 and 0","width":128},{"text":"so this is still spaces","width":192},{"text":"and this is still items","width":256},{"text":"what are the problems that you might noticed before from our prior one","width":192},{"text":"no matter what the enqueue did, it only affected S1","width":768},{"text":"and no matter what the dequeue did, it only affected S2","width":384},{"text":"so there was no coordination between the Enqueue and the Dequeue","width":64},{"text":"so i need to be able to tell the reader the dequeue that there's something to take out","width":576},{"text":"so for my next solution, i've mixed it up a bit","width":384},{"text":"so now i do a sem_wait on s2","width":256},{"text":"and a sem_post on s1","width":128},{"text":"and a sem_wait on S1 and a sem_post on s2","width":320},{"text":"did that work","width":320},{"text":"Okay did i fix my problem?","width":2688},{"text":"No oh","width":320},{"text":"what did i do ths itme","width":192},{"text":"only dequeue could work this time","width":192},{"text":"why can't enqueue work","width":384},{"text":"S2 is always 0","width":192},{"text":"so i'm starting on calling S2. I try to decrement it, and I've got a problem","width":576},{"text":"I did fix one of my other problems though","width":192},{"text":"did you notice what I switched?","width":64},{"text":"i switched the order of the sem_wait and the lock","width":384},{"text":"i' dont actually acquire the semaphore until the semaphore is released","width":192},{"text":"and that is very improtant","width":320},{"text":"because if I acquire the lock and I wait for the semaphore to be released","width":448},{"text":"but somebody is not gonna released the semaphore unless they've got the lock.","width":128},{"text":"i've created a bad problem called deadlock","width":192},{"text":"that fixed that a little bit","width":320},{"text":"Okay","width":192},{"text":"so the problem here was This one starts at zero, right?","width":576},{"text":"so whenever I call sem_wait on it","width":192},{"text":"it's just gonna block","width":192},{"text":"what about this guy","width":448},{"text":"Do i have overflow?","width":64},{"text":"Do I have undeflow? Why?","width":640},{"text":"Here","width":64},{"text":"what does S1 start at?","width":128},{"text":"it starts at 16","width":256},{"text":"my first call to dequeue is gonna do a sem_wait on S1 and its' gonna say ","width":512},{"text":"\"aHH!! Cool, it was 16 now, it's 15 here, so there' nothing really in there\"","width":128},{"text":"so i've given you some steps on how you would do this, i want you guys to implement your own","width":960},{"text":"i can tell you that you can do it with those variables","width":320},{"text":"figure out what you want the variables to be initialized to ","width":192},{"text":"and how to implement your enqueue and dequeue","width":128},{"text":"so it's only a couple of lines of code don't make it too complex","width":384},{"text":"Yeah?","width":4544}],
// Part 1
[{"text":"so did anyone come up with a way to not deadlock our writers without telling me the code what would your pproach be to not let the writers deadlock?","width":832},{"text":"so to broadcast to the writers first then the readers","width":512},{"text":"im not sure that would entirely fix the problem because even if i broadcast the writers","width":320},{"text":"wait let's go back to this code for a second","width":192},{"text":"even if i broadcast here to the writers","width":256},{"text":"the writer wil wake up but there's still readers inside and it'll still block","width":192},{"text":"so it's a good try ","width":128},{"text":"so it's the right approach you have to do somehting that gives preference to the writers","width":384},{"text":"that's how we're gonna fix this","width":128},{"text":"so one thing you can do is put a number of make sure no one reads forever","width":1344},{"text":"so the solution i have is not gonna break the problem of someone reading forever","width":320},{"text":"if somebody reads forever i;m never gonna let a writer in","width":320},{"text":"so ummm ","width":64},{"text":"that is a limitation of the solution i'm gonna show you","width":256},{"text":"even if you just let even if you say that your reader can be in there for 10 seconds","width":320},{"text":"let's do it that way","width":128},{"text":"instead of giving it a time limit","width":128},{"text":"you can still have every second a reader comes along","width":256},{"text":"so probably we should put a limit on the solution i;m gonna show you","width":320},{"text":"to make sure that the readr's not gonna stay in forever","width":128},{"text":"it would be really good if we could have them enter in the order in which they receive","width":960},{"text":"did anybody come up with a solution kinda like that?","width":64},{"text":"that's pretty close to what i;m gonna do","width":576},{"text":"so basically what i'm gonna show you is a way to say ok","width":128},{"text":"i have a waiting flag","width":128},{"text":"for writers coming in and writer's waiting i'm gonna send a waiting flag","width":256},{"text":"and if there's a writer waiting","width":128},{"text":"i'm not gonna let anymore readers in","width":128},{"text":"and whatever reader are in i'm gonna drop through","width":192},{"text":"and those readers once they're done ","width":128},{"text":"the writers next","width":128},{"text":"and i'll show you how that works","width":128},{"text":"you know what i have the code here not gonna write the whole thing down","width":512},{"text":"we can look over it","width":320},{"text":"ok so here's my reader and my writer","width":64},{"text":"so i've added ","width":256},{"text":"here","width":128},{"text":"i now have 2 ","width":128},{"text":"counting semaphor","width":128},{"text":"2 counters","width":64},{"text":"that have to do with readers instead of just 1","width":320},{"text":"that i have a want to enter the critical section","width":320},{"text":"and this one says","width":448},{"text":"writers writing","width":192},{"text":"what value can this one have","width":512},{"text":"what value can the writers waiting hve","width":512},{"text":"okay what value can this one have","width":320},{"text":"the writers writing","width":64},{"text":"jsut one","width":128},{"text":"how about this one here","width":64},{"text":"no","width":128},{"text":"i can have lots of writers writing","width":192},{"text":"it just tells me that there are writers waiting","width":192},{"text":"okay and as long as there's waiting","width":128},{"text":"this one says as long as there's writers waiting in stead of writers writing","width":448},{"text":"i'm gonna block my readers","width":128},{"text":"and","width":64},{"text":"this part","width":64},{"text":"right here","width":192},{"text":"says that as lng as there's a writer writing","width":192},{"text":"i'm not gonna drop out of my condtion wait while loop","width":256},{"text":"okay","width":64},{"text":"so what's gonna happen is 1 writer's gonna come along","width":192},{"text":"it's going to ","width":192},{"text":"say that somebody's reading say we have 1 reader  in there","width":256},{"text":"let's let the reader go first","width":64},{"text":"reader comes in ","width":64},{"text":"i need my variables set here","width":320},{"text":"so we have","width":128},{"text":"writers ","width":128},{"text":"writing","width":128},{"text":"and","width":64},{"text":"reading","width":64},{"text":"and they all start off as","width":384},{"text":"0","width":64},{"text":"so i have a reader that comes along","width":320},{"text":"it's gonna come along here and check to see if there's writers it's gonna say no no writers","width":256},{"text":"so ","width":64},{"text":"uhh","width":128},{"text":"it's gonna fall through the condition variable i don't have to wait and then it's gonna increment writing, reading i'm sorry","width":320},{"text":"it's gonna stay in reading here for a second","width":256},{"text":"let's leave it there for aminute","width":64},{"text":"to make sure that the writers are gonna be able to get through","width":192},{"text":"so now i have a writer its gonna incrmeent it's gonna acquire the lock so it can change the writers value ok so now i have one writer waiting","width":576},{"text":"but now i need to check somebody's reading am i gonna fall out of this loop?","width":448},{"text":"yes or no","width":64},{"text":"can i pass this line?","width":384},{"text":"alright i'm gonna do while reading or writing am i reading or writing?","width":512},{"text":"yes","width":64},{"text":"so i do my condition wait","width":128},{"text":"so now my first writer is blocked here","width":128},{"text":"and","width":192},{"text":"what happens when it calls the condition variable?","width":192},{"text":"it releases the lock","width":128},{"text":"so","width":128},{"text":"and now i have another writer come along","width":192},{"text":"same thing happens i'm gonna increment my writers to 2","width":192},{"text":"and my second one ","width":192},{"text":"is gonna block right there","width":64},{"text":"is tht clear?","width":128},{"text":"yea?","width":64},{"text":"nothing's happened yet right we haven't been signaled yet so now","width":832},{"text":"let's go back to this reader","width":128},{"text":"so this reader's done","width":128},{"text":"it gets the lock it decrements reading now to 0","width":448},{"text":"and","width":64},{"text":"it signals everyobdy","width":128},{"text":"that will wake up it's doing a signal broadcast","width":256},{"text":"it will wake up both of the writers","width":128},{"text":"both of the writers will acquire the lock 1 at a time","width":320},{"text":"right they're not gonna do it at the same time","width":64},{"text":"the first one that acquires the lock will say ","width":256},{"text":"is reading 0?","width":64},{"text":"yes","width":64},{"text":"is writing 0?","width":128},{"text":"yes","width":64},{"text":"so","width":64},{"text":"that one can fall throgh","width":128},{"text":"and","width":64},{"text":"it can now","width":64},{"text":"set writing to 1","width":192},{"text":"and there's somebody writing","width":192},{"text":"ok","width":128},{"text":"so now","width":64},{"text":"if you look at another reader coming along","width":192},{"text":"it's gonna say is there are there writers waiting?","width":384},{"text":"yes","width":64},{"text":"ok now wait","width":64},{"text":"what did i just trade off","width":448},{"text":"this is not a perfect solution either","width":256},{"text":"yeah?","width":64},{"text":"there's no better way for the readers so i now put the priority on the writers instead of on the readrs","width":576},{"text":"there are solutons","width":192},{"text":"or","width":128},{"text":"for having counters and allowing them to go in step by step i don't think lawrence was having you going through the priority solutions so this is the one he wanted me to go through with you","width":768}],
// Part 3
[{"text":"there's lots of different things you can do to deal with deadlock","width":512},{"text":"you can try to prevent it. this is probably the most expensive thing that you can do","width":512},{"text":"you have to understand exactly how your system exists. you have to understand all the states in your system","width":256},{"text":"you have to be able to look at it, run from algorithms on it and say that nothing in the system, no program, no application can cause deadlock","width":640},{"text":"to be able to do that, you have to be very,very pessimistic","width":384},{"text":"because even if we're dealing with the that aren't very nice, if two of them never met, it's never gonna be a problem.","width":576},{"text":"so only if they actually meet that they cause deadlock","width":192},{"text":"a number of systems might try to do something like detection and recovery","width":320},{"text":"so detected that there was deadlock and now we're gonna come up some algorithms to recover from it","width":448},{"text":"a way that this is kinda somewhere in between. we're gonna look at our system and come up with systems that don't come up with dealdock","width":768},{"text":"a little bit more expensive than detection","width":256},{"text":"not quite as expensive as total prevention","width":128},{"text":"and then if you really have trouble you can have your system operator sit there and fix things that's your worst case","width":384},{"text":"does anybody know what unix/linux does","width":320},{"text":"for deadlock prevention","width":128},{"text":"or detection or avoidance or w/e","width":320},{"text":"anybody know?","width":64},{"text":"wanna take a guess?","width":256},{"text":"how does linux deal with deadlock?","width":128},{"text":"how many people think it does deadlock prevention?","width":448},{"text":"detection and recovery?","width":256},{"text":"avoidance?","width":128},{"text":"manual intervention?","width":256},{"text":"you wanna know what it does? nothing","width":192},{"text":"this is called the ostrich approach, you stick your head in the sand and pretend deadlock never happened. that is pretty much what they decide","width":896},{"text":"they leave it up to the application writers to make sure they never deadlock","width":64},{"text":"so, the nice thing about this is that none of the expensive components of prevention or recovery or detection need to be implemented","width":640},{"text":"they just say everything's faster and if it's rare is it really worth the overhead?","width":448},{"text":"the assumption is that it's rare and we're not going to use it or if it's really important for a particular application that that application take care of it","width":576},{"text":"that being said you can't ignore it because it's part of this class and i'm gonna talk to you about how to figure out what's going on with deadlock","width":512},{"text":"to be able to do so","width":256},{"text":"i wanna be able to model ","width":192},{"text":"i wann be able to model my processes and my resource that they wanna use in a graph and this is called a resource allocation graph","width":1024},{"text":"and my resource allocation graph has two components","width":256},{"text":"it has ","width":128},{"text":"it has processes which are these circles ","width":512},{"text":"and it has resources which are the squares","width":320},{"text":"and what i'm gonna do is i'm going to take an arrow","width":384},{"text":"from a resource to a process","width":256},{"text":"that means that p1 is using r1","width":256},{"text":"and i'm going to take an arrow from a process to a resource saying that p1 requested r2","width":704},{"text":"so this would be","width":128},{"text":"process 1 is using standard out","width":384},{"text":"process 1 has acquired a lock","width":192},{"text":"the second half, the right half would be","width":256},{"text":"some other process acquired a lock already and p2 is asking for it but doesn't get it until the other process has given it up","width":512},{"text":"so, why do we go through the bother of this well it turns out that if we look at resource allocation graphs they have this great property that tell us how to deal with deadlock or how to detect deadlock","width":1024},{"text":"let's say we have this situation now where r1 acquires, sorry, p1 acquires r1","width":832},{"text":"so process 1 has acquires some resource","width":192},{"text":"and p2 has acquired a different resource","width":128},{"text":"but now","width":128},{"text":"p2 is gonna request that first resource that p1 has and p1 is gonna request the resource that p2 had","width":704},{"text":"what's gonna happen?","width":192},{"text":"so, if they're gonna hold on to these resources and they can't make any progress until they get the second resource, we've now created something called circular wait they're both waiting for something","width":768},{"text":"the were each waiting for the other to move","width":256},{"text":"the cars at the intersection were each waiting for the other to move","width":320},{"text":"this is called circular wait","width":64},{"text":"and this type of cycle in a resource allocation graph tells us that there's dedlock","width":576},{"text":"so, on your handouts from today, you guys have some examples that we're going to go through","width":448},{"text":"so let me switch over to our examples","width":192},{"text":"can you guys see that okay or do you want me to put it on the center screen too?","width":640},{"text":"so, i'll help you through the first one","width":832},{"text":"here's my boxes","width":256},{"text":"and lawrence was calling them candyboxes and they hold candy","width":320},{"text":"and there's one piece of candy in the box and whoever gets it get's to take it and i guess when they're done they put it back. kinda gross","width":512},{"text":"so if you heard him say candyboxes he meant the resource squares and the resource allocation boses","width":320},{"text":"now how many processes do i have","width":384},{"text":"i have process 1 and process 2 so i'm gonna write p1 and p2","width":320},{"text":"and the way i read this is process 1 requests resource a and resource b","width":512},{"text":"so process 1 requests it and there's no arrow coming out of the resource","width":384},{"text":"that means that no one's using it right now and p1 can acquire it so i draw an arrow to p1","width":448},{"text":"because that means that p1 has acquired","width":192},{"text":"a","width":192},{"text":"andb","width":64},{"text":"now,","width":128},{"text":"process 2 comes along so this is time","width":256},{"text":"for each of these, down is time","width":320},{"text":"now p1 says i'm gonna request ","width":64},{"text":"oh i guess there's a 3rd one here","width":192},{"text":"p2 requests process c sorry process 2 requests resource c, which way does the arrow go?","width":640},{"text":"to p2","width":192},{"text":"towards p2","width":192},{"text":"and, what about b?","width":128},{"text":"which way does the arrow go?","width":192},{"text":"towards the resource or towards the process?","width":256},{"text":"towards the resource because a already has it","width":192},{"text":"is there a deadlock here?","width":192},{"text":"no why not?","width":192},{"text":"there's no cycle i don't have my circular wait","width":384}],
// Part 4
[{"text":"YOu guys do the next one","width":512},{"text":"YOu got 30 secs","width":128},{"text":"I'm going to write the proceses","width":192},{"text":"and you'll tell me where deadlocks are","width":256},{"text":"alright while you're loking at it","width":384},{"text":"I'm going to set this up","width":128},{"text":"For the next one","width":3840},{"text":"P1 requests A, B and C","width":320},{"text":"Which way do arrows go","width":256},{"text":"towards P1","width":192},{"text":"all of the,?","width":128},{"text":"nobody has those","width":192},{"text":"and P2 requests B and ","width":512},{"text":"C","width":128},{"text":"Which way do I put arrow?","width":256},{"text":"For both of them to the box?","width":384},{"text":"Yup","width":192},{"text":"Cuz a has both","width":128},{"text":"Is there a deadlock here?","width":384},{"text":"Why not?","width":128},{"text":"Still no cycle","width":192},{"text":"A requests A and B","width":256},{"text":"We know those go that way","width":256},{"text":"since A requests it first","width":128},{"text":"P2 requests B and C","width":192},{"text":"which way does the B arrow go?","width":256},{"text":"To resource or to the process?","width":192},{"text":"To the resource","width":128},{"text":"And for C/","width":128},{"text":"To the process","width":128},{"text":"How about P3?","width":128},{"text":"The resource or the process?","width":192},{"text":"To the resource","width":256},{"text":"and for C and D for P4?","width":256},{"text":"They both go to the resource","width":448},{"text":"ok","width":192},{"text":"Did I create a deadlock?","width":384},{"text":"Is there a deadlock there?","width":192},{"text":"Still none","width":128},{"text":"Ok you wanna bet there's a deadlock?","width":512},{"text":"How many people think there is","width":192},{"text":"So P1 requests A and B","width":320},{"text":"P2 requests B C and D","width":576},{"text":"which way does B arrow go?","width":192},{"text":"To resource","width":64},{"text":"and other 2 go towards the process","width":256},{"text":"We know there's something here","width":192},{"text":"so this goes towards the process","width":192},{"text":"P4 wants 3 and P4 wants B","width":320},{"text":"P1 requests C","width":64},{"text":"which way does it go?","width":64},{"text":"To the resource","width":192},{"text":"Is there a deadlock here?","width":384},{"text":"Whats happeneing?","width":512},{"text":"P1 has requestd C","width":192},{"text":"and then P2 is using C","width":320},{"text":"but P2 has requested B","width":384},{"text":"and p1 is using B","width":192},{"text":"cough","width":256},{"text":"Got it?","width":64},{"text":"This is called a bipartite graph","width":448},{"text":"only arrows from top to bottom","width":64},{"text":"or bottom to top","width":192},{"text":"never back and forth","width":192},{"text":"last one","width":320},{"text":"and then we'll go back to deadlock","width":320},{"text":"ok","width":64},{"text":"im going to start it off","width":320},{"text":"uhhhhhh","width":128},{"text":"because I dont know what I'm doing","width":128},{"text":"P2 wants B","width":192},{"text":"And C and D","width":192},{"text":"Okay","width":256},{"text":"almost the same as last one","width":64},{"text":"P3 requests B","width":320},{"text":"ok","width":128},{"text":"whats new here?","width":192},{"text":"P1","width":128},{"text":"relieved B","width":192},{"text":"P1 said ok","width":448},{"text":"I dont ned this one anymore","width":320},{"text":"and once it's bbeen released","width":256},{"text":"next process","width":64},{"text":"can get it","width":64},{"text":"lets say P2","width":192},{"text":"What happens to arrow for P2?","width":64},{"text":"Switches direction","width":512},{"text":"so now when P1 comes along","width":192},{"text":"and requests c","width":128},{"text":"Is there a deadlock?","width":320},{"text":"NO","width":64},{"text":"So the key here","width":64},{"text":"is to remember that","width":128},{"text":"as procees are doing things","width":320},{"text":"they're releasing and using","width":64},{"text":"resources","width":64},{"text":"and the whole stepwise","width":192},{"text":"of understanding releasing and using","width":128},{"text":"needs to be looked at to be able to detect deadlock","width":448},{"text":"goign back to my slides","width":768}],
[ '../captions/second/Full_Lecture_Video_34_Part_0-jren4.json',
  '../captions/second/Full_Lecture_Video_34_Part_1-jren4.json',
  '../captions/second/Full_Lecture_Video_34_Part_2-jren4.json',
  '../captions/second/Full_Lecture_Video_34_Part_3-jren4.json',
  '../captions/second/Full_Lecture_Video_34_Part_4-jren4.json',
  '../captions/second/Full_Lecture_Video_34_Part_5-jren4.json',
  '../captions/second/Full_Lecture_Video_34_Part_6-jren4.json' ]
// Part 0
[{"text":"[silence]","width":3816},{"text":"alright good morning class, how are you?","width":381},{"text":"hello myself how are you? right I am great thank you","width":147},{"text":"let's try again, good morning class how are you?","width":198},{"text":"okay great so here's our plan for today, we're going to run through and talk about these final exam questions","width":443},{"text":"if you're sitting by yourself please move until you're sitting next to somebody","width":283},{"text":"if you worked on these questions with your neighbors why not find a different neighbor that can maybe give you insight into the things you thought you knew and the things that you didn't think you know","width":552},{"text":"so please find some interesting neighbors at this moment","width":331},{"text":"secondly, I'll give you some tips on doing the streaming merge sort","width":277},{"text":"I'll talk about MP deadlines, we'll do an ask me anything and if we have time we'll do some tips on learning and prep for the final exam","width":528},{"text":"right so at this moment please find a neighbor and we'll take a few moments for you to compare answers and find out ask your neighbor stuff that you were unsure about","width":744},{"text":"[silence]","width":22995}],
// Part 1
[{"text":"[silence]","width":11139},{"text":"here we go so I did a quick poll to see which questions people would like me to go over in lecture","width":295},{"text":"I'll get through some of them today, others we'll get through before the end of the semester","width":385},{"text":"here's the game is that this is all stuff that CS241 UIUC students should know, it'd be embarrassing if you graduated and you didn't know this stuff, if you weren't able to explain it to other people say...","width":762},{"text":"in an interview or if you're on a team","width":172},{"text":"and you're getting more mature right? and so the idea is to say look this is less about okay learning in the classroom and you should start to be independent learners and also kind of use each other as resources","width":907},{"text":"and of course we have the wonderful WWW project with all sorts of factual information out there","width":373},{"text":"so I'm going to encourage you to actually be able to be independent researchers when it comes to CS knowledge","width":423},{"text":"okay so let's go through some of these","width":191},{"text":"but first let's take a little break and talk about what's coming up next week","width":341},{"text":"right the big one is the key value competition","width":250},{"text":"the very last MP is due at the end of the semester so Wednesday one minute before midnight","width":376},{"text":"all entries before then will be graded","width":144},{"text":"realize that if a hundred people were to submit at that moment, it would take say three minutes times one hundred, it'll take over 300 minutes before you see your result","width":590},{"text":"so if you want to leave it to the very last minute, be my guest, but realize that you're playing with fire","width":484},{"text":"you may not have a second chance of course to fix anything","width":223},{"text":"so early submissions you should see results early","width":246},{"text":"late submissions it'll take hundreds of minutes before you see a response","width":355},{"text":"before all of that, here's some other good news hey guess what there's going to be a last chance","width":321},{"text":"perhaps you got a zero on the MP because you were busy doing something else","width":477},{"text":"right or just made a silly mistake or don't panic you can still reclaim 75% of your points","width":327},{"text":"if you've already got at least 75% on a particular MP, you can ignore that MP","width":355},{"text":"and of course take the maximum of these grading runs and all prior runs","width":294},{"text":"so for everything except key value this applies","width":350},{"text":"on Monday, if you didn't finish MP merge part 2, here's your chance","width":444},{"text":"and by the way, we have made MP merge part 2 a little bit easier to earn for points","width":682},{"text":"if you can pass part two you get 95%, if you beat the TA's solution, you get the remaining 5%","width":541},{"text":"in the very first run of MP merge streaming, only 25% of the class were able to succeed at this task","width":548},{"text":"which it was a new MP and actually to be honest, it surprised me that it was hard","width":463},{"text":"so today I'm going to... ","width":220},{"text":"today, however, one is I'm going to give you a couple of hints and secondly you're different people than before right?","width":582},{"text":"you're brighter, smarter, better looking, ah that doesn't matter","width":259},{"text":"but you're brighter and smarter and so you should now be able to finish MP merge part 2","width":505},{"text":"and do much better than you could than at the beginning of the semester","width":235},{"text":"right so we'll come back to that at the end of this class","width":321},{"text":"if you already did well, we're going to give you some bonus points instead","width":256},{"text":"yes at the back?","width":339},{"text":"uhh I believe there was a context page and I heard this anecdotally from the grading TAs, that only 25% of students...","width":774},{"text":"but I tell you what, I will ensure that an email is sent out","width":308},{"text":"in the near future","width":108},{"text":"certainly before the weekend","width":236},{"text":"okay right so yes I realize it's a busy time at the end of the semester, that's kind of always how it works isn't it?","width":403},{"text":"so see my FAQ, help I'm working too hard, yeah I'm sorry learning is hard right?","width":355},{"text":"also don't confuse recognition like oh I know this I have seen this before with actual ability to do something... yes?","width":620},{"text":"yes there will be something on piazza very shortly or the home page to say the URL for that","width":475},{"text":"similarly a URL for the key value as well","width":290},{"text":"alright so as you know, there's a big difference between being able to say oh I recognize this to hey I can actually recall this vs hey I can actually use this information vs I can actually debug a version of this","width":734},{"text":"vs hey I can create something based on this which satisfies additional constraints right? we're talking about different levels of  bloom's taxonomy of understanding and learning","width":568}],
// Part 2
[{"text":"right so yeah learning is hard I'm sorry if I knew a way to do the matrix for instance I know how to do systems programming, that would be fantastic but we can't do that just yet","width":602},{"text":"right so let's have a look at one of these problems today and this will actually help with the rest of the homework","width":411},{"text":"which is perhaps you can do this, I'll give you the answer in a moment, perhaps you should be able to do this, this is actually based on a final exam question","width":477},{"text":"remember the bitwise operators? these are not the logical operators, these are bitwise operators so we can use ampersand & for masking for example this is or | left << and right shift >>","width":708},{"text":"or right shift and left shift","width":107},{"text":"and so we want to use these to write some pseudocode as to how the hardware works right? can we actually write some C like code that would convert a pointer","width":595},{"text":"here it is here's my little pointer to one byte","width":164},{"text":"and determine the page number and the offset","width":249},{"text":"right so this shouldn't be too hard if you know your bitwise operators","width":277},{"text":"I'll give you just 30 seconds for you and your neighbor to have a go","width":235},{"text":"[silence]","width":5088},{"text":"okay so here's the plan, we think of our virtual memory address in terms of two halves","width":317},{"text":"the lower bits will be our offset and we're just going to ignore those for a moment","width":251},{"text":"they'll come back to play at the very end when we add them back in","width":205},{"text":"and we've got a page number as well so the upper bits are our page number","width":299},{"text":"right so we can use our bitwise operators to extract this from our single pointer","width":382},{"text":"for the offset we want to write a mask so that we only see the lowest bits","width":346},{"text":"so we're going to say pointer","width":246},{"text":"& and now I want something that represents the twelve lowest bits, in other words if I was writing in binary it'd be 1 2 3 4 1 2 3 4 1 2 3 4","width":734},{"text":"so that would be my binary representations and all the upper bits would be zero","width":288},{"text":"right can I convert that into hexadecimal","width":449},{"text":"remember hexadecimal each hexdigit corresponds to four bits right?","width":311},{"text":"so we should and it with 0xfff","width":786},{"text":"and the upper bits of this number are all zeroes","width":550},{"text":"right what about the page number?","width":179},{"text":"I want to take these bits and shift them to the right twelve times","width":391},{"text":"well I could divide by four thousand ninety six","width":267},{"text":"but instead why don't we just shift","width":418},{"text":"there we go so now I've got my page number","width":270},{"text":"if my hardware implemented a single level page table","width":290},{"text":"I could then use this to look up an entry inside that single level page table","width":262},{"text":"that would give me what?","width":201},{"text":"what's it called?","width":325},{"text":"what do we get when we look inside the page table?","width":182},{"text":"the frame! yes the physical frame","width":218},{"text":"so if I still use this, look it up inside the page table, I get a physical frame","width":323},{"text":"if I take that frame, I can now combine it with the offset to give me the actual address","width":442},{"text":"so the final address..","width":337},{"text":"would be...","width":167},{"text":"take the frame shift it...","width":286},{"text":"left by twelve, put it into the right place","width":282},{"text":"and or it or add in the offset","width":525},{"text":"and that would give me the actual RAM address, the actual piece of RAM that I want to read or write to","width":498},{"text":"of course we're writing C code, my assumption is that our hardware engineers are not writing C code, they are probably writing verilog or vhdl or some other lower level hardware language","width":734},{"text":"alright so let's see if you can play with page tables then for this little example","width":397},{"text":"here's a virtual address","width":256},{"text":"this time I've got eight bit pages, they're tiny, and the following page table","width":343},{"text":"so using this, what is the physical address associated with this virtual address?","width":442},{"text":"so we're going to have to take this address and cleave it into a page number and a offset","width":468},{"text":"[silence]","width":1259},{"text":"and the answer is...","width":173},{"text":"it's a trick question, you can't answer it yes? because...","width":254},{"text":"where's the offset going to be? the offset is going to be the lowest eight bits","width":356},{"text":"so the upper hexadecimal digits are your page numbers","width":318},{"text":"and I didn't give you...","width":227},{"text":"enough entries of this table, its somewhere off here","width":376},{"text":"so I didn't actually give you this particular entry","width":256},{"text":"right so let me stencil it in, so somewhere deep, much lower in the page table, there happens to be entry number 010203","width":608},{"text":"and if we were to look up there and we found an address like...","width":545},{"text":"BAAD","width":299},{"text":"now you can tell me the actual physical address, I've got to take this and combine it with the original offset","width":453},{"text":"so in other words, the final address will be BAAD04","width":616},{"text":"would be our physical address","width":160}],
// Part 3
[{"text":"questions about that?","width":1177},{"text":"so you see when you use a page table","width":121},{"text":"things are slow because our page table itself is stored in memory","width":269},{"text":"so anytime your process wants to do anything","width":151},{"text":"read or write a piece of memory","width":84},{"text":"it first of all has to read this memory of the page table","width":230},{"text":"in order to calculate where to go in memory","width":215},{"text":"you've slowed everything down","width":118},{"text":"so to speed everything back up, we need a cache, what is that cache called?","width":536},{"text":"yes the TLB, the translation lookaside buffer","width":201},{"text":"because most of the time when we use an address, we use it again in the near future","width":311},{"text":"and so hopefully we have a cache hit, hopefully we have a high likelihood that we don't need to actually go back to our table to discover the answer","width":557},{"text":"so the TLB is part of the memory management unit, its job is to short circuit this lookup so that we can actually have good performance","width":735},{"text":"alright what does peterson's solution solve?","width":673},{"text":"do you know? does your neighbor know?","width":419},{"text":"if your neighbor said the critical section problem, congratulations you should sit next to that neighbor in a future class","width":609},{"text":"yes the critical section problem","width":464},{"text":"how dare I ask questions which are from weeks and weeks and weeks ago","width":320},{"text":"here's why, if you want long term memory of CS241 content","width":366},{"text":"the best way to actually learn something for the long term is to use your long term memory","width":294},{"text":"and so I'll be talking about that in terms of revision for the final and beyond","width":323},{"text":"right so it solves the critical section problem","width":190},{"text":"right malloc is thread safe but not signal safe","width":213},{"text":"the malloc you wrote was not actually thread safe but now you know about mutex locks","width":397},{"text":"you could have written a little lock and unlock around your code and made your malloc thread safe","width":465},{"text":"but it's not signal safe","width":308},{"text":"why? what's special about signal handling that's different from threads","width":643},{"text":"not quite","width":402},{"text":"yeah you're interrupting the process okay","width":611},{"text":"right yes you might interrupt malloc whilst it's executing malloc code","width":325},{"text":"reenter malloc and the data structure could be in a inconsistent state","width":350},{"text":"so it's a bit like... an analogy here might be you have a whole load of chefs coming in","width":528},{"text":"so you say I tell you what I'll have mutex locks so that only one chef at at time is allowed to use my kitchen","width":412},{"text":"so that's thread safe","width":160},{"text":"with signals, what you do to the chef is you say actually hold on chef I'm going to get you to come back to the room and cook this different recipe","width":458},{"text":"they walk in, there's the same thread, but now the kitchen is in disarray, the oven is already got something inside it, already set to a particular temperature","width":569},{"text":"and now your chef attempts to use these resources","width":218},{"text":"whoops, we can now get our memory data structures into an inconsistent state","width":499},{"text":"or we might try to lock a mutex that we've just locked resulting in deadlock because we were the thread that actually locked the mutex","width":711},{"text":"right and...","width":260},{"text":"here's one little challenge for you, okay think back in time to sempahores","width":558},{"text":"how do semaphores work? remember they don't let their count go below zero","width":313},{"text":"if you call sem_wait, it might block until someone else calls sem_post","width":561},{"text":"so I'm going to finish this code to make a barrier","width":410},{"text":"or rather you're going to finish this code to make a barrier","width":197},{"text":"what I want is so that the first four threads when they call this code are blocked","width":459},{"text":"but when the fifth thread arrives","width":174},{"text":"they all may continue but not before","width":288},{"text":"alright so how are you going to finish this code and what are the initial values for sempahore a and semaphore b","width":503},{"text":"alright this is a timed challenge","width":253},{"text":"you've got until I've done two laps of this and finished singing ackey breakey heart","width":417},{"text":"fortunately I sing very quietly ","width":106},{"text":"[silence]","width":10479}],
// Part 4
[{"text":" alright so we've got five threads walked into a barrie ow!","width":516},{"text":"what do we have going on here? well each time they walk into a barrier, they try to wait on A and then they increment a count","width":537},{"text":"if the count is something, hey let's post to the other semaphore","width":288},{"text":"and then let's always post to something else","width":239},{"text":"so this first semaphore sA looks like it's being used to define a critical section","width":607},{"text":"why should this be inside the critical section?","width":449},{"text":"we only want one thread at at time to be incrementing count or checking its value","width":280},{"text":"so if we make this post back to A","width":354},{"text":"then we can ensure that one thread at a time is incrementing the count so we can't have a race condition","width":581},{"text":"so that suggests the first value of sA is what?","width":309},{"text":"one, yes!","width":77},{"text":"so we allow one thread through but if another thread comes at the same time, it's forced to wait until the first thread has posted","width":653},{"text":"right so we're doing one at a time","width":230},{"text":"right now we said five threads so this is going to be if our count has gone up to five","width":406},{"text":"cause we're doing it after we've incremented the count","width":153},{"text":"what do we do? we post to sB","width":689},{"text":"this suggests if I want my early threads to wait...","width":465},{"text":"maybe I should set this to zero","width":235},{"text":"because why don't i wait down here","width":547},{"text":"and I'll wait until that count is incremented to one","width":374},{"text":"okay does this code work?","width":198},{"text":"does it let through any threads before the fifth thread arrives?","width":516},{"text":"can any threads get through? if I send it four threads can any of them get through?","width":370},{"text":"where do they get stuck?","width":245},{"text":"yeah the sem_wait waiting for sB so the first four threads get stuck at that line","width":472},{"text":"all waiting for the count to go up by one","width":244},{"text":"but on the fifth thread we call sem_post great we're done right? our code is complete. actually what happens instead?","width":407},{"text":"yeah one thread is lucky","width":246},{"text":"the other four not so much, one thread is going to say great I was able to continue","width":429},{"text":"the other four of course are going to wait forever","width":248},{"text":"but there's something we can do to that one lucky thread","width":250},{"text":"that is going to give us a domino effect right? and that is what?","width":358},{"text":"let's sem_post","width":148},{"text":"so as that thread walks out the door, it bumps up the count again","width":372},{"text":"freeing the next prisoner","width":157},{"text":"that prisoner, that thread walks out, bumps up the count, freeing the next prisoner and so on and so on until we have all five threads have left our barrier","width":822},{"text":"so that's correct code, what would have happened if we had switched these two around?","width":668},{"text":"perhaps you can explain it to your neighbor and decide if your neighbor's explanation is any good","width":1252},{"text":"so what would happen","width":179},{"text":"there's not a barrier anymore, yes, before we called sem_wait we've added one to the count so now every thread will simply get through the moment it arrives so it'd be a useless barrier","width":800},{"text":"alright thanks for playing today's review questions","width":199},{"text":"right so let's talk about some other stuff","width":112},{"text":"first of all Monday I'm leaning towards having no quiz on Monday, no more quizzes","width":633},{"text":"but I'd like to just take a quick survey, if you would like one more quiz this semester on Monday","width":456},{"text":"do this, this way, if you'd like no more quizzes for the rest of the semester... do that","width":502},{"text":"Yes I'll still be dropping three","width":417},{"text":"the last quiz will be a quiz of all possible questions","width":458},{"text":"okay is that sufficient information for you to be able to make up your minds","width":198},{"text":"are you ready? go","width":335},{"text":"[something] has it, there were more people pointing in that direction","width":323},{"text":"so there will not be a quiz next week, no more quizzes","width":423},{"text":"right the next thing we'll talk about yes","width":615},{"text":"you can generate your own quiz simply by concatenating all possible PDFs","width":569},{"text":"okay so let's see we've got...","width":219},{"text":"we've done MP deadlines, streaming sort, oh yes right","width":263},{"text":"section tomorrow, section there is no prep for section, in section you will get your webserver finished","width":495},{"text":"we may add one small little thing to it as well and then the rest of the section time will be spent on MP development and MP finishing","width":506},{"text":"and MP questions","width":111},{"text":"plus there's an opportunity for you to give feedback on section experiences back to your course assistants etc","width":569},{"text":"so please come to section, also please bring your answers to section for points right? to get the four percent, bring your printed copies to section thank you very much","width":719},{"text":"right okay","width":113},{"text":"[silence]","width":836},{"text":"right once upon a time I had some data","width":218},{"text":"and my data arrived in chunks","width":160},{"text":"here it is","width":136},{"text":"there was a little callback that said hey I've got 256 numbers for you","width":281},{"text":"before returning, you have to copy those numbers out into your own area","width":493},{"text":"because by the time you return, that little buffer is going to be overwritten with the next set of numbers","width":351},{"text":"so that's the callback, to be given all of these, unfortunately you didn't know how many times you're going to be called back","width":428},{"text":"other than the fact that to make the MP simpler there was going to be 2^n number down here so it might be 4 6 8 16 32 etc etc etc","width":641}],
// Part 5
[{"text":"so our task then was to turn this into a merge sort problem","width":473},{"text":"in other words..","width":219},{"text":"that two neighboring chunks of data","width":284},{"text":"should be combined","width":122},{"text":"each individual chunk was sorted using queuesort","width":267},{"text":"and we had say eight threads available to start doing all this merging","width":552},{"text":"now the naive TAs solution was actually not that hard to beat","width":421},{"text":"here's all it did","width":206},{"text":"it simply copied all of these into a large array","width":268},{"text":"and we made a fair guess about how big a size it should be","width":285},{"text":"but we did use realloc just in case the data was going to be larger than expected","width":389},{"text":"but we didn't start off with something small like hey 16 or 32","width":234},{"text":"we gave it a big number because if realloc does need to realloc for space","width":393},{"text":"then it used to call malloc, it needs to then do a memcpy to move all of that data","width":323},{"text":"and talking to memory is slow so we made a good guesstimate about how big a buffer we would need","width":493},{"text":"it simply waited until we got all the pieces","width":319},{"text":"and then it used the part one code","width":391},{"text":"and then it printed out the whole result","width":555},{"text":"right how can we do better?","width":376},{"text":"in this regrade of this we're actually going to put in a small delay between each one to assure that there's actually some significant computational time to work on these items","width":773},{"text":"so some things that we can do which are better, obviously we've got 8 threads we could get started sorting this data before we see the very last piece of data","width":635},{"text":"the other thing we can do is at the very end","width":265},{"text":"we could actually start printing the results","width":254},{"text":"before we finished the final merge","width":289},{"text":"so in the very final merge, as we're pulling these two yellow pieces together","width":342},{"text":"if I got to here, I don't even need to write this data back I could be printing it out to a file","width":605},{"text":"as I merge these results together, so there's actually two optimization ideas","width":384},{"text":"right so what's the simplest way of doing some of these early merges","width":296},{"text":"well one is to say hey doing this stuff thinking about all these different levels is really really complicated","width":398},{"text":"for my tired brain","width":176},{"text":"and so get something simple working, here's a really simple idea","width":312},{"text":"is look at these in pairs","width":167},{"text":"look a lot of merging actually just takes down here at the smallest level","width":333},{"text":"so we could get some speed up","width":172},{"text":"just by thinking about these small blocks","width":258},{"text":"right so every time I see an odd numbered block, I'm going to start off the merge process to make myself a bigger block","width":640},{"text":"and so I could probably write that code just to deal with these smaller blocks","width":257},{"text":"the accounting, keeping track of all the statuses of these little blocks is not too hard","width":448},{"text":"and then when I finish making all of my lighter blue, my cyan blocks, then I'll just...","width":395},{"text":"give the rest of the problem to my original part1 code and just let it run through that","width":604},{"text":"right I should probably stop here because unfortunately...","width":373},{"text":"you are all two bright, you want to do better than this","width":318},{"text":"here's the danger, A writing C code is hard","width":196},{"text":"I'll give you an example of that on Friday when I talk about Toyota's C code and their embedded code inside their memory management unit","width":464},{"text":"various swear words have been defined to describe just what a mess this C code was","width":516},{"text":"so that's the first thing, look writing C code is hard, writing any code is hard","width":312},{"text":"second is that thinking about this algorithm is hard","width":267},{"text":"and sometimes it's good just to come up with something which","width":256},{"text":"you have high confidence in working, get that working and then have a go at something more complicated","width":538},{"text":"so I'll give you some hints about something that's a bit more complicated without going into a full algorithm","width":306},{"text":"and it's this","width":198},{"text":"let's label our blocks 0 1 2 3 4 you get the idea","width":581},{"text":"and also, we'll keep track of the blocks as to how much data they contain which is sorted","width":477},{"text":"so initially after we've done the queuesort I've got one block size of data","width":383},{"text":"and later up here I've got two block sizes of data","width":583},{"text":"so if I keep these labels","width":233},{"text":"then my labels correspond to where my blocks start in memory","width":234},{"text":"so let me call this block 0, this block 2, this block 4, this block 6","width":479},{"text":"if I do this, then I can make the following observation","width":280},{"text":"my block size gives me a strong hint to which pairs I should be merging together","width":685},{"text":"so for example, on my cyan here, if I gave you block 4, you could say oh you should be merging that with block 6","width":649},{"text":"if I gave you block 6, you could say oh you should be merging that with block 4 once they are of sufficient size","width":626},{"text":"so if I gave you a block 4 of size 2, you'd say okay great that needs to be merged with block 6 of size 2","width":385},{"text":"if block 6 of size 2 is not yet ready, then do nothing","width":410},{"text":"and we can go the other way, hey here's block 6 of size 2, you should merge with block 4 of size 2","width":388},{"text":"if block 4 of size 2 is not yet ready, do nothing, don't panic, don't worry about it because at some point block 4 will be ready in the future and it will merge with me","width":557}],
// Part 6
[{"text":"so how can I determine which blocks to put together","width":552},{"text":"okay let's have a look at this one, this is still zero and block four but this time the size is size 4","width":473},{"text":"so if I gave you block 4 of size 4, you would say oh you should be merging with block 0","width":328},{"text":"if I gave you block 0 with size 4, you'd say oh that should be merged with block 4","width":424},{"text":"okay have I given you enough examples yet to see how we can determine which two blocks should be merged together","width":479},{"text":"I'm using exclusive or","width":534},{"text":"I'm xoring with the block number, the size","width":458},{"text":"so for example, here's block 8 of size 4","width":373},{"text":"8 xored with 4 is 12","width":438},{"text":"I'm flipping the lowest bit","width":289},{"text":"in the block number","width":629},{"text":"and eventually in my little example here","width":483},{"text":"I merge 8 with size 8, with 0 with size 8","width":528},{"text":"one of these will come in last","width":151},{"text":"and I'll do the final merge and say oh look here's all the data I needed to merge, I'm done, I can start writing out the data","width":693},{"text":"if that is too complicated to turn into code","width":260},{"text":"I have two advices","width":219},{"text":"that's okay!","width":284},{"text":"take CS 373 473 then your brain will explode ","width":581},{"text":"learn about things like topological sort which I can't spell this morning","width":450},{"text":"and that's okay you'll remember this lecture with fondness, oh that was so easy compared to this","width":442},{"text":"topological sort is when you start to think about dependencies between actions and it has some relevance to this task in hand","width":518},{"text":"but you don't need, the other piece of advice is don't panic, you don't need to go this far to beat the naive TA's solution","width":554},{"text":"okay so let's turn ourselves back to some of these questions","width":535},{"text":"right some of these I will not address today, I'll talk about them on Friday, remember you are getting points for learning and not simply printing out the right answer","width":621},{"text":"let's do which scheduling algorithm describes the smallest average wait time?","width":661},{"text":"results in the smallest average wait time, the answer here is going to be preemptive shortest job first","width":630},{"text":"why? well you can construct examples where we might have a very long job","width":343},{"text":"and a whole sequence of small jobs and if you did that, the long job you want to put at the very end","width":576},{"text":"otherwise it holds up everybody else, it holds up all of the other processes waiting to run","width":508},{"text":"so how do we assure that the longest job is put at the very end? answer: shortest job first, yes!","width":571},{"text":"preemptive priority you would have to make sure the priorities are based on the length of the job which is not necessarily true","width":882},{"text":"the longest average response time, what's response time? well think about a webserver, a webserver might start giving you some packets, some results pretty early on","width":649},{"text":"but it might take several more milliseconds before you get the full response, we care about how early can we get the beginning, how long do we have to wait before we start to see some output? just the early output","width":1099},{"text":"right so what's the longest average response time? first come first serve could give us a long average response time","width":667},{"text":"because the very last job submitted is not going to give us a response until finally all of the other processes have completed","width":789},{"text":"if we wanted a fast response time, what we should do is give each process access to the CPU as early as possible","width":502},{"text":"so what's an example of doing that? round robin yes!","width":210},{"text":"so round robin with a nice short preemptive, nice short quanta so that each gets to do some meaningful amount of work and start generating output","width":749},{"text":"okay minimizes response time round robin, waiting time shortest job first, total response time so this is response time of course all processes again round robin would be useful here","width":1025},{"text":"how am i doing for time? right","width":310},{"text":"the other questions I will address on Friday","width":372},{"text":"I will mention I'll just finish with one important idea","width":479},{"text":"right psychological research has shown that if you want to learn stuff, if you want to remember stuff, the most important thing you can do is remember stuff","width":477},{"text":"what do we mean by that? is use your long term memory? how do i do that? easy start with a blank piece of paper, write down everything you know about every topic inside CS241","width":686},{"text":"tomorrow, come back to the same piece of paper and write down more, do not use your notes, just write down more","width":453},{"text":"if you vaguely remember something put some question marks and some helpful hints","width":217},{"text":"the third day, do the same again","width":210},{"text":"the fourth day give up and yeah use your notes","width":154},{"text":"but you will discover that in trying to remember things, in actually exercising your brain","width":349},{"text":"stuff we start to come out of it in drips and drabs at first but it will actually ensure that you have a long term understanding of this material","width":604},{"text":"and with that have a wonderful week I'll see you on Friday!","width":221}],
