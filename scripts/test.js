[ '../captions/first/Full_Lecture_Video_26_Part_0-Steijger.json',
  '../captions/first/Full_Lecture_Video_26_Part_1-Steijger.json',
  '../captions/first/Full_Lecture_Video_26_Part_2-Steijger.json',
  '../captions/first/Full_Lecture_Video_26_Part_3-Steijger.json',
  '../captions/first/Full_Lecture_Video_26_Part_4-Steijger.json',
  '../captions/first/Full_Lecture_Video_26_Part_5-Steijger.json',
  '../captions/first/Full_Lecture_Video_26_Part_6-Steijger.json',
  '../captions/first/Full_Lecture_Video_34_Part_0-jren4.json',
  '../captions/first/Full_Lecture_Video_34_Part_1-jren4.json',
  '../captions/first/Full_Lecture_Video_34_Part_2-jren4.json',
  '../captions/first/Full_Lecture_Video_34_Part_3-jren4.json',
  '../captions/first/Full_Lecture_Video_34_Part_4-jren4.json',
  '../captions/first/Full_Lecture_Video_34_Part_5-jren4.json',
  '../captions/first/Full_Lecture_Video_34_Part_6-jren4.json' ]
// Part 0
[{"text":"Ok, class welcome class to CS 241","width":320},{"text":"First announcement","width":64},{"text":"Yes, CS 241 is a lot of work but you may have noticed there are seniors still walking around in this building","width":640},{"text":"They survived CS 241 and you can too","width":64},{"text":"Why not get a T shirt","width":192},{"text":"Yes I appreciate its a lot of work","width":128},{"text":"But this kind of sets you apart from other students in other universities","width":384},{"text":"By the end of this course you really are going to know your stuff ","width":128},{"text":"And you really are going to change the world","width":128},{"text":"Ok so here's what we're going to do today","width":128},{"text":"We're going to talk about scheduling","width":128},{"text":"We're going to look at some simple different ideas about how to do different schedules","width":320},{"text":"And similar effects it has on things like the waiting time","width":192},{"text":"And exactly when each schedule is is uh uh exactly when each process is scheduled","width":448},{"text":"Right so let's have a look at this and in a moment","width":192},{"text":"I'm going to ask you to calculate this","width":192},{"text":"So as this is a model of - we're going to uhm be clairvoyant - we we we know when","width":320},{"text":"as a design we know when our processes are going to be ready to run","width":384},{"text":"And uh we've got four processes, we've labelled them one two three four","width":192},{"text":"We can say hey process four doesn't exist at the beginning","width":384},{"text":"or it's not ready to run","width":128},{"text":"Perhaps it's waiting on a condition variable, the process is waiting for some data to revive","width":192},{"text":"But anyway we don't need to consider it in the very beginning of our model here","width":256},{"text":"Uhm and then these different processes have different amounts of execution time they need in order to complete","width":576},{"text":"So for example in process one takes thirty milliseconds","width":192},{"text":"So we're going to look at our little simulation in ten millisecond blocks and see","width":384},{"text":"which process is using the CPU for each block of time","width":320},{"text":"Now here's our different scheduling approaches we've got","width":384},{"text":"Okay","width":64},{"text":"We've got something called round robin","width":64},{"text":"So with round robin what we do is we try to be fair and say","width":512},{"text":"Well you can have the CPU for a certain block of time","width":320},{"text":"In this little example, 10 milliseconds","width":192},{"text":"And after 10 milliseconds the alarm goes off","width":128},{"text":"A little hardware clock goes off","width":128},{"text":"And that causes an interrupt","width":64},{"text":"And the interrupt then causes the CPU to execute some code inside the kernel","width":256},{"text":"The code inside the kernel says AHA you're out of time","width":256},{"text":"And now I'm going to give the CPU to a different process","width":128},{"text":"So the idea is we're going to do this every 10 milliseconds","width":320},{"text":"Uh we'll try to be fair","width":256},{"text":"So this means that if there's a long running job","width":64},{"text":"It shouldn't matter too much since after two milliseconds we're going to give the CPU to someone else","width":448},{"text":"And they get a chance to execute","width":128},{"text":"Okay so that's round robin","width":64},{"text":"We'll work that out in a moment","width":192},{"text":"And you'll notice in this little example","width":192},{"text":"I've actually got three processes","width":128},{"text":"Already to go at the very beginning","width":128},{"text":"So what we'll say is the order in which they ask if you're ready","width":576},{"text":"Is just dependent on how we've written them done","width":64},{"text":"So process 1 we're going to run before process 2 et cetera et cetera et cetera ","width":192},{"text":"And then the next we're going to calculate is shortest job first","width":384},{"text":"Meaning we actually know in advance these timings","width":320},{"text":"And we give this to the operating system","width":256},{"text":"To the scheduler","width":192},{"text":"So it can decide when to run them","width":128},{"text":"An \"I gotcha here\" is remember you can't actually run process 4 at the beginning of time because it doesn't exist yet","width":512},{"text":"It only comes into play, it only enters the stage after 10 milliseconds","width":192},{"text":"Alright so that's not a choice at the very beginning","width":192},{"text":"And then we have first come first serve","width":128},{"text":"This is just a simple queue","width":256},{"text":"Whoever arrives first gets to eat first","width":256},{"text":"And they continue to eat, to use the CPU until they are finished","width":320},{"text":"So it doesn't matter how long they take","width":192},{"text":"So that's first come first serve, FCFS","width":384},{"text":"That sounds pretty fair to me but we'll see if there's a problem with it later","width":128},{"text":"Now we can make these a little more complicated","width":64},{"text":"We can talk about how to preemptive shortest job first","width":448},{"text":"And the idea here is if a new job arrives","width":320},{"text":"In other words appears on stage ready to go","width":192},{"text":"Then if it's shorter we'll run that instead","width":256},{"text":"Now, one thing to look out for shortest job does not mean remaining time","width":320},{"text":"It means the actual original specified time","width":256},{"text":"So if you've only got ten milliseconds to run on a thirty milliseconds ","width":256},{"text":"job","width":64},{"text":"It still compares thirty milliseconds","width":192},{"text":"Not the remaining time, it's the actual total time","width":64},{"text":"When we talk about shortest job first","width":192},{"text":"And then the other variant is preemptive priority","width":128},{"text":"So instead of thinking about the execution time ","width":64},{"text":"We have some sort of priority assigned to each process","width":320},{"text":"So for example if this was controlling a lunar lander","width":192},{"text":"Controlling the rockets is probably more important than say running the -inaudible- activity right now","width":448},{"text":"We need to make sure that we make immediate course corrections","width":384},{"text":"And here we've got higher value equals a higher priority","width":320},{"text":"And if a higher priority job arrives on the scene","width":192},{"text":"Ready to go","width":64},{"text":"Then we will give the CPU immediately to that job","width":256},{"text":"So that's the process we're going to run in a moment","width":192},{"text":"Let's go back to these questions","width":128},{"text":"So when might a process be in the ready queue","width":192},{"text":"Let's think about processes you've programming, you've written","width":320},{"text":"Why might it be in a ready state?","width":192},{"text":"Not running on the CPU","width":64},{"text":"But in a ready state","width":128},{"text":"What could have happened?","width":192},{"text":"Yes!","width":320},{"text":"Okay so there's more than one process who wants to run","width":320},{"text":"And someone else has currently got the CPU","width":192},{"text":"Give me something that might have happened to your process","width":192},{"text":"That makes the mediates become ready","width":64},{"text":"It's waiting for say disk IO, or say network IO","width":768},{"text":"Perhaps you've called read","width":64},{"text":"Perhaps you've called accept","width":128},{"text":"And now you're waiting for a client to connect to your web server","width":256},{"text":"To your chat server","width":128},{"text":"To your database server","width":64},{"text":"That thread of execution cannot run yet until the operating system says","width":384},{"text":"Okay, yes! I've got your data, off you go","width":64},{"text":"Okay","width":64},{"text":"What else?","width":64},{"text":"No ideas?","width":1088},{"text":"Yes!","width":64},{"text":"Let's say you call sleep and your process sleeps for five seconds","width":768},{"text":"After five seconds your operating system says","width":64},{"text":"Oh, okay, right, fine","width":64},{"text":"Time to wake this process up","width":128},{"text":"I'll let this process continue, I'll let that thread continue","width":256},{"text":"Similarly if you had a call with a timeout","width":256},{"text":"Alright, there's going to be time when your processor stops","width":256},{"text":"A zombie is not ready to run","width":256},{"text":"A zombie can't run, it's finished","width":256},{"text":"It's still taking up space in memory","width":128},{"text":"Inside the processor control block","width":192},{"text":"Since we have things like it's exit status","width":256}],
// Part 1
[{"text":"Yep","width":64},{"text":"Okay so a thread has called condition wait","width":256},{"text":"Is not yet ready to run but if someone then broadcasts it","width":320},{"text":"It goes into the ready state","width":128},{"text":"So if we wanted we could draw a state diagram that says","width":384},{"text":"Look our processes can be in these different state","width":192},{"text":"It could have been just started, it be running on the CPU, it could be in this ready state","width":192},{"text":"And once it's in the ready state it's up to the kernel who gets to play and when","width":256},{"text":"And that's what this scheduling is all about","width":256},{"text":"Alright so we can define something called wait time","width":192},{"text":"And uh I can write a little formula for it","width":512},{"text":"Where's my notes","width":320},{"text":"Oh yeah","width":192},{"text":"So the wait time is the total amount of time spent in the ready state","width":1024},{"text":"Waiting to run","width":128},{"text":"So uh if we know the completion time and the start time","width":896},{"text":"That gives us the beginning and end","width":64},{"text":"Some of that time was spent actually doing useful stuff","width":128},{"text":"Actually executing","width":192},{"text":"So if we subtract that stuff we can actually discover how much time our process was unable to continue, it was in the wait state","width":384},{"text":"So I can say that the total wait is the uhm completion time so","width":896},{"text":"Time, the actual wall clock time when we finished","width":384},{"text":"Minus when the process first arrived","width":192},{"text":"Minus - so that gives us the time interval","width":768},{"text":"And the other time we can subtract is the time we spent executing","width":192},{"text":"So the duration that we spent executing","width":128},{"text":"So if we subtract off those two","width":640},{"text":"We get a certain amount of wait time","width":128},{"text":"That might be useful in calculating the wait time in these examples","width":320},{"text":"So it's not the first uh time that we have to wait because a process might go back into the waiting state","width":512},{"text":"For example","width":64},{"text":"If a process with a higher priority and you are running a priority based scheduler","width":448},{"text":"Your process might be pulled away from the CPU and the CPU is assigned to someone else","width":384},{"text":"To a different process","width":128},{"text":"So we've done that","width":64},{"text":"So it's not the first waiting time","width":128},{"text":"It's the total waiting time","width":128},{"text":"Okay so just occasionally, maybe in these examples","width":640},{"text":"I haven't calculated them today","width":64},{"text":"You have a tie break","width":64},{"text":"For example your process might be ready to run again after round robin","width":256},{"text":"And a new process arrives on the scene ready to go","width":320},{"text":"Which one should you use","width":64},{"text":"Well we need some sort of tie break decision","width":256},{"text":"And in which case we might to choose the job that arrived the earliest on the scene","width":448},{"text":"So now we want the earliest job to complete","width":256},{"text":"So let's see if any of these examples require that tie break situation","width":256},{"text":"Okay soooooooo","width":192},{"text":"Here's five little examples","width":192},{"text":"I'll get started and then you get the next one","width":128},{"text":"So let's look at this round robin","width":128},{"text":"So round robin remember","width":192},{"text":"It's like a little song, each person gets to sing a little bit","width":192},{"text":"So process 1 gets to run for the first 10 milliseconds","width":384},{"text":"And then our hardware interrupt goes off and the kernel","width":64},{"text":"HAHA not for you anymore","width":192},{"text":"And then process 2 has been waiting","width":320},{"text":"Also process 4 arrives on the scene","width":64},{"text":"But we're going to schedule process 2 because it was there first","width":384},{"text":"Alright","width":64},{"text":"So 10 milliseconds later we switch our process 2 and process 3 gets to use the CPU","width":384},{"text":"Another 10 milliseconds later our hardware clock goes off","width":256},{"text":"And finally process 4 gets to play","width":256},{"text":"And guess what happens next?","width":256},{"text":"We go around again!","width":64},{"text":"So process 1 and then process 2","width":320},{"text":"Now at this point process 2 is finished","width":192},{"text":"It's used its 20 milliseconds up","width":192},{"text":"It's finished calculating whatever it needed to calculated","width":256},{"text":"Then it's 3","width":64},{"text":"Process 4 you're already done ","width":256},{"text":"So we're back to process 1","width":128},{"text":"So now we could calculate the wait time and if we wish the average wait time","width":768},{"text":"So for process 1 how long was it waiting?","width":192},{"text":"I could count that 1 2 3 4 5","width":320},{"text":"It was waiting 50 milliseconds","width":192},{"text":"And uh process, it had to wait uhm, 1 2 3 4 - another 40 milliseconds","width":768},{"text":"Process 3, from my notes, looks like fifty","width":448},{"text":"And process 4 will be uh thirty milliseconds","width":384},{"text":"So I can add that up to get the total wait time and then divide by the number of processes to get an average","width":384},{"text":"Okay","width":512},{"text":"So that was me working through another example","width":256},{"text":"Now it's your time to play","width":64},{"text":"20 milliseconds? Oh quote possibly yesI'm sorry, oh quite possibly, ","width":832},{"text":"Because yeah it arrived at 10 milliseconds","width":128},{"text":"So it had uhm to wait in additional 20 milliseconds before being scheduled I think","width":448},{"text":"Right so","width":320},{"text":"Perhaps its not obvious but these are the end times of each block","width":704},{"text":"So this one goes from 10 to 20 and then 20 to 30, et cetera et cetera et cetera ","width":256},{"text":"Okay","width":128},{"text":"Right","width":64},{"text":"Sooooo","width":64},{"text":"Now is your chance to get cozy with these different scheduling algorithms","width":320},{"text":"And to run through these little examples","width":192},{"text":"It shouldn't take you very long","width":128},{"text":"Any questions?","width":64},{"text":"Okay, have a go.","width":256}],
// Part 2
[{"text":"Okay so with the shortest job first","width":8960},{"text":"We're not interrupting the existing jobs","width":256},{"text":"So even though process 4 arrives and is ready to go","width":256},{"text":"And is 10 milliseconds","width":192},{"text":"We let jobs run to completion","width":128},{"text":"Alright so 4 before here has to wait before it can run","width":640},{"text":"There is no preemption","width":64},{"text":"Okay that's what we're going to do down here","width":256},{"text":"When we do preemptive shortest job first","width":256},{"text":"When we actually take the CPU away from a process","width":384},{"text":"In the preemptive version yes we start with P2","width":320},{"text":"And then P4 arrives on the scene, the new kid on the block","width":256},{"text":"And so P4, off you go","width":128},{"text":"P4 runs to completion and then P2 can be scheduled back","width":256},{"text":"It beats P3, it arrived earlier","width":448},{"text":"And then P3 runs","width":128},{"text":"And then finally P1 has been waiting all of this time and it gets to run","width":192},{"text":"Alright K","width":384},{"text":"First come first served","width":128},{"text":"Couldn't be easier, right","width":128},{"text":"It just simply write down the order in which we wrote them down here","width":192},{"text":"No brain power required what so ever","width":256},{"text":"And then the last version we are going to look down here is preemptive priority","width":128},{"text":"Yep","width":320},{"text":"It's not about the remaining time ","width":512},{"text":"It's about the total time of the job","width":192},{"text":"It's not remaining shortest job","width":128},{"text":"It's about the total","width":64},{"text":"So don't do any subtraction stuff","width":384},{"text":"It's a common gotcha","width":128},{"text":"Alright so and the priority in this example saying a higher priority number is more important","width":704},{"text":"So process 4 is the highest priority but it's not around at the beginning of time","width":256},{"text":"Instead process 3 gets to run","width":128},{"text":"And then it gets interrupted","width":128},{"text":"Process 4 comes along and says I need the CPU and I need it more than you","width":384},{"text":"So process 4 finishes so we go back to process 4","width":192},{"text":"3****","width":64},{"text":"Process 3 finishes","width":128},{"text":"And then we go back to process 2","width":64},{"text":"Process 2 finishes","width":64},{"text":"And then process 1","width":64},{"text":"So we could calculate some wait times","width":1024},{"text":"This one is 160 over 40","width":320},{"text":"That gives us an average of 40 milliseconds","width":320},{"text":"Shortest job first: the average wait time turns out to be 20 milliseconds","width":1024},{"text":"First come first served: average wait time 37.5 ms","width":768},{"text":"Preemptive shortest job is 22.5 ms","width":768},{"text":"The last one is also 22.5 ms","width":704},{"text":"Alright so we don't care that much about the figures","width":384},{"text":"But what we do care about the following","width":128},{"text":"Firstly there is a difference in ordering","width":256},{"text":"And yes this was just a paper and pencil exercise","width":320},{"text":"But it kind of shows you depending on how much you care about a particular job","width":192},{"text":"You might be in the ready queue for a long time, you might be waiting for a long time","width":320},{"text":"Secondly we have a clear winner here","width":192},{"text":"The shortest job first minimizes the wait time in this example","width":384},{"text":"And uh in general as well","width":256},{"text":"And if you think about that, that kind of makes sense","width":320},{"text":"The long running job and I put that first, all of my other processes are going to have to wait for that length of time","width":128},{"text":"Therefore I should put the very longest job at the very end","width":512},{"text":"of my queue.","width":64},{"text":"And I can just prove that recursely therefore that my average wait time must be minimal if I put my shortest jobs at the beginning of the queue","width":704},{"text":"And I order them by total execution time","width":192},{"text":"So if my idea of fairness, if my idea of an optimal system, was just in terms of how long my processes have to wait","width":576},{"text":"Then I would choose shortest job first","width":192},{"text":"There's a problem with that of course","width":192},{"text":"First of all we'd actually have to know how long our processes actually do run for","width":384},{"text":"And that might call for a crystal ball","width":320},{"text":"Or at least an assumption about how my processes work today are exactly the same as how they worked yesterday","width":192},{"text":"And that's kind of stretching it about with real systems","width":256},{"text":"Our preemptive schedulers worked pretty well","width":512},{"text":"Of course they're more complicated","width":128},{"text":"We're going to have to write a kernel who is prepared to switch out a process and save it someway so that we can preempt and pull it out","width":512},{"text":"And replace it","width":64},{"text":"And our round robin actually has the worst wait time even though it was going to be pretty faIr","width":576},{"text":"though we thought it was going to be*","width":64}],
// Part 3
[{"text":"So what about this?","width":192},{"text":"We've heard about starvation before where a process never gets to complete it's uh, it never gets to make any significant progress.","width":768},{"text":"Which scheduler could lead to starvation and how?","width":320},{"text":"Maybe there's more than one correct answer.","width":192},{"text":"Don't tell me know; tell your neighbors and see if you agree.","width":192},{"text":"Okay, so uh, a student has let me know that my calculations are suspect so I probably am off by a quarter millisecond or so.","width":4032},{"text":"So I apologize for that.","width":192},{"text":"Silly  numerical error.","width":192},{"text":"Okay so which ones can suffer from starvation?","width":128},{"text":"The second fourth and fifth.","width":384},{"text":"Shortest job first, yeah, so if you're getting text messages continuously you might never get to your chemistry homework.","width":896},{"text":"So next time you don't fill out your chemistry homework, or CS 241 HW, keep sending yourself text messages.","width":320},{"text":"They're nice and short, you'll do them straight away.","width":320},{"text":"So shortest job first; we can set up a starvation by keep making short jobs and we'd never get to the long job.","width":384},{"text":"The other possibility is pre-emptive shortest job first.","width":448},{"text":"So again uhm I would never get to my long job if I keep submitting short jobs.","width":384},{"text":"And preemptive priority.","width":256},{"text":"Same idea","width":64},{"text":"If I keep having an urgent thing to do","width":128},{"text":"I might never get to schedule my low priority items","width":320},{"text":"Is there a problem? Yeah.","width":704},{"text":"We have to choose a tradeoff.","width":128},{"text":"We have to decide what we mean by fair.","width":64},{"text":"So which schedulers are appropriate for batch jobs?","width":576},{"text":"Of course the answer is It depends!","width":64},{"text":"By batch jobs we mean aren't interactive which are typically run for long periods of time without user interaction.","width":512},{"text":"They have all the data they want to process","width":128},{"text":"Maybe stuff out of files or network","width":128},{"text":"Do some analysis on that data","width":192},{"text":"So we might care about say earliest job finishing first or shortest job finishing first","width":320},{"text":"in which case we might choose a shortest job first scheduler","width":256},{"text":"We might care about seeing the results of all of our jobs","width":320},{"text":"And we are prepared to wait so we might choose round robin","width":320},{"text":"Uhm","width":192},{"text":"The other possibility is to, in a real system","width":576},{"text":"Suppose your job crashes or runs forever, has an infinite loop","width":576},{"text":"If there is no preemption","width":256},{"text":"if we don't forcibly remove that job from the CPU everything gets backed up","width":256},{"text":"So we have to careful if we're not going to preemptive running jobs","width":576},{"text":"Right","width":64},{"text":"So there isn't a simple answer for this batch jobs","width":192},{"text":"It depends on what your criteria are","width":192},{"text":"So what scheduler does Linux use?","width":128},{"text":"I mentioned it last lecture","width":128},{"text":"The completely fair scheduler.","width":320},{"text":"Which is a little bit of an oversell","width":320},{"text":"Alright so it's not completely fair","width":448},{"text":"But it is similar to round robin where we are prepared to interrupt a process","width":512},{"text":"Every 10 milliseconds or so","width":128},{"text":"But we're prepared to give an extended period of time to jobs which don't use all of their time quantum","width":640},{"text":"So for interactive programs, desktop programs, UI programs","width":320},{"text":"These tend to have very bursty needs of the CPU ","width":128},{"text":"Like OH QUICK the user touched something","width":256},{"text":"OH QUICK wenfjsdnfdnfsnfj disk","width":64},{"text":"And they won't use it for 10 milliseconds","width":192},{"text":"They will only require a tiny bit of CPU","width":192},{"text":"Processing before we end up say sending it an event to the system","width":384},{"text":"Update the screen","width":64},{"text":"And we're done","width":64},{"text":"And we wait for the next user event","width":192},{"text":"So the completely fair scheduler says we'll remember that these processes didn't require a lot of CPU in the past","width":448},{"text":"So we'll prepare to give it a little bit of extended CPU in the immediate future","width":256},{"text":"So we'll try to make the system as responsible as possible","width":192},{"text":"K here's a classic problem in scheduling","width":384},{"text":"It's known as the convoy effect","width":192},{"text":"And we see this with the first come first served","width":320},{"text":"Scheduler","width":128},{"text":"And you can imagine a real system where I've got jobs which are very strongly CPU bound","width":640},{"text":"And other jobs other processes which are IO bound","width":256},{"text":"And if you branch in the queue going this way by first come first serve","width":960},{"text":"I might have a big job which comes","width":192},{"text":"I illustrate by drawing it a large size","width":320},{"text":"It's going to take a lot of CPU time to run","width":256},{"text":"And behind it I've got loads of little jobs which","width":256},{"text":"They don't take much CPU but they take some IO to do","width":192},{"text":"And then the classic description of the convoy effect","width":256},{"text":"Is we imagine this process uses the CPU for a long time","width":320},{"text":"Then just a little bit of IO","width":64},{"text":"Then repeats","width":128},{"text":"And here's the problem.","width":640},{"text":"These are the processes that start after this CPU heavy process","width":384},{"text":"They can't use the disk","width":256},{"text":"Or the IO","width":64},{"text":"They only need a tiny amount of CPU","width":192},{"text":"It's like going to McDonalds to grab some little ketchup packets or something","width":320},{"text":"And someone there is taking all the space","width":192},{"text":"\"I just need a little ketchup packet\"","width":192},{"text":"\"I'M SORRY WAIT YOUR TURN\"","width":128},{"text":"And so we have poor use of uh IO","width":256},{"text":"CPU sjandnasnfjn uses the CPU 100% of the time","width":384},{"text":"Very efficient","width":64},{"text":"But these other jobs are stuck and uh","width":192},{"text":"So our disk utilization is pretty poor","width":320},{"text":"We could have had a better choice if we used something like round robin","width":256},{"text":"Where we let these little jobs jump in and let them use the CPU for little bits of time","width":384},{"text":"And then they can actually get on with their disk IO","width":128},{"text":"Right","width":128},{"text":"The questions about threads","width":128},{"text":"I mean uh scheduling","width":256}],
// Part 4
[{"text":"Okay so we talk about this classically in terms of processes","width":384},{"text":"What a thread really is just a thread of execution","width":256},{"text":"Uh everything we've talked about processes applies to threads","width":320},{"text":"And uh you can actually set the uh scheduling if you wish uh in the pthread library","width":512},{"text":"And so for example there's a pthread call that allows you to say hey I want to use round robin scheduler","width":512},{"text":"Or hey I want to use first come first served","width":128},{"text":"So it's possible to set that as you create each thread","width":320},{"text":"Bear in mind","width":384},{"text":"If you set them first come first served","width":256},{"text":"Be careful","width":192},{"text":"because if a thread never finishes","width":448},{"text":"All the other threads","width":640},{"text":"wait forever","width":576},{"text":"wait an infinite amount of time","width":192},{"text":"Because we did first come first serve","width":192},{"text":"and you are at the front of the queue","width":256},{"text":"And you're saying","width":64},{"text":"Hah I'm going to take up this server forever","width":256},{"text":"MUAHAHAHAAH","width":64},{"text":"So that's just a little gotcha if you truly try to set the scheduling policy","width":640},{"text":"Uh so another quick tidbit there's this little command called nice","width":192},{"text":"People would like their commands to be nice","width":320},{"text":"So what you can do is Linux changed the priority of your process by nice-ing it","width":448},{"text":"And uh mere mortals, non root people, can increase their priority number which decreases their priority","width":832},{"text":"Which makes it less important","width":128},{"text":"And so you can say Okay I have a long running job","width":256},{"text":"Its going to take a lot of CPU","width":64},{"text":"But only run if there's nothing else to do","width":256},{"text":"In which case you might call nice","width":192},{"text":"As part of that","width":64},{"text":"If you are root you can nice the other way","width":192},{"text":"You make things more important and higher priority","width":320},{"text":"But you probably won't need nice unless you're trying to run uh background computational jobs","width":192},{"text":"And try to make it so they don't interfere with your UI","width":512},{"text":"So that's enough about scheduling","width":128},{"text":"Let's have a look at page tables","width":192},{"text":"So we've been playing a lot with TCP packets","width":64},{"text":"And uhm most of the internet uses TCP","width":384},{"text":"However uh we did mention there's another thing called UDP","width":384},{"text":"Which is packet based","width":320},{"text":"It's not a stream","width":192},{"text":"We simply send our telegraph or datagram off and hope it gets to the other side","width":512},{"text":"Let's have a quick look how we could make a UDP server","width":256},{"text":"And see how it's different from a TCP server","width":64},{"text":"Okay so uhm if we want to fill up a UDP server","width":576},{"text":"Listen on a particular port","width":192},{"text":"We'll set up our hints as usual","width":192},{"text":"Oh good we've set it to zero","width":192},{"text":"And today we want to use IPv6","width":64},{"text":"128 addressing","width":192},{"text":"So how do we specify that","width":128},{"text":"Well for our family we don't want address family INET","width":320},{"text":"We want INET","width":128},{"text":"INET6****","width":192},{"text":"We don't want sockstream","width":64},{"text":"We're not trying to make a streaming interface here","width":64},{"text":"We just want to send these little datagrams","width":320},{"text":"So we have SOCK_DGRAM","width":128},{"text":"And we want to listen on a port","width":192},{"text":"We don't want to actually send something anywhere","width":384},{"text":"We're trying to make a passive socket","width":256},{"text":"So for our flags here I need AI_PASSIVE","width":128},{"text":"Okay so we set this up","width":576},{"text":"We can set out get address info as usual","width":128},{"text":"I don't need to connect anywhere","width":320},{"text":"I want to connect to port 300","width":256},{"text":"And we'll get our result","width":128},{"text":"Let's assume that works","width":128},{"text":"So well check the return value of this","width":320},{"text":"Here's how we can set things up","width":64},{"text":"It just takes two calls","width":128},{"text":"Yes we need to make a socket as usual","width":192},{"text":"Remember that represents our kernel object","width":256},{"text":"The thing that is going to talk about our ability to the outside world","width":320},{"text":"And we pass in everything we get from our result object","width":64},{"text":"Note the hintes","width":128},{"text":"Yes we want to continue to a particular port","width":320},{"text":"So we need to call bind on that socket","width":128},{"text":"But that's it","width":256},{"text":"There's no queue to make","width":128},{"text":"There's no exec to do","width":384},{"text":"We just wait for packets to appear","width":128},{"text":"How do I do that?","width":192},{"text":"I call recvfrom","width":64},{"text":"And when you do this","width":448},{"text":"Not only can you get the data that someone set you","width":384},{"text":"So let's pass in a buffer and how big our buffer is","width":64},{"text":"You can also find out who sent it","width":320},{"text":"So that's the purpose of this structure here","width":192},{"text":"And we pass in the size of this structure as the last argument","width":256}],
// Part 5
[{"text":"So what are these UDP packets look like?","width":448},{"text":"So here's the specification of UDP","width":192},{"text":"It's this little diagram here","width":320},{"text":"And there's really not much to it","width":384},{"text":"It's the UDP format","width":128},{"text":"I got a source port, destination port","width":192},{"text":"So each of those is 16 bits","width":256},{"text":"I've got the length here, 16 bits","width":192},{"text":"I've got a checksum which is required for IPv4","width":384},{"text":"And the data that someone wants to send me","width":64},{"text":"So that was the original spec","width":192},{"text":"So it looks like we could have packet sizes up to 2^16","width":512},{"text":"Because that's the number of bits that our length is","width":320},{"text":"In practice that may not be true","width":192},{"text":"The spec actually says the minimum supported is 500 bytes","width":448},{"text":"And in practice most routers will happily send packets up to 1500bytes","width":768},{"text":"Which by the time you add the overhead of the UDP and IP fragment ","width":192},{"text":"It means that UDP packets are limited to about 1472 bytes","width":384},{"text":"So try sending a packet greater than that on a classic network","width":384},{"text":"Good luck","width":192},{"text":"How do you know it didn't work?","width":192},{"text":"This is the sound of silence","width":128},{"text":"You get NOTHING","width":64},{"text":"You send stuff out","width":64},{"text":"It goes nowhere","width":128},{"text":"There's a router in the middle that says","width":256},{"text":"I SEE YOUR PACKET","width":128},{"text":"I SPIT ON IT","width":64},{"text":"I EAT YOUR PACKET FOR LUNCH","width":64},{"text":"Right","width":64},{"text":"So","width":64},{"text":"There's two little problems right so","width":192},{"text":"It's great for sending small amounts of information","width":384},{"text":"An amusing anecdote here is IPv6 has since designed jumbo packets","width":576},{"text":"Which can be up to 4GB in size","width":128},{"text":"I mention this because I find this amusing because right now ","width":512},{"text":"Most of the infrastructure spits on anything bigger than 1472 bytes","width":256},{"text":"And we've got spec that allows up to 4G","width":192},{"text":"Good luck getting that packet to go anywhere","width":192},{"text":"Maybe by the time you graduate we'll see jumbo packets floating around on the internet","width":320},{"text":"But the spec is there","width":64},{"text":"It's probably going to take a generation of electrical failures before we upgrade enough of the infrastructure before jumbo packets truly work","width":576},{"text":"You might be able to get it to work on your local subnet","width":192},{"text":"On your local router","width":192},{"text":"If you buy some very modern hardware","width":320},{"text":"But these days currently ","width":64},{"text":"UDP in practice","width":192},{"text":"Yes that's about the maximum size you send a packet","width":256},{"text":"So when is UDP actually used?","width":256},{"text":"You will see UDP packets for DNS","width":192},{"text":"The main name service","width":320},{"text":"So when you type in something like HEY","width":192},{"text":"I want to go to the host which say its bbc.com","width":320},{"text":"Someone somewhere needs to know how to translate this address to an IPv4 or IPv6 address","width":640},{"text":"And the person","width":256},{"text":"The service","width":64},{"text":"Who knows how to do this is DNS","width":128},{"text":"Which cached this information","width":64},{"text":"So there's a whole hierarchical structure of servers that can convert hostnames and addresses to their relevant IP numbers","width":640},{"text":"To do this your machine sends out UDP packets","width":512},{"text":"And it may send out to 2 or 3 different DNS servers","width":384},{"text":"They might say Hey Im in a rush here","width":64},{"text":"And quick I need to know","width":128},{"text":"Who has the answer?","width":128},{"text":"So that's why we use DNS","width":64},{"text":"A single packet, if it gets lost, it doesn't matter","width":256},{"text":"I'm going to ask someone else as well","width":64},{"text":"If it times out I'll just send it again","width":192},{"text":"It's a simple kind of QUICK I NEED THIS","width":256},{"text":"and hopefully I'll get the response back as fast as possible","width":128},{"text":"Much faster than opening up a TCP connection","width":128},{"text":"So DNS traffic uses UDP","width":256},{"text":"Let's compare this with TCP","width":704},{"text":"So the TCP packets are much more uh complicated","width":896},{"text":"Here they are","width":64},{"text":"There's some similarities","width":256},{"text":"You'll notice that we've got a port number","width":256},{"text":"From the source and the destination","width":320},{"text":"Why do you think we need the source port?","width":192},{"text":"I'm sending you a packet to your server","width":576},{"text":"Why should I send you my source port?","width":256},{"text":"So you can responde","width":128},{"text":"So look there's multiple packets going out of different ports on my server all of the time","width":576},{"text":"When the other socket at the other end wants to send back some information it needs to know which port to send it to","width":448},{"text":"So  the source port is important because we'll need that for the destination","width":448},{"text":"We've also got a sequence number.","width":192},{"text":"Remember","width":64},{"text":"What does TCP try to do ?","width":64},{"text":"It tries to hide the fact that we're sending packets across","width":320},{"text":"We've kind of turned this into a stream","width":256},{"text":"But packets might get lost","width":64},{"text":"It might get duplicated","width":64},{"text":"So our trick is to keep track of the total number of bytes that we've successively sent in each direction","width":640},{"text":"So we'll mark each packet with where we are in the stream","width":384},{"text":"So we have a sequence number","width":192},{"text":"It represents the actual number of bytes that have been transferred in this direction so far","width":320},{"text":"So this means if we lose some packets","width":128},{"text":"The other end can say","width":64},{"text":"HEY","width":64},{"text":"I've lost some packets","width":192},{"text":"I've lost you","width":128},{"text":"Can you resend starting from here?","width":320},{"text":"And that's part of the acknowledgement number","width":192},{"text":"The other end of our connection can say I hear you","width":384},{"text":"I've got your message so far up to this point in the stream","width":320},{"text":"Right","width":192}],
// Part 6
[{"text":"In the beginning","width":192},{"text":"Uh TCP could just uh back in the early days","width":384},{"text":"of ARPANET","width":64},{"text":"our sequence numbers could just start from zero","width":128},{"text":"Today however","width":128},{"text":"They don't","width":64},{"text":"Initially when we start the connection we actually start it with a random number","width":512},{"text":"So we have a 32bit random number which is our initial sequence number","width":448},{"text":"Why do you think that might be?","width":128},{"text":"Security","width":320},{"text":"Otherwise somebody could send some data to whoever we're talking to","width":576},{"text":"And if they chose the sequence number correctly","width":256},{"text":"They could insert some data into our stream","width":128},{"text":"By making it harder to guess what sequence number we're on we can make our approach a little bit more robust","width":512},{"text":"So it uh it's random","width":512},{"text":"Now with each packet we send","width":384},{"text":"There's various flags we can set","width":128},{"text":"This is not a networking class","width":128},{"text":"So we're not going to go into detail with what these mean","width":320},{"text":"But we will mention this","width":128},{"text":"That packets can be labelled with these little flags","width":448},{"text":"And the first packet you send has this little label that says the SYN-ful packet","width":384},{"text":"it's the SYN-ful*","width":320},{"text":"And the receiver, the server, says THANK you! I acknowledge your SYN-ful ness.","width":512},{"text":"Yes","width":64},{"text":"Right so imagine you had a jigsaw puzzle","width":640},{"text":"A 1 dimensional jigsaw puzzle","width":256},{"text":"Much easier than a 2 dimensional jigsaw puzzle","width":320},{"text":"And each piece arrives with a sequence number","width":128},{"text":"This makes it really easy to put together","width":256},{"text":"That's the purpose of the sequence number","width":128},{"text":"if they arrive out of order, if you have any missing pieces","width":64},{"text":"You actually know where to put it inside your data stream","width":256},{"text":"You might get - a quick question","width":320},{"text":"It'll lap around","width":128},{"text":"Oh yes","width":512},{"text":"You couldn't send more than 4gb in a packet","width":192},{"text":"Yes the sequence number actually represents the daya","width":832},{"text":"It's not just a count of the packets","width":128},{"text":"It represents the contents, it represents the data stream","width":320},{"text":"And what the bytes that you've put inside the packet where they should be fitted into inside the stream","width":384},{"text":"Right so you might have a packet that says","width":640},{"text":"OKAY","width":64},{"text":"I'm sequence 10 here's my data blah blah blah","width":448},{"text":"And there's another packet that might before or after that says I'm sequence number 20 and here's my data blah blah blah","width":384},{"text":"And the operating system says thank you very much","width":256},{"text":"I can see that the data stream that I should give back to my process should have the blue data first and the black data after  it","width":448},{"text":"So I might be able to reassemble the data back into a stream of data to send to the program","width":192},{"text":"No there's no limit","width":320},{"text":"Talk to me afterwards","width":192},{"text":"These numbers can lap around","width":192},{"text":"This is just a long stream","width":256},{"text":"And uh data was arriving from here in packets","width":64},{"text":"And the user is calling read so we're giving the data as the user process wants it","width":320},{"text":"But these numbers can just wrap around","width":64},{"text":"modulo 4gb","width":256},{"text":"Alright so","width":128},{"text":"So this is the connection handshake","width":512},{"text":"That we see between the server and the client","width":256},{"text":"So the client says","width":128},{"text":"HEY I want to connect to you","width":320},{"text":"And here's my SYN-ful number","width":64},{"text":"My sequence number","width":128},{"text":"The server says okay I've ignored your sequence number","width":128},{"text":"Here's mine","width":64},{"text":"So this is the client saying hello","width":448},{"text":"This is the server saying hello back","width":192},{"text":"And this is the client saying I acknowledge your sequence number as well","width":384},{"text":"With that third packet we can also include some data","width":64},{"text":"So we'll see that again in the future","width":320},{"text":"And you see these diagrams in network classes where the client tells the server","width":768},{"text":"The server responds","width":128},{"text":"And the client responds again","width":128},{"text":"So we have this three way handshake","width":256},{"text":"But this takes time","width":320},{"text":"We haven't gone the speed of light","width":320},{"text":"They're covered by the speed of light*?","width":64},{"text":"They're covered by the hardware","width":128},{"text":"They're covered by the routers in the way","width":256},{"text":"YES","width":64},{"text":"Quick question","width":64},{"text":"Okay so","width":384},{"text":"The server asknfjasnf nomenclature, those words, are really only important for the initiation of the connection","width":512},{"text":"After that both sides can play","width":256},{"text":"Both sides have sequence numbers","width":192},{"text":"Both sides send acknowledgement packets","width":256},{"text":"Both sides control congestion","width":64},{"text":"Etc etc etc","width":64},{"text":"There is no longer a kind of master slave relation","width":448},{"text":"Both have equal footing","width":192},{"text":"So we'll finish with this that","width":384},{"text":"So one thing we'll try to prevent again is something called a SYN flood","width":256},{"text":"Which is an attack on TCP","width":128},{"text":"Where we try to send a server a whole load of packets with these synchronization messages","width":576},{"text":"Initiation messages","width":128},{"text":"We walk up and say HEY I'm SYN-ful","width":320},{"text":"And the server replies back and is now waiting for the response","width":192},{"text":"So it's very cheap to send these","width":192},{"text":"You can just fire a packet","width":64},{"text":"Whereas the server now has to set up a connection","width":64},{"text":"And it's like okay I'm waiting for the handshake","width":384},{"text":"So it's an attempt to do a denial of service on a server","width":512},{"text":"And with that we're out of time","width":64},{"text":"So thank you very much","width":192},{"text":"And I'll see you friday","width":64}],
// Part 0
[{"text":"[silence]","width":3776},{"text":"alright good morning class, how are you?","width":192},{"text":"hello myself how are you? right I am great thanky ou","width":384},{"text":"let's try again, good morning class how are you?","width":192},{"text":"okay great so here's our plan for today, we're going to run through and talk about these final exam questions","width":384},{"text":"if you're sitting by yourself please move until you're sitting next to somebody","width":320},{"text":"if you worked on these questions with your neighbors why not find a different neighbor that can maybe give you insight into the things you thought you knew and the things that you didn't think you know","width":576},{"text":"so please find some interesting neighbors at this moment","width":256},{"text":"secondly, I'll give you some tips on doing the streaming merge sort","width":320},{"text":"I'll talk about MP deadlines, we'll do an ask me anything and if we have time we'll do some tips on learning and prep for the final exam","width":576},{"text":"right so at this moment please find a neighbor and we'll take a few moments for you to compare answers and find out ask your neighbor stuff that you were unsure about","width":768},{"text":"[silence]","width":22912}],
// Part 1
[{"text":"[silence]","width":11072},{"text":"here we go so I did a quick poll to see which questions people would like me to go over in lecture","width":384},{"text":"I'll get through some of them today, others we'll get through before the end of the semester","width":384},{"text":"here's the game is that this is all stuff that CS241 UIUC students should know, it'd be embarrassing if you graduated and you didn't know this stuff, if you weren't able to explain it to other people say...","width":704},{"text":"in an interview or if you're on a team","width":192},{"text":"and you're getting more mature right? and so the idea is to say look this is less about okay learning in the classroom and you should start to be independent learners and also kind of use each other as resources","width":896},{"text":"and of course we have the wonderful WWW project with all sorts of factual information out there","width":384},{"text":"so I'm going to encourage you to actually be able to be independent researchers when it comes to CS knowledge","width":384},{"text":"okay so let's go through some of these","width":256},{"text":"but first let's take a little break and talk about what's coming up next week","width":320},{"text":"right the big one is the key value competition","width":256},{"text":"the very last MP is due at the end of the semester so Wednesday one minute before midnight","width":448},{"text":"all entries before then will be graded","width":128},{"text":"realize that if a hundred people were to submit at that moment, it would take say three minutes times one hundred, it'll take over 300 minutes before you see your result","width":576},{"text":"so if you want to leave it to the very last minute, be my guest, but realize that you're playing with fire","width":384},{"text":"you may not have a second chance of course to fix anything","width":320},{"text":"so early submissions you should see results early","width":256},{"text":"late submissions it'll take hundreds of minutes before you see a response","width":320},{"text":"before all of that, here's some other good news hey guess what there's going to be a last chance","width":448},{"text":"perhaps you got a zero on the MP because you were busy doing something else","width":320},{"text":"right or just made a silly mistake or don't panic you can still reclaim 75% of your points","width":384},{"text":"if you've already got at least 75% on a particular MP, you can ignore that MP","width":320},{"text":"and of course take the maximum of these grading runs and all prior runs","width":384},{"text":"so for everything except key value this applies","width":256},{"text":"on Monday, if you didn't finish MP merge part 2, here's your chance","width":448},{"text":"and by the way, we have made MP merge part 2 a little bit easier to earn for points","width":576},{"text":"if you can pass part two you get 95%, if you beat the TA's solution, you get the remaining 5%","width":576},{"text":"int he very first run of MP merge streaming, only 25% of the class were able to succeed at this task","width":640},{"text":"which it was a new MP and actually to be honest, it's surprised me that it was hard","width":448},{"text":"so today I'm going to... ","width":384},{"text":"today, however, one is I'm going to give you a couple of hints and secondly you're different people than before right?","width":448},{"text":"you're brighter, smarter, better looking, ah that doesn't matter","width":320},{"text":"but you're brighter and smarter and so you should now be able to finish MP merge part 2","width":384},{"text":"and do much better than you could than at the beginning of the semester","width":320},{"text":"right so we'll come back to that at the end of this class","width":192},{"text":"if you already did well, we're going to give you some bonus points instead","width":512},{"text":"yes at the back?","width":64},{"text":"uhh I believe there was a context page and I heard this anecdotally from the grading TAs, that only 25% of students...","width":960},{"text":"but I tell you what, I will ensure that an email is sent out","width":256},{"text":"in the near future","width":192},{"text":"certainly before the weekend","width":128},{"text":"okay right so yes I realize it's a busy time at the end of the semester, that's kind of always how it works isn't it?","width":512},{"text":"so see my FAQ, help I'm working too hard, yeah I'm sorry learning is hard right?","width":384},{"text":"also don't confused recognition like oh I know this I have seen this before with actual ability to do something... yes?","width":448},{"text":"yes there will be something on piazza very shortly or the home page to say the URL for that","width":576},{"text":"similarly a URL for the key value as well","width":256},{"text":"alright so as you know, there's a big difference between being able to say oh I recognize this to hey I can actually recall this vs hey I can actually use this information vs I can actually debug a version of this","width":832},{"text":"vs hey I can create something based on this which satisfies additional constraints right? we're talking about different levels of  [something] taxonomy of understanding and learning","width":576}],
// Part 2
[{"text":"right so yeah learning is hard I'm sorry if I knew a way to do the matrix for instance I know how to do systems programming, that would be fantastic but we can't do that just yet","width":576},{"text":"right so let's have a look at one of these problems today and this will actually help with the [something] of the homework","width":512},{"text":"which is perhaps you can do this, I'll give you the answer in a moment, perhaps you should be able to do this, this is actually based on a final exam question","width":448},{"text":"remember the bitwise operators? these are not the logical operators, these are bitwise operators so we can use ampersand & for masking for example this is or | left << and right shift >>","width":640},{"text":"or right shift and left shift","width":192},{"text":"and so we want to use these to write some pseudocode as to how the hardware works right? can we actually write some C like code that would convert a pointer","width":512},{"text":"here it is here's my little pointer to one byte","width":192},{"text":"and determine the page number and the offset","width":192},{"text":"right so this shouldn't be too hard if you know your bitwise operators","width":320},{"text":"I'll give you just 30 seconds for you and your neighbor to have ag o","width":320},{"text":"[silence]","width":4992},{"text":"okay so here's the plan, we think of our virtual memory address in terms of two halves","width":384},{"text":"the lower bits will be our offset and we're just going to ignore those for a moment","width":320},{"text":"they'll come back to play at the very end when we add them back in","width":192},{"text":"and we've got a page number as well so the upper bits are our page number","width":192},{"text":"right so we can use our bitwise operators to extract this from our single pointer","width":384},{"text":"for the offset we want to write a mask so that we only see the lowest bits","width":320},{"text":"so we're going to say pointer","width":256},{"text":"& and now I want something that represents the twelve lowest bits, in other words if I was writing in binary it'd be 1 2 3 4 1 2 3 4 1 2 3 4","width":832},{"text":"so that would be my binary representations and all the upper bits would be zero","width":256},{"text":"right can I convert that into hexadecimal","width":192},{"text":"remember hexadecimal each hexdigit corresponds to four bits right?","width":576},{"text":"so we should and it with 0xfff","width":448},{"text":"and the upper bits of this number are all zeroes","width":576},{"text":"right what about the page number?","width":448},{"text":"I want to take these bits and shift them to the right twelve times","width":384},{"text":"well I could divide by four thousand ninety six","width":320},{"text":"but instead why don't we just shift","width":128},{"text":"there we go so now I've got my page number","width":512},{"text":"if my hardware implemented a single level page table","width":320},{"text":"I could then use this to look up an entry inside that single level page table","width":192},{"text":"that would give me what?","width":128},{"text":"what's it called?","width":192},{"text":"what do we get when we look inside the page table?","width":448},{"text":"the frame! yes the physical frame","width":128},{"text":"so if I still use this, look it up inside the page table, I get a physical frame","width":448},{"text":"if I take that frame, I can now combine it with the offset to give me the actual address","width":448},{"text":"so the final address..","width":192},{"text":"would be...","width":256},{"text":"take the frame shift it...","width":256},{"text":"left by twelve, put it into the right place","width":256},{"text":"and or it or add in the offset","width":256},{"text":"and that would give me the actual RAM address, the actual piece of RAM that I want to read or write to","width":704},{"text":"of course we're writing C code, my assumption is that our hardware engineers are not writing C code, they are probably writing very [something] vhgl or some other lower level hardware language","width":768},{"text":"alright so let's see if you can play with page tables then for this little example","width":512},{"text":"here's a virtual address","width":128},{"text":"this time I've got eight bit pages, they're tiny, and the following page table","width":512},{"text":"so using this, what is the physical address associated with this virtual address?","width":320},{"text":"so we're going to have to take this address and cleave it into a page number and a offset","width":768},{"text":"[silence]","width":1024},{"text":"and the answer is...","width":128},{"text":"it's a trick question, you can't answer it yes? because...","width":384},{"text":"where's the offset going to be? the offset is going to be the lowest eight bits","width":320},{"text":"so the upper hexadecimal digits are your page numbers","width":320},{"text":"and I didn't give you...","width":128},{"text":"enough entries of this table, its somewhere off here","width":320},{"text":"so I didn't actually give you this particular entry","width":448},{"text":"right so let me stencil it in, so somewhere deep, much lower in the page table, there happens to be entry number 010203","width":512},{"text":"and if we were to look up there and we found an address like...","width":384},{"text":"BAAD","width":320},{"text":"now you can tell me the actual physical address, I've got to take this and combine it with the original offset","width":640},{"text":"so in other words, the final address will be BAAD04","width":512},{"text":"would be our physical address","width":320}],
// Part 3
[{"text":"questions about that?","width":640},{"text":"so you see when you use a page table","width":640},{"text":"things are slow because our page table itself is stored in memory","width":256},{"text":"so anytime your process wants to do anything","width":192},{"text":"read or write a piece of memory","width":128},{"text":"it first of all has to read this memory of the page table","width":128},{"text":"in order to calculate where to go in memory","width":192},{"text":"you've slowed everything down","width":192},{"text":"so to speed everything back up, we need a cache, what is that cache called?","width":320},{"text":"yes the TLB, the translation lookaside buffer","width":320},{"text":"because most of the time when we use an address, we use it again in the near future","width":384},{"text":"and so hopefully we have a cache hit, hopefully we have a high likelihood that we don't need to actually go back to our table to discover the answer","width":576},{"text":"so that TLB is part of the memory management unit, its job is to short circuit this lookup so that we can actually have good performance","width":704},{"text":"alright what does peterson's solution solve?","width":384},{"text":"do you know? does your neighbor know?","width":576},{"text":"if your neighbor said the critical section problem, congratulations you should sit next to that neighbor in a future class","width":640},{"text":"yes the critical section problem","width":256},{"text":"how dare I ask questions which are from weeks and weeks and weeks ago","width":640},{"text":"here's why, if you want long term memory of CS241 content","width":384},{"text":"the best way to actually learn something for the long term is to use your long term memory","width":320},{"text":"and so I'll be talking about that in terms of revision for the final and beyond","width":320},{"text":"right so it solves the critical section problem","width":256},{"text":"right malloc is thread safe but not signal safe","width":192},{"text":"the malloc you wrote was not actually thread safe but now you know about mutex locks","width":320},{"text":"you could have written a little lock and unlock around your code and made your malloc thread safe","width":384},{"text":"but it's not signal safe","width":256},{"text":"why? what's special about signal handling that's different from threads","width":640},{"text":"not quite","width":320},{"text":"yeah you're interrupting the process okay","width":448},{"text":"right yes you might interrupt malloc whilst it's executing malloc code","width":704},{"text":"reenter malloc and the data structure could be in a inconsistent state","width":384},{"text":"so it's a bit like... an analogy here might be you have a whole load of chefs coming in","width":512},{"text":"so you say I tell you what I'll have mutex locks so that only one chef at at time is allowed to use my kitchen","width":384},{"text":"so that's thread safe","width":128},{"text":"with signals, what you do to the chef is you say actually hold on chef I'm going to get you to come back to the room and cook this different recipe","width":640},{"text":"they walk in, there's the same thread, but now the kitchen is in disarray, the oven is already got something inside it, already set to a particular temperature","width":576},{"text":"and now your chef attempts to use these resources","width":192},{"text":"whoops, we can now get our memory data structures into an inconsistent state","width":384},{"text":"or we might try to lock a mutex that we've just locked resulting in deadlock because we were the thread that actually locked the mutex","width":640},{"text":"right and...","width":192},{"text":"here's one little challenge for you, okay think back in time to sempahores","width":640},{"text":"how do semaphores work? remember they don't let their count go below zero","width":512},{"text":"if you call sem_wait, it might block until someone else calls sem_post","width":384},{"text":"so I'm going to finish this code to make a barrier","width":384},{"text":"or rather you're going to finish this code to make a barrier","width":384},{"text":"what I want is so that the first four threads when they call this code are blocked","width":320},{"text":"but when the fifth thread arrives","width":192},{"text":"they all may continue but not before","width":320},{"text":"alright so how are you going to finish this code and what are the initial values for sempahore a and semaphore b","width":448},{"text":"alright this is a timed challenge","width":256},{"text":"you've got until I've done two laps of this and finished singing ackey breakey heart","width":384},{"text":"fortunately I sing very quietly ","width":320},{"text":"[silence]","width":10368}],
// Part 4
[{"text":" alright so we've got five threads walked into a barrie ow!","width":384},{"text":"what do we have going on here? well each time they walk into a barrier, they try to wait on A and then they increment a count","width":640},{"text":"if the count is something, hey let's post to the other semaphore","width":256},{"text":"and then let's always post to something else","width":320},{"text":"so this first semaphore sA looks like it's being used to define a critical section","width":576},{"text":"why should this be inside the critical section?","width":384},{"text":"we only want one thread at at time to be incrementing count or checking its value","width":448},{"text":"so if we make this post back to A","width":256},{"text":"then we can ensure that one thread at a time is incrementing the count so we can't have a race condition","width":448},{"text":"so that suggests the first value of sA is what?","width":384},{"text":"one, yes!","width":128},{"text":"so we allow one thread through but if another thread comes at the same time, it's forced to wait until the first thread has posted","width":512},{"text":"right so we're doing one at a time","width":320},{"text":"right now we said five threads so this is going to be if our count has gone up to five","width":448},{"text":"because we were doing it after we've incremented the count","width":256},{"text":"what do we do? we post to sB","width":128},{"text":"this suggests if I want my early threads to wait...","width":704},{"text":"maybe I should set this to zero","width":448},{"text":"because why don't i wait down here","width":256},{"text":"and I'll wait until that count is incremented to one","width":576},{"text":"okay does this code work?","width":320},{"text":"does it let through any threads before the fifth thread arrives?","width":320},{"text":"can any threads get through? if I send it four threads can any of them get through?","width":512},{"text":"where do they get stuck?","width":192},{"text":"yeah the sem_wait waiting for sB so the first four threads get stuck at that line","width":640},{"text":"all waiting for the count to go up by one","width":256},{"text":"but on the fifth thread we call sem_post great we're done right? our code is complete. actually what happens instead?","width":320},{"text":"yeah one thread is lucky","width":192},{"text":"the other four not so much, one thread is going to say great I was able to continue","width":512},{"text":"the other four of course are going to wait forever","width":192},{"text":"but there's something we can do to that one lucky thread","width":256},{"text":"that is going to give us a domino effect right? and that is what?","width":320},{"text":"let's sem_post","width":256},{"text":"so as that thread walks out the door, it bumps up the count again","width":320},{"text":"freeing the next prisoner","width":192},{"text":"that prisoner, that thread walks out, bumps up the count, freeing the next prisoner and so on and so on until we have all five threads have left our barrier","width":576},{"text":"so that's correct code, what would have happened if we had switched these two around?","width":896},{"text":"perhaps you can explain it to your neighbor and decide if your neighbor's explanation is any good","width":1280},{"text":"so what would happen","width":192},{"text":"there's not a barrier anymore, yes, before we called sem_wait we've added one to the count so now every thread will simply get through the moment it arrives so it'd be a useless barrier","width":832},{"text":"alright thanks for playing today's review questions","width":192},{"text":"right so let's talk about some other stuff","width":128},{"text":"first of all Monday I'm leaning towards having no quiz on Monday, no more quizzes","width":576},{"text":"but I'd like to just take a quick survey, if you would like one more quiz this semester on Monday","width":448},{"text":"do this, this way, if you'd like no more quizzes for the rest of the semester... do that","width":384},{"text":"Yes I'll still be dropping three","width":448},{"text":"the last quiz will be a quiz of all possible questions","width":448},{"text":"okay is that sufficient information for you to be able to make up your minds","width":384},{"text":"are you ready? go","width":128},{"text":"[something] has it, there were more people pointing in that direction","width":576},{"text":"so there will not be a quiz next week, no more quizzes","width":256},{"text":"right the next thing we'll talk about yes","width":256},{"text":"you can generate your own quiz simply by concatenating all possible PDFs","width":768},{"text":"okay so let's see we've got...","width":448},{"text":"we've done MP deadlines, streaming sort, oh yes right","width":256},{"text":"section tomorrow, section there is no prep for section, in section you will get your webserver finished","width":512},{"text":"we may add one small little thing to it as well and then the rest of the section time will be spent on MP development and MP finishing","width":512},{"text":"and MP questions","width":64},{"text":"plus there's an opportunity for you to give feedback on section experiences back to your course assistants etc","width":576},{"text":"so please come to section, also please bring your answers to section for points right? to get the four percent, bring your printed copies to section thank you very much","width":704},{"text":"right okay","width":256},{"text":"[silence]","width":768},{"text":"right once upon a time I had some data","width":192},{"text":"and my data arrived in chunks","width":192},{"text":"here it is","width":64},{"text":"there was a little callback that said hey I've got 256 numbers for you","width":256},{"text":"before returning, you have to copy those numbers out into your own area","width":576},{"text":"because by the time you return, that little buffer is going to be overwritten with the next set of numbers","width":384},{"text":"so that's the callback, to be given all of these, unfortunately you didn't know how many times you're going to be called back","width":384},{"text":"other than the fact that to make the MP simpler there was going to be 2^n number down here so it might be 4 6 8 16 32 etc etc etc","width":640}],
// Part 5
[{"text":"so our task then was to turn this into a merge sort problem","width":448},{"text":"in other words..","width":128},{"text":"that two neighboring chunks of data","width":320},{"text":"should be combined","width":128},{"text":"each individual chunk was sorted using queuesort","width":320},{"text":"and we had say eight threads available to start doing all this merging","width":576},{"text":"now the naive TAs solution was actually not that hard to beat","width":320},{"text":"here's all it did","width":192},{"text":"it simply copied all of these into a large array","width":320},{"text":"and we made a fair guess about how big a size it should be","width":320},{"text":"but we did use realloc just in case the data was going to be larger than expected","width":384},{"text":"but we didn't start off with something small like hey 16 or 32","width":256},{"text":"we gave it a big number because if realloc does need to realloc for space","width":384},{"text":"then it used to call malloc, it needs to then do a memcpy to move all of that data","width":320},{"text":"and talking to memory is slow so we made a good guesstimate about how big a buffer we would need","width":448},{"text":"it simply waited until we got all the pieces","width":256},{"text":"and then it used the part one code","width":320},{"text":"and then it printed out the whole result","width":512},{"text":"right how can we do better?","width":448},{"text":"in this regrade of this we're actually going to put in a small delay between each one to assure that there's actually some significant computational time to work on these items","width":960},{"text":"so some things that we can do which are better, obviously we've got 8 threads we could get started sorting this data before we see the very last piece of data","width":576},{"text":"the other thing we can do is at the very end","width":256},{"text":"we could actually start printing the results","width":256},{"text":"before we finished the final merge","width":320},{"text":"so in the very final merge, as we're pulling these two yellow pieces together","width":320},{"text":"if I got to here, I don't even need to write this data back I could be printing it out to a file","width":704},{"text":"as I merge these results together, so there's actually two optimization ideas","width":384},{"text":"right so what's the simplest way of doing some of these early merges","width":256},{"text":"well one is to say hey doing this stuff thinking about all these different levels is really really complicated","width":384},{"text":"for my tired brain","width":128},{"text":"and so get something simple working, here's a really simple idea","width":384},{"text":"is look at these in pairs","width":128},{"text":"look a lot of merging actually just takes down here at the smallest level","width":320},{"text":"so we could get some speed up","width":192},{"text":"just by thinking about these small blocks","width":192},{"text":"right so every time I see an odd numbered block, I'm going to start off the merge process to make myself a bigger block","width":704},{"text":"and so I could probably write that code just to deal with these smaller blocks","width":384},{"text":"the accounting, keeping track of all the statuses of these little blocks is not too hard","width":384},{"text":"and then when I finish making all of my lighter blue, my cyan blocks, then I'll just...","width":384},{"text":"give the rest of the problem to my original part1 code and just let it run through that","width":384},{"text":"right I should probably stop here because unfortunately...","width":576},{"text":"you are all two bright, you want to do better than this","width":256},{"text":"here's the danger, A writing C code is hard","width":256},{"text":"I'll give you an example of that on Friday when I talk about Toyota's C code and their embedded code inside their memory management unit","width":448},{"text":"various swear words have been defined to describe just what a mess this C code was","width":512},{"text":"so that's the first thing, look writing C code is hard, writing any code is hard","width":448},{"text":"second is that thinking about this algorithm is hard","width":192},{"text":"and sometimes it's good just to come up with something which","width":256},{"text":"you have high confidence in working, get that working and then have a go at something more complicated","width":512},{"text":"so I'll give you some hints about something that's a bit more complicated without going into a full algorithm","width":320},{"text":"and it's this","width":64},{"text":"let's label our blocks 0 1 2 3 4 you get the idea","width":576},{"text":"and also, we'll keep track of the blocks as to how much data they contain which is sorted","width":640},{"text":"so initially after we've done the queuesort I've got one block size of data","width":384},{"text":"and later up here I've got two block sizes of data","width":320},{"text":"so if I keep these labels","width":448},{"text":"then my labels correspond to where my blocks start in memory","width":384},{"text":"so let me call this block 0, this block 2, this block 4, this block 6","width":256},{"text":"if I do this, then I can make the following observation","width":320},{"text":"my block size gives me a strong hint to which pairs I should be merging together","width":576},{"text":"so for example, on my cyan here, if I gave you block 4, you could say oh you should be merging that with block 6","width":896},{"text":"if I gave you block 6, you could say oh you should be merging that with block 4 once they are of sufficient size","width":576},{"text":"so if I gave you a block 4 of size 2, you'd say okay great that needs to be merged with block 6 of size 2","width":384},{"text":"if block 6 of size 2 is not yet ready, then do nothing","width":256},{"text":"and we can go the other way, hey here's block 6 of size 2, you should merge with block 4 of size 2","width":512},{"text":"if block 4 of size 2 is not yet ready, do nothing, don't panic, don't worry about it because at some point block 4 will be ready in the future and it will merge with me","width":640}],
// Part 6
[{"text":"so how can I determine which blocks to put together","width":512},{"text":"okay let's have a look at this one, this is still zero and block four but this time the size is size 4","width":512},{"text":"so if I gave you block 4 of size 4, you would say oh you should be merging with block 0","width":320},{"text":"if I gave you block 0 with size 4, you'd say oh that should be merged with block 4","width":384},{"text":"okay have I given you enough examples yet to see how we can determine which two blocks should be merged together","width":512},{"text":"I'm using exclusive or","width":448},{"text":"I'm xoring with the block number, the size","width":384},{"text":"so for example, here's block 8 of size 4","width":512},{"text":"8 xored with 4 is 12","width":384},{"text":"I'm flipping the lowest bit","width":320},{"text":"in the block number","width":256},{"text":"and eventually in my little example here","width":640},{"text":"I merge 8 with size 8, with 0 with size 8","width":768},{"text":"one of these will come in last","width":192},{"text":"and I'll do the final merge and say oh look here's all the data I needed to merge, I'm done, I can start writing out the data","width":576},{"text":"if that is too complicated to turn into code","width":320},{"text":"I have two advices","width":128},{"text":"that's okay!","width":256},{"text":"take CS 373 473 then your brain will explode ","width":704},{"text":"learn about things like topological sort which I can't spell this morning","width":448},{"text":"and that's okay you'll remember this lecture with fondness, oh that was so easy compared to this","width":448},{"text":"topological sort is when you start to think about dependencies between actions and it has some relevance to this task in hand","width":448},{"text":"but you don't need, the other piece of advice is don't panic, you don't need to go this far to beat the naive TA's solution","width":704},{"text":"okay so let's turn ourselves back to some of these questions","width":448},{"text":"right some of these I will not address today, I'll talk about them on Friday, remember you are getting points for learning and not simply printing out the right answer","width":704},{"text":"let's do which scheduling algorithm describes the smallest average wait time?","width":640},{"text":"results in the smallest average wait time, the answer here is going to be preemptive shortest job first","width":448},{"text":"why? well you can construct examples where we might have a very long job","width":576},{"text":"and a whole sequence of small jobs and if you did that, the long job you want to put at the very end","width":576},{"text":"otherwise it holds up everybody else, it holds up all of the other processes waiting to run","width":448},{"text":"so how do we assure that the longest job is put at the very end? answer: shortest job first, yes!","width":448},{"text":"preemptive priority you would have to make sure the priorities are based on the length of the job which is not necessarily true","width":896},{"text":"the longest average response time, what's response time? well think about a webserver, a webserver might start giving you some packets, some results pretty early on","width":768},{"text":"but it might take several more milliseconds before you get the full response, we care about how early can we get the beginning, how long do we have to wait before we start to see some output? just the early output","width":896},{"text":"right so what's the longest average response time? first come first serve could give us a long average response time","width":832},{"text":"because the very last job submitted is not going to give us a response until finally all of the other processes have completed","width":768},{"text":"if we wanted a fast response time, what we should do is give each process access to the CPU as early as possible","width":640},{"text":"so what's an example of doing that? round robin yes!","width":192},{"text":"so round robin with a nice short preemptive, nice short quanta so that each gets to do some meaningful amount of work and start generating output","width":704},{"text":"okay minimizes response time round robin, waiting time shortest job first, total response time so this is response time of course all processes again round robin would be useful here","width":896},{"text":"how am i doing for time? right","width":320},{"text":"the other questions I will address on Friday","width":384},{"text":"I will mention I'll just finish with one important idea","width":512},{"text":"right psychological research has shown that if you want to learn stuff, if you want to remember stuff, the most important thing you can do is remember stuff","width":576},{"text":"what do we mean by that? is use your long term memory? how do i do that? easy start with a blank piece of paper, write down everything you know about every topic inside CS241","width":704},{"text":"tomorrow, come back to the same piece of paper and write down more, do not use your notes, just write down more","width":448},{"text":"if you vaguely remember something put some question marks and some helpful hints","width":192},{"text":"the third day, do the same again","width":192},{"text":"the fourth day give up and yeah use your notes","width":192},{"text":"but you will discover that in trying to remember things, in actually exercising your brain","width":384},{"text":"stuff we start to come out of it in drips and drabs at first but it will actually ensure that you have a long term understanding of this material","width":576},{"text":"and with that have a wonderful week I'll see you on Friday!","width":256}],
[]
