[{"text":"let's prove this while one do nothing ","width":2304},{"text":"right so we got the very first line over here","width":256},{"text":"from printing to standard error but we did not get the standard out line","width":384},{"text":"so look at my code, I said \"hey this is using printf and this is using printf exclamation point\"","width":320},{"text":"the difference between the two is that one of them went to standard error","width":192},{"text":"and we saw that straight away","width":128},{"text":"standard out that text is still sitting inside my process","width":256},{"text":"inside the c library because we didn't include any new lines and now my process has got stuck inside this infinite loop","width":704},{"text":"so now when I control C the program never has a chance to flush that buffer","width":256},{"text":"it never has a chance to write it out","width":128},{"text":"if I did just exit normally, if I did just say return 0 here","width":384},{"text":"then as part of the exiting, the C library says oh look I've got some open file descriptors","width":960},{"text":"I will make sure that my buffers are flushed","width":192},{"text":"so it does that at the very end as the program is finishing","width":192},{"text":"right oh and one last thing here, if you actually want to print into a C string","width":448},{"text":"the best thing to use is sfprintf but I'm not going to talk about that today","width":512},{"text":"but that's assemble things into, yes quick question","width":64},{"text":"there is two different streams so it's up to the terminal at the end to combine it into one and display","width":576},{"text":"but we could make it so that the standard error goes to a completely different file or goes somewhere else","width":320},{"text":"let's have a look at page two","width":64},{"text":"yes okay when you free a null pointer, nothing happens, it's a safe operation by definition of the spec","width":768},{"text":"being thinking beings, you want to see errors as soon as possible","width":512},{"text":"you can actually change it there's a call called setvbuff if you want to change it but that's the idea","width":448},{"text":"right okay so which one should we do here","width":448},{"text":"let's do these three, these are the funnest ones","width":448},{"text":"the first three questions on this you can see on the wiki book","width":384},{"text":"I want to kind of go through these, first of all let's write our most exciting system program today","width":640},{"text":"I'm going to use this fork and for that we need to include unitstd.h so let's do that","width":512},{"text":"okay so let's print something out in our little program here, let's find out what our process id is","width":1216},{"text":"so I'll just do %d for now, that's good enough for this lecture","width":384},{"text":"let's call getpid to mean get my process identifier so we'll run this","width":512},{"text":"and nex time I run it I'll have a new line as well so when I run it this time my program was process identifier 61","width":768},{"text":"and in fact if you do ps on a command line you can see all these different process little numbers","width":384},{"text":"and we'll use that later because we'll control them","width":128},{"text":"this little virtual machine doesn't have much going on","width":192},{"text":"right but if I was to run it again, I'd probably get a different process number","width":512},{"text":"one hundred and seventy five, okay","width":64}]