[{"text":"right, so, let's go back and up. what've we got?","width":615},{"text":"alright, what is a signal? It's a software interrupt. it interrupts what the current process is doing","width":801},{"text":"how do they work? that's a good question. there isn't a quick explanation of that that's any good","width":424},{"text":"I suppose a short answer would be 'hey we'll cover more in later lectures' but a slightly more useful answer would be that the kernel delivers a signal to the process ","width":875},{"text":"and I've shown you two kinds of examples","width":146},{"text":"an example where a signal where we can register a handler for that signal and we can change the default process","width":534},{"text":"the default example of the SIGTERM where you cannot register a handler and instead the system will actually destroy your process. will actually quit your process","width":876},{"text":"right, how do I send signals programmatically?","width":369},{"text":"remember?","width":376},{"text":"OK, so it's not signal(). if you call signal() - it's not the right answer - if you call signal() this registers a handler","width":777},{"text":"instead what you need is to say kill()","width":531},{"text":"seems pretty mean, right. all of a sudden we're having a bad day when they designed these things","width":362},{"text":"my assumption is that the very first signal that was developed that was useful was the ability to kill other processes because they got out of control","width":455},{"text":"and then this interface was extended to include other signals like ","width":391},{"text":"'hey my children finished' or 'hey I've got some bytes that need some processing'","width":326},{"text":"so with kill we pass in the process identifer and then a signal name such as SIGINT or SIGTERM","width":1108},{"text":"how do I send a user defined signal? easy! we can call kill and ister them","width":654},{"text":"sigusr1 and sigusr2 ","width":650},{"text":"why should I use signal symbols not the constants? well because the actual constant value varies from operating system to operating system","width":527},{"text":"exception being the early signals that were defined way back in the history before I was born","width":517},{"text":"and the one that everybody knows is that nine is the same as SIGTERM, just kill a process","width":553},{"text":"so it's a common idiom to say 'hey kill -9' meaning this process cannot escape, we're going to stop it","width":663},{"text":"and finally what's the alarm signal? ok, this is fun. when I make a process","width":1098},{"text":"we can set up a process so that it gets a signal in so many seconds. so it can say 'ok I won't have an alarm in 3 seconds'","width":985},{"text":"so now I can have a little program here for - let's do it the old fashion way of C","width":539},{"text":"for i is zero, i less than something, i plus plus","width":615},{"text":"printf %d, i and we'll sleep a bit","width":661},{"text":"OK, so, we've set an alarm and then we just start printing out the numbers to start counting","width":1007},{"text":"this is the evilist alarm clock you've ever seen. it kills your process!","width":442},{"text":"um, most alarms don't do this","width":233},{"text":"yeah, the default behavior for the alarm system is to kill your process","width":300},{"text":"and, where does the word alarm clock come from? that is actually the shell saying I'm going to call waitpid() on the program and then I'm going to use those wait macros that you've seen to determine why my program finished","width":1050},{"text":"or what happened to it. oh look my program finished because it got a signal alarm clock. and so the shell prints out something useful to alarm clock","width":443},{"text":"we of course could do something different form that. we could register a handler for this","width":549},{"text":"ok, so SIGALRM - if I could spell it correctly","width":355},{"text":"ok, and I'll call it thanks","width":338},{"text":"void thanks() takes an int and I'll write one \"Thanks!\"","width":579},{"text":"and how many letters is that? I don't know, about six, right?","width":332},{"text":"so let's run this now and if it works then in three seconds we'll get thanks","width":536},{"text":"hooray! good and now you see our program continues","width":248},{"text":"and now I need to get out of it","width":227},{"text":"so that's the alarm signal","width":98},{"text":"you could use this for example to give a child so many seconds to complete","width":247},{"text":"if it doesn't complete you could deliver the alarm signal to it","width":508},{"text":"questions? ok, page two!","width":128},{"text":"<>","width":576},{"text":"alright, so we did this. we did this, right? we talked about how this is inside the process","width":576},{"text":"it's inside the C buffer for standard out","width":576},{"text":"because there's no new line","width":128},{"text":"so when you call fork we end up with two processes which now continue and they both have I'm a process sitting inside the buffer waiting to be flushed, waiting to be sent","width":704}]