[{"text":"Else if, so that tells me that this vertex state must have been explored, or visited, so I've seen this vertex before and the edge between my vertex u and this vertex v that I've seen before has what label, do I mark it as what?","width":1600},{"text":"So if I've never seen this edge before, I need to mark that edge, so if the edge is unexplored,","width":512},{"text":"Then I need to mark that edge as what? Cross, because it's going to a vertex I've seen before.","width":512},{"text":"Just a generalization of level-order.","width":576},{"text":"We've got these labels flying around, but it's not much harder than level-order.","width":448},{"text":"So if this is the only code I show you what are we missing?","width":384},{"text":"This is only gonna work for--there's 2 problems. 1. This bfs function takes a start vertex, how do I get a start vertex? I have to have some way of finding a vertex at which to begin my traversal.","width":960},{"text":"Which maybe is fine, maybe I start at vertex id=0, but what if my vertices don't have ids? They do in the MP and that's convenient, but vertices might not have id's.","width":576},{"text":"Vertex might be a pointer into that vertex list in which case, how do I just make one, that's tough.","width":448},{"text":"So I need some way of getting the start vertex which might be problematic, and furthermore this will only explore a connected component. If I've got a graph that has multiple connected components this is only gonna see things that are all attached to the component in which I started. And there's no way--it's following the connectivity, it's following the edges, it's always asking for the adjacent vertices, there's no way for me to jump from one connected component to another if there's not an edge between them. That would be part of a bigger connected component.","width":2112},{"text":"So this is only gonna explore one connected component, so I'm missing the function that allows me to see all of the different connected components and decides what my start vertices are. ","width":640},{"text":"That's this one.","width":320},{"text":"Here is the general bfs function that will work for any graph g, and this is going to make sure we see every connected component.","width":704},{"text":"So the very first thing we do is just make sure that if we traverse this graph a couple times, or added new edges and stuff, we don't necessarily know what the labels are, so the very first thing I do is set everything to uexplored.","width":832},{"text":"You could also do a traversal that sets everything to unexplored, but it's simpler for our implementation just to do this.","width":384},{"text":"The important part here is that we can go ahead and make the assumption that everything starts off with label unexplored, that's the only reason this stuff is here. The important part is this...","width":704},{"text":"That we do our traversal over connected components.","width":448},{"text":"We're gonna loop over every vertex in the graph,","width":576},{"text":"We're gonna go ahead and grab its label,","width":448},{"text":"Graph, what is the vertex label for v, and if what is true about that label do I call the bfs function to traverse that part of the graph?","width":1280},{"text":"Unexplored, so if I've never seen this vertex before. So when I am doing this loop I am looking at all my vertices. I see a vertex that is unexplored, I call the bfs function which is gonna mark everything in that connected component as explored. ","width":960},{"text":"So then the next time around this loop I might happen to find another vertex that's in that same connected component, but if it's explored I don't do anything, I've already seen it.","width":512},{"text":"This will just keep hopping around through all the vertices in the graph until it finds one that was unexplored, which means it was in a different connected component, and then it invokes the bfs function to actually do the traversal of the connected component and then we keep doing that. ","width":832},{"text":"This particular function here, how many times will that actually be called?","width":704},{"text":"For graph g?","width":256},{"text":"The number of connected components in the graph, it will be called once for every connected component.","width":256},{"text":"You now have an algorithm to determine the number of connected components in a graph.","width":512},{"text":"Just count every time you call bfs. ","width":64},{"text":"That's the number of connected components.","width":448},{"text":"I wanna call this function if the label is vertex_state::UNEXPLORED","width":1280},{"text":"And I wanna bfs. If it was explored or visited, I've already seen that part, so I do't wanna invoke the function again, because then I would keep traversing the same connected component multiple times, and that's silly.","width":896},{"text":"I only want to traverse every connected component once.","width":256},{"text":"Let's analyze it.","width":768},{"text":"Let's start with adjacency matrix, so, this is gonna run for every connected component, so, it's the bulk of the work is happening in that helper function bfs(g,v).","width":1216},{"text":"Let's analyze that.","width":256},{"text":"And the analysis of that will carry over to the bfs in the whole graph, it's just the sum of the running time of traversing every connected component. ","width":512},{"text":"So when we're talking about, analyzing the helper function bfs(g,v), I'm going to talk where n is the number of vertices in that connected component and m is the number of edges that exist in that connected component.","width":960},{"text":"Overall, we're just gonna add up the connected components and that will end up giving us the actual, n, number of vertices and m, number of edges. ","width":576},{"text":"When I am thinking about just this part, which is responsible for 1 connected component, think of a graph that is connected. The analysis works out either way. So how long does this take? And keep in mind that we're using an adjacency matrix.","width":1408}]