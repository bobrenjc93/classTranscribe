[{"text":"they can be a heap","width":192},{"text":"right, but","width":64},{"text":"but it gives you a random of range, not a heap.","width":128},{"text":"so you learn to build heap first.","width":64},{"text":"how long is that going to take or rand","width":320},{"text":"ok, all of  the idea is build","width":576},{"text":"a, and this case, what kind of heap we are going to build","width":192},{"text":"Is gonna to depend on what order we want this order to take, ok?","width":320},{"text":"so we want this order to be smallest number first and largest number last","width":64},{"text":"we would want to build in this case it turnes out a max heap","width":512},{"text":"we will see why in a second","width":128},{"text":"if we want largest numbers first, smallest numbers last, ","width":192},{"text":"that we wouldn't give it here because we made a min heap","width":192},{"text":"ok","width":64},{"text":"so, depanding on which order you want the number sorted, ","width":256},{"text":"you got to make a heap with priority kind of flip the other way around","width":256},{"text":"so if you want the thing is smallest to largest, you got to make a max heap","width":256},{"text":"which is certain not intuitive","width":64},{"text":"you want the thing lagest to smallest, you gonna make a min heap","width":192},{"text":"and we will see why that, why is it flip in a second","width":128},{"text":"um so in this case, we gonna  build the heap","width":384},{"text":"then that in place out root them you know that if I give you an array","width":256},{"text":"you can run the bill tip of them on that array without all kidding any new space","width":256},{"text":"right","width":64},{"text":"so that's fine, that's still in place","width":128},{"text":"ok once we got this heap","width":320},{"text":"what we gonna do to actually sort","width":192},{"text":"the elements","width":128},{"text":"so think about this case here","width":64},{"text":"I made a min heap, so I am saying I wanna and I am going to use this min heap","width":256},{"text":"to sort the data","width":128},{"text":"So that it's largest to smallest","width":128},{"text":"So I want this smallest thing in my data set","width":192},{"text":"the smallest thing in my heap","width":64},{"text":"the smallest thing in array end of but back of the array","width":320},{"text":"and then the second smallest thing to be one befor that,","width":192},{"text":"and then the third smallest thing be one befor that, right?","width":320},{"text":"if we draw the array that we've got here","width":896},{"text":"so it's","width":256},{"text":"4 5 6","width":128},{"text":"15, 9, 7, 20","width":256},{"text":"16,25","width":128},{"text":"let me know if it scew up","width":64},{"text":"14","width":128},{"text":"12, 11","width":128},{"text":"is that right?","width":64},{"text":"that's what our array look right now, actually we build the heap","width":192},{"text":"ok","width":64},{"text":"obiviously, this  is a sort of, we are not done we have to do more work","width":320},{"text":"be a miracle of we could just build the heap that was sorted","width":256},{"text":"um, and you are doing, like turing in a work, because you proving something that is impossible","width":256},{"text":"So, we are not done, we still have to do something","width":384},{"text":"and I am telling you that in this particular example, I want to sort the arrays that the largest elements comes first","width":384},{"text":"so what could I do","width":64},{"text":"using heap balance, what could I do","width":256},{"text":"Oh, what what","width":576},{"text":"element","width":64},{"text":"Do I  sort of know the most about in this heap","width":384},{"text":"the root,right?","width":128},{"text":"being the root of the heap, tells you quiet a bit about the element that's there","width":256},{"text":"right?","width":64},{"text":"It's smaller in this case in the min heap, it definitly smaller than every, single, other element in the entire array","width":384},{"text":"How could I lervarage that knowledge","width":448},{"text":"I need... I need swap it","width":128},{"text":"to the back","width":64},{"text":"cause that's what I want it to be","width":128},{"text":"right?","width":64},{"text":"by want this array to be sorted from largest to smallest","width":192},{"text":"right?","width":64},{"text":"and I know what the smallest elements is","width":192},{"text":"it's the root of the heap","width":64},{"text":"I can just move that to the back for I wanted.","width":192},{"text":"Right, the difference here","width":128},{"text":"is nor... when we ordinarily do a puff on a heap","width":128},{"text":"We swap it  to the back and we also like call pull back on the vector to get rid of it","width":320},{"text":"we are not could get rid of it here","width":128},{"text":"we want to keep it around","width":64},{"text":"ok","width":64},{"text":"So we are swap it  to the back and them we are going to in study to pull back","width":256},{"text":"decmentun indux","width":64},{"text":"Ok, that indux is gonna tell us","width":192},{"text":"where we are pretending the end of the heep is","width":256},{"text":"even though we know the arrays got more stuff there","width":64},{"text":"we'll say the end of the heap is here","width":128},{"text":"so we start this out room form like this","width":128},{"text":"with that index gonna tell me where the end of heap is by array","width":320},{"text":"Ok,","width":64},{"text":"Now I am gonna do a pop","width":64},{"text":"with this modified pop boundry","width":192},{"text":"so doing a pob, what's that going to do. well","width":192},{"text":"we know that it was swaps","width":128},{"text":"with the back of the array since easy to move","width":320},{"text":"but now we are not gonna remove it","width":64},{"text":"So we do this swap","width":128},{"text":"which means our array texture does this","width":128},{"text":"and then instead of pofing the back to get rid of the element","width":512},{"text":"we are just gonna decommend our index","width":128},{"text":"so we are just going to say ok","width":64},{"text":"our heap only exists up to the twelve","width":256},{"text":"ok","width":64},{"text":"so for I'll them they have same fact is doing this","width":192},{"text":"if we modified our ribbens they true, they instead of saying like back dot signs they look at our signs variable","width":640},{"text":"alright","width":64},{"text":"Now they don't have to care about the fact that the elements that come after min array","width":256},{"text":"just care about what the elements are from zero until up to that index","width":192},{"text":"or one up until that index, depending on what you did, right","width":128},{"text":"and then we gonna finish this off, right","width":448},{"text":"we have to, we are not done, so we gonnan move","width":192},{"text":"we have the heap before I done the eleven to their purpose,","width":128},{"text":"But that gonna swap with the five","width":256},{"text":"and then swap that with the nine, and number down, right?","width":448},{"text":"So we end up with, this being five, this being nine, fifteen","width":704},{"text":"after we do all those swaps, we end up with","width":512},{"text":"let I know if I scew up","width":64},{"text":"thank you suviving","width":64},{"text":"alright, so now","width":384},{"text":"we know we've got this smallest element to the back","width":448},{"text":"so now we care about the second smallest element","width":128},{"text":"where is the second smallest element in this array now","width":128},{"text":"the root","width":192},{"text":"Notice that every single time we do this","width":192},{"text":"we are going to get the next smallest element at the root","width":128},{"text":"five designs that would hepis four","width":128},{"text":"right, that why works is a priority cue","width":128},{"text":"it always gives, moves up the smallest thing or the largest thing,depending on the priority that if chosen","width":320},{"text":"to the root","width":128},{"text":"So if I keep doing this intervly, ","width":256},{"text":"I mean keep puttuing the smallest thing sort of at this at the last unset element in my array","width":320},{"text":"and keep decomending the signs","width":64},{"text":"and keep doing this  until I run out of space","width":192},{"text":"so in this case I am gonna remove the five which swap with twelve","width":320},{"text":"ok","width":192},{"text":"so","width":64},{"text":"the five is going to go there, the twelve is going to go here, and I decommend an index","width":384},{"text":"so now note that this part of the array,","width":384},{"text":"this part of the array","width":64},{"text":"is in fact sorted, in decending order","width":320},{"text":"the part of array is no longer a part of heap will always being under sorted","width":320},{"text":"and decending order if use a min heap","width":192},{"text":"the reason being will always taking the smallest thing and moving it to the back","width":320},{"text":"so we are going to start with smallest thing, second smallest thing, third smallest thing,","width":320},{"text":"forth smallest thing, right, we eventually","width":64},{"text":"find our elements and move on","width":128},{"text":"when our heap no longer containing any thing, we can pop","width":128},{"text":"we can pop anything out of it so we just stop","width":128},{"text":"so this will continue following the processes, where you know I just keep calling if I downs","width":448},{"text":"so it is actually","width":64},{"text":"12, that would swap 6","width":192}]