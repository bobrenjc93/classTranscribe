[{"text":"These are the three major operations that a dictionary abstract data type must provide.","width":448},{"text":"okay. note again that when i tell you about an ADT, I say nothing at all about how the ADT must be implemented.","width":640},{"text":"I say stack. I haven't specified at all if that's with an array, a linked list, a doubly linked list, a tree, I have no idea.","width":512},{"text":"I just said it, i just told you it's a stack.So you know what it'll do if you interact with it.","width":448},{"text":"You know the elements are going to have an order coming off of the stack. But  you don't know how its implemented.","width":384},{"text":"Likewise if I say , if I say a priority queue. Right? You have no idea how that priority queue is implemented.If I just tell you you have a priority queue you don't know","width":699},{"text":"whether its a heap or a sorted array or an unsorted array or a list or a sorted list. you have no idea. Right?","width":512},{"text":"So the ADT is divorced from the actual implementation of the ADT.","width":256},{"text":"So when i tell you just about the ADT that's just kind of what the, what is the, what does it promise to do?","width":384},{"text":"How can you interact with it? Right?And then when I talked about an implementation for an ADT I am talking about how you actually make that happen.","width":512},{"text":"How in the world does insert actually work?","width":192},{"text":"How in the world does remove actually work?","width":192},{"text":"Right? But that's a separate conversation.The ADT just tells you kind of what does it do. What operations must be provided.","width":448},{"text":"But it doesn't specify exactly how you implement that.","width":192},{"text":"Okay! So i want to quickly touch on couple of assumptions that we were making last time that may be more completely clear but you should be able to think about them if I tell you.","width":960},{"text":"So we were making some strong assumptions about what the keys could be in our binary search tree implementation. ","width":448},{"text":"So what are the things that we could use as keys and one thing that we couldn't use as a key.","width":576},{"text":"Think about what you are doing with the keys so what thing will work as keys? What have we been using alll along?","width":512},{"text":"Integers right? so integers would work.","width":384},{"text":"Whta else would work. A character or a string?","width":640},{"text":"What's an example that wouldn't work as a key?","width":256},{"text":"pngs or void. Void is a good one. No png. And why can't I use a png as key?","width":768},{"text":"Yeah I have to I have to do like what do i do with the keys? When i am looking for something I compare it whether its less than some other key. Right?","width":896},{"text":"And I also check if its double equal to some other key.Well there might be double equal for png but there is not a less than for png objects.","width":448},{"text":"So if i am trying to say okay if i have got this dictionary thats mapping pngs to like numbers or something. Right?","width":512},{"text":"And i am trying to traverse my tree if pngs don't have any notion of what is  means to be less than my binary search tree can't even exist. I don't, how do I check if it's a binary search tree? There is no meaning anymore.","width":832},{"text":"Right? So your keys have to satisfy two properties. They have to have, have to have an operator double equal that is i have to able to compare them foe equality like is this key definitely the same thing as that key.","width":1152},{"text":"Right? For integers that's simple. For strings that's compare every element in the string, make sure they are all the same and of the same length. Okay! That's fine.","width":512},{"text":"For a char it's the same thing, it's just a smaller int. So that's all fine. And i also need an operator less than. I need to be able to say A is less than B.","width":960},{"text":"If key is less than subroot key. I am using the keys there and i am using a less than expression for those keys. So they better have an overloaded operator less than.","width":640},{"text":"For integers fine. You know that's the way its always been.For char it's smaller integers. What about for a string? What is less than on a string?","width":640},{"text":"Alphabetic order. Okay so lexicographical comparison.","width":576},{"text":"So here A comes before B. A would come before AA cause AA is longer. Right? So just the same order that you would have in a dictionary. So its lexicographic.","width":640},{"text":"So strings will work here. Yeah? ","width":512},{"text":"Yeah. That gets a little fuzzy because if you even if you have the same person and you fingerprint them twice, that image is not going to compare equal.","width":896},{"text":"Right? Like if i am off by even a little even a millimeter. That picture is not going to be exactly the same again.","width":448},{"text":"So probably what they are using are image features which they locate  this image and kind of locate where the relative positions of lines and stuff are.","width":576},{"text":"So its probably not directly an image. And further more they are probably not using a straight up dictionary for ths. They are probably using some other cover stuff.","width":704},{"text":"Cause you want you want sort off fuzzy lookup. You want something that kind of looks like that to give you the same result whereas here it has to be exactly the same thing which isn't quite that use case. ","width":704},{"text":"Okay! So then if we think about these requirements. Right ?It has to have an operator double equal an operator less than.","width":704},{"text":"Since pngs don't have an operator less than, we can;t use them as keys in a binary search tree. Right?","width":384},{"text":"I wouldn't be able to check if the tree was ordered if i was using pngs if they don't have any notion of what it means to be less.","width":320},{"text":"I can't i can't answer the question are all the nodes on left hand side smaller than in the at the root and all the nodes in the right hand side.","width":512},{"text":"Right? I can't. I have no way of saying what less means.","width":384},{"text":"So they must have operator double equal, an operator less than.Later on we'll talk about a different implementation of a dictionary","width":576},{"text":"that makes different assumptions about the keys. So we no longer need to have less than but we'll need something else.","width":448},{"text":"It's important to keep in mind like what, what's the assumptions I am making? What are the assumptions I am making while i am coding this?","width":448},{"text":"One of them is that they are equality comparable. One of them is that they are less than comparable.","width":256},{"text":"Okay so we quickly wrote a function last time to implement sort of the find operation or dot at to be kind of consistent the way we have been doing dot at for all of our arrays and stuff so we are going to do dot at for this dictionary.","width":1280},{"text":"umm so this first function, is that gonna be a public function or a private function. So i am talking about thid guy right here.","width":1024},{"text":"Probably public.Right? I don't see anything. If you look at that there is nothing specifically about that that screams private. ","width":448},{"text":"It's not like it's taking any nodes so it seems like it ought to be public.So in fact this will be public. This will be the function that people will call.","width":640},{"text":"Is that public function recursive?","width":320}]