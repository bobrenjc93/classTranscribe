[{"text":"yes again this is exactly like you'll find or you insert ","width":448},{"text":"it's just gonna like you has to locate that key first","width":256},{"text":"our base case is if !subroot so we've been to remove a key that doesn't exist ","width":448},{"text":"cause that means we search the whole tree we found an empty tree","width":64},{"text":"so none of the keys compare to equal ","width":192},{"text":"so what you do in that case is sort of up to you ","width":384},{"text":"do you think it's fine to let people remove keys that don't exist ","width":64},{"text":"if so you should just return and do nothing ","width":256},{"text":"if you think you'll let users know that hey I didn't even know  about that key ","width":128},{"text":"so you probably removing stuff that doesn't exist and maybe that's a but or maybe you throw  an exception","width":128},{"text":"I am just gonna be lazy in this return ","width":512},{"text":"he asked me ","width":320},{"text":"so this means in my binary search tree implementation if you ask me you remove a key that doesn't exist ","width":256},{"text":"just doesn't do any thing","width":64},{"text":"it does traversal look for the key and doesn't find it and then stopped","width":256},{"text":"alright so then this gonna look like the find function more I think than insert  ","width":640},{"text":"so we've got a happy base case which is we found the key that we're looking for ","width":256},{"text":"so if key is subroot key ","width":640},{"text":"okay we found the node that contains the key we want to remove ","width":192},{"text":"what we do","width":256},{"text":"have magic helper function that takes a pointer to a node and deletes that node ","width":576},{"text":"so what should I do ","width":192},{"text":"call the magic helper function that we'll write later ","width":192},{"text":"okay'","width":64},{"text":"it's more complicated than just doing a couple of pointer manipulates ","width":64},{"text":"it boils down a couple of pointer manipulates ","width":128},{"text":"but there is bunch of cases you want to care about","width":320},{"text":"so we gonna break this out of subroot and into a seperate helper function so we can think about the problems of locating the node and actually","width":448},{"text":"doing the removal of that node seperately","width":64},{"text":"so in this case ","width":192},{"text":"I am gonna call","width":128},{"text":"this helper function ","width":64},{"text":"remove_node on subroot","width":256},{"text":"this is not  a recursive call","width":1152},{"text":"this is a seperate function ","width":64},{"text":"okay","width":64},{"text":"we just working on these assumption we got a function that given a pointer node we'll remove that node from the tree","width":384},{"text":"okay, it should it'll also make sure the tree is in fact a binary search tree and it's done","width":256},{"text":"okay it's got a lot of works to do","width":128},{"text":"and we gonna write those cases in a sec ","width":256},{"text":"okay and then we got sort of similar other cases right if it's smaller than the current key, we got to go left, if it's larger than the current key we gonna go right","width":576},{"text":"so I will raise you in terms of writing that","width":64},{"text":"is less than subroot key ","width":576},{"text":"remove ","width":128},{"text":"subroot","width":192},{"text":"left ","width":192},{"text":"key","width":128},{"text":"otherwise remove subroot ","width":512},{"text":"right","width":192},{"text":"key","width":128},{"text":"nice ","width":320},{"text":"excuses my hands are full","width":256},{"text":"and I am not typing","width":64},{"text":"be more fun raise full with typing ","width":512},{"text":"can I actually hold my own and typing ","width":192},{"text":"okay, so pretty straight forward right, just locate the node you remove, you call our remove_node helper function ","width":512},{"text":"so obviously the guts of what makes this function hard is gonna coming to how do you actually do the removal of that node","width":512},{"text":"cause you have to think about ","width":64},{"text":"how does the tree have to be mutated in order for that to work out","width":192},{"text":"so just on paper here","width":256},{"text":"let's think about how we remove some of these nodes ","width":128},{"text":"and then that will be enough for you to sort of see what all the edge cases you gonna have to deal with","width":512},{"text":"okay, so what if I ask somebody to remove the node 9","width":192},{"text":"we will base on our base function we just wrote, it would be left left left ","width":448},{"text":"founded","width":64},{"text":"so why call the removal node on the 9 which ","width":192},{"text":"when I say call I am calling remove_node on the 9 I really mean I am calling on this pointer here","width":384},{"text":"right ","width":192},{"text":"it's not on the node ","width":64},{"text":"it's on the pointer on the node ","width":64},{"text":"so I am calling on the left ","width":128},{"text":"pointer of 12","width":64},{"text":"cause it is passed down by reference","width":256},{"text":"so in this case what do I do","width":64},{"text":"while you at the 9","width":576},{"text":"and make sure this tree is still a binary search tree","width":64},{"text":"set it to null right","width":320},{"text":"by set it to null I get rid of 9, there is nothing about the tree, it's perfect","width":448},{"text":"this case is the easy case ","width":128},{"text":"here I can just set to null to be done","width":128},{"text":"if I set the 12 left to be null we know the first thing it does is grab that pointer that it wants to be assigned into clear the memory and then move the pointer into the unique pointer ","width":832},{"text":"so we would clear out the 9 we get rid of 9 and then everything's fine","width":256},{"text":"cause this tree is still oredered","width":64},{"text":"right 7 is easy","width":64},{"text":"how the one is slightly less easy","width":192},{"text":"so what about 23","width":64},{"text":"so I want to remove the 23","width":192},{"text":"okay let's left ","width":192},{"text":"right okay founded it","width":384},{"text":"here is the 23","width":64},{"text":"again I am gonna call remove_node on this pointer here","width":512},{"text":"I just said that pointer to null am I done","width":256},{"text":"no in fact, I messed the tree I've drawn the 19, I removed the node that somebody cared about ","width":448},{"text":"right ","width":128},{"text":"if this binary search tree was associating you know netIDs with grades ","width":256},{"text":"somebody is really unhappy","width":128},{"text":"right, you just know somebody's exam grade","width":192},{"text":"right so that's not good, ","width":128},{"text":"so what I need to do here","width":128},{"text":"swap what","width":448},{"text":"the 19 and 23","width":192},{"text":"right I know that the left child of 23 can become the right child of the 17","width":448},{"text":"cause it's by nature being in the right subtree I know the it's greater than the root","width":384},{"text":"at 17 ","width":64},{"text":"so I should be fine just moving it up the tree","width":128},{"text":"so what I am gonna do here","width":64},{"text":"is adjust this pointer instead look down","width":320},{"text":"here ","width":64},{"text":"and I get rid of this ","width":128},{"text":"so I apply std::move the 23 left into the surbroot pointer that I got or something","width":448},{"text":"it is just a pointer ","width":128},{"text":"okay marginly harder ","width":256},{"text":"for not too bad, and then one quick thing ","width":320}]