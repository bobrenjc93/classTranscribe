[{"text":"Uh……yeah, it's already owned by something, so what should I do instead?","width":256},{"text":"Yeah, call the… call the clear function, or the uh…. Or set it equal to no pointer on the next pointer of tail.","width":704},{"text":"So, explicitly tell the thing that is owning her to not own it anymore. Now, we just know that out.","width":384},{"text":"Cursor all pointers, not an owning pointer, there’s no more owning pointers, so it’s freed. Right? ","width":448},{"text":"Now, it’s a little bit nasty, how long does that take?","width":256},{"text":" or to end, if this is a really long list, it's gonna take you very long time to get to the thing before the tail. ","width":448},{"text":"Right? So that you can move the tail to the…to the correct note. Right?","width":320},{"text":"this is different from the case when we were moving from the front, because it was very easy. ","width":256},{"text":"we could get to the thing that was… that followed head by just looking at head, and looking at head’s next. So it’s very easy to move head forward.","width":384},{"text":"It’s very hard to move tail backward, cause we don’t have a way going backwards in this SLL. Right?","width":448},{"text":"what about the DLL?","width":192},{"text":"Is it very different from the DLL? I can do the same thing that I did in the SLL, and it would worked. Can I do better?","width":384},{"text":"Yes, how?","width":64},{"text":"Right, I can look at tail. Tail has a previous pointer. ","width":512},{"text":"Tail points me directly at the thing that comes before it. Now, it's the note I want to get to.","width":256},{"text":"So, it's very very easy for me to set up my temporary to this thing.","width":256},{"text":"Cause I gonna just say tail prev, cursor tail prev...","width":256},{"text":"Auto cursor tail prev..","width":128},{"text":"Alright, now I've got my pointed there. And then I can do the same thing that I did before.","width":320},{"text":"Alright, we need to move tail...","width":192},{"text":"to point at the same thing cured us, and then blank out this pointer.","width":256},{"text":"Now, I don't need us to worry about the previous pointers of that known used to be the tail. Because, now, there's no ownig pointers to the tail. It's going way.","width":640},{"text":"So, I didn't really need to set it to no.... before that, because it's going away. Who cares.","width":512},{"text":"I could, it's not gonna hurt anything, but...I'm not going to.","width":256},{"text":"Okay?","width":128},{"text":"So, how long does that take? Then.","width":128},{"text":"Constant.","width":192},{"text":"Okay,so that was...that was very different.","width":192},{"text":"What did you have to pay? ","width":128},{"text":"To get that behavior?","width":64},{"text":"It's magic. Magically, this function is...is constant versus linear.","width":256},{"text":"So, what was the cost? I had to sacrifice something. Nothing is free.","width":256},{"text":"Memory.","width":64},{"text":"How much memory did I sacrifice?","width":192},{"text":"Isonim for...?","width":256},{"text":"So how...? In big O notation, how much more memory did DLL require?","width":256},{"text":"All, then.","width":64},{"text":"So, I sacrifice linear memory, so that I can get constant removal from the back.","width":384},{"text":"Right?","width":64},{"text":"Is that make sense?","width":256},{"text":"Cause it says constant amount of memory add each node, but there's ain't node in the list. So I spend an additional order, and...","width":448},{"text":"Amount of memory, so that I can get this operation.. to be constant.","width":320},{"text":"Right?","width":64},{"text":"So..","width":64},{"text":"Like everything, there's a trade off here.","width":128},{"text":"If you have a list, and you need to remove from the back very quickly, and you need to be using a link structure.","width":384},{"text":"You probably want to use the DLL","width":128},{"text":"If you cannot afford it in terms of the memory cost.","width":192},{"text":"Cause it's got another order, and...","width":256},{"text":"expands tack onto it","width":128},{"text":"So, you've got all these extra pointers","width":192},{"text":"Right?","width":64},{"text":"Okay, good...","width":192},{"text":"What about the vector?","width":64},{"text":"If I don't move without four, and I stuck on the end of the vector, what do I do?","width":192},{"text":" get it out, or, you know,  if I maintaining something that tells me what is the last valid index, and just move it.","width":640},{"text":"I don't even have to actually reset the value.","width":256},{"text":"I can just say the current valid range ends at slice T something.","width":320},{"text":"And just remember how many things are currently there.","width":128},{"text":"So I can just decrement a counter that tells me how many things are in the vector, right?","width":320},{"text":"Or I can blank it out, if you know what it means to blank it out.","width":320},{"text":"Like default construct value, construct something...","width":192},{"text":"That would also worked","width":64},{"text":"How long does that take?","width":64},{"text":"costs of time, it's either decrement a counter or you know.. assign something to blank the move counter","width":384},{"text":"So this is gonna be constant","width":128},{"text":"Up here","width":192},{"text":"We gonna have all of (n)","width":192},{"text":"O of (1)","width":64},{"text":"O of (1)","width":256},{"text":"Okay, I don't have scratch paper for this one.","width":448},{"text":"But I think you should be able to reason about it","width":128},{"text":"I want to get an iterator","width":192},{"text":"To a given position I in the list.","width":256},{"text":"Okay, what is the iterator?","width":128},{"text":"What I mean by so get me into iterator in that position.","width":192},{"text":"Something that conceptually point that thing in the list, right?","width":576},{"text":"Something that refers to that element in the list. This is effectively saying give me...","width":320},{"text":"This is another way of saying; give me the element at position X in the list, rat position I in the list.","width":320},{"text":"Right?","width":64},{"text":"I'm saying iterator, because it maybe nice to have the ability to go back one or forward one from their book.","width":384},{"text":"Conceptional, it's the same thing, is getting the F element in the list.","width":256},{"text":"How long does that gonna take me for SLL? give me the fourth element to the SLL.","width":320},{"text":"Of whatever the position is.","width":256},{"text":"The worst case would be give me something that's very very, like one before the tail or something.","width":320},{"text":"Right? and then you gonna have to walk the whole list to get the thing before the tail.","width":320},{"text":"So the worst case..","width":256},{"text":"which is what we are doing here","width":64},{"text":"For SLL to get a position at pos i","width":192},{"text":"is gonna be something like linear","width":64},{"text":"Because i could be.. you know...n-1","width":192},{"text":"right?","width":128},{"text":"But it's O of i, because it depends on what position i is","width":384},{"text":"Yes, that.. that's technically ok too.","width":128},{"text":"But in the worst case, i is gonna be end minus 1, which is be go then","width":256},{"text":"What about the DLL?","width":256},{"text":"To get me position i in the DLL,","width":192},{"text":"does anything change by having previous pointers?","width":192},{"text":"not really","width":256},{"text":"Maybe if I had some way of knowing if it's close to the tail, I can go from the tail over to the head over.","width":384},{"text":"But the worst case, then would be the middle of the list","width":256},{"text":"And how many jumps are gonna take regardless where you start in the middle of the list","width":192},{"text":"And No.2, which is...","width":128},{"text":"So it doesn't matter","width":192}]