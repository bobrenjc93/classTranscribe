[{"text":"right, okay uh, couple of problems here. one is, size of source","width":316},{"text":"so this tells me the size of a pointer","width":182},{"text":"so that's either going to be 4 bytes or 8 bytes","width":240},{"text":"oops. I didn't want that. I didn't want the size of a pointer.","width":203},{"text":"I wanted the actual number of characters stored at the pointer","width":370},{"text":"so, okay, let's fix this, oh yeah, that should be a pointer in there of course","width":282},{"text":"I want result to be a pointer to some memory.","width":177},{"text":"so let's call strlen on source","width":150},{"text":"hey! keep walking along until you find that zero byte. what's wrong with that code?","width":322},{"text":"yes, we're not going to reserve enough memory. so, in doing the copy, we will put that zero byte into some memory that we don't own","width":677},{"text":"that memory might be being used for something else","width":268},{"text":"so, we have a buffer overrun there","width":142},{"text":"alright, so, and then, the rest of this code walks through copying bytes","width":398},{"text":"and it might seem a little unusual to put an expression like this inside that while(), but this is kinda of a common example in C","width":534},{"text":"where we copy a course of bytes from source to the pointer, we increment both, and we keep going until we've copied the zero byte","width":488},{"text":"and when we've copied the zero byte, the result of this expression is zero, so the while loop terminates","width":384},{"text":"many compilers, by the way, would require us to put an extra set of parenthesis around this. otherwise, it would give us a warning","width":382},{"text":"you will also see similar code inside if() as well. where we assign a result to a variable and we also use it to [something] an if-expression","width":616},{"text":"alright, how are we doing on time, okay, we should keep going.","width":152},{"text":"so what's the purpose of 2? to check that the argument is non-null. when will it have no effect? well, when a macro is a defined so its when no debug happens to be defined...whoops, and you can set that as part of an option to gcc","width":1277},{"text":"and if you do that, then assert compiles to nothing","width":256},{"text":"alright so if malloc returned null, where would our program crash? would it crash at line 4?","width":420},{"text":"if result was null, would this crash?","width":238},{"text":"no, it wouldn't. p would just simply hold the result of 4","width":204},{"text":"we haven't tried to follow the money","width":140},{"text":"okay, so we've got an address (think of an envelope) and we haven't written a valid location on it, but we're not trying to read that memory","width":520},{"text":"we're just pointed something bad. we haven't actually followed the pointer yet","width":222},{"text":"so, it would actually crash when we try to dereference it. when we try to write memory in. so, its when we actually try to write to that location, our program would crash","width":690},{"text":"so how do we fix this? we could say \"well look, if the result is not valid, in other words, if it is 0, then maybe print out an error message and exit or perhaps return nothing\"","width":853},{"text":"just say \"okay, I'm sorry, I could not duplicate this\"","width":165},{"text":"and hopefully whoever calls this code is checking to see if the value is also NULL","width":517},{"text":"right. so. okay. did I ask a question for this one?","width":453},{"text":"right, what will this print?","width":254},{"text":"let's see if we write this out.","width":69},{"text":"so we've made an array of ten bytes","width":350},{"text":"and we, copy in 'ab'. so we've got the following: we've actually copied three bytes: we've got an a, a b, and a NULL byte or a zero byte at the end to mark the end of the string","width":1012},{"text":"and then we make a new variable called p2","width":242},{"text":"which is p1+1","width":69},{"text":"okay, so what type is p1? it's a character pointer. so p2 is pointing at this memory location, where we copied the b into","width":500},{"text":"now we do strcpy into p2 and we copy 1 2 so we're going to copy 3 bytes","width":312},{"text":"we're going to copy the 1, the 2, and a NULL byte","width":481},{"text":"so when we try to print this out, we're going to print a12 and then stop because we get to the NULL byte","width":900},{"text":"alright, oh I've got a few minutes, we'll be okay. alright, what about the next one? is the following code valid? what have I got?","width":733},{"text":"so I've got a pointer a and it's going to point to xyz","width":285},{"text":"I'm not copying it","width":96},{"text":"so think about this for a moment. when you load your program in, and it starts running this process, at the bottom of the memory that we've got, we've got the code!","width":762},{"text":"and then we have our constants","width":428},{"text":"okay so a is pointing to some memory inside this constant. the stuff that we've loaded off disk. the xyz. those bytes. a is looking at that address in there","width":769},{"text":"and then we say \"I've got a pointer to a pointer to a character\"","width":213},{"text":"in fact we read this backwards, so b is a pointer to a character pointer","width":319},{"text":"and it holds the address of a","width":305},{"text":"so b hold the address of a. it holds the memory location of a.","width":498},{"text":"so I could use that, I could use b to change what a is pointing to, and that's what we do here","width":381},{"text":"so, why didn't what b is pointing to \"uvw\" ?","width":373},{"text":"so what have we done? we've changed a. so now a is pointing at a different location","width":409},{"text":"it's now looking at a different constant","width":225},{"text":"inside our memory","width":102},{"text":"so we didn't actually copy any strings. we're just changing pointers around","width":574},{"text":"right, we'll do this one. what's special about sizeof(char) ?","width":565},{"text":"it's defined to be 1.","width":133},{"text":"a character in C is always one byte","width":480},{"text":"yes, uh, oh yes yes, I'm sorry I forgot to, yes, there is one bug in here. which is, we should've returned result","width":1072},{"text":"not p","width":368},{"text":"okay, last two things: printf puts putchar and all those other C macros end up calling write() on stdout","width":535},{"text":"which is 1","width":172},{"text":"and the final question for today: what will the following code print?","width":450},{"text":"we malloc 128 bytes. if it failed, if it gave us NULL, we just exit","width":323},{"text":"so lets assume it didn't fail, and then we do puts","width":162},{"text":"what will it print?","width":432},{"text":"okay, so we can answer this and say \"here's the most likely thing it might do\"","width":235},{"text":"it's the very first byte of this might be zero","width":232},{"text":"so, that's just an empty string","width":192},{"text":"so, all that's going to happen is that it'll try to print an empty string. what does puts do? it prints out the string followed by a new line","width":355},{"text":"so that's probably the most likely thing to happen","width":136},{"text":"however, does malloc zero bytes for us?","width":334},{"text":"no! that could be anything in those bytes. it could print \"I love [insert your worst football team in here]\"","width":665},{"text":"whatever! it could print anything! it could print out more than 128 bytes","width":486},{"text":"it could print \"I am agent smith\"","width":185},{"text":"arbitrarily, what is in those bytes. and with that, have a wonderful week! and I'll see you on wednesday!","width":576}]