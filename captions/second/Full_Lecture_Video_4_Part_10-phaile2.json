[{"text":"So thats how I declare the copy constructor.","width":192},{"text":"So if I've got a copy constructor that usually means that I've got dynamic memory.","width":704},{"text":"If I've got dynamic memory flying around that means I'm gonna have new operators happening in constructor.","width":576},{"text":"That means I need a destructor, Why do I need a destructor?","width":128},{"text":"That's where the deletes go.","width":192},{"text":"That's where I free all the memory I allocated in my constructor.","width":192},{"text":"That's RAII, resource acquisition is initialization.","width":192},{"text":"So when I create an object it allocates memory using new and so then when that object goes away its destructor should make sure it's getting rid of that memory.","width":640},{"text":"This is a way of making sure I'm not going to leak any memory.","width":128},{"text":"If I've got all my classes nicely composed like this, when they are made they allocate when, they are destroyed they deallocate, then I'm not going to waste any memory.","width":512},{"text":"When I have a PNG object, it allocates memory for that image, when it goes away it frees all that memory for that image.","width":512},{"text":"And I don't have to worry about heap memory, calling clear on the PNG object, it happens automatically.","width":320},{"text":"And this happens when in 2 cases.","width":256},{"text":"One is when you have a variable on a stack frame, that is going out of scope, that will invoke the destructor as the stack frame is being released.","width":448},{"text":"Another is when you call delete on a pointer to an object on the heap.","width":256},{"text":"Because you are saying get rid of that memory deallocate that memory in the heap, which that object on the heap might have itself have heap memory, so it will run some cleanup routine to clean up itself.","width":704},{"text":"So the destructor is changing what it means to destroy that object.","width":640},{"text":"default destructors do nothing, because there is nothing in them.","width":192},{"text":"So when we are defining a destructor we are changing what the behavior is of destroying objects of our type.","width":448},{"text":"So we are gonna change what it means to destroy a book.","width":192},{"text":"What's the signature?","width":128},{"text":"tilde.","width":128},{"text":"Why? because reasons, I don't know.","width":192},{"text":"The artist said so.","width":256},{"text":"So tilde book.","width":192},{"text":"That's just the name it's always tilde name-of-class.","width":256},{"text":"It always takes no arguments, it can't be const","width":192},{"text":"Always this signature, ok?","width":640},{"text":"So quickly before we go, let's right an implementation for the destructor for this class","width":384},{"text":"So remember I've got this thing set up.","width":192},{"text":"String** lines is going to be an array of arrays of strings.","width":384},{"text":"Now when I have the string itself I dont have to worry about it because it is a class with a well defined constructor and destructor.","width":576},{"text":"So I don't have to worry about the string itself. I just need to worry about my arrays, because those are the things that I made.","width":320},{"text":"The string objects are gonna take care of themselves.","width":192},{"text":"So when I'm deleting my arrays the string objects destructors will be invoked, so I don't have to worry about how they are working.","width":320},{"text":"But I do need to worry about my own stuff.","width":128},{"text":"So I've allocated a 2D array here.","width":192},{"text":"So my book destructor is just gonna invoke my helper function for clear, that just empties this book.","width":768},{"text":"So that means I'm gonna have to declare that helper function up here somewhere, so I'll put it in the private section.","width":576},{"text":"Maybe if you wanted other people to be able to call this you would put it in the public section, but I don't care about other people being able to clear books so I'm just going to leave this in the private.","width":448},{"text":"That means only I as the implementor of this class can call that function.","width":448},{"text":"Ok so what should the implementation of the clear function be?","width":256},{"text":"How do I free a 2 dimensional array.","width":192},{"text":"Gotta form a for loop.","width":192},{"text":"Size gets us the number of chapters, the first thing is the chapters, the second thing is the lines.","width":576},{"text":"I'm gonna go over the chapters.","width":192},{"text":"Each chapter OK.","width":640},{"text":"Now what? So now I'm going over each chapter.","width":640},{"text":"What am I gonna do inside this loop? So now my pictures gonna look like this.","width":1216},{"text":"delete[]","width":384},{"text":"I'm going over this array and so I'm gonna call delete[] on this thing which will get rid of this array.","width":832},{"text":"And then I'm gonna call delete[] on this thing which will get rid of this array.","width":192},{"text":"That's what this for loop is doing it's getting rid of all my arrays.","width":192},{"text":"I don't have to worry about the string, so when I'm going delete[] on an array of strings the destructor will be invoked for each string in the array, so I don't have to worry about that part.","width":576},{"text":"I just have to worry about getting rid of my stuff.","width":192},{"text":"The things I said new on, I said new for an array at every slot in this position and for that array itself, so I need to worry about those 2 things.","width":640},{"text":"So my for loop is done, now what?","width":256},{"text":"delete[] lines_","width":384},{"text":"And that will follow the lines_ pointer and delete this array.","width":448},{"text":"So now all this stuff has been freed.","width":320},{"text":"So next time we'll start off with talking about how to write a proper copy constructor and then we'll start talking about assignment operators.","width":832},{"text":"","width":6336},{"text":"So next time we'll start off with talking about how to write a proper copy constructor and then we'll start talking about assignment operators.","width":576}]