[{"text":"So, it turns out that this, uh, circular wait is not sufficient for, uh, determining whether there's deadlock. It is necessary. If there's no circular wait, there's no deadlock. But if there's circular wait, it doesn't mean there's deadlock","width":1088.1818182468414},{"text":"I mean, if there's a circle in the graph, it doesn't mean there's deadlock. So there are four conditions. They are Kaufmann's conditions.","width":537.1818182468414},{"text":"The first one is mutual exclusion. It means that only one process can use a resource at a time.","width":547.1818182468414},{"text":"so a process can claim exclusive control of the resource they require.","width":394.18181824684143},{"text":"So if we're only dealing with writers, writers require exclusive access to that critical section.","width":691.1818182468414},{"text":"If we're only looking at readers, there's no exclusive access. They can all look at the same time. So we have to have exclusive access. A lock implies exclusive access. only one process can have the lock at the same time","width":1022.1818182468414},{"text":"There is also something called hold-and-wait. Hold-and-wait says that the prcoess that the process holding the resources allocated to them is waiting for additional resources. ","width":597.1818182468414},{"text":"If we go back to our last two examples here, ","width":839.1818182468414},{"text":"In this case, the first one, P1 is holding B","width":391.18181824684143},{"text":"And waiting for C","width":164.18181824684143},{"text":"In this case, P1 gave up B","width":248.18181824684143},{"text":"And then was waiting for C, and so in this case doesn't have any hold and wait. it's not holding something and waiting for something else","width":351.18181824684143},{"text":"So, in a sense a hold and wait","width":323.18181824684143},{"text":"a process has a resource","width":359.18181824684143},{"text":"it has an arrow coming in, and it's waiting for another resource so it has an arrow coming out","width":641.1818182468414},{"text":"The third thing is that there are no preemptive conditions","width":247.18181824684143},{"text":"this means nothing can be taken out. I can't say well I'm going to remove the fact that -","width":425.18181824684143},{"text":"instead of A releasing B2, I'm going to force A to release B2. I'm going to preempt it and say someone else can have it","width":571.1818182468414},{"text":"Once you have it, it's never given away","width":145.18181824684143},{"text":"So the north and south goings ","width":268.18181824684143},{"text":"There is no pre-emption. they weren't going to give up anything to be able to make progress","width":469.18181824684143},{"text":"And the last one is a circular chain of processes exists. ","width":363.18181824684143},{"text":"So, there is actually a law on the books","width":498.18181824684143},{"text":"that said in Kansas, when two trains approach each other at a crossing, both shall come to a full stop and neither shall start up again until the other has gone","width":1077.1818182468414},{"text":"Yeah, not so good","width":123.18181824684143},{"text":"Total deadlock. They both can't make any progress. How would you fix this?","width":1827.1818182468414},{"text":"This is a train, I'm not using a stack.","width":743.1818182468414},{"text":"Ok I'm not sure I understand your solution.","width":355.18181824684143},{"text":"Ok, so give the north going train the priority and the south always has to give up. The north always goes","width":413.18181824684143},{"text":"So that would break it.","width":77.18181824684143},{"text":"What does that break?","width":140.18181824684143},{"text":"so we had four conditions for deadlock, would do you think that would break?","width":690.1818182468414},{"text":"Yeah, there's no pre-emption here, and in doing so you've gotten rid of the cycles too.","width":429.18181824684143},{"text":"Any other ways of fixing it?","width":441.18181824684143},{"text":"Let's see...did I have any others?","width":197.18181824684143},{"text":"Priority, uh...","width":186.18181824684143},{"text":"You could make one back up.","width":358.18181824684143},{"text":"But all of them have to be able to break one of the conditions.","width":313.18181824684143},{"text":"So let's go with one more simple example.","width":216.18181824684143},{"text":"Two students need a pen and paper.","width":282.18181824684143},{"text":"I want to know what conditions these do or don't satisfy. I need to know if there's deadlock here.","width":256.18181824684143},{"text":"Two students share pen and paper.","width":196.18181824684143},{"text":"Is there deadlock there?","width":376.18181824684143},{"text":"It breaks mutual exclusion.","width":157.18181824684143},{"text":"Both students agree to grab pen before paper.","width":531.1818182468414},{"text":"Which one does that break?","width":513.1818182468414},{"text":"I always grab pen before paper. This is no circular wait.","width":833.1818182468414},{"text":"Because I'm always waiting for the pen","width":129.18181824684143},{"text":"and then I'm waiting for the paper.","width":129.18181824684143},{"text":"If they randomly did it, one could get that paper first and the pen first and the other could get the pen first and then the paper first. then we would have the cycle","width":690.1818182468414},{"text":"and they both get one or none","width":404.18181824684143},{"text":"Hold and wait","width":191.18181824684143},{"text":"Last one, students I have the pen and you give up the paper","width":370.18181824684143},{"text":"There's your preemption","width":316.18181824684143},{"text":"This leads us to the dining philosophers problem","width":675.1818182468414},{"text":"How many people have heard of this problem before?","width":153.18181824684143},{"text":"This is the canonical computer science problem.","width":423.18181824684143},{"text":"We have N philosophers and N forks","width":171.18181824684143},{"text":"BUT you need two forks to eat","width":258.18181824684143},{"text":"You can do this with chopsticks too","width":322.18181824684143},{"text":"But you only pick up one at a time","width":560.1818182468414}]