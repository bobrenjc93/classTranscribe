[{"text":"[nothing]","width":320},{"text":"Not edge weights","width":320},{"text":"Not talking about a weighted graph at all here yet. There exists an algorithm for doing it for edge weights, but it's completely different.","width":448},{"text":"So I'm visiting everything sort of in order of the number of pops I have to take from the start node.","width":448},{"text":"This algorithm is called breadth first search.","width":436},{"text":"And the picture I have in my mind when I think about a breadth first search is what happens when you drop a little pebble into a lake.","width":512},{"text":"The ripples go out from the starting point where you put that in the lake and they visit everything that's sort of closer to it first.","width":448},{"text":"and then eventually they grow larger and larger and visit everything that's farther and farther and until we hit the banks.","width":320},{"text":"So it's sort of expanding outwards sort of all at the same time until the radius surround the starting point.","width":576},{"text":"It's not gonna go all the way to the bank.","width":128},{"text":"It's not like it shoots over to the bank and then it comes back and it shoots over to the bank again and it comes back and shoots over to the bank again ","width":320},{"text":"That's something completely different. This is sort of going outwards slowly and and in increments of some distance away from your starting point. ","width":512},{"text":"[silence]","width":384},{"text":"Let's write this.","width":192},{"text":"What the heck is that?","width":256},{"text":"[nothing]","width":192},{"text":"What is that? That doesn't have a queue in it, so it's not what we just talked about.","width":320},{"text":"It's labeling a whole bunch of stuff to start off with, so this part is sort of not all that interesting. It's just making sure that everything in the graph is labeled as UNEXPLORED to begin with.","width":704},{"text":"So you can sort of ignore that part. The important part is this stuff.","width":448},{"text":"So what is that part of it doing?","width":320},{"text":"Every vertex v in the vertex set of g, get the label of it.","width":768},{"text":"g.vertex_label is going to give me the label of that vertex. That label is going to be like, UNEXPLORED or VISITED.","width":320},{"text":"And then if the label is UNEXPLORED, I call this helper function on the graph with that vertex.","width":512},{"text":"What is this doing?","width":128},{"text":"This is the thing that makes sure that we actually explore the disconnected parts of the graph.","width":448},{"text":"So this is trying to see - Okay, go to every vertex. If that vertex hasn't been seen before, I know that I haven't done a traversal of whatever connected component it belongs to.","width":640},{"text":"So then call the bfs() function on that particular node, and then that function will explore the whole connected component.","width":384},{"text":"Then I go to the next vertex, and say \"has this been seen yet?\"","width":192},{"text":"If it has, I know it was part of a connected component I just explored, and if it hasn't, I know it's somewhere off in Neverland, not connected to the component I just traversed, so I better traverse that component as well.","width":704},{"text":"So this is what's getting us to all those islands you were talking about.","width":192},{"text":"The purpose of this is just to make sure that I explore every single connected component.","width":320},{"text":"And so this helper function is the one that's actually exploring a connected component.","width":384},{"text":"This first function, the only purpose of it is to make sure that we hit every disconnected part of the graph.","width":704},{"text":"And then this more complicated helper function that we're gonna write is the one that actually, given a connected component, explores all the connected vertices to that.","width":576},{"text":"Which actually isn't all that hard.","width":192},{"text":"I wanna finish the code for this and I apologize for going over again. And then we'll analyze this at the start of lecture","width":576},{"text":"It looks sort of very very similar to what we had before, we start off with a queue. We add our start vertex to the queue.","width":576},{"text":"We know that when we're starting the traversal, we're marking nodes as visited when they've been discovered, so since we're starting at that node we already know it's been discovered. So we're gonna mark that node as visited to begin with.","width":960},{"text":"This is just g.vertex_label is going to set the label at the start vertex to whatever the label is that I gave it.","width":768},{"text":"And so I'm giving it some enum or something that tells me what its status is.","width":384},{"text":"You can think of that as just being an integer that has a special meaning and a nice name.","width":320},{"text":"So I'm saying \"Okay, fine, my start vertex is gonna be VISITED first.\"","width":448},{"text":"And I've put it on the queue and then while the queue is not empty, I grab whatever the front of the queue is.","width":448},{"text":"I pop that vertex and then what?","width":448},{"text":"So now I'm currently some particular vertex called u. I've just named the vertex u.","width":448},{"text":"So, what is this for-loop gonna go over?","width":320},{"text":"All adjacent vertices. So I'm gonna ask the graph to give me all the adjacent vertices to u","width":768},{"text":"call each one v","width":256},{"text":"So u is gonna be the current node I'm at, and v is gonna be one of the adjacent vertices of u.","width":384},{"text":"so then I ask what the label of v is to the graph.","width":512},{"text":"So I'm looking over the node, I'm saying, what's the label of that node?","width":192},{"text":"There are two cases that node's label is either gonna be UNEXPLORED or VISITED.","width":512},{"text":"What should I do if that vertex's label is UNEXPLORED?","width":256},{"text":"Change it to visited, and then what?","width":320},{"text":"Mark the edge as DISCOVERY and then push on the queue. So which branch is that gonna be?","width":384},{"text":"First or second one?","width":192},{"text":"First one. So this is \"if the label was UNEXPLORED\"","width":320},{"text":"I've never seen this vertex before. I was the lucky vertex that discovered it. So I get to label that vertex as VISITED.","width":768},{"text":"Label the edge as what type of edge again?","width":192},{"text":"DISCOVERY","width":128},{"text":"And then I add that adjacent vertex to my queue. Cause I'm the first guy that's seen it.","width":704},{"text":"Otherwise, this else branch is going to say, if the vertex state was explored, and I'm saying else if the edge label","width":1024}]