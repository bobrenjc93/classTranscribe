[{"text":"Alright","width":64},{"text":"And furthermore, when we when we bubbling this up, we don't care about one side of it.","width":448},{"text":"So this is only gonna depend on sort of the height of the tree.","width":192},{"text":"We can see that in the stack.","width":128},{"text":"So the first thing we do is we wanna move this up.","width":192},{"text":"So we check...","width":64},{"text":"OK, we are heapifying up now on the two.","width":256},{"text":"Which means two has to be look at its parent and see its parent is smaller than it.","width":320},{"text":"If it was then you are done.","width":64},{"text":"Cause that means that that heap property is satisfied.","width":192},{"text":"If it is not that is the root is larger than the child that you are heapifying up.","width":448},{"text":"You'd swap with them and call heapify up on the place where the two went.","width":192},{"text":"OK, so the index where the two has been moved to the parent of two.","width":320},{"text":"So it's the way we swap.","width":128},{"text":"Here is the seven go here and two goes there and then we would call heapify up.","width":320},{"text":"On the index where the two resides.","width":320},{"text":"So again we do the same comparisons as before, we say is two smaller than its parent?","width":320},{"text":"Well it's not, so better move it up.","width":192},{"text":"So we swap again.","width":64},{"text":"So now the two will go here and the six will go there.","width":320},{"text":"OK","width":128},{"text":"And then we call heapify up on the index where the two went.","width":256},{"text":"So now we are gonna heapify up again.","width":256},{"text":"We look is two smaller than its parent? No, so we need to swap.","width":192},{"text":"So we move the four down to here.","width":320},{"text":"And the two goes up here. OK","width":128},{"text":"And then we call heapify up on the index where the two went.","width":192},{"text":"The index where the two went is now zero.","width":192},{"text":"Or one, depending on you array implementation.","width":192},{"text":"OK","width":64},{"text":"Depending on you heap implementation.","width":64},{"text":"And there is no parent to compare with, so we stop.","width":256},{"text":"You have no parent, you are done.","width":256},{"text":"Notice that basically what we did was like we took a path that was kind of went like this.","width":320},{"text":"Right","width":192},{"text":"We didn't care all about the eleven or the twenty.","width":128},{"text":"If this is a really big, if this is a really large heap...","width":192},{"text":"We will sort of only care about the path up to potentially the root in the worst case right.","width":384},{"text":"So what's the running time of that?>","width":320},{"text":"In the worst case when we ask you to push somthing.","width":256},{"text":"Let's ignore the resizing case.","width":64},{"text":"When I ask you to put something on this heap...","width":128},{"text":"What's the worst case for that?","width":256},{"text":"[Answering]","width":128},{"text":"The height of tree, right?","width":128},{"text":"Turns out the height is log n. We will prove that in a bit.","width":128},{"text":"But then the running time of this is proportional to the height of the tree right?","width":192},{"text":"Cause we only go on a path from a leave to the root.","width":256},{"text":"In the worst case.","width":64},{"text":"Now let's not to say that we always go all the way to the root.","width":192},{"text":"Right, if I add the next guy, if I add three.","width":128},{"text":"I know I am gonna add the three here.","width":192},{"text":"And we can look at the tree and recognize that.","width":128},{"text":"Three is not gonna end up at the root.","width":64},{"text":"Three isn't the smallest thing.","width":128},{"text":"So we are not gonna go all the way up to the root.","width":64},{"text":"So it's not true everything single push is gonna be logarithmic. ","width":256},{"text":"And it is just that in the worst case it is.","width":192},{"text":"[blank]","width":192},{"text":"So somebody can give me, i.e., zero here.","width":192},{"text":"And it's gonna go all the way up to the root.","width":128},{"text":"So ","width":320},{"text":"This isn't always go to the root.","width":128},{"text":"This is gonna go as far as it needs to.","width":128},{"text":"OK, so again, we, we push back on the vector. We, we heapify up.","width":384},{"text":"On the index where we added the new element.","width":192},{"text":"So we say OK three has parent. Twenty is, is, three smaller than twenty so no so we better swap. So the three is gonna go there.","width":512},{"text":"And twenty down here.","width":192},{"text":"And we call heapify up on the place where three went.","width":192},{"text":"So we look again, is three smaller than four? No, we better swap.","width":256},{"text":"So the four is gonna go here.","width":192},{"text":"The three is gonna go here. And we call heapify up ","width":128},{"text":"On the place for the three went.","width":128},{"text":"Three has a parent, two, is two smaller than three? Yes, stop.","width":320},{"text":"So we stop at this point.","width":64},{"text":"We went up part of the height of the tree. Not the whole thing, part of it.","width":192},{"text":"Alright, so that's push.","width":256},{"text":"Any question on that?","width":64},{"text":"The idea is that you add it in the next spot in the tree where is should go base on the fact that the tree is complete.","width":448},{"text":"And you then have to restore heap property by moving that element up the tree.","width":256},{"text":"To its appropriate position. There is only one node that is in the wrong spot. That's the node you are at.","width":320},{"text":"So I just gonna move it the correct spot.","width":128},{"text":"Making sure that you satisfy the heap property along the way.","width":128},{"text":"[blank]","width":256},{"text":"The swap is always safe, 'cause you are always swapping with something that was smaller than everything that occurred below where you are moving right now.","width":384},{"text":"So it never like you are gonna never never in the process of moving this node up, you are gonna violate the subtree that you move to the root.","width":448},{"text":"The old root into.","width":64},{"text":"You can sort of see that for yourself so this is fine.","width":256},{"text":"The only thing we have to care about is this node putting in where it goes.","width":192},{"text":"Alright, now we wanna, now we wanna do a pop.","width":320},{"text":"I am gonna remove something from this.","width":64},{"text":"What did we do in that case?","width":256},{"text":"Well first of all what's element the we are gonna remove?","width":128},{"text":"What would the result of peek be right now?","width":192},{"text":"Two, right?","width":128},{"text":"The root.","width":64},{"text":"So in this case we gotta a heap where the higher priority element are the smaller numbers.","width":448},{"text":"Ok","width":128},{"text":"So, if I wanna pop, I ought be removing the two.","width":256},{"text":"So the question is how do I do that?","width":128},{"text":"So I swap with what?","width":192},{"text":"[blank]","width":256},{"text":"So in this case, I am gonna swap with twenty.","width":128},{"text":"Cause it's the thing that is farthest right.","width":192},{"text":"So the two is gonna go here and the twenty is gonna go here.","width":192},{"text":"Why did I do that?","width":128},{"text":"[balnk]","width":128},{"text":"It is easier to remove the back of the array. We know that you can pop back very easily by just decrementing your size.","width":512},{"text":"Right?","width":64},{"text":"So I do this so that","width":128},{"text":"I can easily remove the two now.","width":320},{"text":"We can just do pop back on the array or whatever.","width":64},{"text":"Or I just decrement the size.","width":128},{"text":"...pointer or whatever.","width":64},{"text":"And now it's gone.","width":64},{"text":"So that was easy.","width":128},{"text":"That was all constant time.","width":64},{"text":"But we are not done.","width":128},{"text":"Right, why we are not done.","width":64},{"text":"[blank]","width":320},{"text":"Right","width":64},{"text":"Twenty is not the smallest thing in the heap.","width":192},{"text":"Twenty absolutely doesn't go there.","width":128},{"text":"So we have to fix the heap property again.","width":192},{"text":"Notice that at this point still though.","width":128},{"text":"That the two children... the two subtrees... rooted at twenty... those are heap.","width":384},{"text":"There is nothing wrong about those guys. Those are heap.","width":256},{"text":"So again we are in the position where the only element that's in the wrong position is the guy that we just inserted.","width":512},{"text":"So now we gonna move that, that, or sorry the, the element that we just moved.","width":448},{"text":"We just moved something from the back to the front.","width":128},{"text":"So now we gotta a fixed heap property by moving that new root in the appropriate positoin.","width":448},{"text":"So this is the heapify down.","width":128},{"text":"Again, heapify down is going to be recusive.","width":128},{"text":"Like you wrote in the lab.","width":64},{"text":"Where once it moved down, you also need to make sure that it doesn't need to move again.","width":256},{"text":"This is the bug that I have. I didn't I didn't keep calling heapify down.","width":256},{"text":"OK","width":128}]