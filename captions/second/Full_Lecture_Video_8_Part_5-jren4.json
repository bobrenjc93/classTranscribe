[{"text":"[nothing]","width":784},{"text":"yes?","width":250},{"text":"correct, it's not necessarily like a queue","width":228},{"text":"it's actually operating system dependant","width":129},{"text":"we can give hints to the system as to how fair it should be","width":241},{"text":"for example, you might say that the thread that's been waiting the longest should have access to the pizza, that seems pretty fair to me","width":577},{"text":"but actually we have different definitions of fairness","width":370},{"text":"for example, the surgeon that is waiting to eat the pizza has a higher priority than the non-surgeon","width":498},{"text":"so we can actually assign different different priorities to our threads","width":234},{"text":"but that's some more advanced stuff that we don't need to worry about for today. for now just assume that you don't control it, the operating system controls who gets to eat the slice of pizza","width":634},{"text":"I don't know about you, but I'm going to be pretty hungry after this lecture","width":541},{"text":"so, yes?","width":416},{"text":"haha, great question! can you use this to implement lock? that's such a great question, I was about to ask it to!","width":434},{"text":"can we use a counting a semphore to implement a lock, a mutex lock? in other words, if I hadn't told you about the mutex lock, could you do it with a counting semaphore?","width":985},{"text":"that's true, yes, so counting semaphores are more versatile in that sense","width":272},{"text":"but in terms of the counting gold example I showed you at the beginning of this lecture could you do it using a counting semaphore?","width":670},{"text":"well the answer is yes","width":117},{"text":"my next question to you though is what should be the initial value of the counting semaphore?","width":679},{"text":"so if we were to go back to our code here","width":457},{"text":"and we didn't want to use lock and unlock, but we wanted to replace this with a counting semaphore","width":576},{"text":"ok, so, before entering our critical section we should try to take a pizza slice, we want to grab a slice of pizza","width":903},{"text":"ok, how do I do that?","width":140},{"text":"I'm going to call sem_wait() on my counting semaphore","width":400},{"text":"afterwards I can give back the slice of pizza","width":484},{"text":"yeah, sem_post()","width":691},{"text":"so how does that work now?","width":133},{"text":"if I have two threads trying to call sem_wait() at any one time I just need to make sure one of them wins","width":589},{"text":"so therefore how many slices should I put in the pizza box at the beginning? ","width":262},{"text":"just one! yes, so one thread get's a slice of pizza and can continue","width":444},{"text":"if I put in zero slices of pizza when I initialized my program what would happen?","width":486},{"text":"deadlock, yeah! no one gets to continue","width":268},{"text":"if I put in two slices of pizza or more I have a race condition again","width":640},{"text":"now I've let two threads continue when in fact I only ever wanted one thread inside my critical section","width":363},{"text":"if I'd put in two slices of pizza then two threads would've been able to proceed past that sem_wait() at the same time","width":471},{"text":"and that as we say lead to data corruption","width":497},{"text":"ok, so I think I have my sem_wait","width":559},{"text":"man page search","width":673},{"text":"so, when you initialize a semaphore the last thing you're going to pass in is it's initial value, in other words the number of pizza slices inside your counting semaphore","width":1396},{"text":"questions?","width":331},{"text":"so one of the powers of the counting semaphore is that you can call sem_wait() and sem_post from arbitrary threads","width":523},{"text":"and we'll see that when we want to make a simple queue or stack work with multi-threaded code","width":576},{"text":"now, the queues and stacks that you've made in past classes did things like 'oh look I've ran out of space, I know iI'll just allocate some more memory and I'll make my list or linked list longer'","width":809},{"text":"I'll double the number of spaces","width":227},{"text":"we can do better, what we can do is say I will stop thread from putting anything else into my data structure","width":809},{"text":"I can pause it because when it calls sem_wait() we know that it's going to be put on ice","width":464},{"text":"so it's unable to continue, it's unable to put anything else into my data structure until the space","width":426},{"text":"so now I can think of my processing in terms of pipes","width":360},{"text":"and I don't have to have an infinite amount of memory if part of my computation is generating results faster than the rest of my computational process","width":700}]