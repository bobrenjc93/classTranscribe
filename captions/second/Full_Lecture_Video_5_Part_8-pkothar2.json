[{"text":"From the lineth line of the chapter","width":768},{"text":"What am I gonna return?","width":832},{"text":"I'm gonna return a const reference to a string, where is that string, where in my structure is that string I wanna return?","width":806},{"text":"Go to the chapter, go to the line","width":896},{"text":"So go to the correct chapter in my lines array, then go to the correct line in that chapter","width":448},{"text":"And I return that value by const reference meaning that: here you go I'm not gonna copy the string for you I'm gonna you a reference  to it so its over there, but giving you a const reference you you can't change it. It's just a const version. ","width":875},{"text":"So you're not allowed to change the chapter, just allowed to look at it without copying it to be efficient","width":290},{"text":"I could have another method like this that did not return a const reference, just a reference. Then I could use that to assign into the line but thats not whats happening here","width":640},{"text":"So the question: If I'm throwing an exception, does it automatically crash the program? Yes, if you don't catch it.","width":1461},{"text":"So you'd have to have explicit try- catch block inside of main or where its being called to catch the exception then do something ","width":768},{"text":"This time we're not trying to catch an exception because most times in this class if we're throwing an exception it's because something went wrong and we let it crash","width":640},{"text":"Basically what this is doing is preventing someone from giving you invalid values which would lead to some crazy runtime memory error","width":2112},{"text":"If we're throwing these it's very explicit: you did something that doesn't make sense and the class doesn't know how to handle it. If it's user input you might print something like \"Hey dude that's not a valid chapter what are you doing?\"","width":1310},{"text":"You choose how you want to handle that particular thing, the class does not know how to handle that particular thing ","width":886},{"text":"If you don't use try-catch, it then just crashes ","width":256},{"text":"That was a good question. Alright.","width":448},{"text":"Now operators, lets go through the assignment operators ","width":448},{"text":"So first of all, why do we need an assignment operator, why do we need to overload it?","width":704},{"text":"Answer is kinda similar to why we overload the copy constructor. We need to redefine what it means to use the assignment operator on this class because the default way is not gonna copy correctly.","width":1022},{"text":"So if we don't change what it means to do assignment, we have the same issue we had with the copy constructor, where its just gonna do number-wise copy and we got two things referring to the same memory and that's bad","width":780},{"text":"Similarly, if you have a class without dynamic memory, for which the default copy or default assignment operator is fine, then you don't need to overload it","width":704},{"text":"Sort of the rule of thumb is gonna be if you have a class where you need to redefine what it means to copy it, you should also redefine what it means to assign it.","width":704},{"text":"And then, the other rule of thumb, if you got dynamic memory, you have to change what it means to copy.","width":576},{"text":"So we do need to overload the assignment operator here because the book class has got dynamic memory, the default assignment operator is just gonna do copying and we have the same problem we had before.","width":896},{"text":"So lets declare the assignment operator as it would appear in book.h","width":450},{"text":"So is the assignment operator gonna be a member function or freestanding?","width":384},{"text":"Am I gonna put it below the class definition or inside of the class definition?","width":448},{"text":"Inside, it's gonna be a member function.","width":384},{"text":"So I'm gonna be inside of the book class. It's gonna be here, inside of the public section of my class.","width":768},{"text":"What does the assignment operator return?","width":576},{"text":"Could be a const book ref, it's actually a non const book ref. The reason being that people can do weird things with reference that is nonconst","width":1381},{"text":"Like (a = b).set....","width":426},{"text":"Never do that. But people can and the language allows for it.","width":604},{"text":"So it's gonna be book reference. What is it called? operator=, operator is the key word, I'm redefining what an operator means. The operator I'm redefining is equal. It takes as an argument: const book reference.","width":2048},{"text":"Why is this member function not const? Assigning things into it, assignment can't be const it doesn't make sense. Its the assignment operator, I'm assigning things into it, so it has to be non const","width":1024},{"text":"So thats your declaration. So now lets write the implementation as was in the prelecture. What's sort of the standard way of doing the assignment operator?","width":1472},{"text":"Okay so, in book.cpp (not in class definition), we're gonna define this function now. Still gonna return a book reference, but now I need to scope it ","width":1024}]