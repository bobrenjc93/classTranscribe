[{"text":"Alright. Third way, we're doing an array of pointers to integers.","width":511.66666662693024},{"text":"cell equal new ","width":2612.6666666269302},{"text":"This is 2.","width":280.66666662693024},{"text":"Okay. Now our memory diagram's going look like","width":420.66666662693024},{"text":"cell looks at an array","width":265.66666662693024},{"text":"Okay, where each one of these is a pointer. And now we're setting all of them to..","width":1047.6666666269302},{"text":"For loop first, go over all the elements, call delete on that elelemt. And then do delete[] cell.","width":1274.6666666269302},{"text":"Same thing","width":92.66666662693024},{"text":"Same thing as...","width":619.6666666269302},{"text":"Last thing, I'm going to clean up here.","width":840.6666666269302},{"text":"Last thing is...","width":230.66666662693024},{"text":"is what","width":84.66666662693024},{"text":"What's the only one hasn't been done?","width":531.6666666269302},{"text":"So this is this one","width":971.6666666269302},{"text":"But x is an array of pointers to integers and then each of the pointers is being set to an array instead of a single one. Okay?","width":781.6666666269302},{"text":"So initialization clean up looks exactly like that one so for time I'm going to skip that part since we already have it there.","width":383.66666662693024},{"text":"that problem, right? You set up the same way, you delete the same way.","width":319.66666662693024},{"text":"Alright.","width":255.66666662693024},{"text":"So at the end of the prelecture, I told you to come to class with some concerns about the function that I have written, that printing function.","width":703.6666666269302},{"text":"So, supposed I've got a sphere class that's got like a big, huge fixed size array as a data member. So it's not a heap array, it's an array of fixed size array. May be it's got like a hundred elements in it. And always a hundred elements.","width":1151.6666666269302},{"text":"Just work with me for a bit. Imagine it's the case.","width":191.66666662693024},{"text":"It's expensive for us to copy this sphere class.","width":409.66666662693024},{"text":"Which of these functions do you prefer, and why?","width":409.66666662693024},{"text":"Have a vote for the second one.","width":236.66666662693024},{"text":"as in this one.","width":127.66666662693024},{"text":"Let's us give these numbers. Let's say. One , two, three.","width":319.66666662693024},{"text":"High variance,here.","width":231.66666662693024},{"text":"So, I've got one vote for 2.","width":127.66666662693024},{"text":"Does anybody prefer a different one?","width":127.66666662693024},{"text":"Prefer 4, so this one.","width":383.66666662693024},{"text":"Five.","width":191.66666662693024},{"text":"this one. Somebody prefers 3.","width":191.66666662693024},{"text":"Based on what the name of the function is, presumably it's going to print out information about the sphere.","width":767.6666666269302},{"text":"So, no one voted for 1.","width":277.66666662693024},{"text":"Why is 1 not the right answer?","width":127.66666662693024},{"text":"The parameter has been declared as a value.","width":671.6666666269302},{"text":"So it means in order to make the stack frame for the print function, I have to allocate on the stack an entire a sphere structure.","width":575.6666666269302},{"text":"Copy over, and print it, just to print it.","width":191.66666662693024},{"text":"I don't need a new copy of that thing. I don't want to make a copy of what I'm printing.","width":427.66666662693024},{"text":"So that's why number one is right out since it's going to make a copy and we know that it's expensive because this class is really big.","width":319.66666662693024},{"text":"So, good. I had votes for 2 and 4. So let's say I'm going to prefer between....So this one is bad, bad....between these and these.","width":1407.6666666269302},{"text":"I'm going to prefer these ones. Why is that?","width":300.66666662693024},{"text":"The const. The only difference here is the const.","width":246.66666662693024},{"text":"Why do I care it being a const?","width":191.66666662693024},{"text":"The functions is going just print it out. I don't need to change it.","width":575.6666666269302},{"text":"So I should declare my parameter const so that my caller knows that \"hey, this function promisese not to modify your class, so go ahead! It's fine!\"","width":550.6666666269302},{"text":"And then when I'm writing this, it will prevent me from accidentally modifying the class I'm given. Cause this is danger, right? If I give you something to print it out and I give you something that allows you to get my copy of it, rather than giving you a new one... ","width":1048.6666666269302},{"text":"If you accidentally modify that....I'm not expecting you to change it when you're just printing it.","width":255.66666662693024},{"text":"It is weird if I pass my sphere class to your print function and you set the radius to -47 and you give it back and I'm trying to do something with it.","width":575.6666666269302},{"text":"Don't expect things to change when I'm doing the print function, so I would like the thing that I'm passing in is const. That is I want the thing that's being referred to whether the thing at the end of the pointer or the thing that is reference to be declared const. So I prefer the thing on the right side. Now, between 4 and 5, which one of those do you prefer?","width":1695.6666666269302},{"text":"4. Why 4?","width":222.66666662693024},{"text":"Reference. Right? Why do we prefer reference to a pointer whenever it's possible?","width":447.66666662693024},{"text":"No memory location to worry about. That means that we don't have to worry about NULL.","width":435.66666662693024},{"text":"NULL is always a valid pointer to be given to somebody.","width":234.66666662693024},{"text":"So if my function is 5, somebody can give me NULL to print. Probably it doesn't make any sense for me to printing NULL.","width":575.6666666269302},{"text":"Right? I only want to print sphere.","width":127.66666662693024},{"text":"So if I pick a reference, no body can give me a NULL reference that doesn't exist.","width":191.66666662693024},{"text":"So it always refer to something of type sphere. And now I can do my printing. So the one that I prefer the most is 4.","width":639.6666666269302},{"text":"Cause the reference to avoid the copy and the const to guarantee that through that reference I will not change the class while I'm printing cause it does not make any sense for print to change that object. ","width":959.6666666269302}]