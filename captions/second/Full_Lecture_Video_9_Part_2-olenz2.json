[{"text":"Let's look at this first thing, which is these constructors and assignments and stuff","width":448},{"text":"What do we think about this first one?","width":320},{"text":"So p=i, so p we're declaring triple of int double char.. 1, 1.2, a, we're declaring a triple int, int, int, i... with 1, 2, 3, and we're trying to assign i into p. How do we feel about that?","width":1216},{"text":"Incorrect, why?","width":192},{"text":"[Inaudible student answer]","width":384},{"text":"So it goes beyond this, so it's not gonna try and do auto-conversion of these things for you in this case, right, so what's gonna happen is this is an assignment operator, how do I know this is an assignment operator, good review for the exam","width":960},{"text":"how do I know this is assignment?","width":64},{"text":"p already exists, right, if it said triple int double char p = i, then it's not assignment, right, it's construction, so this is assignment because p already is there","width":832},{"text":"so I'm invoking an assignment operator here","width":192},{"text":"okay? Well I haven't defined an assignment operator... Okay no but that's fine because the system provides me one, remember?","width":512},{"text":"Just like if I don't provide a copy constructor, the system provides me a copy constructor, if I don't provide an assignment, the system provides me an assignment, so that's fine.","width":512},{"text":"The problem here, I agree with this being incorrect, the problem here is that the type of the left and the type of the right aren't the same type, right? When I'm doing this assignment, I'm looking for a function whose signature is something like triple int double char colon colon operator equals const triple int double char reference....","width":1152},{"text":"other, or right hand side, right?","width":192},{"text":"and, the right hand side isn't something triple int double char, even though those types might be able to convert, in this case you can't go here, but even if they did, this still won't work because the types aren't the same, the types don't match, I don't find an equal operator that takes these different kinds of triples and so this doesn't work.","width":1408},{"text":"So this won't compile","width":64},{"text":"Okay, and it's gonna be a type mismatch, okay?","width":384},{"text":"The only equal operator that exists for assigning into triple int double char is from something of type triple int double char. that's the only way you can do that","width":896},{"text":"Okay, what about this one?","width":192},{"text":"triple double int int t2 from i, so I'm trying to copy construct into t2 from i, does that work?","width":640},{"text":"What's the type of i? well triple int int int. what's the type of t2, triple double int int.","width":640},{"text":"so these aren't the same type, so I'm not gonna find a copy constructor here, because the types are different, so this is not going to work","width":576},{"text":"right? my copy constructor, I haven't provided one, so the system is gonna give me one for free, but the signature for that is triple a b c colon colon triple taking a const triple a b c ref","width":896},{"text":"well, a b and c aren't the same here, so that means these are actually different types.","width":448},{"text":"When I say triple with different template arguments, that gives me a whole brand new type, it's not like all triples are comparable or assignmable from one-another or copy constructable from one another.","width":512},{"text":"They're actually different types, so triple int int int is not the same thing as triple int double int, or something. Those or two seperate completely different types despite the fact that this sort of came from the same place, they're different types.","width":896},{"text":"So this doesn't work, becuase I'm trying to construct from a value of another type and I don't have a constructor overload that takes something of that type, so this doesn't work either.","width":576},{"text":"Okay fine, what about this one? triple int int int t from i, yeah that's fine","width":576},{"text":"what is this gonna do?","width":128},{"text":"yeah, copy construct, it does find the copy constructor now because the argument is exactly the same type as the thing being constructed, so this is fine.","width":704},{"text":"okay, triple int double char p2 semicolon","width":384},{"text":"does that work?","width":128},{"text":"subtle.","width":320},{"text":"so this would invoke the default constructor, do I have a default constructor?","width":448},{"text":"no","width":64},{"text":"so this doesn't work","width":128},{"text":"compiler provides one, if and only if I provide no other constructors","width":448},{"text":"so as soon as I've provided a constructor that takes an a, a b, and a c, the compiler says okay you know what you're doing, you know how to construct these things, so I'm not going to provide you a default constructor anymore","width":704},{"text":"I can get it back, if I want it back I can get it back and I could say something like triple... ","width":448},{"text":"equals default...","width":256},{"text":"that's saying okay actually I did want that, give it back, I wanted that, that was useful, now it's fine because I do have a default constructor","width":704},{"text":"there's this rule that says if I provide a constructor, if there's a user-supplied constructor, the compiler will no longer provide you the default constructor so now you have to write one if you want that behavior.","width":832},{"text":"If you think about it, that sorta makes sense, if I've got a user-provided constructor, that means that I'm defining what you've gotta do to make something of this type, right","width":896},{"text":"If the system also provided me a default constructor that means there's another way of going around my constructor that maybe doesn't do the right setup for me.","width":448},{"text":"Imagine I've got a class that's got like dynamic memory in it and I've got a constructor that takes a size.","width":320},{"text":"and it sets the size and it makes the dynamic array of that appropriate type.","width":192},{"text":"if I also had a system provided default constructor, what's it gonna do? well it's just gonna set the pointer to nullptr maybe if I'm lucky, and the size is gonna be garbage so that's not what I wanted at all, right?","width":1024},{"text":"so It sort of makes sense, once you provide a constructor, the system doesn't provide the default one anymore. It'll still happily provide you a copy constructor, but it won't provide you a default constructor anymore.","width":704},{"text":"[Student asking question]","width":1171},{"text":"This is just a way of not having to write anything in my implementation file at all, so it's saving like one two three four five lines maybe?","width":483},{"text":"because I don't have to say the template stuff and I don't have to declare it anymore and it's just...","width":192},{"text":"But this means exactly that","width":256},{"text":"leaving it without without =default and then in the cpp file declaring it with an empty body does nothing, that'll do the exact same thing.","width":512},{"text":"[Student asking question]","width":576},{"text":"Yes, I could make that valid, I would have to provide an explicit assignment operator for these different types now though.","width":384},{"text":"[Student talking]","width":192},{"text":"Like if I wanted to be able to assign from triples for whom I know there's implicit conversions for their arguments for example, I would have to write an assignment operator that allows me to do that.","width":896},{"text":"Or let's say I wanted to be able to assign into a triple int int int from an int and it sets all three to be the same thing, I could do that I just have to provide an overloaded assignment operator for that case.","width":832},{"text":"So the problem here is that the default provided one is going to be only two things of the exact same type, and so since the template arguments differ it doesn't find it because it's not the same type.","width":640},{"text":"But yes, I could add overloads to make that work, if I wanted to.","width":256},{"text":"[Student asking question]","width":192}]