[{"text":"","width":3520},{"text":"Okay!","width":256},{"text":"So let's get back.","width":192},{"text":"Alright, hopefully you are able to start to get to know some of the people in the class","width":320},{"text":"Maybe seek out some potential partners","width":192},{"text":"So I am curious ","width":181},{"text":"","width":64},{"text":"","width":95},{"text":"What programming languages have people used before?","width":192},{"text":"So I mentioned in the prelecture I talked about Java, I talked about C, I talked about Ruby.","width":320},{"text":"Is there anything not in that list that people have used before?","width":192},{"text":"Yeah. Matlab! Okay. What are some of the properties of MATLAB?","width":384},{"text":"","width":384},{"text":"Right, so it's good for, it's used in sort of engineering a lot for doing calculations.","width":448},{"text":"From running simulations I've seen it a lot.","width":192},{"text":"It tends to have pretty good performance for that sort of stuff too.","width":256},{"text":"Because it binds down to very low level It's a high level language dynamically typed,","width":384},{"text":"but it binds down to low level CPU instructions for optimizing vector math","width":320},{"text":"and matrix math etc","width":86},{"text":"So it's actually pretty fast.","width":64},{"text":"","width":64},{"text":"That's interesting, that's a good one. What's another one? Yeah?","width":128},{"text":"","width":298},{"text":"Okay. Good.","width":64},{"text":"So, assembly language. Right that's about as close to the system as you can possibly get.","width":384},{"text":"Unless you really want to start writing out Opcodes in binary yourself which is awful","width":308},{"text":"So, you can actually it most of the compilers for C and C++ you can actually tell them to please dump the assembly so you can actually see sort of what the compiler did with your program in terms of optimizations so you can kind of see exactly what CPU instructions are going to be run.","width":1152},{"text":"So assembly is great for that sort of stuff. Assembly is used a lot in embedded systems right where you may not need to have a C compiler that can target your platform so you have to write things directly in terms of what CPU instructions do I want to be running with what data, with what registers, etc","width":1125},{"text":"That's interesting. Verilog. That's used in the architecture class I think for doing object logic gates set up or thinking about how you might design physical hardware for computing things.","width":1152},{"text":"That's an interesting language I've never used it myself, so I can't comment too much about how it's setup, but the domain is very interesting.","width":576},{"text":"So that's an instance of what's often called the domain specific language so it's a computer language that's designed for a specific task.","width":322},{"text":"You're probably not going to use Verilog to manipulate images, you're going to use Verilog to help you design hardware.","width":448},{"text":"Right? so it's a language that's designed specifically for a small niche purpose and really good at that niche purpose right?","width":384},{"text":"C++, Java, Ruby, these sort of things are known as generic or general programming languages. They're not specific to a particular domain. They kind of work for anything. You can use them for whatever you want to.","width":640},{"text":"","width":113},{"text":"They may not be custom tailored with all of the things that you'd like for a particular problem.","width":320},{"text":"","width":348},{"text":"Fortran! yeah Fortran! So Fortran was really big. There's still a lot of Fortran code out there, I hope no one's writing anymore Fortran.","width":640},{"text":"","width":100},{"text":"I've not used Fortran for anything large, but I've worked on a system that was designed to help refactor Fortran code.","width":448},{"text":"In Fortran, uggh! Fortran is really nice though because it was one of the first languages that was designed for doing lots of numeric calculations really really fast, and it was a very high level language, so it was easier to express things in Fortran than it was in the time in either Assembly or in C.","width":1344},{"text":"","width":64},{"text":"Fortran programs tend to be very very fast even sometimes faster than their equivalent C ","width":320},{"text":"Because of the things that that compiler can do.","width":192},{"text":"That's sort of like a domain specific language for game programming maybe?","width":768},{"text":"","width":192},{"text":"","width":183},{"text":"","width":10},{"text":"It'd probably take too long to figure out what the most esoteric major is, but I can probably look at the roster and figure (it out).","width":256},{"text":"Not all CS and ECE people in here.","width":470},{"text":"Okay. Let's talk about the actual material now though.","width":254},{"text":"So, in the lecture I talked and we sort of brought up a couple of these points in talking about programming languages that people have used before.","width":437},{"text":"But I mentioned there are three sort of main properties that I'm concerned with about the C++ programming language. Does anybody remember what those were?","width":576},{"text":"","width":384},{"text":"Okay, so let's do the first one. Static type.","width":128},{"text":"","width":474},{"text":"Statically typed.","width":64},{"text":"Can anybody explain to me other than you what does it mean for a language to be statically typed?","width":448},{"text":"","width":1920},{"text":"So, to reiterate just so it's on the recording, statically typed languages when you declare the variables, you say ahead of time what the type of that variable's going to be and then that type remains fixed for the remainder of the function or the remainder of the program depending on scope of the variable.","width":1074},{"text":"So, once I have an int a, it's int forever. It's not going to suddenly change to be a string.","width":343},{"text":"It's not going to change to be an image.","width":98},{"text":"","width":155},{"text":"Dynamically typed languages, that's not the case at all. You typically don't declare types in dynamic type languages, you just say something like a = 1, and 1 is a type integer, so a now has integer, but then I might say a = \"hello world,\" and now it's a string.","width":917},{"text":"There is no problem with that. It's fine for these variables to have types that are changing as the program is running","width":448}]