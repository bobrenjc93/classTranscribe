[{"text":"What about the right child then?","width":192},{"text":"it's two. It's one after the left child. They are laid out the level orders if you can get the left child just move one forward, then that's the right child.","width":768},{"text":"So","width":256},{"text":"Uh..Here my left might be something two times index plus one, right might be two times index plus two. ","width":1088},{"text":"OK? Can we go back up the tree? So one thing that would be sort of hard for us to do in the other tree would be go back up. ","width":512},{"text":"Is there formula for going back up this tree?","width":256},{"text":"If we are at the five","width":320},{"text":"How do we get up to the parent?","width":128},{"text":"OK, five is sort of simple. ","width":576},{"text":"Think about fifteen.","width":256},{"text":"So we're at the fifteen. ","width":128},{"text":"So we are here","width":128},{"text":"How do I get back up to the parent? Or what's the parent？ The parent should be cell one.","width":384},{"text":"I want to go from three to one. ","width":960},{"text":"Minus one divided by two? is right here","width":256},{"text":"So OK? So we are at three be three minus one divided by dome would give me one. OK？That would work. So what about some arbitrary notes? ","width":448},{"text":"What about the eleven?","width":192},{"text":"To eleven would be... In that position eleven. So that would be ten. ","width":384},{"text":"So that would give me five, that would give me this seven. OK fine.","width":192},{"text":"What about twelve?","width":128},{"text":"The twelve in that position ten. So minus one would give me nine. ","width":320},{"text":"Divided by two gives me...","width":192},{"text":"Yeah. Floor it. ","width":128},{"text":"So if I do integer math in C or C++. It's the floor happens automatically","width":251},{"text":"If you want to think in terms of mathematics,","width":192},{"text":"Where we deal with, you know, at actual numbers","width":64},{"text":"You're gonna floor this thing.","width":64},{"text":"So the parents...is gonna be at index minus one divided by two, floor.","width":768},{"text":"Right?","width":128},{"text":"This is a good question. So we've got this formula forgetting, forgetting like the left and right of staff","width":1088},{"text":"Like, eleven doesn't have left or right?","width":192},{"text":"Um.. Do we have to make sure we've got have like extra cells to denote that's a null.","width":384},{"text":"Hmm...","width":128},{"text":"How do we know? How could we check?","width":320},{"text":"If suppose we didn't, the answer is we don't necessarily have to. We could. But we don't necessarily have to.","width":320},{"text":"So how could we get around to that. ","width":192},{"text":"How could we check? ","width":128},{"text":"If I'm at eleven, how do I check if eleven actually is got left or right child. ","width":448},{"text":"Yeah so the index to the left child of the eleven...would be larger than the current size of array.","width":704},{"text":"So then I know it's the end of the array, so it can't exist. right?","width":384},{"text":"For the seven. Notes seven. The index of its left child is in the array. So I know it's got left child. But the index of its right child would be off the array. So I know it doesn't have right child. ","width":640},{"text":"I'm explaining something here. What am I explaining here?","width":256},{"text":"The type of the tree. What's true about this tree?","width":256},{"text":"It's complete. That's what's it allowing me to do this. ","width":192},{"text":"If it wasn't complete, then I can have the nodes to wherever the heck I wanted them. d","width":256},{"text":"Right? It's convenient here that this is complete cause that all the nodes would gonna be on the right of the array. Right?","width":320},{"text":"So I can just not store that parts of the array that has all the nodes. I'll just say it's off the end of the array, it's null. ","width":384},{"text":"Right? But this tree would have to be complete in order for me to say that. OK?","width":256},{"text":"So the magic property I'm using here is that it's complete.","width":448},{"text":"Binary tree.","width":320},{"text":"It wasn't complete, I have to do something to store nodes...and maybe I've got some. Maybe I'll let the default ","width":192},{"text":"and maybe I've got some. Maybe I'll let the default T be the null. But then if somebody want from the default T in there...What do I do. OK. Maybe I've got pointers. Oh I gets really nasty.","width":640},{"text":"OK so the reason that this is nice and efficient and fast is because we are guaranteeing this tree is complete.","width":576},{"text":"OK?","width":128},{"text":"All right. What else is true about this tree structure? ","width":576},{"text":"What's something if you stare at this little bit? What's something that you notice? ","width":320},{"text":"Look at the values.","width":320},{"text":"What's true about the values in this guy?","width":384},{"text":"Right, some got greater values?","width":192},{"text":"Yeah, the children always have greater values than the parent.","width":256},{"text":"Is that true just, just locally or is that true globally?","width":256},{"text":"Yeah everything, so like four. The fourth small thing in the whole tree, everything in the tree ","width":384},{"text":"that below the four is larger than it. ","width":256},{"text":"Right if we look at the sub-tree where at five, everything below the five is larger than the five.","width":448},{"text":"OK?","width":64},{"text":"The five is not above the four, it's below the four. So this, this property is true recursively throughout the entire tree.","width":448},{"text":"OK?","width":64},{"text":"This property is called the heap property and this data structure is called a heap. ","width":320},{"text":"In particular this is a binary heap. There is all kinds of different heaps. We'll just talk about binary heaps because they are nice application trees.","width":448},{"text":"So this is a binary heap.","width":128},{"text":"And the reason we call it a binary heap is that it is a complete binary tree that also satisfies the heap property.","width":384},{"text":"So let's write out the recursive definition of the heap property. I'm not gonna write out the recursive definition of the completeness.","width":448},{"text":"Implicitly here is going to be that the heap must be a complete binary tree, and then we can use this heap property to check if it's a heap.OK?","width":320},{"text":"This is something that... this is recursive definition that is assuming that I'm already on a complete tree.","width":320},{"text":"That I want write the complete tree recursive definition.","width":320},{"text":"OK? So let's write out the recursive definition of heap property. ","width":256},{"text":"OK?","width":64},{"text":"So a heap H is gonna be either...so this is gonna be a check if something fits in this classic trees called H, H, they can be heaps.","width":704},{"text":"If it doesn't, it can't be.OK?","width":192},{"text":"So H is either what or what? So we need base case for recursion.","width":384},{"text":"Empty, right? An empty tree is a heap. Vacuously it's complete and every node, and every root is smaller than all of its children. Right?","width":576},{"text":"There is nothing there, right?","width":128},{"text":"So the empty tree is a heap","width":320},{"text":"Or...it's a binary... we are dealing with binary heaps here.","width":384},{"text":"So it's a root.","width":320},{"text":"H L and H R sort of hinting... that we're gonna do some recursion here, right? ","width":576},{"text":"So the first thing I'm gonna, I'm gonna get the recursion out of the way right after that. ","width":192},{"text":"So the first thing that I need to be true is that the left and right are also heaps.","width":320},{"text":"Right? Then I can worry about fixing up, checking whether I myself is a heap. ","width":320},{"text":"By knowing that the left and right are heaps, then the only thing I've got check is whether I myself is in the right position,being...myself being the root. Right?","width":448}]