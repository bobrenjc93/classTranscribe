[{"text":"Not edge_weights","width":512},{"text":"Not talking about a weighted graph at all here yet.","width":448},{"text":"There exist an algorithm for doing it for edge weights but it's completely different ","width":128},{"text":"So I'm visiting everything in order of the number of hops I take from start","width":624},{"text":"This algorithm is called BFS","width":384},{"text":"It is what happens when you drop a pebble in the lake","width":447},{"text":"The ripples go out.","width":512},{"text":"expanding outwards","width":384},{"text":"[rephrasing and paraphrasing]","width":1152},{"text":"Let's write this","width":640},{"text":"It doesn't have a queue","width":704},{"text":"It's labelling stuff","width":512},{"text":"Ignore that part. The important part is this","width":832},{"text":"what does it do?","width":384},{"text":"Every vertex v in vertex set G, if label unexplored, I call the helper function.","width":1600},{"text":"THis is the thing that ensures we visit the disconnected parts of the graph","width":512},{"text":"The purpose of this is to ensure that I visit every single component","width":2816},{"text":"Ok so","width":1984},{"text":"It looks very similar as before","width":448},{"text":"Once we're starting the traversal, we're gonna mark that node as visited","width":1600},{"text":"g.vertex_label will set the label","width":128},{"text":"And then I put start on the queue","width":1344},{"text":"and while the queue is not empty, I grab the front, I pop.","width":960},{"text":"I'm at a vertex u, this for loop goes over all the adjacent vertices to u.","width":1280},{"text":"Call each v.","width":192},{"text":"Give the label of v","width":1024},{"text":"there are two cases, unexplored or visited","width":832},{"text":"if unexplored, change it to visited, and mark the edges as discovery and push on to the queue.","width":1152},{"text":"otherwise, if explored,","width":2880}]