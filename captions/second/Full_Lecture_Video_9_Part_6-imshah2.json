[{"text":"If I return by reference this wont work because I would be returning a reference to a local variable. Red is local to my stack so I cant return by reference","width":694},{"text":"yeah, this make_triple() function is just a free standing function. It has nothing to do with the class itself. So if I derive from triple, theres no inheritance of this going on at all","width":1553},{"text":"This isn't the member function. Only member functions are inherited","width":272},{"text":"If i make a derived class a triple like triple bubble or something","width":351},{"text":"I would have to rewrite one for this drive class","width":364},{"text":"It's not inherited, its not a member function","width":180},{"text":"Its only a member function if it was scoped and i put it inside of the header file for the triple class itself","width":376},{"text":" inside of  the triple","width":115},{"text":"this is outside of the triple. This is just a free standing function","width":236},{"text":"its still a template function, its still going to show up in the header somewhere, but its not inside of the triple class iteself","width":378},{"text":"Its outside of it","width":108},{"text":"I didn't need to use to use anything that was private to triple in order to do this","width":208},{"text":"I just used a public constructor and returned by value","width":192},{"text":"that was it","width":153},{"text":"I construct one inside of the function and then I consstruct one too put back into the stack frame","width":793},{"text":"the compiler may optimize a way that second one","width":221},{"text":"which is what youll see most of the time","width":206},{"text":"but there are cases where it cant","width":128},{"text":"but most of the time if you print out something in the triple constructor, you'll only see one","width":442},{"text":"but yes, there are two happening","width":128},{"text":"its just so the compiler can get rid of the second one if its unnecessary","width":259},{"text":"you wont need to know that for the exam","width":192},{"text":"but if you actually try this, you might see that there is only one call and be confused","width":328},{"text":"I prefer this one just because its shorter to write","width":342},{"text":"for me as the programmer","width":127},{"text":"Sure I had to wait through all that which is painful but","width":198},{"text":"ive done that once and now every time im making that triple i can just call this function","width":201},{"text":"and not have to type out all three template arguments","width":271},{"text":"and say triple and angle brackets and all this stuff","width":118},{"text":"this is gonna be faster","width":112},{"text":"ok","width":64},{"text":"switching gears entirely","width":230},{"text":"Done thinking of templates for a while","width":256},{"text":"switch gears, think about inheritance and virtual functions and stuff","width":320},{"text":"so i've got these 2 class declarations","width":138},{"text":"i've got hello which has got a public virtual int 'foo'","width":291},{"text":"so ive got a virutal function 'foo'","width":136},{"text":"So is 'hello' an abstract class?","width":228},{"text":"no","width":128},{"text":"It doesn't have any pure virtual functions","width":195},{"text":"its got a virtual function but thats not a pure virtual function","width":220},{"text":"there's a difference between virtual functions and pure virtual functions","width":224},{"text":"All pure virtual functions are virtual functions","width":188},{"text":"not all virtual functions are pure virtual functions","width":229},{"text":"How would I know if this is a pure virtual function?","width":147},{"text":"' = 0'","width":128},{"text":"so hello is not an abstract class","width":192},{"text":"Ok?","width":64},{"text":"and its got a private int 'bar'","width":256},{"text":"and I've got a class 'world'","width":64},{"text":"is a public hello","width":128},{"text":"and its got a public int 'baz'","width":128},{"text":"ok?","width":64},{"text":"and the question is where can the following assignments occur?","width":193},{"text":"bar = to?","width":149},{"text":"and occur meaning what function","width":256},{"text":"Could it appear in a free standing function? could it appear in a member function hello?","width":257},{"text":"could it appear in a member function of class world?","width":148},{"text":"Ok what about a free standing function like main?","width":256},{"text":"No","width":64},{"text":"right? its a private member variable","width":249},{"text":"i cant ever assign into it","width":77},{"text":"it wouldnt work","width":80},{"text":"and furthermore i would have to say something like something . hello","width":265},{"text":"or something . bar","width":98},{"text":"that wouldnt work","width":147},{"text":"what about inside of the hello class","width":256},{"text":"could it appear inside virtual int foo","width":248},{"text":"yea","width":64},{"text":"its a private member variable","width":189},{"text":"but its inside hello","width":137},{"text":"that virtual int foo is inside hello so thats fine","width":188},{"text":"that function is not mark const so i can do the a","width":104},{"text":"so thats fine","width":191},{"text":"what about inside of ","width":261},{"text":"a member function of the world class","width":159},{"text":"what about int baz?","width":64},{"text":"can bar = pure inside int baz?","width":209},{"text":"no","width":64},{"text":"its private to the hello class","width":245},{"text":"and that private accessing is not inherited so its not as though even i am a hello","width":413},{"text":"i still cant act as the private variables of hello","width":198},{"text":"so can it cannot appear inside of baz","width":192},{"text":"so private means only to this particular class","width":518},{"text":"so only to member functions of that class","width":107},{"text":"and not any deriving classes","width":107},{"text":"what would i change that if i wanted to be able to say that inside of int baz","width":363},{"text":"protected","width":64},{"text":"i would change this to say protected instread","width":192},{"text":"alright","width":893},{"text":"here's one thats a little tricky","width":423},{"text":"So what is printed when i do this?","width":384},{"text":"here's main","width":256},{"text":"that's it","width":128},{"text":"main a monolith, return 0","width":127},{"text":"what is printed?","width":192},{"text":"I have to make a monolith","width":955},{"text":"Im invoking the default constructor for this monolith","width":384},{"text":"inside of monolith","width":192},{"text":"we see that it is an obelisk","width":383},{"text":"and its also got a baselisk inside","width":192},{"text":"ok","width":128},{"text":"so there are lots of things that are happening here","width":256},{"text":"if we think about what a monolith is","width":576},{"text":"if we draw what a monolith is","width":256},{"text":"it is a public obelisk","width":512},{"text":"so","width":64},{"text":"its got one of those","width":192},{"text":"as part of it","width":64},{"text":"its one of those and then some extra stuff","width":256},{"text":"so, if we think about, a box diagram","width":320},{"text":"if this is a monolith, then this part is a baselisk","width":192},{"text":"or lets say this part is a obelisk","width":192},{"text":"Because it is an obelisk","width":448},{"text":"its a public obelisk","width":128},{"text":"its got an obelisk part","width":128},{"text":"so down here is whatevers associated with monolith","width":320},{"text":"its an obelisk and it's also got these free monolith extras","width":576},{"text":"well what its in a monolith?","width":320},{"text":"well we've got a private instance variable, baselisk int B","width":256},{"text":"so we know we've got a member variable on this part","width":320},{"text":"which is of type baselisk","width":128},{"text":"of int aclled b","width":384},{"text":"so whats a basilisk int","width":384},{"text":"its not inheriting from anything","width":192},{"text":"its a template class","width":128},{"text":"and thats really it","width":192},{"text":"every single one of these constructors and destructors is priting stuff","width":512},{"text":"so the question is, what order is stuff happening?","width":256},{"text":"what order are these constructors being invoked?","width":448},{"text":"so if I want to make a monolith M","width":256},{"text":"i want to invoke its default constructor","width":320},{"text":"so starting from the very beggining here","width":320},{"text":"monolith M","width":64},{"text":"im going to invoke this fucntion","width":128},{"text":"which is defined here","width":128},{"text":"so im gonna start running this monolith default constructor","width":173},{"text":"However, a monolith is an obelisk","width":320},{"text":"so I must construct the obelisk part first","width":448},{"text":"so I run this obilisk part","width":192},{"text":"theres nothing in the initializer list at all","width":303},{"text":"So im not invoking a particular constructor of the obilisk","width":64},{"text":"if i wanted to, thats where it would go, in the initializer list","width":290},{"text":"so if im not invoking a particular constructor, its going to involke the default constructor for my base class","width":471},{"text":"so its going to invoke, obelisk default constructor","width":549},{"text":"which is defined here","width":128},{"text":"So the very first think I'm going to see here is stone","width":64},{"text":"I've got to make","width":448},{"text":"the obelisk part","width":128},{"text":"now I've made the obelisk part","width":157},{"text":"now I start to make the monolith part","width":192},{"text":"however, before I enter the braces of the constructor for the monolith","width":467},{"text":"all of my instance variables are going to be initialized","width":102},{"text":"thats what the initializer list is for","width":256},{"text":"if the initializer list is empty, all of my member variables are going to be initialized by calling their default constructors","width":448},{"text":"You saw a little bit of this in the inheritance lab i believe","width":426},{"text":"where you needed to put the constructor call for one of your member variables in an initializer list to get it to do the right thing","width":320},{"text":"If we dont have that, we're going to invoke a default constructor of all of our member variables","width":489},{"text":"in the order that they're declared","width":192},{"text":"because thats the order that they are inside of the structor","width":192},{"text":"so the first that we're going to do is actually invoke this basilisk constructor first","width":192},{"text":"so then we're going to invoke this function","width":256},{"text":"which is defined here","width":64},{"text":"so we're going to say","width":128},{"text":"hiss next","width":128}]