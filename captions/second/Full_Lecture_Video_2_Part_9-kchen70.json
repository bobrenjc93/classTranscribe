[{"text":"OK, auto p  = &doub. What is &? What does & do?","width":2240},{"text":"Address. So this gives me the memory location of doub.","width":320},{"text":"OK, so what is the type of p>","width":256},{"text":"A double, a pointer to a double","width":384},{"text":"That is fine","width":192},{"text":"You can have pointer on the stack.","width":128},{"text":"A pointer is just a memory location","width":704},{"text":"This is a good question. So pdoub is a pointer. The thing at the end of that pointer must be of type double.","width":960},{"text":"It is a double* and have to point here","width":256},{"text":"If I do nothing else, the question is what happens?","width":512},{"text":"What goes on here, when the stack frame is release?","width":384},{"text":"When this function returns, whatever.","width":128},{"text":"So, I have a memory leak.","width":128},{"text":"Because of pts. right?","width":128},{"text":"I have something in the heap. I have no other pointer to it. And this pointer goes away, so I leak that memory.","width":448},{"text":"So, let's fix that.","width":128},{"text":"delete pts.","width":832},{"text":"Am I done?","width":320},{"text":"I saw the pointer.","width":320},{"text":"Do I need delete pdoub?","width":192},{"text":"Why not?","width":192},{"text":"I only need to delete the things that is located in the heap.","width":320},{"text":"Even though i got a pointer pdoub to doub. It is on the stack. If I don't do anything at all, the stack itself is going away.","width":704},{"text":"The memory associated with doub is going away.","width":192},{"text":"It is a variable on the stack","width":128},{"text":"So I don't need to worry about anything.","width":192},{"text":"I don't leak memories, and there is no problems.","width":128},{"text":"It fine to have pointer to stack memory","width":320},{"text":"question","width":640},{"text":"So, the argument to delete operator is a pointer.","width":320},{"text":"And what it does is to delete the memory that the pointer points at.","width":256},{"text":"So the argument to delete is the pointer that is ont the stack","width":384},{"text":"But what delete that is delete that thing, free that thing","width":384},{"text":"So it still points at what it used to point at.","width":704},{"text":"Just the location it refered to has been released back to the system.","width":192},{"text":"That is scaring bad","width":576},{"text":"It might if you are lucky, but it might not.","width":192},{"text":"Because the pointer is still pointing at something","width":128},{"text":"But what it points at, you don't own it any more","width":192},{"text":"You release the memory to the system, so the system can do whatever it wants to do","width":256},{"text":"So doing that may have seg fault, doing that might have crashed, doing that might format you drive, you have no idea.","width":384},{"text":"If you are paranoid, it is good to set your pointer to null after you delete it. So I might say something like pts = nullptr","width":1216},{"text":", which is a convention that a pointer is not pointing at anything","width":512},{"text":"nullptr is just a constant of address 0","width":384},{"text":"and address 0 is never ever ever ever used as a address for programs to access","width":384},{"text":"So dereference it will be trouble/","width":384},{"text":"There is no header files or spaces here.","width":512},{"text":"nullptr is just a part of the language","width":256},{"text":"So what this do is that it says that","width":768},{"text":"ptr no longer points here, instead, it points at null","width":256},{"text":"But it still pointing at something, just address 0","width":384},{"text":"never a valid address for you program","width":128},{"text":"Oh, yes, nullptr is a keyword.","width":320},{"text":"It will be highlighted if you are using a editor.","width":320},{"text":"Ok, how do you feel about the codes on the left","width":704},{"text":"int* p = nullptr","width":128},{"text":"I have a pointer p ont the stack","width":320},{"text":"it is not pointing at anything right now.","width":128},{"text":"The cannonical saying is that it is not pointing to anything","width":192},{"text":"int x","width":128},{"text":"p = x","width":64},{"text":"Type mismatch, what kind of error is that","width":320},{"text":"Compiler error","width":64},{"text":"This will not compile, because I am assigning an integer to a pointer, and that type doesn't match","width":704},{"text":"The compiler will complain and not complie","width":192},{"text":"What about the code on the right","width":128},{"text":"int*p; *p = 54; p = nullptr; *p  = 87;","width":384},{"text":"Are there any compiler errors here?","width":320},{"text":"No.","width":256}]