[{"text":"","width":9337},{"text":"Okay.","width":31},{"text":"Wow.","width":64},{"text":"It got deathly quiet when I woke up the machine.","width":102},{"text":"","width":109},{"text":"So who thinks they have a good solution for one?","width":142},{"text":"","width":3712},{"text":"Okay foo() returns an int.","width":175},{"text":"And we're just calling it without using the return value.","width":217},{"text":"Does that compile?","width":128},{"text":"","width":48},{"text":"Yes, its actually fine.","width":106},{"text":"","width":64},{"text":"This is a question a lot of people ask me, so thats why I went through that .","width":256},{"text":"So its actually okay to call a function that returns something and do nothing with the return value.","width":256},{"text":"It will compile and thats fine.","width":96},{"text":"Its probably not a good idea.","width":98},{"text":"Probably if something is returning...","width":128},{"text":"If a function is returning you something you probably care about that return value.","width":256},{"text":"But you can go ahead and call functions that return things without caring about their actual return value. Thats fine.","width":310},{"text":"","width":732},{"text":"So an alternative to this might be...","width":169},{"text":"","width":230},{"text":"bar(foo(2, 10))","width":353},{"text":"Now I've got two nested function calls.","width":321},{"text":"The very first one that will run is foo()","width":233},{"text":"because it has to be evaluated as the argument list to bar().","width":180},{"text":"","width":34},{"text":"So foo() will run first","width":100},{"text":"It will do whatever its gonna do.","width":112},{"text":"It returns back to us 20 because 2 and 10.","width":145},{"text":"Right.","width":71},{"text":"Multiplied together thats 20","width":83},{"text":"It gives us a 20 value back","width":64},{"text":"That 20 is then passed in as the argument of bar() and then bar() prints bar(20) called.","width":263},{"text":"","width":440},{"text":"Why return zero?","width":100},{"text":"","width":224},{"text":"Yeah. Success.","width":45},{"text":"Theres not really any error condition for this program so convention says we return zero.","width":250},{"text":"","width":32},{"text":"Why did we need both bar.h and foo.h?","width":204},{"text":"","width":72},{"text":"To  be #include'd","width":160},{"text":"Yeah. I used both.","width":115},{"text":"","width":235},{"text":"If you want to get technical, the reason I need to include #include those two header files is because to compile main.o","width":427},{"text":"That is to compile main.cpp into an object file.","width":178},{"text":"I need to have the declarations of everything that I used.","width":223},{"text":"Note declarations. Not definitions.","width":145},{"text":"So definition is separate from declaration.","width":133},{"text":"Declarations are what you put in the header file and its just this stuff","width":244},{"text":"Where theres not actually a function body. It doesn't tell you how it works.","width":192},{"text":"It just tells you what is it?","width":94},{"text":"It takes these arguments. It returns this. Its called this. Whatever.","width":184},{"text":"","width":53},{"text":"We need to #include the header files to have the declarations of the things that we're using in that cpp file.","width":437},{"text":"So since in main.cpp we're using both bar() and foo() we need to #include the header files.","width":424},{"text":"Yes?","width":128},{"text":"","width":464},{"text":"So the question was, okay if I've got a bajillion functions that I need to use and they all different header files","width":378},{"text":"Can I just make a header file that just #includes all the headers that I need and then just #include that one file for main?","width":345},{"text":"The answer is yes.","width":72},{"text":"So it will go through and actually process everything sort of recursively in some senses.","width":256}]