[{"text":"if i push a whole bunch of stuff on the array and then pop a whole bunch of stuff","width":422},{"text":"getting the next element is going to be very very easy","width":196},{"text":"if i push a whole bunch of stuff for the list and pop a whole bunch of stuff i'm going to have to traverse pointers all over the room ","width":423},{"text":"if the room if my heat memory","width":131},{"text":"it's not all contiguous. it take much much longer","width":172},{"text":"so an array is actually not so bad","width":147},{"text":"what's the bad one here?","width":162},{"text":"doubley  linked list, why?","width":244},{"text":"yeah, it's got an extra pointer and i really didn't need it","width":256},{"text":"so here's a case where you'd use a singly linked list over a doubly linked list","width":224},{"text":"if you're going to use a linked list at all, which you may or may not want to","width":320},{"text":"but if you do then why not use a singlely linked list? it's just as easy as the doublely linked list","width":576},{"text":"it uses order n, less memory because you're storing one less pointer per every node","width":256},{"text":"so in this case, i would probably not pick a doublely linked list. there's really no reason to prefer a doublely linked list here","width":966},{"text":"so we're not even talking about disk at this point. we're talking about memory","width":660},{"text":"yes, but this is doesn't have to do with the disk on the machine yet. the seek time is still faster because of the cacheing layers inside","width":566},{"text":"the CPU itself","width":220},{"text":"regardless of what your drive is, this is going to be faster","width":384},{"text":"this isn't even touching the disk yet. this is all in memory and contiguous memory is still faster than noncontiguous memory","width":576},{"text":"which is a little weird because it's random axis, right. but it's not","width":212},{"text":"in practice, it's really not","width":183},{"text":"if you are in CS, you will discover it as you will take computer architecture courses. if you're in Ece, you probably already know that","width":576},{"text":"or you're going to know that pretty quickly because you do a lot more with the hardware stuff than i do","width":408},{"text":"good question","width":332},{"text":"any questions?","width":129},{"text":"yeah","width":708},{"text":"it's not part of the adt so i don't really care","width":320},{"text":"if the purpose is to implement this particular adt then, you could add extra functionality and that changes what you want to do","width":391},{"text":"but just for implementing the adt, it's not necessary so not a huge deal either way","width":542},{"text":"any more questions? these are all really good questions","width":512},{"text":"good. let's implement another data structure","width":231},{"text":"deja vu. implement a data structure. identical to the one above. it has the following adt function: pop, push, and peek","width":461},{"text":"same","width":64},{"text":"defintiions as before ","width":106},{"text":"with the exception that the first element to be removed is now the least recently inserted element","width":578},{"text":"so before it was the most recently inserted element, now it's the least recently inserted element","width":460},{"text":"okay so that's the exact opposite of what we had before","width":384},{"text":"what physical process does this remind you of? where the first thing that goes in is the first thing that's going to come out?","width":768},{"text":"netflix","width":115},{"text":"what about netflix?","width":199},{"text":"what part of netflix specifically?","width":169},{"text":"the que of the shows that you're watching","width":256},{"text":"exactly.","width":161},{"text":"what else?","width":64},{"text":"what's a really boring one?","width":128},{"text":"grocery shopping or the dmv, right?","width":256},{"text":"here's your number, sit down and you have to wait until your number is called","width":320},{"text":"any queuing system is going to be like this so this adt is going to be the cue adt","width":680},{"text":"first thing that's in the que is the first thing that's going to come out. first in, first out","width":765},{"text":"what about the stack? what was that one?","width":256},{"text":"it wasn't first in, first out","width":64},{"text":"it's first in, last out or last in, first out","width":256},{"text":"i say last in, first out","width":128},{"text":"the last thing they put it is the very first thing that going to come out of this thing","width":351},{"text":"these two things are really really similar but that subtle difference makes all the difference, right?","width":494},{"text":"anarchy would ensue if in grocery shopping the last person to enter the store is the first person to check out","width":576},{"text":"or the last person that shows at the dmv is the first one that gets their license","width":320},{"text":"so a subtle difference. it looks exactly the same in terms of what the adt is but the actual functionality is vastly different because the ordering that it gives you is completely different","width":637},{"text":"so the stack adt and the que adt often calling ordered structures. they're different from containers","width":688},{"text":"containers give you an order. but the order is the order that you put things in. and you can iterate through the container","width":357},{"text":"you can get everything in there","width":205},{"text":"you know where things are relative to other things","width":128},{"text":"you know that 3 comes before the 4 comes before the","width":192},{"text":"in an ordering structure you have no idea","width":256},{"text":"conceptually you can think about what is currently in there if you think about the implementation details","width":192},{"text":"but from the adt you have no idea what the order of things  are. you just know that the next thing that's going to come out is either the last thing put in for the stack or the first thing put in for the que ","width":768},{"text":"so these are often things called ordering structures. and you use these in several different algorithms to provide ordering for the operations that you want to be doing","width":536},{"text":"a stack","width":192},{"text":"can be used to simulate recursion ","width":320},{"text":"i think in the lab and the queues are often used for buffers. queues in general so queing up a whole bunch of network transfers if you're downloading 8 files. there's only one network interface. it has to","width":1280},{"text":"somehow those packets are being queued up. and they're going to be in the order that you're receiving them","width":302},{"text":"if you're using tcp right","width":79},{"text":"so there's queues all over the place. so it's all over","width":381},{"text":"code everywhere so these two structures are really important","width":384},{"text":"let's quickly go through what this is going to look like. i'm going to draw a picture and the way that i draw queues is always like this","width":576},{"text":"where this is where i'm putting them in and this is where they're coming out","width":335},{"text":"okay?","width":64},{"text":"so push 1, the 1 is going to go here, push 2 the 2 is going to go here, push 3 the 3 is going to go here","width":495},{"text":"pop","width":64},{"text":"means the 1 so this is 1 ","width":256},{"text":"push 4, putting the 4 in the back","width":175},{"text":"putting things at the back and taking things off the front","width":247},{"text":"so pop was going to give me the 2, pop again will give me the 3, push 5, pop 4, pop 5","width":768},{"text":"so these things came off in the same order that i put them in","width":320}]