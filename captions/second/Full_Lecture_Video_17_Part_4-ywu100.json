[{"text":"Then you have to swap.","width":409},{"text":"Sure, you can move the root to the last element, or you could move the last element up to the root and then pop back,","width":768},{"text":"but then you still need to swap it on the way down.","width":215},{"text":"Try writing the code for it using move, it won't work.","width":256},{"text":"You need to have a swap.","width":128},{"text":"So, we've shown that the running times of this push and of this pop depend only on the height of this tree.","width":535},{"text":"But if you're giving someone a priority queue, they don't have a clue what height is.","width":337},{"text":"If I told you, \"oh yeah, the running time of this function is the height of the priority queue\" when I first showed you priority queues, you'd look at me and be like \"what the heck are you talking about? the height? of a list? what?\"","width":740},{"text":"So height has no meaning to our users, they don't have a clue what height means.","width":303},{"text":"Because if you're giving someone a priority queue implementation, they should be completely oblivious as to how you've actually implemented it.","width":512},{"text":"So if you say \"oh yeah, my running time are O(h),\" they're like \"all I know about is n, the number of things i've put in the heap, or put in the priority queue. What's the running time in terms of n, the number of things I've asked you to add?\"","width":771},{"text":"That's what they care about. We can't give them height, they'll be unsatisfied. The height of this is something that's sort of an internal property of our data structure, so we need to be able to say \"what is the height as a function of n\" so we can say \"oh, the running time is actually, in this case, logarithmic in n, logn.\"","width":1204},{"text":"So this is going to leverage a proof that we did, you know, I think like a week ago now.","width":320},{"text":"Where we talked about the number of nodes that were in a perfect binary tree of height h.","width":393},{"text":"And we showed in lecture that that was equivalent to 2^h+1 -1.","width":446},{"text":"So we ended up with the summation that was something like 2^i from 1 to h.","width":413},{"text":"So if this is the number of nodes,","width":192},{"text":"In a perfect tree of height h...","width":178},{"text":"let's start with that first. What does that tell us about the height of a perfect tree?","width":469},{"text":"So, a perfect tree...","width":501},{"text":"And again, I'm in the binary world. I'm not thinking about ternary or quadernary or anything like that, I'm thinking perfect binary tree. Complete binary tree.","width":514},{"text":"So perfect binary tree. We know that the number of nodes n is 2^h+1 - 1.","width":788},{"text":"So then what is the height? Well we can just solve for h.","width":312},{"text":"So, you know, we'd get n + 1 is 2^h+1, so if we take the log of both sides...","width":648},{"text":"and then subtract 1, we have h is log(n+1) - 1, right.","width":628},{"text":"All I did was take logs and move stuff around, right.","width":378},{"text":"If n is going like 2^h, then the height must be something like logarithmic in n.","width":527},{"text":"Another way of thinking about that is in order, so this is basically the same thing as saying, the...","width":593},{"text":"h is growing exactly like logn.","width":513},{"text":"So fix the number of nodes in a perfect tree so there's not like any cases where ok, what if n is big, what if n is large, n is exactly this value. So whatever this value grows like is exactly what the height is growing like.","width":703},{"text":"So the height is growing exactly like logn.","width":144},{"text":"It's not any worse than logn, it's not any better than logn, it's exactly logn, with some constants.","width":438},{"text":"Another way of thinking about this is, if I've got a tree, if I give you a perfect binary tree of height h, and I tell you to make me a perfect binary tree of height h + 1...","width":815},{"text":"You have to kind of add a whole bunch of nodes in that bottom-most level.","width":256},{"text":"You have to double the number of nodes in the tree.","width":206},{"text":"Before you get the next height.","width":128},{"text":"Every time I want a tree that is 1 larger, if it's perfect, I have to fill in the bottom-most level, which is always going to be doubling the number of nodes.","width":696},{"text":"And you can reason about this like, what's the number of leaves in a perfect binary tree of height h, and then you know that the number of nodes you'd have to add is twice that because each one has two children.","width":709},{"text":"The number of leaves is something proportional to n, so you'd end up basically doubling the number of nodes.","width":436},{"text":"So this is for a perfect tree.","width":341},{"text":"Is every heap a perfect tree?","width":277},{"text":"No.","width":87},{"text":"Could a heap be a perfect tree?","width":142},{"text":"Yes.","width":64},{"text":"So I can only conditionally use this fact.","width":238},{"text":"Only if my heap was perfect, could I use this fact to say oh, my height is logarithmic.","width":343},{"text":"But that's not true in general, so we need to actually prove this.","width":349},{"text":"Prove that something like this is true, for the general case of complete trees.","width":320},{"text":"Okay?","width":179},{"text":"So I'm going to start off similarly.","width":250},{"text":"So if we've got a complete tree...","width":669},{"text":"We know that the number of nodes, we can put an upper and lower bound on this thing.","width":388},{"text":"Okay?","width":128},{"text":"So if I say that I've given you a heap, or a complete tree, of height h...","width":610},{"text":"what's the minimum number of nodes that you would need to have that complete tree of height h?","width":888},{"text":"So we know that every complete tree is a perfect tree up to height h-1, so we're going to necessarily have to have something like, 2^h-1+1 - 1 number of nodes for the perfect part of the tree.","width":1109},{"text":"Which is the same thing as 2^h - 1.","width":306},{"text":"So that's the perfect part, and then how do I get it to be 1 larger? Well I only add 1 node.","width":413},{"text":"So plus 1, so those go away, so it's just 2^h.","width":533},{"text":"And that would look like, you know...","width":399},{"text":"This.","width":70},{"text":"Where here is my perfect tree, and then I've added one node to it to get it to be height h + 1.","width":420},{"text":"So that's the smallest number of nodes I could have in a complete tree.","width":192},{"text":"What's the largest number of nodes I could have in a complete tree of height h?","width":285},{"text":"a perfect tree. That's the whole bottom level is filled.","width":244},{"text":"So then I know that this is bounded above by 2^h+1 - 1.","width":477},{"text":"So I can bound n on either side.","width":283},{"text":"So I can show... one direction I can show that it's big O, and another direction I can show it's big Omega, so I can show that it's theta.","width":512}]