[{"text":"OK, this function we said was O(h)","width":832},{"text":"Right? The way to think about that is what's the worst case for finding the node that is proportional to the height that might go down.","width":576},{"text":"One path in the tree until it hits the leaf all the way down the bottom.","width":256},{"text":"So that path length is h","width":128},{"text":"And when I am doing the remove node, the worst I could do is again the height of the tree.","width":512},{"text":"When I am doing remove node on those subroot I have to find the iop which could be all the way down on the bottom of the tree.","width":448},{"text":"That is still proportional to the height.","width":128},{"text":"No matter what I am doing here, I can't make it any worse  than the height of the tree.","width":320},{"text":"I am never doing a full traversal of the tree. ","width":256},{"text":"I am not looking at all the nodes, I am only doing something that is the height of the tree.","width":192},{"text":"So all these function are big-O of h","width":192},{"text":"And all the function means find(), insert(), and remove()","width":320},{"text":"All of these took time proportional to the tree.","width":192},{"text":"What's the height of a binary search tree in terms of the number of nodes?","width":640},{"text":"I heard log(n) and I heard n.","width":320},{"text":"Let's draw a picture where it's log(n)","width":384},{"text":"This is like a tree looks like thisã€‚","width":640},{"text":"And fill in appropriate values for the keys","width":256},{"text":"So if my tree look like this.","width":256},{"text":"We know that this is a prefect tree right?","width":256},{"text":"And we proved the height of a prefect tree is log(n)","width":448},{"text":"Cause if we use that to prove the height of a complete tree is log(n)","width":192},{"text":"So the height of our the function relate the height and nodes for a prefect tree.","width":448},{"text":"Is log(n), So that's the best we can do.","width":320},{"text":"But not all trees look like that.","width":256},{"text":"Anybody give me a series of insertions to give me a binary search tree that look horrible?","width":704},{"text":" Like a sorted array 1,2,3,4,5, so if I insert one","width":576},{"text":" Into an empty binary search tree, ","width":128},{"text":" I am gonna get a tree that look like this.","width":128},{"text":"I insert two in the binary search tree and two is larger than one","width":192},{"text":" So two'd better go here.","width":128},{"text":" Insert three into this BST","width":192},{"text":" Well three is bigger than one and two so it better go here.","width":256},{"text":"","width":128},{"text":" Insert four in this tree","width":64},{"text":" Four is bigger than one two three so it better go in here.","width":192},{"text":"Insert five into this tree...so it goes here","width":448},{"text":" What it this? ","width":64},{"text":" ","width":64},{"text":"A link list","width":192},{"text":"We know that linkedlists do not give us good find times.","width":128},{"text":"If I ask you to find a node to contain certain value in the linkedlist","width":256},{"text":"Your only choice is to walk the whole list.","width":128},{"text":" So this height is big-O of n","width":320},{"text":"Where this the height is log(n)","width":384},{"text":" So we are sort of in a rough position.","width":320},{"text":"It could be nice if our tree happened to look like this","width":320},{"text":" We know the height is log(n) and it's significantly faster than N.","width":320},{"text":"But there is no guarantee, some adversary would give me horrible inputs can cause me to have a linkedlist looking tree,","width":640},{"text":"And there is a lot of ways to make a tree look horrible like this. ","width":320},{"text":" It could be like this, i could be everything on the left.","width":128},{"text":"So you could do 54321","width":192},{"text":"It could be alternating inputs","width":64},{"text":" So you could create a tree look like this.","width":192},{"text":"Which is also bad.","width":192},{"text":"And you can think of series of insertions could cause that, you just have to alternate.","width":384},{"text":" Back and forth","width":128},{"text":" So all of these cases, this one or this one are all nasty looking trees.","width":576},{"text":"So in next lecture we are going to start talking about a variant of a BST that tries to guarantee","width":512},{"text":"That it maintains balance.","width":128},{"text":"So that we can say something about the height being log","width":192}]