[{"text":"-------------------------","width":192},{"text":"So, at the very end of last time we were finishing up the code for a traversal and today we're going to review that code, we're going to analyze the running time of that code, we're going to cover a different traversal, we're going to analyze the running time of that traversal, and then hopefully, I will still have a little bit of time to at least go over the pseudo code for the first minimum spanning tree algorithm that we will cover.","width":1538},{"text":"--------------","width":128},{"text":"--------------------","width":70},{"text":"After that, we need to actually analyze the running time of that mst algorithm, introduce a second mst algorithm, and analyze that.","width":634},{"text":"If I'm not done with those two tasks by Wednesday, the first bit of Wednesday will actually be finishing off the very last topic before I jump into the review.","width":704},{"text":"----------------","width":12},{"text":"It'll be obvious if I finish on Tuesday or not, so you'll have an idea, but if I'm not, I do have to cover the analysis of Prim's before switching over to review mode. So however long it takes me...","width":731},{"text":"--------------------","width":198},{"text":"So, right, so we're talking about traversals and so it's useful to think about what the properties of these traversals are. ","width":315},{"text":"So, a traversal on a graph must visit every blank and every blank. What are those two things?","width":384},{"text":"------------------","width":65},{"text":"Yeah, every vertex and every edge.","width":120},{"text":"--------------------------------","width":1297},{"text":"So then if you're visiting every vertex and every edge, what does that tell you sort of","width":209},{"text":"about the lower bound on the running time of a traversal? Every traversal then must take time what?","width":371},{"text":"---------------","width":128},{"text":"Yeah, n+m, right? N is the number of vertices and m is the number of edges, so if I'm visiting every vertex and every edge, I have to do that right?","width":640},{"text":"I have to at least see them all once, so I can't do any better than this.","width":192},{"text":"----------------------","width":147},{"text":"I might do worse than this, but I certainly won't do any better than this.","width":217},{"text":"--------------","width":128},{"text":"Right, so then we talked about breadth first search, and breadth first was sort of the general ","width":320},{"text":"---------------------","width":192},{"text":"------------","width":64},{"text":"So, breadth first search was the generalization of level order traversal to graphs.","width":384},{"text":"------------------","width":128},{"text":"And during that traversal we labeled the edges in it as either being what or what? There were two names that we labeled the edges with.","width":576},{"text":"----------------","width":118},{"text":"Discovery and cross.","width":81},{"text":"------------------------","width":497},{"text":"The what edges make a what?","width":84},{"text":"--------------------","width":232},{"text":"Yeah, discovery edges make a spanning tree.","width":192},{"text":"-------------------------------------------","width":832},{"text":"The cross edges, the cross edges only exist if the graph has cycles, right?","width":407},{"text":"--------------------","width":32},{"text":"The discovery edges are going to be a minimum spinning tree, so if the graph is not a tree, then it is going to have cycles it and so then I'll see cross edges. ","width":640},{"text":"If it was just a tree and there are no cycles in the graph, if it was acyclic, then I won't see any cross edges and I'm just going to have the discovery edges being all of the edges in the graph.","width":640},{"text":"So, cross edges only exist if the graph has cycles.","width":320},{"text":"----------------------","width":192},{"text":"And BFS in particular had some interesting property that you need, needed, or need still to leverage in the mp for figuring out the shortest path between things, right?","width":640},{"text":"So, the useful property of BFS is that the vertices are visited in what order of what from the start?","width":448},{"text":"---------------------","width":94},{"text":"Increasing order of what from the start?","width":195},{"text":"----------------------------","width":252},{"text":"Yeah, so like distance","width":119},{"text":"------------------","width":104},{"text":"which I mean number of edges.","width":192},{"text":"------------------------","width":170},{"text":"Not saying anything about edge weights here at all. I'm just saying increasing distance in terms of number of hops.","width":448},{"text":"------------------","width":42},{"text":"So number, so this would be like number of flights, but not total distance of those flights.","width":503},{"text":"----------------------","width":67},{"text":"Like if I had a weighted graph or like the weights for like the actual travel distance between two cities and I was trying to find the shortest path between them, BFS is going to give me the shortest number of flights between airports to get to that city. ","width":991},{"text":"But that might not be the shortest total distance.","width":192},{"text":"---------------","width":26},{"text":"So this isn't saying anything at all about edge weight distance. If you're curious, go look up Dijkstra's algorithm. We're probably not going to have time to get to it.","width":445},{"text":"--------------------------","width":256},{"text":"Okay. So, let's fill in the code for breadth first search.","width":256},{"text":"So this is breadth first search on a graph g starting at some vertex start. So I make a queue containing all of the vertices, right? Just like I did for level order. ","width":618},{"text":"I put on the start vertex so start is basically like the root.","width":256},{"text":"In our level order, right?","width":64},{"text":"And then I label the start vertex with what?","width":256},{"text":"-----------------------","width":117},{"text":"Visited, right? I mark that vertex as I've seen this thing, so I mark it as visited.","width":281},{"text":"--------------------","width":128},{"text":"I know if I end up back here again that I've seen this vertex. It's very important that I'm marking these vertices so that I know when I'm looking at a vertex that I've already seen before.","width":640},{"text":"---------------------","width":128},{"text":"Okay, so I mark my start vertex as visited, I put it on the queue, and then while my queue is not empty, I do some stuff and add some vertices and keep doing this until the queue is finally gone.","width":704},{"text":"-----------------","width":64},{"text":"While the queue is not empty, I say u is the front of the queue so I have some vertex u, which is the thing that occurs in the very front of my queue and I pop off the front of the queue.","width":640},{"text":"Okay, so I just looked, so now I've got a handle on whatever the next vertex was going to be off of that queue","width":384},{"text":"-----------------------","width":128},{"text":"and then I loop over","width":73},{"text":"--------------------","width":128},{"text":"all of the v in what?","width":192},{"text":"----------------------","width":165},{"text":"Yeah, the adjacent vertices of this node. So I'm looking out over all of the adjacent vertices of a particular node","width":478},{"text":"to see what I need to do. So I'm looping over all of the vertices v in g.adjacent","width":448},{"text":"------------------------","width":218},{"text":"to u.","width":64},{"text":"Okay, so this is the set of all vertices that are adjacent to vertex u in the graph.","width":320},{"text":"---------------------","width":98},{"text":"So then I grab the vertex label so that I can use that to tell what the status of this vertex is. Is this a brand new vertex? Have I never seen it before? Is this a vertex I have seen before? Right?","width":892},{"text":"So this is just grabbing the label and so if that label is what do I mark that node as visited?","width":448},{"text":"---------------","width":23},{"text":"Unexplored, right? So if I've never seen this thing before","width":192},{"text":"------------------","width":384},{"text":"I need to mark that vertex as visited, push it into the queue, and then I needed to mark that edge too because this is the first time I'm seeing an edge into that vertex. So what is the label for this edge?","width":754},{"text":"Discovery.Â ","width":105},{"text":"I'm the first explorer to see this vertex so this is a discovery edge.","width":367},{"text":"----------","width":64}]