[{"text":"yea","width":521},{"text":" right so if i said int * yea","width":136},{"text":"this this weirdness is specifically for stack allocated arrays","width":171},{"text":"if i said something like","width":61},{"text":"int * arr","width":99},{"text":"is new int ","width":205},{"text":"you know","width":192},{"text":"then I say arr","width":310},{"text":"is what is that","width":89},{"text":"is that an lvalue or an rvalue","width":220},{"text":"thats an Lvalue","width":320},{"text":"cause arr now has a location that i can change. I can make that point a t a different spot","width":297},{"text":"the difference with that arr in the stack allocated array","width":278},{"text":"is that I can't change that - arr is a pointer to the pointer to the first element","width":253},{"text":"but i cant move it. i cant change it to somewhere else","width":213},{"text":"and its actually not even given a name","width":138},{"text":"in terms of your program","width":50},{"text":"its actually just like if you look its just baked in as an actual hard-coded memory location","width":283},{"text":"or an offset","width":133},{"text":"the arr itself is not actually a variable","width":269},{"text":"again just another weird quirk","width":142},{"text":"but here arr would be an lvalue","width":196},{"text":"because it could appear on the lefthand side","width":15},{"text":"i can make that point at something else","width":44},{"text":"sure thats fine","width":646},{"text":"No it's still the same thing in C","width":142},{"text":"C doesn't care as much lvalues and rvalues because you don't have move constructors","width":260},{"text":"to think about. l and R value in C still the same","width":288},{"text":"cause i cant if i have a stack allocated array I cant change the memory location that is the start of the array","width":352},{"text":"I can't move it somewhere else","width":147},{"text":"It's always gonna be on the same spot on the stack","width":142},{"text":"that's the distinction","width":85},{"text":"this is the same thing in C","width":183},{"text":"This is just a total special case so don't worry too much about it","width":197},{"text":"it's just there so that if somebody quizzes you, you know now that's an Rvalue","width":307},{"text":"what about this one","width":74},{"text":"int &x","width":131},{"text":"is that an Lvalue or an Rvalue","width":174},{"text":"Rvalue","width":160},{"text":"I can't assign into the address of x","width":93},{"text":"the address of x is just a number","width":143},{"text":"it's just a memory location right?","width":128},{"text":"I can't say &x = something else","width":145},{"text":"that doesn't mean like ok x is gonna move somewhere else","width":225},{"text":"Its not how that works","width":68},{"text":"if i wanna do that I have to have a pointer","width":128},{"text":"so &x is just an Rvalue ..... I can't take the address of address of x","width":549},{"text":"so","width":75},{"text":"so x is just","width":153},{"text":"just a temporary","width":33},{"text":"so its an rvalue","width":61},{"text":"another way of thinking about that stack array case is that I can't take the address ","width":700},{"text":"arr of something is variable","width":69},{"text":"but arritself is not","width":128},{"text":"anyway","width":64},{"text":"keep thinking of other ways you can kinda tease that one out through rules","width":347},{"text":"what about this one","width":35},{"text":"int* p","width":116},{"text":"is p an Lvalue or Rvalue","width":151},{"text":"Lvalue","width":75},{"text":"right I can go ahead and assign into P","width":125},{"text":"I can make a point somewhere","width":53},{"text":"I can make it point at a pointer","width":106},{"text":"i can make it point at an integer","width":90},{"text":"I can make it point at an array of integers","width":149},{"text":"I can make it point at something that's on the stack","width":138},{"text":"right","width":64},{"text":"it's definitely an Lvalue","width":116},{"text":"I can also take its address","width":87},{"text":"I can say address of p","width":70},{"text":"and that's valid","width":119},{"text":"p does live somewhere","width":115},{"text":"int* p ignore the fact that this would seg fault","width":233},{"text":"*p ","width":114},{"text":"is *p an lvalue or an Rvalue","width":220},{"text":"Lvalue","width":64},{"text":"I can assign into the value at the end of that pointer","width":106},{"text":"I mean obviously I'd have to set it first","width":143},{"text":"But once it's there and I've got apointer to someting ","width":129},{"text":"i can say *p and go ahead and modify the value at the end of it","width":176},{"text":"WE've done that all the time","width":103},{"text":"so that is an Lvalue","width":199},{"text":"k","width":107},{"text":"Int x int y x + Y","width":216},{"text":"is the result of x + y ","width":161},{"text":"an Lvalue or an Rvalue","width":157},{"text":"Rvalue","width":22},{"text":"I can't refer to the memory location of x + y","width":190},{"text":"it  doesn't live anywhere yet","width":91},{"text":"This is an Rvalue","width":361},{"text":"that sort of start  to make sense a little bit?","width":120},{"text":"I know the rules are little bit quirky in places","width":140},{"text":"but that general rule should make sense","width":128},{"text":"right if it's something that's kind of like a return value or a temporary","width":245},{"text":"or something you can't really the address of","width":112},{"text":"it's an rvalue and then if you can take the address of it or assign into it or it has a name","width":298},{"text":"it's gonna be an Lvalue","width":150},{"text":"Generally speaking those rules should serve you pretty well","width":131},{"text":"yes","width":616},{"text":"My assign into it would be a compiler error","width":142},{"text":"the difference is this is again, the rules are loose","width":273},{"text":"the way to think about that one is does it have a name, does it live somewhere","width":291},{"text":"yes","width":165},{"text":"but yea if I were to say like a = 4, that wouldn't actually compile it would be a compiler error","width":297},{"text":"because of const violation","width":211},{"text":"THIS is an Lvalue still","width":697},{"text":"ok for this one I meant to say const","width":232},{"text":"at the end","width":152},{"text":"ok","width":33},{"text":"so is the output of book operator() int int const ","width":447},{"text":"an lvalue or rvalue","width":192},{"text":"so what's the return type of operator() const on book?","width":427},{"text":"what does it return","width":202},{"text":"const string reference","width":128},{"text":"so is const string reference an lvalue or an rvalue","width":347},{"text":"Lvalue","width":102},{"text":"even though I can't assign into it because of constness","width":118},{"text":"it does live somewhere","width":109},{"text":"i can take its address","width":77},{"text":"it does have a name somewhere in my program  ","width":173},{"text":"so it's an Lvalue","width":343},{"text":"That's the weird thing with const again","width":72},{"text":"even though it's const and you can't actually assign into it it is an Lvalue","width":298},{"text":"because it does live somewhere","width":108},{"text":"it has a memory location","width":159},{"text":"it has a name","width":128},{"text":"so it's an Lvalue","width":65},{"text":"even though I can't assign into it","width":75},{"text":"it actually isn't valid to appear on the lefthand side of an assignment statement","width":192},{"text":"but it does have a name","width":269},{"text":"it does have a location","width":94},{"text":"so it is an Lvalue","width":415},{"text":"a little bit more trickery with Lvalues before we get into","width":193},{"text":"why in the world do we care","width":202},{"text":"so let's look at this seven","width":301},{"text":"I've got a void foo() which takes a const sphere& sp","width":275},{"text":"and prints out an Lvalue","width":71},{"text":"cause remember if ....... over here I've got one that takes a sphere& sp","width":576},{"text":"what does that mean?","width":64},{"text":"what am I taking","width":184},{"text":"an Rvalue reference","width":128},{"text":"so that means that this reference is referring to something that is an Rvalue","width":320}]