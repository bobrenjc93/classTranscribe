[{"text":"Why'd do that?","width":206},{"text":"To make sure that when our true reader really does finish or close their file descriptor then we'll get the signal.","width":584},{"text":"Then the system truly knows that there can be no more, that there is no one left to actually hear the message.","width":391},{"text":"Right? So that's the pattern. you'll see this, and you can read the wiki book to see examples of this, where you close the unwanted one.","width":548},{"text":"Okay, now the joke of the day and on EWS it doesn't work.","width":406},{"text":"The EWS linux kernel 2.6 whatever it is, has a bug such that you never see sigpipe. ","width":708},{"text":"But don't worry. I'll tell you a work-around on Friday. ","width":331},{"text":"Or maybe the end of today, we'll see","width":242},{"text":"Right, should we have time for this?Alright, how do we send an integer... a value of a variable?","width":379},{"text":"Okay. I showed you code that just use read and write to send stuff down to a pipe.","width":481},{"text":"If you wanna start sending more interesting data like integers, etc, we want to be able to call things like fprintf(), right?","width":454},{"text":"We actually want to send.. a user send a c-library.","width":190},{"text":"Guess what? Here's something very useful. I can call fdopen.","width":777},{"text":"Where it pass in one of my integers, a file descriptor","width":325},{"text":"So, for example, if I want to use the write end, and then the other is... I'm not trying to use this for reading or writing.","width":652},{"text":"And this gives me back one of the file objects.","width":432},{"text":"There, I can then call fprintf().","width":204},{"text":"Or if I'd opened the reading one, I can then call fscanf()","width":465},{"text":"So this is a way to promote a low level unix file descriptor up to a c-based object that we can now... I don't mean object in C++. ","width":745},{"text":"I just mean a resource in a system so then we can call fprintf or fscanf and work with more structured data.","width":749},{"text":"So this takes us from a simple integer to the C-based version. Now I can use fscanf and fprintf.","width":836},{"text":"Questions? Yes?","width":272},{"text":"Yeah fdopen.","width":151},{"text":"Alright so we're going from an integer to a C-level object","width":479},{"text":"Alright, yes?","width":433},{"text":"When it happens, it happens when you try to write stuff in into the pipe no one is listening.","width":475},{"text":"So you want to try to write some data and then you just discovered that no one's listening.","width":839},{"text":"You don't what happens to the reader. That's the point. Maybe you could set up a different pipe to say \"Okay, I'm gonna finish it, you can use another pipe to send the data.\"","width":717},{"text":"But the idea is that the pipe itself can tell you when no one is listening.","width":546},{"text":"No. no, it's when you try to send the data itself. If there is no one there already, you get the signal.","width":1035},{"text":"Okay, so.. right. Yes we have a quiz on wednesday. I'll publish some practice questions in a little bit. But here are the topics you can expect.","width":875},{"text":"Conditional variables, semaphore, mutex locks. You have mastery of these amazing tools. You know what producer consumer is.","width":591},{"text":"You know how to make a fixed size multi-threaded ring buffer.","width":246},{"text":"You could do it with semaphores, you can do it with conditional variables. You know how to analyze a good and bad implementations.","width":587},{"text":"You know the coffman conditions. You could understand the definition. You know reader-writer.","width":469},{"text":"You could analyze good and bad implementations.","width":244},{"text":"You know dining philosophers.","width":175},{"text":"You could talk about the different implementations and will they suffer from deadlock or livelock.","width":321},{"text":"And finally, resource allocation graphs and how to use them to determine which processes are deadlocked.","width":533},{"text":"With that have a wonderful week, and I'll see you on Wednesday. Thank you very much.","width":409}]