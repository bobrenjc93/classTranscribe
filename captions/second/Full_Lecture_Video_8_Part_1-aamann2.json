[{"text":"Maybe a little I think that has less to do with the abstract base class and more to do with","width":1152},{"text":"segmenting the parts of the game into different objects you can test.  Writing a game I'm not going to have a game class","width":576},{"text":"that does everything.","width":192},{"text":"I'm going to have seperate classes for everything else.  Teach one those in isolation to make sure it does that write thing.  And","width":448},{"text":"Sort of compose those together to build a larger system.  That has a lot to do with object oriented programming but has less to do the abstract part.","width":1088},{"text":"Are the private variables in the base class public to the derived class.  ","width":576},{"text":"Anyone want to take a stab at that.  I've got a class base private int x and I've got class derived is a public base is","width":832},{"text":"that private x available for derived to use.  No its still private.  ok.  How could I make it so that the derived class could use it but the outside world still can't.","width":832},{"text":"Protect it.  Yea, good.  ","width":576},{"text":"Too many sentences in the prelecture.","width":448},{"text":"Nothing","width":448},{"text":"Right this is a good point.  So do we only need to use virtual in the header file and not in the implementation file.  Yes!  The virtual goes when you first declare it.","width":1280},{"text":"But not when you define it.  Only need to say virtual.  I think you can't, you actually can't say virtual in the implementation file.","width":512},{"text":"If you're going to mark something as virtual it's got to be in the header file.","width":512},{"text":"","width":704},{"text":"If its almost there will be stuff so that in terms of exam coverage yesish but I'm probably not going to finish today and we'll wrap up on Monday.","width":1088},{"text":"In terms of are we done covering c++ material, there will still be a few things that will show up as we're data structures.","width":640},{"text":"For the most part yes.  For the most part you now the vast majority of the syntactic constructs we going to use for the rest of the course","width":704},{"text":"Alright lets jump in.","width":320},{"text":"So just as a quick review warm up.  Lets write a templated swap function that takes two things of the same type and swap them.","width":704},{"text":"We want to make this as efficient as possible.  So we need to use whatever c++ 11 features we have available to us.  Does anyone wanna take a stab at writing the swap function?","width":896},{"text":"Ok so this is going to be able to swap two things of the same type.  But that type could be anything, so you know this must be a template function.","width":1344},{"text":"Function template because we're going to fill in what that type is later.","width":576},{"text":"A template class T meanin that T is going to be a type that we then fill in later.","width":640},{"text":"So when the compiler goes to instantiate this function it's going to replace T with some type maybe int maybe double maybe book maybe swallow maybe animal maybe animal.  Who knows what but something.","width":832},{"text":"Swap doesn't need to return anything.  T is by reference because we need to modify them.  Take them by value because they would copy them and then not be able to change the outside world","width":1664},{"text":"A pointer would work but we then we have to worry about NULL if we take them by reference we don't have to worry about NULL and we can modify them.","width":832}]