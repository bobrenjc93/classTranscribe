[{"text":"so you have in the if statement you print it out and then return","width":320},{"text":"and then in outside the if statement you also print it out and recurse. ","width":256},{"text":"here if i do it this way it simplify the writing of the function a little bit because i only have two cases","width":384},{"text":"either i don't do anything at all or i printing recurse.but you could do it in either way.","width":256},{"text":"it is just what you treat your base case is different.","width":256},{"text":"i personally like think of ...nothing to do with my base case.","width":384},{"text":"because that simply just return it.","width":64},{"text":"okay so if  not subroot if not an empty tree we are not hoping to printing data because","width":576},{"text":"because it is null, our pointer is null ,so we deference the null and look at the data and we explode","width":256},{"text":"so we have no choices but return","width":192},{"text":"so if we get through that if statement,we don't return,that means we got","width":320},{"text":"a non null pointer for subroot, right?we are pointing at node okay?so what should we do?","width":320},{"text":"well we want to make sure this functor we apply every single data element in the tree","width":512},{"text":"so what could i do to ensure that?","width":64},{"text":"i could use recursion","width":256},{"text":"so let's do that. where'll we recurse?","width":256},{"text":"first .. maybe the left and then...so this looks like...","width":384},{"text":"reverse a root left...okay yep...all right. remember left is unique pointer right?so you call .get() to get the raw pointer","width":1408},{"text":"subroot left dot get and then we also get a member to pass down the functor","width":384},{"text":"okay so i can traverse down the left now what do i need to do","width":384},{"text":"we need to go to the right side as well","width":512},{"text":"which we just subsitute left to right","width":768},{"text":"okay how about call my functor anything yet?","width":192},{"text":"no i need to make sure i call my functor . so how do i do that how do i make sure the functor called in this node data","width":384},{"text":"okay so this going to traverse my tree and invoke this functor on very data element in this tree recursively","width":1856},{"text":"now what order am i going to invoke this functor on?","width":256},{"text":"so it's ... when do i do the work?","width":384},{"text":"let's say that the fn of the node of subroot data is when i do my work so that's like when i will print","width":384},{"text":"what's the first thing i will print given this tree diagram?","width":384},{"text":"well i am gonna invoke it so i am gonna start off from the root probably","width":576},{"text":"but the first thing i do when i am at that root node isn't print it recurses","width":384},{"text":"i am gonna recurse to the left first","width":128},{"text":"which means i am gonna recurse to the left here","width":256},{"text":"i will recurse to the D and there's nothing there and I return come back upthen what do I do?","width":384},{"text":"recurse right right? so i recurse right on the D and does nothing return","width":256},{"text":"and now i print out the D.","width":192},{"text":"and now i would return and I come back at C. I've gone left so I go right now","width":512},{"text":"so I will go to the E.","width":128},{"text":"again it is not printing when I get there.","width":192},{"text":"it is just recursing when i get there. so I recurse left","width":128},{"text":"so i guess i can number this","width":256},{"text":"D was the first thing","width":64},{"text":"at the E  I  recurse left i go to the F","width":192},{"text":"at the F non null I recurse left null i recurse right null return so  F is the second thing printed","width":512},{"text":"i go back to the E","width":128},{"text":"I've gone left so I go right. now i go to the G","width":256},{"text":"I go left null return ,go right null return now i print out the G so G is the third thing printed.","width":448},{"text":"and you can continue this process until you see all the trees printed.","width":384},{"text":"it could be whatever. i am just saying for for for a working example pretend it is printing.","width":768},{"text":"yes it can only look at it","width":320},{"text":"yes","width":320},{"text":"if you pass in a functor that take in non const reference to a T for example","width":512},{"text":"it woudn't compile","width":128},{"text":"because you can't . the argument for fn here is a const T.","width":704},{"text":"it can be converted to a const T reference","width":64},{"text":".. T but not a T& because T& would be immutable. ","width":320},{"text":"is this the only way i can write the traversal function?","width":384},{"text":"no","width":192},{"text":"there are three different ways i can write this","width":128},{"text":"and they are different where i do my work.","width":256},{"text":"so as written when do my work after recursing we call it post-order traversal","width":512},{"text":"because i've done the work post the traversal. ","width":256},{"text":"i did the traversing first i did the recursing first","width":256},{"text":"and only when a node has finished with all of it children does that node finally do its work.","width":384},{"text":"another way thinking what that tree is being printed is ","width":256},{"text":"is that only when its entire left subtree and right subtree has been completely printed","width":384},{"text":"post order.","width":320},{"text":"if instead i put it here traverse left do my work traverse right this will be an in order traversal.","width":576},{"text":"because now is the node is printed after its left subtree is printed then the node prints then it prints its right subtree","width":1024},{"text":"so its following the way that tree is ordered so this is called in order traversal","width":448},{"text":"finally if i put i can you guess what it might be called?","width":320},{"text":"pre order ---i am printing before i do the traversing . so this will be a pre order.","width":448},{"text":"it's like function of traverse data, traverse left traverse right. so i do the work.immediately when i hit the node","width":576},{"text":"and then i traverse left and then i traverse right.","width":192},{"text":"all that just by shifting a couple lines","width":512}]