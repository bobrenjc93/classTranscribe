[{"text":"Yea. So","width":448},{"text":"Right, If i said int star, this weirdness is specifically for stack allocated memory","width":512},{"text":"If i say, int * r = new int [2];","width":320},{"text":"then arr...","width":384},{"text":"what is that?","width":128},{"text":"Is that L or R value","width":128},{"text":"That's an L value","width":192},{"text":"Arr now has location I can change, make it point at different spot. Difference is that Arr and Stack allocated array, that I can change that Arr is pointer to an element. I can not move it.","width":1280},{"text":"It is not even given name, in terms of program. Just a hard coded memory location","width":640},{"text":"Arr itself is not variable","width":256},{"text":"just another thing. But here, Arr would be L value because it could appear left hand side.","width":448},{"text":"It is same thing. C does not care about R or L value. ","width":1152},{"text":"If i have stack allocated array, I can't change the memory location that is start of array. It is have to somewhere else.","width":896},{"text":"This is same thing","width":128},{"text":"This is just special case. ","width":384},{"text":"What about this one? ","width":256},{"text":"Int X; &(ampersand).","width":256},{"text":"R or L value?","width":64},{"text":"R value","width":128},{"text":"i can't assign assign into address of X. It is just a number, or memory location. I can't say &x = equal something else. that does not work ","width":768},{"text":"It is not how it works.","width":256},{"text":"&X is just an R value, temporary","width":256},{"text":"It is not something i can take the address of address of x","width":320},{"text":"X is just ","width":192},{"text":"temporary, R value ","width":256},{"text":"I can take the address( another way of thinnking)","width":384},{"text":"Keep thinking another way to tease that out.","width":768},{"text":"What about this one, int star p. P R or L value?","width":320},{"text":"L value","width":128},{"text":"Alright, I can go ahead and assign p, i can make it point somewhere, to pointer , integer, array of integer, stack.","width":704},{"text":"L value .","width":128},{"text":"I can take it to address of P. ","width":256},{"text":"P does live somewhere","width":64},{"text":"Int* P ignore the fact this is seg fault. * p is L or R value?","width":576},{"text":"L value. I can assign into the value at that pointer. I set it first. ","width":448},{"text":"Once it is there, if I point something, I can modify the value at the end. We done that all the time. L value. ","width":576},{"text":"Int X , Int Y , X+Y is the result. L or R value?","width":576},{"text":"R value. I can't refer to the memory location of X or Y","width":384},{"text":"This is R value","width":128},{"text":"That sort of start to make sense a bit? I know rules are every places. General rules should make sense","width":640},{"text":"something that's like return value, temporary, can't take address of R value","width":448},{"text":"If you can take take address of it, It is L value.","width":320},{"text":"Those rules should serve you well.","width":256},{"text":"If I assign into it, It would be compile error. Difference is, rules are loose.. The Way of thinking about that is, does it have a name?","width":1280},{"text":"But yea, If I were to say, A = 4 , that wouldn't compile. Const error.","width":576},{"text":"Is an L value still.","width":256},{"text":"This one, i mean't to say const, at the end. ","width":768},{"text":"Okay.","width":128},{"text":"So Is the output of book operater () int , const.","width":448},{"text":"And L value or R value?","width":128},{"text":"So what is the return type of operator() const on book.","width":384},{"text":"Does it return?","width":256},{"text":"Const string reference. Is this L or R value","width":512},{"text":"L value!","width":128},{"text":"Even though, I can't assign into it because of const, but it does live somewhere and have a name in the program So it is L value.","width":704},{"text":"Weird thing with const. Even you can't assign into it, it is L value since it lives somewhere and has memory location.","width":896},{"text":"It has a name.","width":64},{"text":"So it is L value. Even I can't assign into it.","width":256},{"text":"But","width":128},{"text":"It does have a name.","width":192},{"text":"It does have a location. It is L value.","width":192},{"text":"Little bit more, trickery with L value before we get into, Why do we care?","width":768},{"text":"Let's look at 7.","width":192},{"text":"I ve got a void foo which takes const sphere reference sp, and prints out L value. If i remember, ","width":576},{"text":"If I am invoking, Over here I got one takes a sphere ref sp.","width":512},{"text":"what am i taking","width":128},{"text":"R value reference That means reference is referring to the L value. ","width":512}]