[{"text":"If the left and right weren't heaps, then the whole bits off and I don't have to check anyting.","width":256},{"text":"Excuse me, goodness.","width":128},{"text":"So, alright, so...where...","width":128},{"text":"H(L) and H(R) are heaps and ...","width":576},{"text":"what must be true about that root node?","width":192},{"text":"So let's just say r is the data","width":128},{"text":"so what must be true","width":128},{"text":"r had better be smaller than... than what?","width":576},{"text":"the root of H(L)... somehow, right?","width":256},{"text":"So let's just say, we've got a function root","width":192},{"text":"That root, the data at the root of the subtree better be smaller than the root of the subtree to the left.","width":576},{"text":"would... if it's a heap, it's gonna be the smallest thing in that heap. Right?","width":320},{"text":"Am I done?","width":128},{"text":"No, I've got to do the right side too.","width":128},{"text":"So...and root is less than... root of the H right.","width":512},{"text":"So, once I know that the left tree and the right tree are both heaps, I know that the smallest thing in those trees is the root of the subtrees.","width":576},{"text":"So then all I have to check is whether my node is smaller than the roots of the left and the right subtrees.","width":384},{"text":"If that's true, and those in turn are also heaps, I know that this heap property is true recursively.","width":320},{"text":"Okay? Yeah.","width":256},{"text":"Yeah, so this is a good question. What about things that have the same value.","width":448},{"text":"In general, you could... and you just sort of have to figure out how you wanna tie break.","width":384},{"text":"When we are dealing with them, we are not gonna deal with the case for the priority values to be the same ","width":256},{"text":"So this is gonna be a priority queue","width":512},{"text":"And the way this is gonna work is that the saying that the smallest thing we are going to say now, is gonna be the highest priority thing.","width":512},{"text":"Right? So then, the highest priority element is always gonna be at the root of this tree.","width":384},{"text":"And the lower priority elements are sort of further down.","width":128},{"text":"So, the way I written it now, we have this called a min-heap, so the smallest thing is gonna be at the top.","width":512},{"text":"But you could easily foot this and say you want a max-heap,and then the largest thing is at the top.","width":256},{"text":"But all I do is foot the signs.","width":64},{"text":"So my recursive definition for the heap property here is the min-heap property.","width":256},{"text":"But you could easily flip this and say you want a max-heap,and then the largest thing is at the top. But all I do is flip the signs.","width":64},{"text":"So my recursive definition for the heap property here is the min-heap property.","width":320},{"text":"If one wanna to make the max-heap property, just flip the greater, flip the last two greaters.","width":192},{"text":"So, we could do that, we could say that the values in these nodes we can think of as being priority numbers, the priority values and the highest priority thing is at the top or something.","width":640},{"text":"So you could sort of see how this might work as prio","width":192},{"text":"So you could sort of see how this might work as a priority queue.","width":64},{"text":"So this is the interesting question, so you're saying OK, let's say these are tasks and four was the highest priority task, and I do task. How do I get rid of it?","width":896},{"text":"Do we end up with two trees, because I could get rid of the four and get a heap on the left and a heap on the right","width":384},{"text":"Then I got like two heaps to keep around. Maybe you got heap like an array, these arrays or something a little nasty.","width":512},{"text":"So, we are going to try and keep them all in one heap, just make things a little bit simpler.","width":256},{"text":"That's exactly where I am going next. How do we gonna implement peek, pop and  push on this. And you will also write this in your lab today.","width":704},{"text":"So, I wanna... I might go slightly over that because I want you to see this before you going to the lab","width":320},{"text":"OK, I'll try my best not to, but we will see. ","width":128},{"text":"OK, so, switching gears, think about this tree as a priority queue implementation. We're gonna say the highest priority elements are the numbers with the lowest values.","width":640},{"text":"which might be contrary intuitive that's what we're gonna do.","width":128},{"text":"So, the highest priority elements is gonna be the lowest value. We are going to try to implement push, pop and peek.","width":448},{"text":"So, let's start with push first, because that's a little bit easier to think about. ","width":320},{"text":"Because you don't have to think about what we do if we move something. Let's add things first.","width":192},{"text":"So, let's say we want to add two to this structure.","width":192},{"text":"In order for it to still be a complete tree, where should it go?","width":256},{"text":"Right, the new node sort of has to go to the right of the 7.","width":320},{"text":"Right? In order to guarantee that this is complete.","width":320},{"text":"What's wrong now?","width":192},{"text":"No longer a heap.","width":64},{"text":"Right? This 2 is smaller than it's parent. So I know the subtree rooted at 7 is no longer a heap.","width":448},{"text":"2 itself is a heap, 11 itself is a heap","width":128},{"text":"But 7, the tree rooted at 7 is no longer a heap","width":256},{"text":"It's not the case that the root is smaller than its two children.","width":256},{"text":"So, we can think how it's easy to add two to the array. That's just a push_back, right?","width":448},{"text":"You've got vector, you've got circle array or whatever, just push back, nothing really that fancy.","width":320},{"text":"But now the heap property is all screwed up. So, now we have to think of a way to fix the heap property.","width":448},{"text":"This function is gonna be called heapify_up, because we are going to fix the heap property by moving thing upward in the tree.","width":768},{"text":"This is way it was very important for us to write that function that tells us where the parent of that node is.","width":256},{"text":"So intuitively what has to happen here?","width":256},{"text":"To make sure this is a heap.","width":128},{"text":"Well, 2 is now the smallest thing in this whole thing.","width":128},{"text":"So 2 had better end up at the root","width":512},{"text":"What we are gonna do is swap nodes around, so that we could bubble the 2 up the heap and restore the heap property recursively from the bottom up.","width":320},{"text":"So we start, 2 is a heap, fine. So we go up to the parent of two.","width":256},{"text":"We check, is 7 a heap. Well, the only place that change is the right child, so I only have to do is look at the right.","width":448},{"text":"And say ok, is the right smaller than its parent.","width":256},{"text":"If so, then what we're gonna do.","width":64},{"text":"Swap them, we're gonna move the two up here and 7 down there.","width":576},{"text":"So now the tree rooted at two is a heap. The whole thing isn't a heap, but that local subtree is a heap.","width":384},{"text":"So now we're going to the next level.","width":192},{"text":"So now we are gonna say okay,  what about the tree rooted at 6.","width":256},{"text":"Well okay, is the parent of the 2 larger than the 2? yes, so we need to swap again.","width":384},{"text":"So we're gonna swap down the 6, so now we're gonna to have  a 2 here. ","width":384},{"text":"Now  we know that the tree rooted at 2 is indeed a heap, everything below it is larger, right.  ","width":384},{"text":"And that's true recursively.","width":192},{"text":"But again, globally, it's still not fixed, so we still have to go one further. We have to say, ok,","width":384},{"text":"What is the parent of 2. The parent of 2 is 4. Is the 2 smaller than the 4, yes, so we need to swap them again.","width":448},{"text":"So now the 4 is gonna to come down here, so the 2 goes up to the root. Right?","width":640},{"text":"Now the 2 doesn't have a parent, so we're done.","width":128},{"text":"And we can check and see, okay, this seems legit, the only thing that is modified is the right subtree.","width":512},{"text":"So, we're gonna to check whether that's a heap, ok, the 6 is smaller than 11 and 7; the 4 smaller than 6 and 20, and 20 is a heap and 6 is a heap.","width":640},{"text":"Ok, everything seems fine.","width":256}]