[{"text":"nothing","width":256},{"text":"view more information on the new mp we will start sort of bit","width":192},{"text":"how are trees implemented? we'll cover that","width":512},{"text":"mp_list is very hard,sorry. mp is not going to killing ","width":384},{"text":"the mp is challenging you.","width":192},{"text":"the mp is extending your cs knowledge, stretching it to at most limits","width":384},{"text":"it's hard. but actually not the hardest","width":1536},{"text":"hopefully mp_parse is a nice breather.","width":1344},{"text":"let's go ahead and get started.","width":320},{"text":"remember to write netid","width":448},{"text":"don't forget to put netid no that","width":192},{"text":"so last time we're talking about the ordering structures ADTS.  eg.stacks,queues","width":512},{"text":"we sort of finished our discussion about stacks. ","width":128},{"text":"we sort of see there are couple different valid implementations that you can use for stack","width":320},{"text":"but it did matter where you decide to insert things on singly-linked list and just doesn't matter for doubly-linked list","width":448},{"text":"we talked a little about queue implementations. so what's the difference between stack and queue?","width":448},{"text":"they're both ordering structure. what's the difference?","width":320},{"text":"the order things come out. so what's the ordering for stack?","width":256},{"text":"last thing in is the first thing out","width":320},{"text":"the top of the stack is the coming off next and i put things on top of stacks","width":320},{"text":"the most recent thing that i put in is gonna be the next thing that come out","width":320},{"text":"what about the queue?","width":64},{"text":"first thing first out so it's a pipe and i'm putting things in one end of the pipe and coming out the others","width":384},{"text":"first thing is gonna come out. one end of the queue is the very first thing i put in it.","width":320},{"text":"this is first in first out","width":192},{"text":"while stack is last in first out","width":128},{"text":"then we look at how we might implement this and we're looking at array based implementations","width":448},{"text":"so let's consider that again, so we have an array based implementation","width":256},{"text":"(drawing)","width":704},{"text":"we want to implement push() on this","width":192},{"text":"how will i do that?","width":128},{"text":"could we do that last time","width":256},{"text":"how i'm gonna add something to the array?","width":192},{"text":"which one would i do?","width":320},{"text":"that's monday, wake up!","width":256},{"text":"add an element to the left of the back of this array is actually nothing","width":576},{"text":"push 2","width":256},{"text":"put it after the 1","width":192},{"text":"push 3","width":192},{"text":"push 4","width":192},{"text":"we just add things at the back of list","width":192},{"text":"now if i want to do a pop","width":192},{"text":"things get a little interesting","width":128},{"text":"what's the naive implementation of pop?","width":256},{"text":"i blank out the first element, i remove this one","width":512},{"text":"shift the 2 over there, the 3 over there,4 over there","width":320},{"text":"i do a linear shift","width":128},{"text":"on every pop","width":64},{"text":"that's not hard. what can we do instead?","width":448},{"text":"blank","width":512},{"text":"we maintain where the front and where the back of the array were","width":320},{"text":"maintain the index of front and back","width":384},{"text":"then pop is just increment of index","width":256},{"text":"blank out the cell just for the pic","width":320},{"text":"we pop() we just move where we consider the front of the array","width":384},{"text":"so now the front of the array is not being constrain begin of index because 0 is sort of somewhere","width":320},{"text":"now i can do more pushes. i can push a five and update my end index here","width":704},{"text":"i can push a six and update my end index to here","width":320},{"text":"then i have a choice to make, if i push seven","width":256},{"text":"if i push 7, one way would be to say well there's nothing to the right of 6, so i'm force to resize","width":640},{"text":"there's actually still room at beginning, there where the trick wrapping around came into place","width":640},{"text":"so we're gonna insert 7 at the front and say that's the back of the array","width":448},{"text":"so we take an array and wrapping around itself so it's a circular array.","width":384},{"text":"if i was walking to this array, the first thing i see will be the 2,next 3.....6, then i wrap around to seven","width":640},{"text":"i'm done because i've visited all the elements of the array","width":256},{"text":"we're gonna warp around. we have ability for the start/end to be any index","width":704},{"text":"if we are at the edge, we just walk back to the front","width":320},{"text":"this can be easily implemented with modulo","width":192},{"text":"we gonna go to the next index","width":320},{"text":"modulo the size","width":128},{"text":"we'll go to size mod size which is 0","width":768},{"text":"modulo makes index wrap back around","width":384},{"text":"does that mean we don't have to resize if i want to push 8?","width":320},{"text":"no. no room","width":448},{"text":"the wrap around still needs resize quite much","width":256},{"text":"we only resize when we completely fill the array regardless where those empty cells are coming.","width":384},{"text":"i'll do a few more operations on this. i could pop","width":576},{"text":"to remove that,pop again to remove that,push after the 7and move the start","width":896},{"text":"move the end to there","width":128},{"text":"start/end can be anywhere inside the array","width":256},{"text":"it just wraps around","width":384},{"text":"now this is the front and this is the back and i walk the array going this way,wrapping around","width":512}]