[{"text":"OK, let’s get started. For Homework0, here’s what we gonna do.","width":4800},{"text":"Get our your homework0. Here’s the dividing line for the middle row. If you are on one side of that line, go to that way. If you are on the other side, go to that way.","width":768},{"text":"And hand it to piles. If you are on the end, just hand it to there. And we are gonna go from back to front, collecting them all, and I will have piles here.","width":448},{"text":"In that way, you don’t have to get up and it’s minimum labor for all of us.","width":192},{"text":"I’ve got a lot of questions about, you know, “Oh, I forgot to commit to SVN, but I’ve got my physical copy here right now, is it fine if I commit it to SVN later?” That’s fine.","width":512},{"text":"The SVN copy is a back copy. So as long as you have your physical copy here on time, it’s fine if you commit the SVN later.","width":384},{"text":"If you don’t have a physical copy here on time, and you commit to SVN later, then you are not gonna get credit for it cause it’s late, right?","width":320},{"text":"So if you have a physical copy and get it right now then commit to your SVN, it’s okay. You should have committed it to your SVN by the deadline. And that’s not gonna happen again, but it’s fine for this one, okay?","width":704},{"text":"All right. I’m tired enough and I forgot what year it is. So all the worksheet says 2014. It’s not 2014, it’s 2015.","width":640},{"text":"Okay, let us begin then.","width":512},{"text":"Let’s look at some sort of prelecture responses. I got some questions about my SVN, I can post a link to my MRC if you are curious.","width":896},{"text":"I’m using a lot of plug-ins to make the compilation and compiler. Messages show up inside the SVN so that I can show you how to do that.","width":512},{"text":"Questions about dividing, doubling. I think I will touch on that later today. const of a function, okay.","width":1344},{"text":"Why is it a good practice for the class of functions in the namespace? Why is it better than just not having a namespace?","width":512},{"text":"So the reason for why it is better to start putting stuff in the namespaces is to avoid name conflict with other people. ","width":448},{"text":"So if you are writing code in C, you don’t have any namespace, right? So any time you declare a function, it just available in the a global scope.","width":512},{"text":"There is no such thing as scope resolution operator in C. All your functions just available for everyone to use, right?","width":512},{"text":"Which means if somebody else happens to accidentally picked the same name for function as you did. It breaks.","width":512},{"text":"Because you can’t have two functions with the same name.","width":384},{"text":"And furthermore, if you have a function with the name and the same argument, then it’s actually the same function. Then you are gonna define twice, doing two different things, and bad things happen.","width":512},{"text":"So, using namespaces is a way of putting things sort of in their own little boxes, and you are free to use whatever name you like within that namespace.","width":640},{"text":"Rather than having to worry about what the other, you know. I can open a namespace, and I can have a function called string, and I don’t have to worry about, you know, being confused with the strings in the standard namespaces, right?","width":960},{"text":"So it’s just a way of kind of segmenting your code from other code so that you don’t have name conflicts. It’s just really good practice to do so so that nobody else have to worry that “Oh, did they have a function called this?”","width":768},{"text":"“Did I write a function called this?” and another library that I’m using. It’s just easier to keep everything straight.","width":384},{"text":"The class is the same thing as it structured from C, sort of. The ideas are all essentially the same except for that C++ also add additional things to structure .","width":960},{"text":"Yes, C++ are a little bit more advanced but having the idea of “okay, class is kind of instructed” is the right idea.","width":576},{"text":"There is also some access modifiers. The fact that you have not have functions that operate on the structured-self within the structure rather than free standing functions that have a pointer to the structured.","width":832},{"text":"But the idea are still similar, that is the right way of thinking about this.","width":256},{"text":"Why don’t we use the new operator when creating an instance of a class?","width":320},{"text":"So you could, right? But you have to remember what is new mean. New always means allocate something in the heap, right?","width":640},{"text":"And return a pointer to that thing that has been allocated in the heap, right? So if you don’t want to put your class in the heap, you can put it on the stack and C++ allows you to do that.","width":640},{"text":"But I could say something like, you know, sphere pointer p equals new sphere. And now it would work but I’m putting the sphere on the heap now and now I have to remember and I also have to delete it later.","width":640},{"text":"If I just put the sphere on the stack, I don’t have to worry about getting rid of it just because the stack will take care of it for me, right? So it’s better to practice putting things on the stack when you can. Typically when you are just making a class to use, you won’t put it on the heap unless you really have a good reason for doing so.","width":960},{"text":"We will getting on what those reasons are later, but typically you will see things just on the stack whenever possible. There’s some questions about const.","width":768},{"text":"So, a lot of confusions about const. So const is just way of saying that this is a particular variable cannot be modified.","width":768},{"text":"Let’s ignore the constant classes for now and just const on variables and on parameters.","width":512},{"text":"So const is just a way of saying a particular type of thing cannot be changed. So if I have a const int, or int const, those are the same cause remember const applies left except when there are no type to the left and then would apply right.","width":768},{"text":"So int const is the same thing as const int. const int there is nothing to the left, so it can’t apply to left, so it applies right.","width":640},{"text":"In every other case, it applies left. Personally that’s just sort of real like and people like to write const int rather than int const. const int is just a way of saying this particular integer cannot be modified after I constructed it. After I allocate space for this integer and initialized it, which I need to do all of them in stack because it’s const.","width":1856},{"text":"If I just say const int semicolon. Okay, it’s const and can’t change from garbage value. And that’s not easy. So most of the time when you have a const variable, you initialize it in the same breath, such as const int x=5. That x will be 5 forever unless you do weirld things to change the type and I ‘m not gonna get into that.","width":1600}]