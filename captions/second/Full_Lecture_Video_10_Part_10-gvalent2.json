[{"text":"And that means that also I've go to do something else inside of push front","width":512},{"text":"Increment the size.","width":192},{"text":"Or size equals size plus one or size plus plus, all of those are the same thing.","width":448},{"text":"I need to add one to the size.","width":128},{"text":"And now this is efficient.","width":192},{"text":"Very small design change, very big impact.","width":192},{"text":"If someone is calling size a lot, it's way faster now. Subtle difference but important.","width":512},{"text":"How could I print it?","width":384},{"text":"So I want to write a public function that prints out a list in order starting from the head going to the tail and I'm requiring you to use iteration to do this.","width":832},{"text":"That means I'm going to use some kind of for loop or while loop here.","width":448},{"text":"So how would I do that?","width":192},{"text":"First of all, I need to have something, if I was doing this with an array, it would be easy right?","width":704},{"text":"You just make an index and you increment the index along the array and you access the array at brackets and you're done.","width":320},{"text":"But now I've got this weird linked structure.","width":192},{"text":"What is the analogous thing to my index for a list?","width":384},{"text":"A pointer to a node.","width":448},{"text":"I need to refer to something in the list, so before if I just had just an int and I used brackets, I could get the thing at that position. ","width":384},{"text":"In this case, my iteration variable is going to be a pointer to a node.","width":384},{"text":"And when I increment it, when I would have done plus plus, I'm going to set it to the current thing's next.","width":384},{"text":"Now I will make a distinction here.","width":320},{"text":"Should this iteration variable, this pointer, does it own anything?","width":384},{"text":"Does it own the list node that it's pointing at? No.","width":256},{"text":"So it should be a raw pointer.","width":192},{"text":"So just because we have the unique pointer and the scope pointer doesn't mean we're done using raw pointers.","width":320},{"text":"It just means that we only use raw pointers when we're doing something that doesn't take ownership.","width":384},{"text":"So in this case, since I'm iterating over the list, I'm not changing ownership or anything, so I want it to be a raw pointer.","width":448},{"text":"So I'm going to have something like node star curr is equal to head.","width":768},{"text":"Unfortunately I still need to call a function, but it's the same one they have on scope pointer. How do I get a raw pointer from a scoped pointer?","width":448},{"text":"Get.","width":192},{"text":"So now I've got a node star that points at the head, and I'm going to go through here.","width":448},{"text":"What's my loop going to be?","width":192},{"text":"I'm going to use a while loop.","width":128},{"text":"When should I stop? What's my termination criteria?","width":192},{"text":"Current is null.","width":192},{"text":"Once current is null, I don't want to print anything out because it's null.","width":256},{"text":"So I could say something like, curr not equal to nullptr, or I could just say while curr.","width":640},{"text":"Same thing as curr not equal to nullptr.","width":320},{"text":"This curr will evaluate as a boolean to false only when it points at null.","width":320},{"text":"So while curr points at something valid, I want to print it.","width":448},{"text":"How would I do that?","width":128},{"text":"Cout, I'm going to do a space, and how would I print the current data?","width":640},{"text":"curr arrow data.","width":384},{"text":"Curr is a pointer, so I have to dereference it to get the data inside the node and I print that out.","width":448},{"text":"What's wrong with this?","width":320},{"text":"Infinite loop. I need to move, this is just going to print out the first thing forever.","width":384},{"text":"So what will I need to do? How do I move forward?","width":320},{"text":"Curr equals curr next.","width":384},{"text":"What is next?","width":192},{"text":"A unique pointer.","width":192},{"text":"Dot get.","width":192},{"text":"Give me a raw pointer for that thing, otherwise it's a type mismatch.","width":320},{"text":"So I'm making a raw pointer going through here asking the next just to give me a raw pointer as I walk through.","width":384},{"text":"Eventually I'll hit the tail at which point the ","width":64},{"text":"curr next will equal null.","width":128},{"text":"The pointer inside of the unique pointer will be set to nullptr, so I'll say curr next dot get will be null, and then curr will be null, so then I stop.","width":768},{"text":"And print out the back part of the list.","width":64},{"text":"So this is going to print out you know, angle bracket all the numbers in the list end angle bracket.","width":384},{"text":"Alright good, sorry for going a bit over time. We will start talking about this part tomorrow.","width":448},{"text":"Which is to use recursion instead of recursion for printing the list.","width":6464}]