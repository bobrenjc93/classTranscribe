[{"text":"So why bar.h and foo.h and not bar.cpp and foo.cpp?","width":467},{"text":"So we could include the .cpp files, okay?","width":1920},{"text":"And then when we compile main.o it's going to have everything that it needs to run.","width":320},{"text":"So we would no longer need to link in the other object files because we've given it all the definitions we already need.","width":448},{"text":"However, typically it's good practice to use the header files instead of including all of the cpp files because if you're including your cpp files whenever you're using a particular function or class, that class or function is going to be recompiled for every single program that you have.","width":1344},{"text":"If I have a couple different test programs that are using the bar library and foo library, if I'm pound including those cpp files in those test executables I'm going to recompile foo and bar for every program that I have.","width":896},{"text":"Rather if I include their header files I'm just compiling a declaration, which involves basically nothing in those other files.","width":640},{"text":"Then I'm only going to compile foo and bar once and then glue them in to the executables where they're needed.","width":448},{"text":"It's better typically to try to separate your declaration from your definition, and only use the pound include your declarations and then use the linker to link in your definitions once you're done.","width":704},{"text":"Just to save yourself from recompiling stuff all the time.","width":256},{"text":"Another advantage is suppose I'm making a bunch of changes in main but I'm not changing bar or foo.cpp.","width":448},{"text":"Suppose those are libraries that provided you for an MP that you don't need to modify.","width":384},{"text":"If I was pound including the cpp files for those libraries, every time you compile your program it's going to compile the library, which might be really big it might take a really long time.","width":576},{"text":"If instead you're just using the declarations of things and then you're using the linker to link in the .o it's never going to recompile the library unless you change the library.","width":512},{"text":"So it's actually going to save you quite a bit of time to actually not be including cpp files in places.","width":512},{"text":"Generally for pound including something it should always be a header file not an implementation file.","width":448},{"text":"Furthermore if you're using system level libraries they don't even give you the cpp files.","width":320},{"text":"Because they just give you the compiled code and the head file that corresponds to that compiled code.","width":384},{"text":"So most of the time if you're using an outside library you're not even going to have access to the cpp source.","width":320},{"text":"So you can't even include it anyway because it's not an option.","width":128},{"text":"And the reason for that is it's not good practice to do that anyway.","width":256},{"text":"So if i pound include the cpp files it will compile there's not a compile error","width":1088},{"text":"So if I'm pound including the cpp files and I only change part of the code it's still going to recompile all of the functions that I've included.","width":1344},{"text":"Remember pound include is literally copy and paste.","width":64},{"text":"So if I'm modifying just main and I've pound included the cpp files, those two functions that I'm using have to be recompiled every time because they're part of the source file.","width":576},{"text":"If I'm pound including the head file the only part that has to be complied as part of main is the header, which is a one line declaration of a function.","width":512},{"text":"In some sense you'd recompile the world every single time, whereas if you're separating out the nice parts the makefile lets you only compile the parts that you need.","width":832},{"text":"So now lets move on to the Makefile.","width":256},{"text":"What rule do you want to start with?","width":960},{"text":"So first rule what are all of the rules that should be in the Makefile?","width":320},{"text":"Sorry targets, what are all of the targets that should be in the Makefile?","width":192},{"text":"There are three of them listed for you.","width":256},{"text":"Main.o is one target.","width":384},{"text":"Foo.o is another target.","width":256},{"text":"Bar.o is another target.","width":192},{"text":"And then what's the last one?","width":64},{"text":"My program right?","width":128},{"text":"The targets correspond to the things you would like to create in the working directory throughout the process of compilation.","width":448},{"text":"So I need to create a .o file for the main.cpp.","width":192},{"text":"I need to create a .o for the bar.cpp.","width":128},{"text":"I need to create a .o file for the foo.cpp.","width":128},{"text":"And then I need to create my actual binary so that I can run it right?","width":256},{"text":"There's four things that we need to build so there's four targets that are part of the Makefile okay?","width":448},{"text":"So that means that this should probably say foo.o.","width":256},{"text":"Lets start with foo.o lets work from the bottom up.","width":448},{"text":"So foo.o, what do I need to have exist in the working directory to build foo.o?","width":448},{"text":"In other words what are foo.o's dependencies?","width":128},{"text":"Foo.cpp","width":256},{"text":"Because if I change foo.cpp I ought to recompile foo.o.","width":512},{"text":"And I might say foo.h although technically it doesn't really matter because if you're changing the cpp file you're probably also changing the header file also.","width":832},{"text":"But it's probably good to list both here.","width":512},{"text":"And then what's the rule to build foo.o?","width":320},{"text":"How do I build foo.o?","width":128},{"text":"So remember to expand out the variables it dollar parens name of variable parens.","width":896},{"text":"So that's going to expand out to clang++.","width":320},{"text":"Then what?","width":128},{"text":"So std=c++14 stdlib=c++ blah blah blah blah blah.","width":576},{"text":"That's all going to be defined into a variable called CXXFLAGS.","width":320},{"text":"The reason we declared a variable for those flags is because we're going to use those same flags for every single .o that we're making.","width":896},{"text":"So we might as well just save them into a variable and then use them later.","width":192},{"text":"So that'll be something like dash std=c++14 -std::lab=c++ -o maybe -g -wall -wextra and some stuff.","width":1024},{"text":"You don't have to memorize any of that.","width":128},{"text":"Any of the flags you would like to give the compile you'd stick in that variable.","width":128},{"text":"And then it'll end with a -c to say that I'm compiling an object file and then what do we have to give it?","width":384}]