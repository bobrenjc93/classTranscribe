[{"text":"","width":512},{"text":"unique_ptr manages the memory for us","width":192},{"text":"you don't have to re-deleting ourselves","width":192},{"text":"we can rely on the destructor for this class that we've written in the first MP to do the delete for us","width":384},{"text":"so that we don't forget any","width":128},{"text":"it's impossible to forget any delete when you have a class doing it for you ","width":320},{"text":"","width":384},{"text":"given this implementation of the binary tree, we have this binary tree consist of all these node classes","width":448},{"text":"and each node has two pointers in it, left and right, which may or may not be null","width":448},{"text":"if I tell you that you have a tree with n elements in it of binary tree given our implementation here","width":384},{"text":"the answer actually doesn't change","width":128},{"text":"even if you are using raw pointers","width":256},{"text":"i have this binary tree implementation ","width":128},{"text":"and I have n elements. how many null pointers are there?","width":512},{"text":"the way of me think about this is to draw a picture. So I've got my first picture. how many null pointers are there in the empty tree?","width":576},{"text":"one. the head, or the root","width":128},{"text":"in the tree class itself it still has... we gonna say that first starting pointer is a pointer in the tree","width":448},{"text":"so for a empty tree. the tree of height is -1, there is one null pointer here, ok","width":512},{"text":"what about a tree with one node. how many null pointers are in that tree?","width":384},{"text":"two","width":64},{"text":"the left and the right of the root","width":128},{"text":"the root is non-null but the two children of this node are null","width":256},{"text":"what about that tree?","width":256},{"text":"","width":128},{"text":"I have null, null, null. So I have 3 null pointers","width":448},{"text":"what about this one?","width":256},{"text":"4","width":128},{"text":"","width":128},{"text":"ok so we saw that you know, if n was 0 we have one. if n was 1, we have 2. if n was 2, we have 3. if n was 3, we have 4. so what would the reasonable guess be?","width":1472},{"text":"","width":128},{"text":"n+1. right. good. let's prove it","width":128},{"text":"again, how do i get to this guess doesn't matter at all","width":256},{"text":"what matter is doing the induction prove","width":128},{"text":"so i have my guess, my guess is n+1. i got to it different way this time, it doesn't matter","width":384},{"text":"as long as i can prove that that is the case. so i'm going to say that there my claim","width":384},{"text":"is that there n+1 null pointers","width":384},{"text":"in a ","width":320},{"text":"binary_tree<T>","width":256},{"text":"with n nodes","width":256},{"text":"number of elements is the same as the number of nodes 'cause each node is an element","width":320},{"text":"so my claim here is that there are n+1 null pointers in the tree that has n nodes","width":512},{"text":"now i will prove this by induction","width":192},{"text":"on n","width":128},{"text":"the number of nodes. so what's my base case then?","width":384},{"text":"","width":192},{"text":"what's the smallest number of nodes that I can possibly have?","width":192},{"text":"","width":64},{"text":"0. now that it actually is 0. I can't have -1 node","width":192},{"text":"","width":64},{"text":"it has to be a number ","width":128},{"text":"","width":64},{"text":"not negative integer","width":128},{"text":"so base case is n is 0, which is the empty tree","width":256},{"text":"which has height -1 but number of node is 0","width":256},{"text":"","width":64},{"text":"the base case here then the number of null pointers","width":320},{"text":"in empty tree","width":320},{"text":"one by definition","width":192},{"text":"by the class definition or you can just look","width":256},{"text":"and we know that our formula is 0+1 is indeed 1, so our base case works","width":448},{"text":"what's more interesting is the inductive step","width":384},{"text":"","width":256},{"text":"for anything n>0","width":256},{"text":"","width":128},{"text":"what does my inductive hypothesis say?","width":192},{"text":"I always sort of start this off what my inductive hypothesis is gonna be ","width":256},{"text":"I don't have to use it right away, I'm just gonna say: here it is! and then maybe later on i use it","width":256},{"text":"so what is by inductive hypothesis in this step","width":256},{"text":"","width":64},{"text":"claim to my goal to be making ","width":192},{"text":"","width":192},{"text":"let's symbol this to start with","width":128},{"text":"oh, yes, good. for all what?","width":256},{"text":"yes. for all k less than n","width":320},{"text":"what am i gonna say its' true?","width":192},{"text":"","width":256},{"text":"a binary tree on k nodes has k+1 null pointers","width":512},{"text":"","width":896},{"text":"the null pointers inside of that structure","width":192},{"text":"","width":64},{"text":"i can do the safe way 'cause I'm claiming something is true that is smaller than the current tree. the current tree is height h. i'm proving about h ","width":576},{"text":"in the case that is... sorry, i'm proving about n","width":192},{"text":"this is true about k is smaller than n","width":256},{"text":"so i'm going to say that if n happens to be 0, you use the base case. otherwise, you use this inductive case","width":512},{"text":"","width":320},{"text":"","width":960},{"text":"","width":64},{"text":"so, we are in this case now that n is not empty. So n is, you know, 1 or greater","width":576},{"text":"what's true about my tree in that case?","width":512},{"text":"","width":64},{"text":"so what is my tree then?","width":192},{"text":"by definition ","width":192},{"text":"","width":192},{"text":"binary tree. so what is my definition of a binary tree?","width":576},{"text":"","width":256},{"text":"a binary tree with n nodes","width":512},{"text":"t is what?","width":256},{"text":"","width":448},{"text":"right. it's a root, a T left, and a T right","width":448},{"text":"","width":256},{"text":"and by definition","width":64}]