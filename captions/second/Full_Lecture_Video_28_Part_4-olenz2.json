[{"text":"So, effectively what I'm saying is that, every vertex in this graph, how many list nodes does it have in its specific adjacency list?","width":512},{"text":"How many list nodes does U have?","width":512},{"text":"in it's adjacency list?","width":128},{"text":"Not a trick question","width":128},{"text":"2!","width":64},{"text":"What is the degree of U?","width":160},{"text":"2!","width":87},{"text":"So how many list nodes do I have? for the edge list part?","width":263},{"text":"not 2.","width":64},{"text":"Degree of U plus","width":448},{"text":"Degree of V plus degree of W plus degree of Z, what is that?","width":320},{"text":"Twice the number of edges, it's the sum of the degrees of all the vertices and we talked about this theorem last time, right? The sum of the degree of every vertex is twice the number of edges, so that's another way of thinking about this.","width":832},{"text":"In either case, you can clearly see that the space complexity of an adjacency list graph is going to be O(N+m)","width":576},{"text":"Which is good, that's sort of the best you can do, you know that's sorta the lower bound on the space complexity you could possibly have, because you have to have storage to store the edges and the vertices, right?","width":640},{"text":"So this is sort of the best you can be doing anyway, so this is pretty good.","width":192},{"text":"So, let's think about adding a vertex.","width":320},{"text":"So if you wanna add a vertex to the edge list representation, so go back to the naive one, the very first one, we've got a list of vertices, we've got a list of edge, I wanna add one vertex.","width":832},{"text":"How fast is that?","width":128},{"text":"O(1)","width":128},{"text":"Why?","width":256},{"text":"push_back","width":227},{"text":"brief justification: it is push_back on a list, there's your brief justification.","width":192},{"text":"So, how long does it take to add a vertex to an adjacency matrix?","width":640},{"text":"Yeah, so it depends on what you're doing, if you're okay with wasting gobs and gobs and gobs of memory, you might be able to say this is O(N) Amortized.","width":704},{"text":"I don't wanna waste gobs and gobs and gobs of memory, so I'm just going to say it's O(N^2)","width":448},{"text":"Because every time I wanna add a new vertex, I have to add a column and a row, adding one of those is probably easy based on how you've laid out your dynamic array whether its column first and then rows, or its rows first and then columns, one of those might be easy to do but the other one's going to be very hard.","width":1216},{"text":"You have to expand each of the arrays by one and then copy data over and its gonna be bad.","width":320},{"text":"If you try and get it down to amortized O(N) you're wasting sort of all of that blank space in the matrix over here, all of those that your not using, including all of this and all of this, right?","width":832},{"text":"You're only using, you think about your matrix, right, you're using this part, and aaaaaalll of that is sort of not used.","width":768},{"text":"You're wasting a lot of space","width":384},{"text":"so I'm not gonna waste the space, I'm just gonna use N^2","width":192},{"text":"So how long does it take for me to add a vertex to the adjacency list picture?","width":576},{"text":"O(1), it's the same story as the edge list representation, right, it's just adding a vertex is adding something to that linked list, so the explanation again is that it's push_back onto the vertex list","width":1216},{"text":"which we know we can do in O(1)","width":192},{"text":"Fine","width":192},{"text":"Suppose we want to remove a vertex","width":192},{"text":"again, pay attention to the signature here, I'm being given a vertex","width":384},{"text":"so I'm allowed to use whatever I'm storing in that vertex to make this fast","width":320},{"text":"So I've been asked to remove a vertex in the edge list graph","width":512},{"text":"How long is that going to take me?","width":192},{"text":"Yeah?","width":192},{"text":"O(N + m) why?","width":256},{"text":"Do I have to search for the node? I agree if that is what I have to do then I agree with your running time, my question back to the class as a hole is do I have to search for the vertex in the vertex list?","width":1181},{"text":"No, why not?","width":128},{"text":"Yeah, the vertex is an iterator to that node in the list. Inside of the vertex that I am being given from the user, inside its private section it's got a list node iterator or list node pointer directly to the vertex itself","width":896},{"text":"So I don't have to scan the vertex list","width":192},{"text":"I'm already there","width":64},{"text":"but I do I have to scan the edge list","width":128},{"text":"So removing a vertex in the edge list graph will be O(m)","width":384},{"text":"Is that point clear? I explained that three times yesterday and I explained it once today, I wanna make sure that that sunk in, because I feel like it wasn't sinking in yesterday.","width":576},{"text":"The vertex stores a pointer to the list node","width":320},{"text":"so, I can use this as an example ignore the rest of this part of the picture for now, this is my vertex list, right? and my edge list representation, it's the same picture.","width":896},{"text":"When I say I'm being given a vertex, what I'm being given is some structure which is a vertex, which is inside of it has got a pointer to the node itself.","width":1024},{"text":"in the list","width":64},{"text":"So the user has this object, they are giving me that object, which inside of it has a pointer directly to where I want to go, so I can just jump to that list node directly, and I know that I can remove from a position in a list once I'm already there in constant time, we talked about this as erase at iterator in the linked lists.","width":1344},{"text":"Yes?","width":128},{"text":"If I'm removing something that doesn't exist, that's user error.","width":640},{"text":"How could they have gotten the vertex?","width":256},{"text":"It doesn't exist","width":192},{"text":"So I'm not worrying about pathological user input, I'm assuming that the user is indeed giving me a valid vertex in the graph. Yes?","width":704},{"text":"That will be my vertex.","width":448},{"text":"Whatever information they want to store with a vertex.","width":384},{"text":"Suppose that your vertices are storing pictures of the park that they've got there, and I've got some wildlife park thing. graph. whatever.","width":1088},{"text":"So, inside of this list will be where I store those photographs","width":640}]