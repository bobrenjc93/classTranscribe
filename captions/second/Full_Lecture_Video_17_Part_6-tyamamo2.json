[{"text":"the next one will make that even stronger","width":512},{"text":"they will be completely different imitations that have basically nothing to do with one another","width":384},{"text":"so let's fill in the heap column of this table","width":448},{"text":"first because that's what we just did","width":704},{"text":"how long does it take to put something on the heap?","width":320},{"text":"it was logarithmic","width":128},{"text":"right because that was added to the back and bubble it up to the heap","width":576},{"text":"so that was logarithmic","width":64},{"text":"what about pop?","width":256},{"text":"or move something from the heap?","width":192},{"text":"again was logarithmic","width":384},{"text":"right I move it to the back, pop back, and then bubble down to the new root to it's appropriate position","width":64},{"text":"which is again O(h) which we just proved was log N","width":384},{"text":"what about peek?","width":320},{"text":"how fast is peek?","width":64},{"text":"constant time, just look at the root","width":256},{"text":"ignore the last for a sec and we'll do the other ones and then come back","width":768},{"text":"????","width":384},{"text":"we should","width":128},{"text":"so, right what we should be doing here is saying","width":448},{"text":"well, the vector can fill up so we might do a resize","width":576},{"text":"so if we did N pushes, one of those is O(n)","width":448},{"text":"the other ones are log N","width":64},{"text":"I should be doing amortized analysis here","width":384},{"text":"it won't end up changing anything","width":640},{"text":"when we amortize it out it will amortize out","width":192},{"text":"because again there is only one linear time operation over every N","width":256},{"text":"insertions and everything else is log n","width":192},{"text":"so it becomes nlogn/n","width":192},{"text":"so, sorted lsit","width":384},{"text":"for adding to the sorted list","width":448},{"text":"how long does that take?","width":192},{"text":"I heard two O(1)","width":512},{"text":"it's unsorted, we have to find the location for it","width":128},{"text":"how long does that take?","width":192},{"text":"O(N)","width":64},{"text":"what about pop?","width":640},{"text":"that can be constant","width":128},{"text":"we know where the smallest thing is","width":256},{"text":"it's at one of the ends of the list","width":192},{"text":"we know we can pick a particular implementation where that is O(1)","width":384},{"text":"what about peek?","width":128},{"text":"still O(1)","width":192},{"text":"we know where it is","width":64},{"text":"so now let's look at this last one which is build in place","width":640},{"text":"in place meaning I'm giving you already storage that is filled with elements that I want in my priority queue","width":704},{"text":"so i'm giving you a list of integers for example","width":64},{"text":"build me a sorted list from that list of int in place","width":384},{"text":"that is don't copy","width":64},{"text":"","width":64},{"text":"how long does that take you?","width":192},{"text":"log N","width":128},{"text":"that was merge sort","width":192},{"text":"in mp list","width":128},{"text":"sort the list in place without making any data copies by just swapping data pointer stuff around","width":640},{"text":"that didn't require to allocate any extra space","width":320},{"text":"you can do it in place in nlog n time","width":320},{"text":"???","width":384},{"text":"I give you a linked list and make a sorted list","width":512},{"text":"you wrote that function and it's just merge sort","width":256},{"text":"refer to your favorite proof for the running times","width":384},{"text":"so I can sort the list in nlogn time without making any extra memory allocations","width":448},{"text":"because we did it in place","width":192},{"text":"alright, what about an unsorted list?","width":320},{"text":"how long does that take?","width":192},{"text":"constant","width":64},{"text":"because it's unsorted","width":128},{"text":"I just place it wherever the hell I want","width":192},{"text":"what about pop now?","width":128},{"text":"now I don't know where the smallest thing is","width":128},{"text":"I don't know where the largest thing is","width":320},{"text":"now this is going to be linear time","width":64},{"text":"what about peek?","width":320},{"text":"yeah, you can be clever here","width":320},{"text":"so if you're clever you can make this constant","width":320},{"text":"by maintaining you always have a node pointer to the smallest or largest thing","width":384},{"text":"or an index","width":64},{"text":"if you do that, note that your implementation for pop is still linear","width":512},{"text":"so, imagine for a sec you got a list","width":384},{"text":"and I know that the smallest thing is here","width":960},{"text":"I got a node* inside of my priority queue implementation","width":64},{"text":"that tells me exactly where the smallest thing is","width":320},{"text":"I wanna do a pop","width":128},{"text":"I already got a pointer to it","width":192},{"text":"so that should be constant time right?","width":64},{"text":"why is it still linear?","width":192},{"text":"sure I can delete that node in constant time","width":512},{"text":"where is the smallest pointer going to point at?","width":192},{"text":"now it's linear for a different reason","width":256},{"text":"so there is no way you can avoid the linear time in pop if you got an unsorted list","width":384},{"text":"however, you can be clever and get a constant time peek","width":192},{"text":"maintaining that pointer or index to the smallest thing","width":448},{"text":"every push implementation is also going to change","width":640},{"text":"if it's empty set the smallest thing of current element you just added","width":192},{"text":"if it's not empty compare the element you're adding with the smallest element","width":192},{"text":"if the element you're adding is smaller update your pointer","width":384},{"text":"if you're clever you can get it to be O(1)","width":512},{"text":"if I give you a list of integers and ask you to build an unsorted list, how long does it take you?","width":384}]