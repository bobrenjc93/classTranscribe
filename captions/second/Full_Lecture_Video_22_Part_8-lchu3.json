[{"text":"So let’s start off by drawing a couple of pictures of sparse AVL tress. AVL trees is that have the minimum number of nodes required to get you a certain height h.","width":1088},{"text":"And we are gonna use this to do the same trick we did before when arguing about the height of binary. We found what the minimum number of nodes was for a binary heap of height h and use that to argue what’s the upper bound on the height on a binary trees on so many nodes.","width":1920},{"text":"So we are gonna use the same trick here. So we are gonna say okay, I’m gonna figure out what’s the smallest number of nodes I can possibly have that gives me a certain height. That’s sort of tells me, just for that alone, what’s the upper bound is on the height.","width":1088},{"text":"In other words, if somebody gives you some nodes, what’s the worst case of height you can get? Well, that’s gonna be, you know, using the minimum number of nodes, they can make the largest tree possibly could. So we can lower bound the number of nodes needed to get height h. We can argue that h is bigger than some value. ","width":1280},{"text":"That’s the idea. We did that for complete binary tree. We are just gonna apply it no. It’s not complete tree any more. These are balanced trees. So it get a little bit trickier but we are still gonna do the same idea.","width":704},{"text":"So let’s try some examples for this first. Let’s see what are we doing. The minimum number of nodes in a tree of height minus one is that right? That’s a sparse AVL tree cause cause it got minimum number of nodes to get its height. It’s boring.","width":1152},{"text":"That is the sparse AVL tree. That’s the minimum number of nodes you need to get height 0. You have to have a node to get height 0.","width":640},{"text":"This is a sparse AVL tree of height one. That’s the minimum number of height I need to get height one. Now if I wanna get height two, that’s not it. This is imbalanced.","width":1408},{"text":"So in order to get, that tree has to have some node or we are here on the right side and I can ensure it’s balanced. Then I throw one to get one of height three. Actually I’m gonna draw one of the height three. ","width":2624},{"text":"Howe can I make my life easier? Well, I know that a sparse AVL tree have height h consists of a root node a sparse AVL tree of height h minus one and a sparse AVL tree of height h minus two. So I want to do height three, I can just take the tree of height two and the tree of height one and boom them together as a node. ","width":1600},{"text":"So I can just do. Here’s my height one tree. That’s my sparse AVL tree of height two. That’s my sparse AVL tree of height one. So this is my sparse AVL tree of height h. You can sort of see if I take away any of these nodes, then the tree is not balanced any more and so I have to do rotations and I would no longer have a tree of that.","width":2432},{"text":"So that’s the minimum number of nodes required to get that. A non-sparse AVL tree is something like that. That’s not the minimum number of nodes I need to get height one. That got an extra nodes in it.","width":832},{"text":"That is not the sparse AVL tree of height two. It got a way too many nodes in it. So let’s write our recurrence that models the minimum number of nodes for a sparse AVL tree of height h. I’m gonna sort of arrogate because there is one in the prelecture. But also here when I try to draw tree of height h. Okay, I will just have a tree of height minus one and a tree of height minus two. ","width":2112},{"text":"So we know that the recurrence kind of has to be, okay, the base case of the tree of height minus one has no nodes in it, like tree of height zero has one node in it. And in general, a tree at height h has one node plus. The sparse AVL tree at height h minus one and the sparse AVL tree at height minus two.","width":2048},{"text":"Why is this not like 2S(h-1)? Why is one of this calls h-1 and one of this calls h-2? Of the minimum, right? I know that to make sure that I’m using the minimum number of nodes. If my balance factor always gonna be non-zero, it’s gonna be heavy on one of the sides but not above one or not below negative one. So I know I’m gonna have to use minimum number of nodes. I know one of trees is gonna be one height smaller than the other one. And without lots of generalities, one of them on one side as h minus one, and one of those on the other side at h minus two.","width":3264}]