[{"text":"If I don't have this one at all","width":234},{"text":" all of these will invoke the first one","width":215},{"text":"so it turns out that const& can bind to Rvalues","width":384},{"text":"if i wanna change what the behavior is when I've got an Rvalue I add an overload","width":320},{"text":"that takes an Ravlue reference","width":291},{"text":"it could take a const Rvalue reference but no one ever does because that's useless","width":240},{"text":"most of the time when you're taking an rvalue reference you probably wanna do something with that temporary","width":318},{"text":"but you can take it const Rvalue reference","width":203},{"text":" but you'll never ever see it because it's never useful","width":322},{"text":"so I've got one overload that takes a const Ref, one overload that takes an rvalue reference","width":290},{"text":"so when the compiler is figuring out which one of these functions to compile in at that call site","width":354},{"text":"which one of those functions to jump to","width":138},{"text":"it looks at what the argument is and says is that argument an lvalue or ravlue","width":265},{"text":"if its an rvalue call the rvalue overload","width":162},{"text":"if its an lvalue call the const ref overload","width":256},{"text":"so ouor print out here should depend on whether the argument of the function is itself an lvalue or an rvalue","width":347},{"text":"right if the function argument is an rvalue it should print rvalue","width":188},{"text":"if the function argument lvalue it should print lvalue","width":389},{"text":"what about this first one?","width":267},{"text":"this first one here i'm","width":115},{"text":"calling foo(sphere{});","width":411},{"text":"so first of all what does that even mean?","width":247},{"text":"foo(sphere{});","width":511},{"text":"I'm making a default sphere. and then immediately passing it to foo()","width":668},{"text":"then the question is","width":291},{"text":"rvalue or lvalue","width":211},{"text":"rvalue","width":53},{"text":"its a temporary","width":41},{"text":"it doesn't exist yet","width":93},{"text":"I mean it exists","width":96},{"text":"but I don't know where it lives I haven't given it a name","width":218},{"text":"i can't really assign into it it's just a temporary value","width":169},{"text":"so this","width":101},{"text":"this argument is an Rvalue","width":161},{"text":"because its a temporary","width":606},{"text":"what about this other one","width":128},{"text":"so sphere s","width":34},{"text":"foo(s)","width":194},{"text":"Lvalue","width":38},{"text":"its gonna print out lvalue","width":129},{"text":"because s has a name has a memory location","width":238},{"text":"it has been initialized it's not  a temporary, it's an lvalue","width":185},{"text":"so this will invoke the const ref  one","width":328},{"text":"what about this one","width":94},{"text":"sphere s","width":64},{"text":"foo is std::move(s)","width":189},{"text":"rvalue","width":64},{"text":"why is it an rvalue","width":192},{"text":"std::move","width":128},{"text":"note that std::move doesn't do any moving","width":243},{"text":"all it does is flag something as an Rvalue","width":195},{"text":"it says ok I know this thing has got a name because I'm passing it into a function","width":318},{"text":"please pretend it's an rvalie","width":82},{"text":"convert this thing to an rvalue","width":253},{"text":"then pass that along to whatever I'm calling","width":128},{"text":"so here it's saying I know s is really an lvalue","width":175},{"text":"make it be an rvalue","width":126},{"text":"and then it's gonna look","width":47},{"text":"ok and it says fine ok s is an rvalue","width":107},{"text":"I'm gonna invoke the rvalue function","width":95},{"text":"so this is gonna invoke the Rvalue","width":218},{"text":"because I explicitly said move","width":154},{"text":"move is gonna make it be an rvalue","width":130},{"text":"it's not actually gonna do the move","width":100},{"text":"the moving is gonna happen either probably in your ","width":123},{"text":"constructor or in your assignment operator","width":113},{"text":"but all move is doing is saying make this thing be an Rvalue","width":271},{"text":"and treat it as such in whatever function call I'm about to make","width":916},{"text":"So the question is ok at the end of foo and the answer is true whether it succeeds or it doesn't ","width":404},{"text":"at the end of foo and I'm back at the stack frame that called foo","width":320},{"text":"is s now an rvalue or is s still an lvalue","width":320},{"text":"as it turns out it's still an lvalue","width":137},{"text":"the rvalue conversion is just for that function call","width":181},{"text":"so s will still be an lvalue after that","width":64},{"text":"because I can still refer to it still got a memory location it's fine","width":220},{"text":"It's just using std::move as a way of forcing for that particular reference for it to be an rvalue","width":392},{"text":"I'll tell you why you care probably tomorrow","width":528},{"text":"What about this one?","width":107},{"text":"So i've got a function","width":128},{"text":"make_sphere returns a sphere by value","width":210},{"text":"it makes a sphere on a stack frame","width":113},{"text":"does something to set it up","width":56},{"text":"maybe sets it radius, sets its color, does whatever","width":207},{"text":"ok and then returns it by value","width":192},{"text":"and I've gotta call to foo(make_sphere{});","width":373},{"text":"rvalue","width":253},{"text":"why rvalue?","width":446},{"text":"temporary value","width":59},{"text":"the thing I'm getting back is that return value copy","width":219},{"text":"which is just gonna be a temporary","width":493},{"text":"that return value doesn't have a name ","width":135},{"text":"I've copied it out of the make_sphere function so now it's just this temporary floating around","width":256},{"text":"it doesn't have a name anymore","width":690},{"text":"I did like  uum like before the return if I did foo(sp);","width":452},{"text":"be Lvalue","width":128},{"text":"cause sp inside of that stack frame","width":110},{"text":"has got a name got a memory location","width":302},{"text":"then it's a temporary, no longer has a name or a location","width":679},{"text":"So we can kind of see when when the overload would be invoked","width":918},{"text":"what do those function signatures remind you of","width":202},{"text":"what's the left one look like?","width":288},{"text":"kind of like the argument to a copy constructor","width":127},{"text":"right it takes it by const reference","width":53},{"text":"and the righthand side kind of looks like a move constructor because it's by rvalue","width":323},{"text":"so the reason for that exercise is for you to be able to look at your code and identify whether you're gonna make a copy or you're going to move something","width":495},{"text":"because the same rules are going to apply for picking which of those constructors to invoke","width":510},{"text":"I've got a tricky question for you","width":250},{"text":"that little line of code right there","width":771},{"text":"what one does that one call","width":137},{"text":"does that call the rvalue one","width":109},{"text":"recursively forever","width":79},{"text":"or does it call the lvalue oine","width":191},{"text":"it callse the lvalue one","width":99},{"text":"this is weird","width":98},{"text":"but this is how it works","width":109},{"text":"even though sp inside of that function has been passed in by rvalue reference","width":367},{"text":"YOu now have a name for it","width":157},{"text":"so now inside of the function is an Lvalue","width":320},{"text":"I know it's an Rvalue","width":134},{"text":"inside of the function it's an lvalue","width":91},{"text":"because i have a name for it","width":98},{"text":"when i refer to it I can say sp i can take address of sp","width":211},{"text":"i know what it is now I've named it","width":231},{"text":"so now it's an lvalue","width":75},{"text":"which is counterintuitive but it's an lvalue","width":320}]