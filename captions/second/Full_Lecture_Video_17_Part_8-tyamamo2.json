[{"text":"and then i keep doing that","width":128},{"text":"again and again and again","width":128},{"text":"from the front of the array to the back of the array","width":256},{"text":"and then by the time i get back to the array, i know i've done something like","width":256},{"text":"what about this tree?","width":128},{"text":"alright","width":64},{"text":"now the whole thing is definately","width":128},{"text":"that would work","width":384},{"text":"that would give you a heap","width":192},{"text":"what's the running time of that","width":64},{"text":"nlogn","width":128},{"text":"why?","width":64},{"text":"the answer is not each one takes log n time i did it n times, it's nlogn","width":512},{"text":"that is not correct","width":64},{"text":"that gives you the right answer, it's not correct","width":192},{"text":"how long did each op take?","width":256},{"text":"let i be the current size of the heap","width":384},{"text":"how long did each add take?","width":192},{"text":"log i","width":128},{"text":"so this is actually a summation from i =1 n of log i ","width":512},{"text":"which we know is O(NlogN)","width":256},{"text":"so the answer that you'll get from the logic it's just log n","width":768},{"text":"i did it n times","width":64},{"text":"you'll get the right answer but your analysis is not right","width":192},{"text":"because it's not true that everyone of those heapify up take log n","width":512},{"text":"cause there is not n things you're considering","width":384},{"text":"you're starting at the root and then the things on the right","width":128},{"text":"right left right left","width":192},{"text":"so you're only considering part of this heap at every operation","width":192},{"text":"slowly kinda cutting off","width":192},{"text":"so the size of the heap is not n everytime","width":320},{"text":"it's only n at the very last thing","width":64},{"text":"before that it's n-1","width":256},{"text":"n01","width":64},{"text":"log i summation i 1 to n","width":384},{"text":"crap","width":256},{"text":"nlogn","width":64},{"text":"so that wasn't any better than sorting","width":128},{"text":"that was just as much work as just sorting the entire array","width":256},{"text":"let's think of a different way","width":640},{"text":"how could i build a heap using heapify down?","width":256},{"text":"think about what does heapify down rely on?","width":640},{"text":"calling it on an element, what must be true?","width":384},{"text":"subtrees have got to be heaps on their own","width":384},{"text":" if i'm calling heapify down on a node and the subtrees aren't heaps","width":256},{"text":"then what it does is not at all what you want ","width":192},{"text":"it has to locate the correct new root","width":320},{"text":"that better mean your two subtrees are heaps themselves","width":256},{"text":"so if i''m going to try and build the heap using heapify down","width":192},{"text":"i better be able to guarantee that when i'm calling heapify down, these subtrees are heaps","width":384},{"text":"so what direction am i going to build this heap froM?","width":384},{"text":"bottom up","width":64},{"text":"i'm going to use heapify down to give the guarantee that my subtrees are heaps","width":320},{"text":"then i can heapify down on that node","width":192},{"text":"i'm going to start here","width":128},{"text":"then here....","width":192},{"text":".....","width":64},{"text":"....","width":128},{"text":"..","width":64},{"text":"so i''m going to start from the back of the array heapify down on that","width":384},{"text":"does nothing cause it's a leaf","width":192},{"text":"or i could figure out where is the first internal node","width":192},{"text":"doesn't change anything","width":192},{"text":"then, the interesting cases are when there is actually children","width":512},{"text":"so i eventually call heapify down on this node","width":320},{"text":"...","width":320},{"text":"i know now that the left and the right subtrees are heaps","width":384},{"text":"so i heapify down this thing in the appropriate position and now i know that this is a heap","width":512},{"text":"this is a heap.....","width":192},{"text":"so then i heapify down on this","width":320},{"text":"while i know my two subtrees are heaps","width":192},{"text":"i can move my node down","width":128},{"text":"i know that this entire subtree is a heap","width":320},{"text":"then i heapify down on this guy","width":320},{"text":"both of its subtrees are heaps","width":128},{"text":"so i figure out which one is the smallest one","width":192},{"text":"continue my heapify down process","width":64},{"text":"when i'm done,","width":192},{"text":"i know that this entire subtree ","width":192},{"text":"is a heap","width":64},{"text":"now i can heapify down the root","width":256},{"text":"i know both subtrees are heaps","width":64},{"text":"and then get that this entire tree is a heap","width":384},{"text":"the algorithm is really simple","width":256},{"text":"it's start from the back of the array and call heapify down on that index","width":192},{"text":"go to the thing prior","width":64},{"text":"heapify down .....","width":128},{"text":"starting in the back going to the front","width":320},{"text":"back to front","width":192},{"text":"couple questions in the prelec","width":448},{"text":"for loop w/ heapify down","width":128},{"text":"so his question was","width":896},{"text":"if i got a node in a left subtree, it's never going to end up in the right subtree","width":448},{"text":"it's only going to go up","width":256},{"text":"but not on the other side","width":128},{"text":"this node will never end here","width":192},{"text":"then we know from the prelecture","width":512},{"text":"that this is linear time","width":256},{"text":"we're going to prove that now","width":320},{"text":"what's the recurrence relation?","width":256},{"text":"so we don't actually prove this is linear time","width":256},{"text":"that is not at all an obvious statement","width":128},{"text":"calling heapify down from the back to the front is linear time","width":192},{"text":"why?","width":192},{"text":"that's not obvious","width":192},{"text":"so we have to prove it","width":128},{"text":"let's think about this recursively","width":448},{"text":"what is the work that we're doing when we're heapifying down from the back to the front?","width":448},{"text":"in the worst case, we know that heapify down is going to take o(h)","width":384},{"text":"where h is the height of the subtree","width":64},{"text":"calling heapify down on some random node somewhere on some heap","width":448},{"text":"is going to take time proportional to that heap","width":192},{"text":"so if i'm building this heap by heapify down on all the internal nodes","width":384},{"text":"effectively i'm doing in the worst case","width":320},{"text":"is work proportional to the height of that subtree","width":448},{"text":"in the worst case i have to move the subroot to the bottomw","width":192},{"text":"so O(h)","width":256},{"text":"so i can write this effectively ","width":192},{"text":"the running time of this version of build heap is the sum of the heights of all the subtrees","width":704}]