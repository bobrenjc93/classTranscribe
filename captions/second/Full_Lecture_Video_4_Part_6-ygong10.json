[{"text":"....","width":384},{"text":"Um, so now when I am referring to a I'm actually referring x when I'm referring, using b, I'm actually referring to y. right?","width":704},{"text":"um, so, so this is actually gonna go through and modify the stack frame for main, so you know if you had your stack frame, you got your x and you got your y which are set to, umm...","width":1152},{"text":"..","width":192},{"text":"when I invoke this swap function, I'm getting the local variables for, umm, a, which is the same thing as x and b which is the same thing as y","width":960},{"text":"ok? and then z is actually gonna be a variable of type int, so I have space for it ok?","width":576},{"text":"z is equal a ok? a oh a is x so z is 3","width":384},{"text":"alright","width":192},{"text":"umm, a equals b so a is actually x, so x so I am going to assign into this location, so x is actually gonna be b, ok b is y so x  this is going to be 3 now.","width":896},{"text":"right?","width":64},{"text":"and then b equals z ok b is actually y so I'm assigning into here, wait did I mess up?","width":512},{"text":"should've been a 4 I copied the wrong thing in here, yeah ok. So...","width":576},{"text":"right? so now ok b is actually y so I'm going to assign it the value of z so I'm taking the z value here and putting the 4 there and now in this function returns, I actually swap the variables that were sitting on the stack frame for main","width":1024},{"text":"ok? so this is one way of doing this, this is one way of mutating variables that exist in other stack frame pass them in by reference.","width":576},{"text":"what's another way I could've done this","width":192},{"text":"so it would change the function signature for swap, what's another possible way I could've done this? pointers right? I could pass in pointers, so I could've said void swap int star a int star b right? int e is star a star a equals star b star b equals z","width":2368},{"text":"right?","width":192},{"text":"now I'm just going through pointers, how would I invoke this? how would main have to change? so this line would have to change to & x &y to get the address of these things to pass, so this would be swap & x, &y ok?","width":1280},{"text":".......","width":512},{"text":"you see any problems with using this second version? ","width":512},{"text":"....","width":768},{"text":"so um I don't think that's the case, let me draw the memory diagram for this so you can see what is going on because it is true that we are copying the value of the address of x so we are getting a copy of a pointer to it but when we dereference through the pointer we do actually get the memory it is pointing at so if we look at what this was look like we got a stack frame for main here we still got our y and x cause they are declared in opposite order, so this is 4 and this is 3.","width":2112},{"text":"then passing into this function now the swap function address of x address of y so I'm gonna have my a and my b and my z still set up here z is going to be of type int a and b are going to be int stars right? because I passed in & of x, that means that a is going to take the value of the address of x so a is actually point down here.","width":2112},{"text":"likewise b is going to take the value of & y so b is going to point down here","width":576},{"text":"now if I do star a I get 4 into z if I do star a equals star b I'm going to move 3 down to there right? and then I say star b equals z so I'm going to move the 4 back in","width":896},{"text":"actually swap the arguments, right? cause I'm going through pointers that point at those variables it is true that I do modify these two variables, so that's not the problem","width":704},{"text":"yeah I could pass in a null pointer to this function, the compiler is not going to prevent me from passing a null pointer to this function, what would happen if I passed a null pointer to this function?","width":896},{"text":"segmentation fault, cause I'm trying to access address 0 which you are never allowed to do, it is never part of your address space","width":576},{"text":"so this function would just crash my program if I just accidentally pass a null pointer which the compiler is not going to warn me about, a null pointer is a perfectly valid thing to be passed into a function that takes a pointer to something ok?","width":768},{"text":"if I want to be careful and I was using this second function I would have to check both a and b to make sure that they are not null, so that I can just say something like if a equals equals null pointer or if not a both of those are equivalent if bang a which is not a that means a points at null and return or you know if not b, return or if b equals equals null pointer, return. right? so just don't do anything if they are null cause it doesn't mean anything to swap those things, you can't","width":1984}]