[{"text":"the priority queue, the heap is an implementation of a priority queue and the priority queue says nothing about that it has to be numbers","width":1600},{"text":"It just has to be elements that have some priority","width":128},{"text":"so as long as you have some way of going from a string to what it's priority is, you can do something","width":512},{"text":"so the key is being able to go from any arbitrary string to some specific priority value and have that be what you need it to be","width":448},{"text":"but you could certainly do this over any kind of data","width":192},{"text":"so here's something ","width":448},{"text":"I want you to think about an algorithm to find a specific element in this structure","width":320},{"text":"So, let's say I want you to find me the node containing 4","width":448},{"text":"how would you do that?","width":512},{"text":"so first of all what is this? ","width":384},{"text":"what is this data structure? ","width":192},{"text":"Binary Tree. It's not a heap, clearly violates multiple things about the heap property","width":640},{"text":"It's not complete. SO it's certainly not a heap so this is just a straight o' standard binary tree","width":448},{"text":"So again we're thinking of the node struct that's got a pointer left, pointer right and some data element inside of it","width":448},{"text":"And I'm asking you to find me the node that contains 4","width":128},{"text":"What is your algorithm going to look like?","width":384},{"text":"Some kind of traversal.","width":192},{"text":"It could be your favorite traversal","width":256},{"text":"Probably the most effective one would be like pre-traversal","width":384},{"text":"cause you want to look before you traverse the children, you check and see if you're the node and father traversing the children","width":448},{"text":"so I ask you to find 3. you should look at the root and say, oh that's 3, I'm done","width":320},{"text":"but in general, this is going to be some traversal algorithm.","width":192},{"text":"Because you have to locate that element and you don't know where it's going to be","width":256},{"text":"It could be on any sides, you have to walk the whole tree and look for this guy","width":192},{"text":"so what's the running time of that algorithm? ","width":192},{"text":"in the worst cas? ","width":128},{"text":"Do you want to think of a horrible pathological case it could be UM find me -15","width":576},{"text":"well it doesn't exist but you don't know it doesn't exist until you've seen everything in the tree","width":320},{"text":"So trivially finding me something that doesn't exist is going to be linear time","width":256},{"text":"Moving on to our next, ADTS","width":768},{"text":"definitely this is NOT on the exam","width":192},{"text":"here's our cutoff point","width":128},{"text":"okay, so a dictionary ADT ","width":320},{"text":"is an abstract data type that supports the following functions: INSERT (K,V0","width":512},{"text":"so you insert a key value pair into the data structure","width":192},{"text":"at of a key, so you can find the value associated with a specific key","width":448},{"text":"in the data structure","width":128},{"text":"and remove of K, remove key, so you find the key and you remove that associated key value pair from the structure ","width":448},{"text":"okay.","width":128},{"text":"this data structure I've got pairs of data now. I've got keys and I've got values","width":384},{"text":"I've got values that are associated with keys and I'm looking things up by looking up the key and getting the value","width":512},{"text":"so what are 3 uses cases after I finish this. What are 3 examples of where I might use such a data struc?","width":704},{"text":"it could be real, it would be coding examples. Phonebook!","width":512},{"text":"what's the key?","width":64},{"text":"probably a name or something you know, whether it's a person name or business name. Some kind of name","width":448},{"text":"And the value will be the address, or the phone number","width":256},{"text":"So, one example would be a phone book. ","width":832},{"text":"A database","width":128},{"text":"A  very generic database","width":128},{"text":"So, saying what the key and the value for that is would be hard because it depends on what the database is","width":640},{"text":"But certainly that's true. Yeah","width":320},{"text":"So login information, so login database","width":384},{"text":"so what's the key there?","width":64},{"text":"like the username, like the email, or whatever you're using to login","width":448},{"text":"so user logins....","width":128},{"text":"What should the value be?","width":256},{"text":"A hash of the password, not the password.","width":384},{"text":"okay, there's my webdevelopment coming through","width":256},{"text":"so when you're doing stuff like this, you're storing sensitive information like passwords... ","width":320},{"text":"you should never actually store the password text","width":192},{"text":"it means that someone breaks into your system they can just print out everyones passwords ","width":256},{"text":"and then go and try and login to a bunch of other stuff","width":64},{"text":"that's bad","width":64},{"text":"so what you'll do is actually run some kind of function over some kind of password so  it's all jumbled and scrambled","width":384},{"text":"and some undecipherable string ","width":192},{"text":"that you can then run that same function on when the user provides their password and then see if the output of this function is correct","width":448},{"text":"We'll talk about hashing more later, but yes, the effectively the value here would be something that you can use to check that the password they put in is correct","width":576},{"text":"so technically this would be some hash of the password","width":256},{"text":"you have to be careful to avoid that","width":320},{"text":"two people can have the same password though.","width":192},{"text":"so it's not really a huge password","width":128},{"text":"the keys have to be unique, but the values don't have to be","width":256},{"text":"multiple people might reside in the same location so you can have multiple names that have the same phone number","width":576},{"text":"So the users might happen to have the same password, I happen to have the same password and that's fine","width":768},{"text":"but the keys have to be unique, because I use a key to look up some information","width":256},{"text":"so if I have two duplicate keys, then I have no way of distinguishing the two","width":384},{"text":"the keys have to be unique, but the values don't have to be","width":64},{"text":"what's the third one?","width":128}]