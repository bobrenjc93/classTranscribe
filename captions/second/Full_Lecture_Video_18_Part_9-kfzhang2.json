[{"text":"And binary trees that satisfy the ordering property are called binary search trees. So this is a binary search tree.","width":380},{"text":"So let's write a recursive definition for what a binary search tree is.","width":538},{"text":"So, a binary search tree is either: what's the base case?","width":896},{"text":"Empty.","width":90},{"text":"The ordering property is vacuously true for an empty tree. There's nothing to compare.","width":307},{"text":"So, a binary search tree is either empty","width":320},{"text":"","width":256},{"text":"Or... well, it's a binary tree, so it had better be a root, a T-left, and a T-right.","width":448},{"text":"","width":320},{"text":"So let's take care of the first node first, and then do the recursion afterwards.","width":256},{"text":"So, what must be true about r, relative to T-L and T-R?","width":448},{"text":"","width":192},{"text":"So, we want the root","width":419},{"text":"I guess I should say \"where\", use words","width":128},{"text":"","width":74},{"text":"Where the root should be","width":320},{"text":"Let's think about T-left first. What's true about the root relative to T-left?","width":256},{"text":"The root better be greater than ","width":256},{"text":"the root of T-left. If T-left doesn't exist, this is vacuously true because there's no root.","width":522},{"text":"And, the root had better been smaller than the root of the right.","width":744},{"text":"That alone obviously isn't sufficient. We also need to know that the two subtrees are also binary search trees.","width":590},{"text":"So, \"and T-L and T-R are binary search trees.\"","width":576},{"text":"","width":128},{"text":"Because if that's true, then we know that...","width":512},{"text":"Wait a second...","width":128},{"text":"","width":128},{"text":"","width":64},{"text":"This isn't sufficient, sorry.","width":192},{"text":"","width":128},{"text":"This isn't sufficient.","width":192},{"text":"It could be case that, for example, if I do...","width":448},{"text":"If I put a 15 there","width":192},{"text":"What I have just written would work.","width":192},{"text":"Because the root is smaller than the left, and the root is bigger on the right, and the left and the right are binary search trees, but the problem is there's a big element in the left subtree that's larger than the root.","width":768},{"text":"So I have to be careful here.","width":64},{"text":"So what I should say is:","width":148},{"text":"Something like: the max","width":256},{"text":"The maximum element in the left subtree had better be smaller than the root.","width":576},{"text":"And similarly, the minimum element in the right ought to be larger than the root.","width":512},{"text":"So, that would handle this case. So now it would be false for this.","width":256},{"text":"Because the largest thing in the left is 15, which is not smaller than 14.","width":448},{"text":"","width":192},{"text":"Yeah.","width":128},{"text":"","width":64},{"text":"","width":64},{"text":"In this case, we're not going to. You could in general. But when we're thinking about these, we're not going to think about duplicate keys.","width":512},{"text":"","width":128},{"text":"So all the keys are going to be unique.","width":128},{"text":"","width":128},{"text":"","width":192},{"text":"Questions on that? That's just formalizing what we mean by the ordering property.","width":384},{"text":"Notice we haven't said anything about the height yet.","width":192},{"text":"We'll get there.","width":128},{"text":"","width":220},{"text":"So if I've got this kind of structure...","width":192},{"text":"","width":192},{"text":"What happens -- what should you do if I ask you to find 9?","width":320},{"text":"How can you leverage the fact that you know that this is ordered to find 9 faster?","width":320},{"text":"Yeah?","width":192},{"text":"","width":192},{"text":"","width":320},{"text":"Oh, first the height of this tree is significantly smaller than the number of nodes, right?","width":384},{"text":"So I could make my algorithm faster by not doing a full traversal.","width":320},{"text":"By leveraging the fact that at every node, I sort of know which half of the tree to care about.","width":448},{"text":"If I ask you to find me, what did I say, 9?","width":192},{"text":"So if I ask you to find me 9, you know","width":256},{"text":"So I don't forget. Memory of a goldfish.","width":192},{"text":"So if I ask you to find 9, I know that 9 cannot occur in the right subtree of 14.","width":384},{"text":"Right? That would be a violation of the ordering property. So if I know that this tree is ordered, and I'm maintaining while I'm using this tree, that fact, I know it's always going to be ordered after I insert stuff into it","width":768},{"text":"Then I know I can just skip all of this subtree. I don't care at all about what's there.","width":384},{"text":"So, I can just say, okay, is 14 9? No. Okay, 9 is smaller than 14, so 9 can only occur if it's there -- can only occur in that subtree.","width":832},{"text":"So then I go here to this 7.","width":256},{"text":"Is 9 7? No. Okay, so then I gotta figure out which side it's on.","width":320},{"text":"Well, 9 is bigger than 7.","width":192},{"text":"So now I know that I have to go right.","width":128},{"text":"It can't occur in the left subtree of 7 because everything to the left of 7 must be smaller than 7.","width":256},{"text":"So I can completely immediately rule out everything in this subtree.","width":256},{"text":"All of that is useless to me.","width":192},{"text":"So instead I go right, because the 9 can only exist in this subtree.","width":320},{"text":"So I'm shrinking by half the number of nodes I have to consider, if this tree is well-balanced.","width":448},{"text":"If I've got sort of an equal number of nodes kind of on left and on the right, I'm halving the number of things I'm looking at.","width":384},{"text":"So I'm at the 11, okay, is 11 9? No, well, 9 is smaller than 11 so I know it can't be the right child of 11.","width":512},{"text":"So if the 9 is here, it has to be this.","width":192},{"text":"Is 9 9? Yes.","width":128},{"text":"I found 9. So I can return the value element that exists in that node.","width":183},{"text":"I haven't written the values here, I've only written the keys.","width":270},{"text":"But you can think that there's a value inside the node, and I just return that. It doesn't matter what it is.","width":261},{"text":"It might be a picture of a dog. No idea.","width":192},{"text":"It doesn't matter.","width":64},{"text":"","width":192},{"text":"So that's the basic idea. We're using -- we're leveraging the fact that this tree is ordered in order to shrink our search space significantly.","width":576},{"text":"","width":84},{"text":"So let's write the code for that.","width":97}]