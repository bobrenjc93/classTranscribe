[{"text":"okay good morning class","width":247.18181824684143},{"text":"as you might have realized, spring break is starting and so congratulations for being here","width":349.18181824684143},{"text":"as opposed to enjoying the sunny weather outside, oh wait","width":164.18181824684143},{"text":"so first of all if your sitting in the back and want to have a more cozy experience, why don't you get up and move to the front and see what it's like at the front for a change","width":549.1818182468414},{"text":"I promise not to bite too hard","width":291.18181824684143},{"text":"either sit down and relax or come on down and see what it's like at the front","width":230.18181824684143},{"text":"and we can have a cozy class","width":102.18181824684143},{"text":"right so here's what we're going to do today","width":80.18181824684143},{"text":"we're going to talk about handling errors and how we detect them with our system calls","width":273.18181824684143},{"text":"and then we're going to talk about some fun stuff, we're going to start talking about networking","width":259.18181824684143},{"text":"and this is kind of important right?","width":83.18181824684143},{"text":"we want our machines to talk to each other so we'll get done today with some of the basics about ip4 and what's the difference between UDP and TCP","width":654.1818182468414},{"text":"but before we do all of that, let's see if your brain cells are working today in terms of pipes","width":367.18181824684143},{"text":"right so I mentioned before that you can get a SIGPIPE when something happens - when?","width":659.1818182468414},{"text":"when does your process get a SIGPIPE?","width":410.18181824684143},{"text":"I'm sorry I'm not listening","width":144.18181824684143},{"text":"yes, when you have a PIPE and you write some bytes to the pipe and there's no one there to listen","width":508.18181824684143},{"text":"and the failure [will cause your process to] get a SIGPIPE so you can write some code inside your signal handlers to say oh look the listeners died, maybe I'll just fork exec a new one for example","width":686.1818182468414},{"text":"now a common gotcha though is when your playing with pipes and fork as you might have found out in the lab, is that you forget to close all of those file handles that you don't need","width":618.1818182468414},{"text":"so if you still happen to have a reading file descriptor open, you won't get the signal because in theory you could still read form that","width":698.1818182468414},{"text":"okay, so that's our first little question right","width":428.18181824684143},{"text":"alright so when all the readers have closed and you try to write to a pipe, you should get a signal","width":1093.1818182468414},{"text":"in practice we've found it doesn't actually work on EWS","width":218.18181824684143},{"text":"the old EWS machines don't support that yet","width":292.18181824684143},{"text":"but here's the good news, you may have gotten an email, did you get an email from me this morning?","width":310.18181824684143},{"text":"fantastic, right that's my new email script","width":156.18181824684143},{"text":"I can now send email as anybody to anybody inside UIUC","width":469.18181824684143},{"text":"anyway I won't make jobs about the provost","width":92.18181824684143},{"text":"so hopefully you've logged into your new virtual machines","width":392.18181824684143},{"text":"brand new feel free to destroy it, install software, etc etc","width":378.18181824684143},{"text":"and in the worst case, I'll just give you a new one","width":273.18181824684143},{"text":"so it's probably not a great idea to store your family archive on this machine","width":273.18181824684143},{"text":"but it is important because hey with this box you've got root","width":195.18181824684143},{"text":"you can do root-y things like mount file systems, like connect to named ports and run them ports","width":415.18181824684143},{"text":"we'll be talking about that in a little bit","width":134.18181824684143},{"text":"but anyways, so let's finish our pipes off","width":146.18181824684143},{"text":"so when can a listener discover that there are no more writers","width":237.18181824684143},{"text":"how about this then, because in section our listener right was wc, we were using word count to pull data from standard in","width":625.1818182468414},{"text":"how do you think wc knew that the pipe had closed, that there was no more bytes coming","width":730.1818182468414},{"text":"okay so we had to flush it but actually we had to do more than flush","width":189.18181824684143},{"text":"flush simply says to the C library hey you know those bytes you're looking after for performance sake","width":334.18181824684143},{"text":"I don't want you to look after them anymore","width":96.18181824684143},{"text":"send them down the pipe, in other words call write","width":227.18181824684143},{"text":"but we need to do more than that because flushing doesn't actually mean that the pipe itself has closed","width":369.18181824684143},{"text":"we want to close it but we haven't actually answered the question yet of how does the listener know when it's not going to get anymore bytes","width":724.1818182468414},{"text":"and the answer is if you call read, it returns zero","width":512.1818182468414},{"text":"so it's not an error yet, it's just simply that hey I'm going to give you zero bytes and the pipe is closed","width":736.1818182468414},{"text":"so let's do this","width":243.18181824684143},{"text":"let's have a little play","width":207.18181824684143},{"text":"okie dokie right so I made a pipe ","width":279.18181824684143},{"text":"I'm going to close the second file descriptor, in other words the write end","width":283.18181824684143},{"text":"and let's try reading from it","width":204.18181824684143},{"text":"okay so bytes read equals read","width":216.18181824684143},{"text":"we need to give it a file descriptor okay so what shall I say","width":270.18181824684143},{"text":"fd[0] is where we read from, how many bytes do we want? well here's a pointer to buffer and I'll take sizeof buffer minus one","width":582.1818182468414},{"text":"why minus one you say? well for safety for example I might put in at the very end a termination byte","width":583.1818182468414},{"text":"for example, just to make sure my strings don't go on forever","width":236.18181824684143},{"text":"okay so let's print out to see what value we get","width":277.18181824684143},{"text":"okay and I want to print out the result of my read call","width":844.1818182468414},{"text":"hey and look it's true, we do get zero, fantastic okay go away","width":333.18181824684143},{"text":"right so that's one way right? now that's obviously if we're doing the low level calls like read and write","width":515.1818182468414},{"text":"if your working at the C library level","width":349.18181824684143},{"text":"you can check for an end of file EOF condition on that pointer","width":744.1818182468414},{"text":"so remember how we do fdopen to get yourself a C library pointer","width":261.18181824684143},{"text":"well then there's a thing called fopen","width":256.18181824684143},{"text":"right so that's relatively easy then to discover that something is closed","width":306.18181824684143},{"text":"another way of doing it of course is that you come up with a special token or special character to say hey if I send them asterisks or a zero bytes, then I know that that signifies to me that there's no more bytes coming","width":745.1818182468414},{"text":"another way is to say at the beginning of your message, hey I'm going to send exactly 4000 bytes and here they come","width":402.18181824684143},{"text":"another way is to know exactly how many bytes you are going to send beforehand anyway and hard code it into your program","width":437.18181824684143},{"text":"so that's all we're going to say about pipes today","width":313.18181824684143},{"text":"let's mess up our program, let's try and read from a file descriptor that doesn't exist","width":363.18181824684143},{"text":"okay so let's say from one hundred and twenty three","width":167.18181824684143},{"text":"okay I don't need this right, so what's going to happen now?","width":680.1818182468414},{"text":"alright we get a result of negative one","width":171.18181824684143},{"text":"the read failed, I cannot read from file descriptor 123","width":259.18181824684143},{"text":"well you and I know that's because there's nothing connected to that integer","width":240.18181824684143},{"text":"it's an invalid file descriptor","width":156.18181824684143},{"text":"but we want to actually know more than that, we want to know something about what went wrong","width":409.18181824684143},{"text":"and for that there's actually this global constant called, whoops come back thank you, errno","width":750.1818182468414},{"text":"right error number, so error number will have been set","width":265.18181824684143},{"text":"so let's find out what value it was ","width":230.18181824684143},{"text":"okay so we'll stick this in here and we'll print it out","width":316.18181824684143}]