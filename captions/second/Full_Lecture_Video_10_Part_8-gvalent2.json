[{"text":"It sort of depends on what you want, right?","width":192},{"text":"Do you want removing from the front to give you the thing that was removed, or do you want to just do the remove and you have some other function to get the front.","width":448},{"text":"I'm having these functions get at position, so I'm going to say it doesn't return anything.","width":384},{"text":"And if I want the front, I can say get at 0.","width":256},{"text":"You could imagine it returning the thing that is removed, either way would be fine.","width":320},{"text":"The important thing for the ADT is that you have the ability to remove something from the front.","width":448},{"text":"void pop_front taking nothing because I don't need to provide any data to remove something from the front.","width":960},{"text":"Likewise, removing from the back.","width":768},{"text":"Ok, I have 2 functions for get at position. Why might I have 2 functions for that?","width":448},{"text":"Const and non const.","width":64},{"text":"One of these going to be const and one of these is going to be non const","width":192},{"text":"What should it take?","width":64},{"text":"First of all, what should it return?","width":192},{"text":"Should it return a node? A T? A T reference? A Const T reference?","width":384},{"text":"T ref. Right, the non const version should return a T ref","width":256},{"text":"If I want them to be able to modify the elements of this list.","width":192},{"text":"If I didn't, I could return const T ref","width":128},{"text":"So I'm going to say, T ref at - what should at take? An index. Some position.","width":832},{"text":"And then likewise, I need my const one as well.","width":1344},{"text":"How many elements? What should I call that? What should that return?","width":384},{"text":"How many elements are in my list?","width":192},{"text":"Call it size or something and it should return an integer of some kind. Unsigned, signed, take your pick.","width":448},{"text":"Does size take any arguments? No.","width":256},{"text":"Should it be const? Yes.","width":256},{"text":"Any elements, this is asking if the list is empty, is this any empty list. Bool.","width":704},{"text":"Bool is empty, should it be const? Yes.","width":448},{"text":"That is a reasonable public facing interface for a list.","width":512},{"text":"There may be more functions, we will talk about some of those tomorrow, but this is a reasonable starting point for a list.","width":384},{"text":"We have the ability to add things to the front, add them to the back, remove them from the front, remove them from the back, access at a certain position, get the size, and ask if the list is empty.","width":704},{"text":"And this is enough add things and look around in the list and do things with it","width":256},{"text":"But yet, I still haven't said at all how this is implemented.","width":320},{"text":"Your implementation at this point could be a doubly linked list, a singly linked list, an array, could be who knows what.","width":448},{"text":"Now we're going to know.","width":256},{"text":"So we're going to fill in the private section of the header file for our list T class.","width":192},{"text":"We're only going to do the one that says now.","width":256},{"text":"We can fill in the other ones later.","width":192},{"text":"So, what do I absolutely need for my list structure now that I've given you that it's going to be implemented in terms of a singly linked list.","width":320},{"text":"I've given you the nodes of the node structure here.","width":256},{"text":"I guess first of all, what the heck I just declared a class inside the private section. Is that OK?","width":384},{"text":"Yea, this is fine. This just means that I've declared a type that can only be referred to by the list class.","width":448},{"text":"It has private access, so only the list class can do things with these nodes, and it can't return these to the client because it's private","width":576},{"text":"This is a way of declaring an inner class that is an implementation detail.","width":320},{"text":"So I've declared this node class belongs to this list and is an implementation detail.","width":256},{"text":"Nobody else is going to see it except for the list.","width":192},{"text":"So now I have that, what is the bare minimum I need to be able to represent a list?","width":384},{"text":"How is the list represented in memory?","width":704},{"text":"Chain of these nodes.","width":192},{"text":"There's some chain of these nodes, and that's how I'm choosing to represent my list.","width":192},{"text":"So what single data element must I have in my list class to have that?","width":320},{"text":"A pointer to what?","width":256},{"text":"A node. An owning pointer to a node. So unique pointer to a node.","width":256},{"text":"So I'm going to say head.","width":1024},{"text":"So typically, we will refer to the first node in the list as the head and the last node in the list as the tail.","width":512},{"text":"So the list class is going to own the very first node in the list.","width":320},{"text":"Which owns the next node, which owns the next node, which owns the next node, so every one of these nodes has some object that is claiming ownerships which is of type unique pointer.","width":640},{"text":"And when the destructor for this list class is invoked, it will invoke the destructor for the head, which will invoke the destructor for the node that that points to, which will invoke ect. and the it deletes from the tail up to the head.","width":896},{"text":"How would I represent an empty list here?","width":320},{"text":"Yea, head is set to nullptr. That's an empty list.","width":576},{"text":"There's functionally no difference.","width":704},{"text":"It just means struct by default means that anything you declare there is public.","width":256},{"text":"Whereas class means anything you declare with default with no access modifiers is private","width":320},{"text":"That's the only difference.","width":128},{"text":"So, outside code can't refer to node, but inside of the list, you can modify data elements of node freely.","width":704},{"text":"Because they're public. ","width":64},{"text":"So it's a little bit subtle.","width":192},{"text":"Nodes themselves are private to the list class, but the things inside the nodes are public to the list class.","width":320},{"text":"So inside the list class if you've got an instance of node you can muck around and change things as much as you want.","width":256},{"text":"But you're outside, nobody can even refer to a node because it's private.","width":384},{"text":"Let's add implementation. Let's write a function on this thing.","width":960},{"text":"How would I add something to the front of the structure?","width":320},{"text":"So right now it's just represented as a pointer to the start of the list and nothing else.","width":256},{"text":"So how I add something else to the front of this thing?","width":256}]