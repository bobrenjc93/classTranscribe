[{"text":"access","width":121},{"text":"so you could say non sharable or exclusive access","width":364},{"text":"to a resource","width":74},{"text":"okay what else did you remember?","width":252},{"text":"hold and wait","width":517},{"text":"right so what does hold and wait mean?","width":187},{"text":"if I'm going to be involved in deadlock it means I've already got a whole lot of one resource and I'm not going to let go of it","width":537},{"text":"whilst I'm requesting an waiting for another resource","width":358},{"text":"so I'm part of the problem right? I've got something I've got a pencil and I'm going to wait until I've also got the paper","width":457},{"text":"I'm not going to let go of this thing","width":311},{"text":"alright so this is the toddler approach to sharing","width":193},{"text":"it's mine!","width":117},{"text":"I've got one thing now I want the other thing","width":409},{"text":"so in note form, I might remember it's like okay","width":215},{"text":"I've got at least one thing","width":223},{"text":"and I want more!","width":480},{"text":"well that sounds pretty similar to something else","width":263},{"text":"what's the condition? what's another similar condition to this","width":773},{"text":"no preemption","width":210},{"text":"what do we mean by no pre emption?","width":470},{"text":"yeah, that no one's voluntarily, that the only way that something is released is by a voluntary action","width":658},{"text":"so we can't have another gardener bashing the other one on the head just to get their tools","width":565},{"text":"right or tripping them up","width":126},{"text":"we let each process voluntarily release resources","width":353},{"text":"we can't kind of walk in and say oh I'm sorry I've made a management decision, you know that trough you have? I'm taking it away from you","width":611},{"text":"so there's a note form, we're only doing voluntary releases","width":410},{"text":"only voluntary release resources","width":466},{"text":"okay!","width":151},{"text":"and finally what's our fourth one?","width":302},{"text":"circular wait","width":464},{"text":"my friend wants to go out with B, B wants to go out with C, C is waiting to go out with D, D is waiting to go out with A","width":343},{"text":"we've got a cycle in the resource allocation graph","width":236},{"text":"or in the wait-for graph","width":90},{"text":"that we have a set of processes where the first process will wait for the second process, the second process will wait for the third process and so on and so on and so on until we get back to the first process again","width":877},{"text":"so we have circular wait","width":576},{"text":"okay now are they necessary? are they sufficient?","width":311},{"text":"yes they are necessary and sufficient you have all four of these, you have deadlock","width":399},{"text":"the good news is that if we can break any one of these then we can avoid deadlock","width":393},{"text":"and that is the standard approach to when you are worried about deadlock situations","width":204},{"text":"you backtrack, you write down these four things and say okay let's see we can break one of these conditions","width":366},{"text":"so","width":27},{"text":"I've got my four gardeners or three gardeners walking to a shed","width":230},{"text":"I've already mentioned we can break exclusive access by allowing them to share the resources","width":484},{"text":"how could we break circular wait?","width":756},{"text":"how would you break circular wait?","width":500},{"text":"oh really? come on give me an idea, yes","width":693},{"text":"okay so if we inside the shed numbered all the tools and said pick the lowest tool first that you need","width":677},{"text":"then maybe we can set it up so that there's no circular wait","width":260},{"text":"if we controlled all the gardeners actions and were very careful so that there was no possibility that they would fight over shoes, over shoes? tools!","width":752},{"text":"we could avoid deadlock again, we could make sure that hey you're only going to do this type of gardening today and you have to wait until this person's finished etc","width":529},{"text":"so we might manage the processes so that we never have a circular wait","width":475},{"text":"okay, no preemption like I said we could have one gardener that's the head gardener","width":338},{"text":"and say haha if I see deadlock, you put down that trough right now, right?","width":471},{"text":"we could force processes to give up resources","width":257},{"text":"in practice that's pretty hard to do because maybe the process is actually midway through say writing to a GPU buffer so that's pretty hard","width":536},{"text":"and then hold and wait maybe we can use something we know about synchronization to try to avoid hold and wait, we could say make grabbing all the resources an atomic situation","width":716},{"text":"alright so that's our gardeners ","width":219},{"text":"we'll come back to this later when we talk about dining philosophers again","width":321},{"text":"now I'm going to get started giving some hints about the next MP","width":257},{"text":"remember good ol mergesort?","width":213},{"text":"mergesort where you recurse twice and you say okay get the lower half sorted, get the upper half sorted and then I'm going to make a merge function which combined those two halves","width":770},{"text":"and then my part is done","width":129},{"text":"right so if I've got a big problem","width":297},{"text":"what do I end up doing? I end up making lots and lots of recursive calls until I'm working on smaller problems","width":406},{"text":"let's say these are 256 entries and I'm going to merge these two together","width":473},{"text":"and I'm going to merge these two together right those two merge actions could actually happen simultaneously, concurrently yes? at the same time","width":709},{"text":"great sounds like a job for threads","width":166},{"text":"so we'll have a thread doing this merge and another thread doing this merge at the same time","width":334},{"text":"and eventually say if these were 256 entries each, now we've got one big block of 512 when these are done","width":670},{"text":"I can merge those together","width":753},{"text":"so knowing what you know about pthread_create suppose I said to you ah okay it's a race","width":617},{"text":"we'll have everyone over here try to beat everyone over here to write a parallel multithreaded merge sort code","width":513},{"text":"how would you start? what calls would you call and when? so let's say you've got two minutes now to verbally discuss it with your neighbor and plan, sketch out how you're going to implement this","width":629},{"text":"you've got two minutes before I let you touch a keyboard, what would you talk about? what's your plan of how to accelerate this using threads","width":589},{"text":"ready? go","width":192}]