[{"text":"Which is equivalent to saying subroot is double equal to nullpointer.","width":320},{"text":"When i have an empty tree, throw the exception. I cant find anything in an empty tree for you. Its not possible.","width":512},{"text":"So thats the unhappy base case. Whats the happy basecase?","width":384},{"text":"I actually found it, so what is the condition for that?","width":448},{"text":"Subroot's key is double equal to the key that im looking for.","width":576},{"text":"The key im looking for is the same thing as subroots.","width":448},{"text":"Okay in which case what do i return? Just the value.","width":960},{"text":"Okay, so if i dont hit either of these cases i know that im a nonempty tree and the key at this position is not the same thing as the key im looking for.","width":768},{"text":"So now what do i do?","width":512},{"text":"Yeah, i have to recurse. So im not going to do a full traversal here, remember, we have this ordering property so im allowed to sort of throw out half the tree in the process of doing this traversal. Its not like im going to hit every node.","width":1024},{"text":"Im only going to go down one side. How do i check if i need to go down the left side?","width":448},{"text":"The key im looking for is smaller than the current key im at. I know it can only exist in the left subtree if at all.","width":448},{"text":"Its no possible for it to be in the right subtree. If it was the tree wouldnt be a binary search tree.","width":320},{"text":"If the key im looking for is smaller it had better be to my left. So if key is smaller than subroot->key.","width":960},{"text":"I had better return the result of recursing on the left subtree.","width":448},{"text":"So return find in subroots left converting to raw pointer. And im still looking for the same key.","width":1216},{"text":"Its important that i return here because otherwise in the case where i dont find the key my recursive function doesnt return a value and you get something like: warning no return statement out of non void function. And then clang is allowed to miscompile your code and you get invalid operations.","width":960},{"text":"And then scratch your head for a long time because you ignored the warnings. Dont ignore the warnings.","width":320},{"text":"So i have to return something here so im just going to return the result of running the helper function on the left subtree. So if it finds an element itll return my value and so then i return the value that my helper function returns and then that returns the value that its helper function returns. Etc. So it bubbles all the way back out.","width":1152},{"text":"If i omit the return here my helper function gives me the value and i ignore it and go on my merry way and nobody gets a value. So i have to return.","width":704},{"text":"Okay so finally whats this last case. This last case is where we have a nonempty tree, the key is not the same key as me and its not less than.","width":576},{"text":"Now what do i do?","width":384},{"text":"So yeah return the find on the right subtree. So im going to recurse right. [writing]","width":1536},{"text":"And again its important that i return because its gotta bubble all the way back out of a recursion.","width":576},{"text":"Alright so if i tell you that the tree were operating on has height h. What is the running time of this function in terms of h?","width":512},{"text":"Big O of h. We arent traversing another side of the tree. So its not like its O of n. Were only going down in the worse the height of the tree. Which could still be bad but in this case its proportional to the height of the tree.","width":1088},{"text":"So if later on we can come up with a way of making the height not suck then the running time of this function will also not suck.","width":640},{"text":"Were just gonna leave it in terms of h and well come back to that later.","width":576},{"text":"Okay so heres a picture of a bianry search tree. I want you to think about howd you insert the following elements into the tree.","width":704},{"text":"Youve got to be careful when youre inserting into a binary search tree. Because you have to make sure that the ordering property is satisfied. ","width":576},{"text":"So i cant just stick it where id like to because it might ruin the ordering property. I have to make sure that the ordering property is always satisfied when im doing these insertions.","width":768},{"text":"Furthermore im not just gonna add everything to the root anymore. ","width":512},{"text":"You can do that, but if you do that you can fairly easily see that youre gonna end up with one of the worst case looking trees if you a bunch of these insertions.","width":640},{"text":"So were gonna do a different insertions strategy that tries to at least make the tree look a little bit better than something that looks like that. Or that. Or the other way around.","width":1216},{"text":"So were not just going to stick things to the root. ","width":256},{"text":"So i wanted to insert 8 into this tree. How would you do that? Where do you think the 8 should go if i tell you it cant be the root?","width":1088},{"text":"Right the only place it can really go is to the left of 9. If it went anywhere else id be violating the ordering property. If i tell you i cant make it the root. I cant just trivially make it the root and make the whole subtree be its right child. ","width":1024},{"text":"Furthermore id have no idea of knowing whether thats valid or not. Even if i did that i would have to know for sure theres nothing smaller 8 in the left subtree. So i said insert 10 and i tried to make 50 be the right subroot of 10 thats not right because theres a 9 in its right. ","width":1216},{"text":"So i have actually kind of locate where this thing goes. I cant just stick things at the root anymore it wont even work. ","width":320},{"text":"So right the only place i can really stick this 8 is to the left of 9. it has to be satisfying the ordering property. So it has to be to the left of the 50 i know it has to be to the left of the 17 and i know it has to be to the left of the 12 and i know it has to be to the left of the 9 and then theres really no where else to go.","width":1152}]