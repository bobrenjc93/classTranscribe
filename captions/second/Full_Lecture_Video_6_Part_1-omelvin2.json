[{"text":"silence","width":10418.181818246841},{"text":"so here's how this works","width":160.18181824684143},{"text":"we're calling malloc() and we're going to look through all the previous allocations that we've ever made","width":517.1818182468414},{"text":"and we're going to see if any of those allocations we've made are free","width":447.18181824684143},{"text":"so we want to check if they're free","width":113.18181824684143},{"text":"and we want to make sure that the block of memory is of sufficient sie","width":430.18181824684143},{"text":"so let's check into our entry that size is at least equal to the requested size","width":891.1818182468414},{"text":"if it is, then maybe we can use that use that block. now we could at this point say hey great i've found a block but instead we're going to change our chosen pointer if the following is true","width":965.1818182468414},{"text":"either we haven't chosen anything yet or the size of the allocation we're looking at is even smaller then the previous block we've found","width":983.1818182468414},{"text":"in other words what kind of placement strategy are we using","width":288.18181824684143},{"text":"best fit! yes, this is best fit","width":413.18181824684143},{"text":"if i was using a tinder analogy, this would be like a best match you go through all the matches okay yeah","width":736.1818182468414},{"text":"of course sometimes you don't want to take that long and we could do a first fit: oh, yeah, that'll do","width":600.1818182468414},{"text":"so at that point we could say break out of this loop as soon as chosen is non-null so we could change our code somehow","width":460.18181824684143},{"text":"so for example if i were to put break in here then i can break out of the loop","width":337.18181824684143},{"text":"or i could have changed the conditions of the while loop to say while chosen is non null","width":338.18181824684143},{"text":"but yeah this is best fit and we go around and look at those allocations until we've actually exhausted all of them","width":893.1818182468414},{"text":"so it could be that we've found some space some previously allocated space that is not being used and in which case life is easy","width":524.1818182468414},{"text":"so if chosen is free then all we need to do is update that entry to say actually it's no longer free its being used","width":494.18181824684143},{"text":"and we can immediately return and we'll tell the user code to use the memory found at that pointer","width":1035.1818182468414},{"text":"so that was the easy case","width":81.18181824684143},{"text":"let's take a break for a moment and now let's look at how free works because later on when the C code is finished with the memory, it's going to have to do the same trick again once with the meta data, so here we are going to that linked list","width":1047.1818182468414},{"text":"eventually we find the entry that the user was using and we can mark it as available","width":711.1818182468414},{"text":"this works but its not very efficient. you can see that as we have more allocations in our linked list this code is going to get slower and slower","width":768.1818182468414},{"text":"our free is order n","width":413.18181824684143},{"text":"so this is not a very good implementation. which is why you get it for free","width":405.18181824684143},{"text":"maybe we can do better than this. rather than having a separate linked list maybe we can actually come up with a better solution. but anyway, now let's go back to our malloc","width":793.1818182468414},{"text":"now let's actually see what this code does. if we weren't successful in finding in any memory","width":462.18181824684143},{"text":"instead we call this sbrk() thing we say okay if chosen equals sbrk then sbrk and we pass in the size of the struct","width":680.1818182468414},{"text":"whenever you use sizeof() stop and pause and think come back come back, are you actually pausing in the right thing to sizeof()","width":479.18181824684143},{"text":"sizeof() works at compile time. the compiler uses the type that you give it","width":323.18181824684143},{"text":"the sizeof a struct is not the same thing as the size of the pointer to a struct and it's a common error to pass in the wrong thing","width":563.1818182468414},{"text":"sizeof() an array is not the same thing as an entry of that array","width":264.18181824684143}]