[{"text":"Oh, so, you could. It's gonna happen to you anyway. i could explicitly, like, swap, you know, do my own three-line swap pointers and then explicitly call delete on the other pointer and set it to null. and it will do the same thing.","width":1728},{"text":"but our structure is already written and it will do it for us anyways, so there is not any reason to duplicate that work. but we could.","width":384},{"text":"You have to be careful that if you just swap pointers and call delete(), ","width":192},{"text":"but you forget to set the \"set to null\" step, the destructor would be invoked on rhs and if it gets a pointer to something still, it will try to delete that again!","width":448},{"text":"So, the right way is to believe that it has a working destructor and only write the cleaning-up code in your destructor and just reuse it.","width":576},{"text":"Is that make sense?","width":256},{"text":"Is that make sense or you don't have a clue? hmmm... OK, let's move on!","width":704},{"text":"alright, i want to play around with a little bit more operator overloading just to give you a feel for that again and then some interesting things will come up as we are writing this operator with respect to rvalues and move semantics.","width":948},{"text":"and i wanna do this example just so that i get a feel of why do we care about this stuff and why do we bother to write a move constructor.","width":448},{"text":"Is it only an optimization thing or is it actually useful.","width":320},{"text":"The answer is obviously it is useful, we will see why here.","width":320},{"text":"OK, so i've said write the declaration of operator+= for book as it would appear in book.h","width":512},{"text":"So, operator+=, so that's like an increment operator.","width":384},{"text":"We've maybe done that before for an integer, like i+=5; ","width":320},{"text":"That would increment i by 5.","width":192},{"text":"right?","width":64},{"text":"so this is kinda of like an increment operator, or maybe a concatenation operator.","width":299},{"text":"Like if i have two strings \"hello\" and \"world\". and std::string a = \"hello\";","width":454},{"text":"a+=\" world\"; i am concatenating the strings.","width":298},{"text":"That is what this means. This is a concatenation of books.","width":203},{"text":"So, what i meant to have happened here is the current book should have all of its chapters followed by chapters of the other book that i am adding into it. ","width":590},{"text":"This is going to concatenate two books together.","width":192},{"text":"That is the intent.","width":64},{"text":"alright.","width":269},{"text":"+=, meaning that it's not going to give me a new book but it is doing it on an existing book.","width":385},{"text":"so that book should be changed to have new chapters in it after this is done.","width":192},{"text":"OK. Given that, will operator += be defined as a member function of the class or will it be defined as a free-standing function?","width":1003},{"text":"so operator += is going to change the current book object.","width":283},{"text":"so that it also has the chapters of the right hand side.","width":192},{"text":"so will it be a member function or will it be a free-standing function?","width":320},{"text":"member function! right?","width":128},{"text":"I am going to modify my member variables, right? so i need it have access internally to my variables.","width":576},{"text":"this is going to be, probably, a member funciton.","width":256},{"text":"then what will this look like? that means then that the left hand side of the argument is going to be ","width":448},{"text":"is going to be the current object.","width":128},{"text":"so, how many arguments is this going to take then?","width":242},{"text":"Just one, just the right hand side, right?","width":158},{"text":"since the left hand side would implicitly be this, or *this. Right?","width":320},{"text":"this will point to the left hand side so *this will be the left hand side.","width":192},{"text":"so this is going to take only one argument.","width":128},{"text":"OK, there is a question: what should this return?","width":448},{"text":"what should += return?","width":256},{"text":"It turns out that for the same reason that we return a reference out of =, ","width":320},{"text":"we probably return a reference out of +=.","width":128},{"text":"OK, some people may overload to be void but that is not perfectly inline with how the language works.","width":528},{"text":"we are going to return reference here again.","width":107},{"text":"and it is going to be a reference to current object so it is going to be the same story as operator=.","width":355},{"text":"We are going to say book, reference, operator+=","width":768},{"text":"now i have to take another book as my argument.","width":256},{"text":"what should the type of argument be?","width":192},{"text":"reference?","width":448},{"text":"OK!","width":64},{"text":"Right? because when i am doing +='s with argument, i don't want to change that argument.","width":320},{"text":"so it is reasonable for me to want that thing to be const.","width":171},{"text":"so i am going to say, for now, const. book, reference, right hand side.","width":725},{"text":"this is a function declared const.","width":181},{"text":"No, because i am going to change the current book, so i cannot declare this function as const.","width":340},{"text":"so it ends here.","width":64},{"text":"and that would it be inside the public section or the private section of my header?","width":369},{"text":"Public! i want people to be able to call this function from outside of my class.","width":284},{"text":"i need to put it in the public section.","width":95},{"text":"so this would appear in the public section of the book class as part of the class. it is a member function of the book class.","width":384},{"text":"OK.","width":169}]