[{"text":"","width":128},{"text":"I am going to use my initializer list to set this guy up","width":192},{"text":"","width":192},{"text":"Now when I am inside the body of this function","width":128},{"text":"Since I took my arguments by value I know that I have temporaries ","width":320},{"text":"That hold the value that I actually want in them","width":128},{"text":"Right and","width":64},{"text":"If just don't do anything, these temporaries are going to go out of scope at the end of my constructor and they are gone forever","width":320},{"text":"","width":192},{"text":"No that, uhmm","width":128},{"text":"I could just copy them","width":128},{"text":"But then I made the copy of something that is just a temporary","width":256},{"text":"It is a local variable but it is something that is going to go away at the end of this function","width":320},{"text":"So I could have just stolen from it","width":128},{"text":"So what I am going to do is move the arguments into my class","width":256},{"text":"I am going to say like","width":128},{"text":"First","width":64},{"text":"","width":128},{"text":"Construct yourself from","width":192},{"text":"","width":192},{"text":"","width":128},{"text":"","width":128},{"text":"Construct yourself from my temporary","width":128},{"text":"My function argument","width":128},{"text":"First","width":64},{"text":"So steal the things out of that","width":192},{"text":"Temporary variable","width":64},{"text":"This local variable","width":64},{"text":"And put them in your member variable","width":128},{"text":"","width":64},{"text":"So now the first argument to the function is going to be left empty","width":256},{"text":"And then when it is invoked","width":192},{"text":"Nothing really happens","width":64},{"text":"","width":256},{"text":"","width":64},{"text":"And likewise I am going to say std move","width":320},{"text":"","width":192},{"text":"","width":128},{"text":"","width":256},{"text":"","width":256},{"text":"","width":192},{"text":"","width":128},{"text":"","width":192},{"text":"And I am going to leave my constructor just nothing","width":128},{"text":"Because I already did all the work that I needed to do ","width":128},{"text":"","width":192},{"text":"","width":128},{"text":"This means that if I needed to do a copy","width":192},{"text":"The copy is only going to be made once","width":128},{"text":"It is going to be made when I construct the argument, and then I move out of the argument","width":192},{"text":"Right, so if I was forced to do a copy I would still do a copy","width":256},{"text":"But I am going to move out of that copy. So I am not going to copy twice","width":256},{"text":"If I didn't have to do a copy","width":256},{"text":"If when I invoke the constructor for the first argument A","width":256},{"text":"If the first argument to this constructor happens to be also an r value","width":256},{"text":"The system can invoke the move constructor for whatever type A IS","width":192},{"text":"If type A has a move constructor","width":128},{"text":"","width":128},{"text":"","width":128},{"text":"","width":128},{"text":"This lets me handle the case when the arguments have different l valueness","width":320},{"text":"R valueness without actually having to overload for all of the","width":256},{"text":"exponentially larger number of cases as I have more and more","width":192},{"text":"arguments, ok?","width":64},{"text":"You can do if for like 2","width":256},{"text":"You can probably do it for 3 if you are patient","width":128},{"text":"But like 4 or 5, uuh","width":192},{"text":"You start to get somewhere where it is just painful","width":128},{"text":"","width":64},{"text":"","width":192},{"text":"It has some assumptions baked into it","width":128},{"text":"Namely that the types are movable","width":192},{"text":"The types themselves aren't large","width":128},{"text":"This would probably be bad if like A, B and C","width":192},{"text":"Where all like classes that have","width":128},{"text":"a stack array of a million elements in it","width":128},{"text":"","width":128},{"text":"being those expensive","width":256},{"text":"and you can't move those","width":64},{"text":"","width":320},{"text":"There are some assumptions being made here which most of the times don't matter","width":256},{"text":"","width":256},{"text":"Just a caveat","width":256},{"text":"Yeah","width":64},{"text":"","width":128},{"text":"","width":320},{"text":"They are passed in by value","width":192},{"text":"Which means I have got an object of type A called first sitting on the stack frame for the constructor","width":448},{"text":"I've got an object of type B","width":128},{"text":"Called middle, sitting on the stack frame for the constructor","width":192},{"text":"So when that constructor returns","width":192},{"text":"When it is done using its construction work","width":128},{"text":"Those three arguments have to be destroyed","width":128},{"text":"Since I moved out of them they are empty, so the constructor work should be trivial","width":320},{"text":"To do nothing","width":64},{"text":"It is a bunch of null pointers","width":192},{"text":"Delete brackets null pointers delete null nothing","width":64},{"text":"","width":64},{"text":"","width":64},{"text":"That is provided that A, B, and C are movable which is","width":128},{"text":"I am fine making that assumption","width":128},{"text":"","width":192},{"text":"","width":192},{"text":"Ok","width":128},{"text":"","width":128},{"text":"Let's write one of the accessors","width":192},{"text":"Let's write the implementation of middle","width":128},{"text":"","width":64},{"text":"Again this is a member function of the triple class","width":192},{"text":"So I am going to start if with template class A, class B, class C","width":192},{"text":"","width":320},{"text":"","width":256},{"text":"","width":256},{"text":"","width":128},{"text":"Return type is a..","width":256},{"text":"Middle, so it will be a","width":128},{"text":"const B reference","width":448},{"text":"What class is it scoped to?","width":128},{"text":"","width":256},{"text":"Triple of A, B, C","width":256},{"text":"Right? Because triple A B C is a class","width":192},{"text":"middle","width":256},{"text":"","width":64},{"text":"cosnt","width":128},{"text":"","width":64},{"text":"and then","width":128},{"text":"","width":256},{"text":"","width":256},{"text":"","width":128},{"text":"the function, returning a const B ref","width":192},{"text":"belongs to triple A B C","width":128},{"text":"is itself const, and returns the middle member variable","width":192},{"text":"","width":128},{"text":"","width":128},{"text":"It is pretty much the same as the find functions in other classes","width":192},{"text":"It is just that I need to put this template in front to make sure I am scoping it to the appropriate instantiation","width":256},{"text":"class rather than just the name of the template","width":192},{"text":"","width":64},{"text":"Nothing here is all that surprising","width":128},{"text":"It shouldn't be all that surprising","width":128},{"text":"","width":64},{"text":"","width":128},{"text":"If you get rid of this template part and that part it looks like","width":256},{"text":"Any other function we have written before","width":128},{"text":"","width":128},{"text":"template and the angle brackets","width":192},{"text":"","width":192},{"text":"","width":192},{"text":"","width":128},{"text":"Let's skip five","width":128},{"text":"I am going to skip to this page","width":64},{"text":"We will come back to that on Monday","width":256},{"text":"I want to touch this before the lab today","width":128},{"text":"","width":192},{"text":"OK so","width":128},{"text":"Which of the following classes are abstract in the listing below?","width":256},{"text":"So as in before 9","width":256},{"text":"Which of the following classes are abstract","width":320},{"text":"What is our clear definition of abstract?","width":192},{"text":"What is an abstract class?","width":128},{"text":"","width":192},{"text":"At least one pure virtual function","width":192},{"text":"Having just a virtual function does not make you abstract","width":256},{"text":"Having at least one pure virtual function makes you abstract","width":192},{"text":"That's the key","width":128},{"text":"So if we look at animal","width":192},{"text":"Does animal have at least one pure virtual function?","width":384},{"text":"Yes! Which one is it?","width":128},{"text":"Speak","width":128},{"text":"Right?","width":128},{"text":"This is a pure virtual function","width":64},{"text":"So this is abstract","width":192},{"text":"Because of that function","width":320}]