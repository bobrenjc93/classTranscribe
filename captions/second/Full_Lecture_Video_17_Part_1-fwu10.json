[{"text":"So more questions on the closed-form summation...","width":384},{"text":"If I if you need to use it a wired closed-form I will give it to you. Wired closed-form being...","width":384},{"text":"Like forms like that or not explicitly covered in 173.","width":192},{"text":"So 173 was like you need to memorized this summation... You probably still have it memorized.","width":384},{"text":"So like summation of two to the i. We need to have it memorized. Summation of i: probably need to have it memorized.","width":384},{"text":"But things like i to the i? No, that was wired.","width":320},{"text":"OK.","width":320},{"text":"So","width":128},{"text":"Let's finish talking about heaps.","width":192},{"text":"Remember to fill in [lab section and NetID]. Stuff if you wanna it back.","width":448},{"text":"OK, what was the heap property?","width":256},{"text":"What's the heap property, anybody?","width":768},{"text":"Yeah","width":64},{"text":"[student answering]","width":320},{"text":"OK, you described a max heap, which is fine.","width":320},{"text":"So that's the the elements of the subtrees of the subroot are smaller than the root.","width":448},{"text":"All right. This is a max heap.","width":128},{"text":"This is one form of heap property that will give you a heap where the highest prority.","width":320},{"text":"If use this as a priority queue implementation. That will be to say, higher number has higher priority.","width":320},{"text":" Right. Or if you are guaranteeing the largest thing is the root and everything in this subtree is blow it or smaller than it.","width":448},{"text":"Then you will get a max heap.","width":64},{"text":"If you flip that and you say OK the root is the smallest thing. And everything in the subtrees below it is smaller than it.","width":64},{"text":"Then you have a min heap.","width":512},{"text":"Right if you are using that as your implementation of priority that is equivalent to saying that smaller numbers have higher priority.","width":512},{"text":"Either one of those is valid.","width":64},{"text":"They are both meaning the same thing right?","width":256},{"text":"All the heap property is saying something about the relative ordering of the elements in the tree, right?","width":576},{"text":"Comparing the root versus leaves, so either the root is bigger than all the nodes in the subtrees, or the root is smaller than the subtrees. That, that is the heap property.","width":576},{"text":"OK, so if we got a heap.","width":192},{"text":"What tree property, what important tree property did that heap satisfy beyond just heap property?","width":512},{"text":"It was complete.","width":192},{"text":"Right, why did we need it to be complete?","width":128},{"text":"Why is it important that the heap doesn't look like... this?","width":576},{"text":"So the reason we need this to be complete","width":1408},{"text":"is that we are using an array for our storage now.","width":192},{"text":"And we have chosen to lay out this heap in level order.","width":320},{"text":"Right, that was what gave us those nice concise formula for figuring out what the left child was what the right child was.","width":384},{"text":"The parent was. Right?","width":128},{"text":"If it was not complete.","width":64},{"text":"We have to have like a gap in our array somehow, and we have to deal with how do we","width":512},{"text":"If we are looking at our array cells that are just containing like a int.","width":128},{"text":"How do we know if it is empty or not?","width":128},{"text":"I mean, it is not, I mean you can't. Right?","width":192},{"text":"Because any valid integer could be something somebody could put into your array. Right?","width":256},{"text":"It is not like there is a magic integer no one shall ever use.","width":192},{"text":"So you'd  have to something else... you know... like have another boolean or something.","width":320},{"text":"And it just gets really nasty. OK.","width":256},{"text":"You have to deal with having gap in the storage.","width":256},{"text":"Whereas if it is complete and you are lying out a complete tree in level order in an array.","width":192},{"text":"I mean everything is contiguous, right, 'cause that's the point of the completeness.","width":448},{"text":"Completeness the bottom level.","width":64},{"text":"Everything is perfect up to the last level.","width":128},{"text":"And the last level filled in from left to right, so if lay this out in order, there is no gaps.","width":256},{"text":"So now we don't have to worry about you know having a missing left child.","width":320},{"text":"The only case we will be missing the left child is that we don't have a child at all.","width":384},{"text":"We still have a left child and not have a right child, but that is still elegantly handled...","width":320},{"text":"because in that case the left child will be still in the array and the right child will be beyond the bound of the array.","width":384},{"text":"Everything there kind of worked out nicely.","width":256},{"text":"So it's important that this heap is complete.","width":320},{"text":"And then you know right in...","width":320},{"text":"Write in some definition the heap properties return...","width":384},{"text":"OK so here is our picture again from last time.","width":192},{"text":"Ah... I wanna just quickly do this operation again to have an idea of what this is looking like.","width":704},{"text":"You should have written this in the lab... none of which should be all that hard.","width":320},{"text":"The lines of code should be maybe two per function maybe three... nothing too crazy.","width":192},{"text":"Mostly just just for loop and recursion on index and variable","width":384},{"text":"So OK, we gonna add element two to the heap, so where does it go first?","width":320},{"text":"And why?","width":128},{"text":"I wanna add two, where do I put it?","width":128},{"text":"To the right of the seven?","width":320},{"text":"Why do I put it to the right of the seven?","width":128},{"text":"It has to be complete, so there is only one place this node could go anyway.","width":320},{"text":"Right if put it literally anywhere else the tree would not be complete anymore.","width":192},{"text":"Right if put it as the new root, then that node would only have one child... then it's not gonna work.","width":576},{"text":"If I put it you know to the left of twenty it's not complete, the right of twenty it's not complete.","width":320},{"text":"So pretty much the only place I can put this is to the right of the seven","width":256},{"text":"Furthermore this is convenient...","width":256},{"text":"When we are dealing with the array, 'cause we can just push back.","width":128},{"text":"This is just place it where the last index of the array is and move this i plus one.","width":448},{"text":"And if we need to, we run out of room, we may need to resize.","width":320},{"text":"But we know that push back is amortized constant. Here push back isn't really matter.","width":384},{"text":"And it's easy to do, placing this literally anywhere else would require us shift elements around. This is where it goes.","width":512},{"text":"Now this isn't heap anymore.","width":128},{"text":"Ok","width":128},{"text":"Two is the smallest thing in the structure, so it ought to be the root and it's not.","width":384},{"text":"So what we have to do?","width":192},{"text":"Yeah we have to swap and we have to keep doing that recursively up this tree.","width":320},{"text":"Until the two is actually where it belongs. So the heap property is satisfied in all parts of the tree.","width":384},{"text":"Furthermore you can notice that this entire subtree doesn't matter at all in our discussion.","width":640},{"text":"Its heap property doesn't change. It's not going to be modified in this heap operation at all.","width":384},{"text":"The only subtree that's going to be partially changed, or the only part of the tree that is going to be possibly changed is like this half of it.","width":384},{"text":"So you can see that this is going to be substantially faster than linear time because it has nothing to do with half of the elements in the tree.","width":64}]