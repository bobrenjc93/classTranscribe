[{"text":"These things need steady practice which we're not getting. Te labs are not specifically tailored to this. The mps are going to start happening and then there will be.","width":2130.6666666269302},{"text":"The way the labs are set up, there going to kind of trail the lectures a little bit. You have to have seen it in lecture and then had time to digest it before I throw it at you in a lab. The labs aren't going to be like the day I cover something you're going to go to lab and do that. I'm going to cover something and then a couple days later you're going to do it in the lab. The first lab this week is going to be talking about memory, so you're going to be doing heap allocation and stack stuff so pointers to stuff. It's more kind of memory stuff which is sort of more last week. It's going to have a little bit of a lag time, so I get that there's not a whole lot of practice for this yet but it's coming so don't worry.","width":2815.6666666269302},{"text":"Yes the mps will be painful. The mps are asking a lot out of you and it's very very quick because it is the summer semester. Yeah the mps are going to be tough. That's why I have the calender packed as full of office hours and much as I possible can.","width":1407.6666666269302},{"text":"If you leverage your resources, you should be okay. If you decide I don't need any help and I've got everything myself and I'm not going to ask any questions and I'm not going to have a partner and I'm going to everything myself the hard way because I'm a badass. That's going to end poorly.","width":1215.6666666269302},{"text":"Don't try and be a hero.","width":253.66666662693024},{"text":"Let's go ahead and jump in. I want to start where we left off last time for two reasons. One, we were going really fast at the end there so I want to make sure that actually sunk in, and, two, I had a bug so I want to fix that too. I didn't read my header file carefully enough because we were going really really fast. ","width":1919.6666666269302},{"text":"Let's sort of reset and rethink about this book class again. Before we even do this one, I'm going to talk about what all of that should even tell me. I'm going to look at the private section of this header file because we are implementing the book class today so we care about how it's actually implemented. We do want to look at this stuff. Let's look at this. Let's look at the comments. Let's figure out what does this object look like. If I have an initialized object of class book, what should it look like?","width":2002.6666666269302},{"text":"Let's look at std::string** lines and then the comment tells me hat lines[i][j] gives me the jth line in the ith chapter. What does that kind of tell me about the structure of that lines? Remember that string** lines could be like four different thing but reading that comment should tell me what that thing actually is.","width":1663.6666666269302},{"text":"It's a two-dimensional structure like a grid kind of thing. Lines[i] is going to give me an array of strings and then I can go to j and that tells me what the jth line is in the ith chapter.","width":831.6666666269302},{"text":"When I'm saying a chapter, I mean an array of strings. A line is just going to be a string. If I want chapter 5, I'd go to lines[4]. If I wanted the first line of that chapter, I'd say lines[4][0].","width":1599.6666666269302},{"text":"Pictorially, let's draw what this kind of looks like. I've got an object. Let's call it b. B is going to be a book object so it's going to have a bunch of fields in it. The first one here is going to be our lines which is going to be a two-dimensional array structure. This is going to point at the start of a block of memory which is going to have some elements in it. What is the type of a cell in that array?","width":3391.6666666269302},{"text":"String*, a string pointer. The first thing that lines is an array of pointers to strings. Inside of that array, I'm treating that pointer as an array, so that pointer points at the start of a block of memory again that has a certain length. The picture is going to look something like this where each one of these if a pointer. Then it's going to point at the start of a block of you know. You don't have to care about how the string is implemented here. This is part of object oriented programming. You place your trust in the writer of the class you're using. You no longer have to care about exactly how it's implemented. It's not C where you have to think okay it's a const char* and it's got an end with a null terminator and I've got to be careful and not call strlen on something that's not got a null terminator.","width":3528.6666666269302},{"text":"Don't worry about how the string is implemented just believe that the string works. Then you just have to worry about the stuff you're in charge of. The string class will handle that automatically by virtue of having properly defined constructors, copy constructors, assignment operators, destructors, etc. That's why we implement those things. So other people can use our classes inside of their classes and not have to worry about stuff like this. Just believe that the string class is properly implemented and you don't have to worry about how it works. I'm not going to bother drawing in what the diagram for the string looks like.","width":2121.6666666269302},{"text":"This is an array of a bunch of strings. This is going to be an array of a bunch of strings.","width":1143.6666666269302},{"text":"I can have it be null. There's not reason it couldn't be null.","width":667.6666666269302},{"text":"Nothing about treating a pointer as though it were an array would prevent me from setting it to null. Nothing special about that last slot either. It's not like I'm saying the end of the array is when you hit a null. It could be a null here.","width":1123.6666666269302}]