[{"text":"So you're the answer gets a little complicated because it turns out when you have a template function and you say t ref ref a that has different there are reference collapsing rules and weird stuff can happen cuz the observation is that t could itself be a reference type.  And then you have something like t ref ref ref it has to collapse that down to a t ref so it weird and you don't have to care about.  The answer is you could pass the min as ref ref here because of the reference collapsing rules.  But it is equililant to passing by reference here because the goal is like we're not really saying that a and b are temporary values. We are saying, a and b are going to continue to live outside this function so its not like saying a and b are r values.  We're trying to say that a and b are just values. and then we are suing the move semantics to get something more efficient than doing a deep copy and doing all these copy assignments ","width":4288},{"text":"There is no cloning or copying going on here at all.  So a and b are just going to refer to existing t objects somewhere else.  a and b are just going to be l values those objects needs to exist beforehand.  The move stuff is just so that I can take the memory instead of.  The way this one works right, is I've a and I've got b so I clone a into something over here so now I have two copies of a and now I take b and clone it into a then I take that temporary value and clone it into b.  So Im doing all these copies and I've got duplicate copies of a floating around at one time and then duplicate copies of b floating around at one time, its kind of wasteful.  What the second one is saying is instead of doing a deep copy of a to hold it over there so that I can remember it's value.  It's like I've got a box here and I've got a box here that got a stuff in it and I've got a box here that's got b stuff in it.  The old way was create a new box and fill it up with duplicates and fill it with duplicate of all these things that were in a and put it over there and then take all of the things that were in b and duplicate them and throw out all the stuff that was in a and put all of those copies of b into a.  Then do the same thing and take that temporary box that I have and clone all of the things inside of it and put those in b  and throw out all the stuff that was in b.  And then destroy this extra box which is sort of weird, that's not how you would move stuff between boxes.  The you would move it between box 1 and box 2 get a temporary box, pick up the stuff that was in a and throw it in the temporary box and a now has nothing it in it.  Take the stuff that was in b and move it over to a, b is now empty.  Take the stuff in the temporary box and move to b and now the temporary box is empty.  and I've not made any, there was no copying done at all.  That the intuition to have here.  So its moving contents around, there no in this version","width":8512},{"text":"If a move construction exists there are no copies made at all.","width":512},{"text":"What does this look like, lets say for simplicity I've got t as being I don't know a class that's got one member variable that's point to a dynamic array of integers. OK so","width":1408},{"text":"Just a dynamic array, the raw type not the thing you're writing in the mp right so like an actually heap allocated array of integers","width":640},{"text":"So I've got maybe here.  a which is a class but inside that class I've got a pointer to you an array.  1 2 9 7 5","width":1024},{"text":"b a ","width":640},{"text":"","width":320},{"text":"And now i want to say swap a b","width":448},{"text":"","width":192},{"text":"a and be are whatever type they are so this instantiates the swap function with that particular type which then compiles that code with t filled and now I have a swap function with a type and now I invoke it.  So I'm going to get a new stack frame for this swap function.  I have a being another name for that a down here","width":1920},{"text":"right its just a reference not actually a point.  So when I say a I mean the a in main not something else.","width":512},{"text":"b its a reference to that b so when I say b inside of swap it means b inside of main","width":768},{"text":"I could be clearer and call this x and y  and say i'm going to swap x y","width":576},{"text":"","width":128},{"text":"","width":64},{"text":"","width":384},{"text":"a and swap I mean when I say b in swap I mean y because of how references work.","width":576}]