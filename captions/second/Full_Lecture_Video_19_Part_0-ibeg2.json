[{"text":"Wonderful. That is my favorite thing.Umm..lets see if can fix that. I think easiest way to fix that is to go to doc cam.","width":9984},{"text":"Okay! fine","width":192},{"text":"then we'll do this","width":192},{"text":"Okay! now we are no longer cutting off.","width":2432},{"text":"Okay!","width":128},{"text":"Okay! Lets go ahead and get started. so the big announcement for today is that I am a liar and I forgot which room we are actually in for the exam.","width":768},{"text":"We are in DCL 1320 and 0216.So if you know friends that are skipping lecture on the day of the exam because I don't know they hate themselves","width":704},{"text":"Ummm make sure that they are aware that the exam is actually in 1320 and 0216. So anybody who is 1404 you are now in 1320. Okay?","width":704},{"text":"Fortunately the room is the same capacity so it doesn't really matter but be aware where the room actually is . Right.","width":768},{"text":"Umm other than that pretty much the same announcements as last time. There is not much that has changed here.","width":256},{"text":"Okay","width":128},{"text":"Lets just jump right in","width":256},{"text":"So last time we were talking about a particalar kind of binary tree that we are calling binary search trees","width":512},{"text":"So what is a binary search tree?","width":320},{"text":"Yeah","width":192},{"text":"Yeah! So its a binary tree but we are now saying something about the relative ordering of all the elements. ","width":1152},{"text":"So one way of saying , one way of codifying a binary search tree is to say that an in order traversal of all of its elements","width":512},{"text":"would result in a increasing sequence. Right? If I were to do an in order traversal i get the elements in sorted order.","width":512},{"text":"Another way of saying that is if you look locally at every subroot in the tree, every node that occurs to its left is smaller than it","width":704},{"text":"and every node that occurs to its right is larger than it.","width":320},{"text":"Right? So this is the ordering property. So binary search trees are ordered binary trees.","width":384},{"text":"Okay","width":64},{"text":"So it's an ordered binary tree and what abstract data type were we implementing with binary search trees?","width":1216},{"text":"What ADT did we talk about yesterday?","width":448},{"text":"Dictionary","width":256},{"text":"Right. So binary search trees implemented dictionary.","width":640},{"text":"And for this there are basically three major important operations. What's one of them?","width":640},{"text":"Add. wanna add something. What am I adding to a dictionary? A key a value pair.","width":384},{"text":"So I am gonna do something like insert","width":192},{"text":"a key and a value. okay. What else can I do with these?","width":640},{"text":"I can remove. So what do I remove here? I remove the pair and I locate the pair by using the key. Right> So the structures associated, another way of saying what a dictionary is it's an associative array.","width":1088},{"text":"Instead of using indices to access end of the array, you use keys and that access into the associative array. Okay.","width":640},{"text":"So that's another way of saying what these are. So when i am looking for something or when i am trying to remove something, I am looking for or removing","width":512},{"text":"via a key so i am looking for  a value associated with some particular key or i am looking for the node or these the element that contains that key so i can remove it. So when i am removing","width":704},{"text":"I take a key to remove and likewise when i find or at whatever locate, i take a key.","width":1024}]