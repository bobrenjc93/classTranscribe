[{"text":"","width":10098},{"text":"OK, let's get started. So the very first thing I wanna point out and I'll likely replace this video because of this.Â There is a bug in the video... Right at this point, we are trying to build the heap by calling heapify down starting from the back of the array.","width":576},{"text":"I did not finished the heapify down for the twelve. Heapify down for the twelve will continue running because it is also greater than four so it should swap with the four.","width":576},{"text":"So the subtree you should have on the left, the very far left, should be four.","width":320},{"text":"...As the root. Twenty-five is the left child and twelve is the right child.","width":256},{"text":"This is pointed out to me in the prelecture. It went out an entire year without anybody noticing it.","width":320},{"text":"So could those you guys for multiple people noticing the bug. So I will replace this at some point. Ah...","width":448},{"text":"With basically effectively exact the same content just to be not screwing up the actual heapify down.","width":384},{"text":"Am... fortuna","width":192},{"text":"Am... fortunately, it is only five minutes so I should be able to do that.","width":64},{"text":"But yes, this is, this is acutally an important point. It is actually nice that they screwed up here. You have to recognize that when you are actually doing the second build heap algorithm, ","width":704},{"text":"Oh, sorry, the third build heap algorithm. When you heapify down everything. That heapify down is in fact recursive.","width":448},{"text":"So it is not that I am just going to move down one level, I do have to move it all the way down to the tree potentially.","width":320},{"text":"All right. Which is why we are doing the recurrence, we care about the heights of all of the subtrees.","width":320},{"text":"Like the full height, 'cause it would go down the whole way.","width":192},{"text":"Here I screwed up by didn't go down the whole way, but it could have.","width":256},{"text":"And in this case, it should have. The twelve should continue to move down with the four.","width":320},{"text":"So just wanna do address that bug first. Ah.....","width":384},{"text":"As far as announcement go, just be aware that exam 2 is wednesday this week 7-9. I am working on the room and I will announce it tomorrow.","width":640},{"text":"Am... If you need special accommodation for the exam, i.e., extra time, you need to contact me immediately.","width":512},{"text":"Ah... so we can arrange that.","width":128},{"text":"Ah, MP parse point 3 is going to be due tonight at 11, as per usual. That extra extra credit point that I am offering, that is adding variables to the expression parser...","width":832},{"text":"Right, so you can say x equals... you know, two. y is 2 times x. x times y... stuff like that.","width":512},{"text":"And have those be valid expression, and do we you expect them to do with variables.","width":192},{"text":"OK, if you can write something like that, and you can show me on Friday at my DYB, I am willing to give you an extra point of extra credit.","width":512},{"text":"Because again this sort of a baby step to writing you own interpretive programming language.","width":384},{"text":"So this is really neat stuff. And so if you done this MP completely, and you are curious what the actual work could be to start to actually write a programming language this kind of style,","width":768},{"text":"You can play around with that by adding variables to the, to the parser...","width":192},{"text":"OK, Tuesday's lab, since we are having an exam this week, Tuesday's lab will again be review session, so please come to lab to prepare ask questions.","width":640},{"text":"about you know contents that might show up on the exam or stuff you are confused about... ah...","width":320},{"text":"from lectures. Right, the exam will cover through today the end of today's lecture.","width":384},{"text":"OK, so we are sort of ending our conversation on heap, so heap will be on this exam.","width":320},{"text":"Am... if I end up getting... So like... Uh... On Tuesday I might do a couple more practice problems with heaps.","width":512},{"text":"Just to keep your you know brains fresh. As soon as we move along to talk to the next ADT. ","width":384},{"text":"That is not on the exam.","width":192},{"text":"OK, the exam coverage will end with the, the priority ADT with the heap implementation being the last implementation we talk about.","width":448},{"text":"Right, OK, so prelecture. Am...","width":256},{"text":"We have to the heapify running time on the exam, as in, I... do you mean, do you mean heapify? or do you mean... build heap?","width":1088},{"text":"Am... the answer is yes, either way. I will not expect you to memorize that crazy closed-form summation that appears in the build heap proof.","width":448},{"text":"OK. What you should be capable of doing for the build heap prove is what we will do in lecture.","width":320},{"text":"Which is here is a closed-form prove that closed-form is correct. OK, Don't expect you to memorize the sum that was i two to the i or somthing.","width":576},{"text":"OK, don't, I don't care about that. I care about you ability to do the inductive proof that shows that closed form is the right running time for worst case of build heap.","width":768},{"text":"Am... I will do a short, a very short prove today on why the heapify running times are log n.","width":576},{"text":"And you should be capable of doing that.","width":192}]