[{"text":"Good morning class","width":318},{"text":" How are you? Good Morning","width":188},{"text":" How are you? Great, Isn't the weather wonderful?","width":206},{"text":"So here we are only a week back from the Spring Break","width":145},{"text":" Let's kick back and relax","width":70},{"text":" As you know","width":60},{"text":" Uh","width":152},{"text":" Come on","width":243},{"text":" Okay, alright so","width":379},{"text":" We are going to look at two important things","width":129},{"text":" First is pipes","width":93},{"text":"The second is working with file descriptors and moving around in files","width":413},{"text":"Okay","width":63},{"text":" So, the  other important thing to note is that there is a quiz on Friday","width":259},{"text":" No, just kidding","width":93},{"text":" It's Wednesday","width":191},{"text":" Okay, so the quiz on Wednesday we'll talk about in the second half of the lecture","width":208},{"text":" So let's get started with pipes","width":186},{"text":" Pipes are a form of IPC","width":256},{"text":" Interprocess communication","width":113},{"text":" It's an easy way to go to send data from one process to another process, especially when you want to talk about child and parent processes","width":655},{"text":" And the great thing about is that the data that you sent stay in memory","width":408},{"text":" So, yes we could have opened a file and write to communicate with different process","width":330},{"text":" But we can use pipes very efficiently when we have processes in memory, so the kernel system can manage this as a stream","width":668},{"text":" Now why do we call it a pipe","width":78},{"text":" Because it behaves like a pipe","width":94},{"text":" We can use one file descriptor to push data down one end and another process can say \"Okay, I'm ready to read data","width":463},{"text":" Let me start pulling data out","width":206},{"text":"And it behaves exactly the same way as reading and writing to a file","width":450},{"text":" So this is a fundamental concept in Linux and other operating systems is let's have something called a file descriptor which can actually be more than a simple file descriptor","width":663},{"text":" We're going to see this again later in the course when we talk about socket and when we talk about networks","width":266},{"text":" Guess what I'm going to set up a communication to another machine somewhere on the intweb and I want to send some data to it or pull some data from it, and it just like reading from a file","width":801},{"text":"Well","width":22},{"text":" Kind of","width":38},{"text":" Of course there is little bit more details but that is the basic idea","width":176},{"text":" I have an integer that represents the communication pipe and I want to be able to send and receive data","width":411},{"text":" Now, first thing to note about pipes is that actually you get two file descriptors for the price of one","width":388},{"text":" We're gonna use the first one for reading and the second one for writing","width":308},{"text":" Okay, so we have two file descriptors","width":145},{"text":"So they are specialized","width":49},{"text":" So a pipe actually is a one way device","width":318},{"text":" We could use it to send data to ourselves","width":314},{"text":" It would be pretty silly, but we could use it","width":103},{"text":" There is a danger to that though, which is that the pipes like a ring buffer have a limited capacity","width":387},{"text":" If you try to send too much data on the pipe, your write call will block until somebody actually pulls data","width":574},{"text":" So if you use single threaded process that's bad news, because now there is another thread available to actually do the read","width":534},{"text":" So let's actually start by actually looking at some code here","width":380},{"text":" Okay, right","width":113},{"text":" Let's pull up the screen","width":182},{"text":" Do we have a picture","width":786},{"text":"Okay","width":143},{"text":" Ah","width":158},{"text":" Step 1, plug it in","width":944},{"text":" Hurray","width":35},{"text":" Okay","width":40},{"text":" Right","width":364},{"text":" So here is our device now","width":174},{"text":" other comments on this that there is more to read about pipes and you can read more in my little wiki book","width":694},{"text":" Here we go","width":25},{"text":" For example, files and working with pipes","width":229},{"text":" And so there is more to read about this","width":450},{"text":" So, how do we make a pipe","width":430},{"text":" Okay, so the trick is first of all just make an integer array of size 2","width":417},{"text":" Here it is","width":26},{"text":" I'm going to call it my file descriptors","width":166},{"text":" Here we go","width":169},{"text":" And so we are going to pass a pointer to my array","width":204},{"text":" How do I do that? Easy, just use the name of the array to this function called \"pipe\" ","width":630},{"text":"Okay","width":81},{"text":" So that makes an object inside the kernel that represents the communications","width":275},{"text":" I can now use between different processes","width":116},{"text":"So for example let's now just have a look at those numbers so we got the two file descriptors fds 0 and fds 1","width":974},{"text":"So we made ourselves a pipe","width":112},{"text":" Now this being an in memory thing","width":191},{"text":" Here we go, it used file descriptors three and four","width":331},{"text":" That shouldn't be too much surprise because I already know that 0, 1, and 2 are being used, right? 0 for standard in, 1 for standard out, and 2 for standard error","width":438},{"text":" Alright, so we got ourselves a pipe which then just died because process died","width":380},{"text":" So we want to do a bit more than this","width":105},{"text":" We want to set it up so that we can send the message from our parent to a child","width":354},{"text":" Okay, so let's make a parent and child","width":161},{"text":" How do I do that? It's time to fork","width":233},{"text":" So here is our fork result, and if I get a number bigger than 0, then that mean I'm actually the what? The parent or the child?","width":895},{"text":"I'm parent! Alright","width":172},{"text":" I have a child f so I am the parent","width":676},{"text":" Okay, so we are going to send something from the parent to child","width":234},{"text":" So let's send something down to the file descriptor","width":186},{"text":" Right, now the first file descriptor is used for reading and the second one is used for writing","width":308},{"text":" We should send something to fds 1","width":236},{"text":" Right, what should we send? So how does the write work? So remember, it's just takes a pointer to some memory, and if we pass in a string like Hello, what do we get there? Well you get a pointer to where this string constant Hello's","width":922},{"text":"So we have the address of the H and we can send that","width":134},{"text":"And we can send that right","width":146},{"text":" Later I send a new line as well","width":158},{"text":" So how many characters","width":49},{"text":" How many bytes is that to send down? That's one, two, three, four, five, six, right","width":237},{"text":" So we will send six bytes to that file descriptor, Now we could have send it to the standard out, and we would have seen it appear on the output, right? But we are not doing that","width":501},{"text":" We're going to push these six bytes down the pipe","width":218},{"text":" And we stand a good chance of not blocking","width":131},{"text":" Most operating systems allow you to send at least 4 kilobytes of data","width":383},{"text":"Others actually some allows you up to 128 kilobytes I've seen in the past, so we know this is not gonna block but what should we do now? let's just prove that we've done something we want to print out","width":916},{"text":" Okay, so parent sent some bytes","width":550},{"text":" Okay, and we'll  just finish","width":274}]