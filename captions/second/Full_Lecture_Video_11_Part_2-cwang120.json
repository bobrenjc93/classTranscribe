[{"text":"Okay let's actually talk about print, the print function you wrote. ","width":10560},{"text":"And I'll start with why can you write a recursive print function, why is it even a reasonable thing to ask you. ","width":640},{"text":"Why are we able to do a recursive printing here. ","width":384},{"text":"There","width":512},{"text":"So what is true about the list structure that we have","width":128},{"text":"and what does that mean about the next pointer of a single node","width":512},{"text":"what is true about that.","width":128},{"text":"It points at what.","width":192},{"text":"The next node in the list","width":192},{"text":"But conceptually, that next node is the head of other list. ","width":320},{"text":"This is a recursive structure. The list class itself has a pointer to head, and so that's a list. ","width":576},{"text":"But then that head node if we have more than one node in the list, has a next pointer, that point to the head of a list. ","width":448},{"text":"The structure is recursive, so you had, if you draw a picture of list, that looks like this. ","width":512},{"text":"that's our list.","width":1024},{"text":"This, is a list, but this, is also a list. And so is this. ","width":704},{"text":"Technically so is that.","width":192},{"text":"So, this list structure is just recursive, the head followed by the rest, there is a head and there is a rest. ","width":704},{"text":"And head might be null. ","width":64},{"text":"So this list structure is recursive, and so that means, that we can write recursive functions on these list. ","width":448},{"text":"Reasonably. Because we can talk about what is the head of the current, of the smaller list.","width":512},{"text":"that we are dealing with. ","width":64},{"text":"Do something with that. And then we can recurse on the rest. ","width":256},{"text":"Because the rest is another list, I can deal with a list of N+1 elements, by doing something with plus 1 and then say well I know how to print a list with size N.","width":640},{"text":"Which I can do by print one of the elements, so I know how to print a list of N-1,etc ","width":256},{"text":"So, whenever I'm writing a recursive function, what two things do I need, what's the first thing I need. ","width":576},{"text":"Base case. What's the base case for printing this list. ","width":192},{"text":"What is the conceptually, even before you write any code, what is the smallest list I could possibly print. Empty list, nothing in it. ","width":768},{"text":"Right, so let's write the code for printing an empty list, so, how do I know if a list is empty?","width":448},{"text":"The list with head pointer, with the head that is current, so curr is pointing at current list. So how do I know that is empty?","width":512},{"text":"So I can say, if not curr, that is if curr is null, what can I do. ","width":704},{"text":"Just return, stop.","width":256},{"text":"If current is not pointing at real memory, pointing at null, don't do anything, the list is empty, there is nothing to print. ","width":960},{"text":"Otherwise, now we'd handle the base case, what is the recursive case, so now I know, undefined","width":576},{"text":"so now I know, we have to believe in the recursion fairy. ","width":128},{"text":"The recursion fairy is telling you that I have a print function that capable of print a sublist  rooted at given node.","width":448},{"text":"And you're to print a list that is given to you by taking adventage of the fact that you have a function that can print list. ","width":512},{"text":"But you can only print list that is smaller than your current list. So how can we do that. ","width":448}]