[{"text":"How do I check if a node has no children?","width":262},{"text":"If the right and the left are both null, so in other words if I say !subroot->left and !subroot->right,","width":1179},{"text":"if I don't have a left child and I don't have a right child, then I know it must be a no child remove so I can just call my no child remove function","width":1216},{"text":"You can just use the unique pointers directly, Unique pointers themselves have the same bool-ish property that normal pointers do","width":1351},{"text":"you could say .get(), it wouldn't be wrong if you said it, it would be the same thing","width":343},{"text":"okay so after I do a no child remove, how do I check if it's a one child remove","width":320},{"text":"Oh, If I have one of those, if one of them is non-null and one of them is, I'm going to cheat because that statement is nasty and use the easier case, which is if both of them are non-null, then do a two child and if they're not both null and not both non-null, then one of them is non null and I can just call the one child","width":1920},{"text":"so the issue is if I say if I said something like subroot->left or subroot->right, that would be right when they're both non-null and I need to special case that","width":896},{"text":"so here I'm going to do the two first because it's just an easier statement to write","width":832},{"text":"if subroot->left and","width":486},{"text":"if I have a left child and a right child, then I know it must be a two child remove","width":704},{"text":"and otherwise it must be a one","width":704},{"text":"so, the first statement is, if I fall out of the first statement I know that","width":1728},{"text":"at least one of them is non-null","width":256},{"text":"but both of them could be non-null","width":145},{"text":"so If I just do subroot->left or subroot->right, that's going to be true for the case where they're both non-null","width":512},{"text":"not subroot->left or not subroot->right, yeah that would work.","width":768},{"text":"that's just demorgan's, or is that demorgan's? the boolean logic where you negate it, yeah it's the same thing","width":686},{"text":"this is easier for me to think about.","width":128},{"text":"you can write it anyway you want, right? you just have to diagnose which one of these to call","width":384},{"text":"for me it's easier to think they're both null, it's no child, if they're both there it's two child, otherwise one of them is non null","width":631},{"text":"okay so next time we will start to actually write the helper functions themselves","width":473}]