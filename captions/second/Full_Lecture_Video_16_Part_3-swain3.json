[{"text":"so you would have in the if statement, print it out and then returned, and outside if statement you would also print it out and then recurse","width":512},{"text":"here it simplyfies the writing of the function little bit because i only have 2 cases, either i dont do anythin at all or it","width":512},{"text":"recurse","width":64},{"text":"could do it either way, just what ur base case is different, i like smallest thing, nothing to do withbase case","width":1024},{"text":", okay so, if not subroot, that is if for an empty tree, we have no hope for printing the data","width":256},{"text":"because its null, out pointer is null ,so we dereference the null to look at the data","width":256},{"text":"we have no choice but to just return","width":256},{"text":"if we dont return, that means that we've got a non null pointer for subroot ","width":576},{"text":"","width":192},{"text":"well we want ot make sure this functor is applied to every single data element in the tree, i could use resursion. lets do that ","width":1024},{"text":"where would i recurse first","width":64},{"text":"maybe the left, this woud look like, treverse, subroot left.","width":1344},{"text":"because left is unique pointer so we have to call dot get to get the raw pointere, so subroot left  dot get ","width":576},{"text":"and we have to pass down the functor so i can travers down to left, ","width":512},{"text":"","width":128},{"text":"need to go on the right side as well","width":320},{"text":"","width":576},{"text":"","width":192},{"text":"which is just substitute left for right","width":256},{"text":"have i called functor on anything yet","width":64},{"text":"no i need to make sure i call call funtor, how do i ensure i call my functor on this node's data","width":576},{"text":"","width":832},{"text":"","width":256},{"text":"so this going to traverse my tree and invoke tis funtor in every data element recursively, now hat order am i going","width":768},{"text":"to involke this functor on","width":64},{"text":"","width":128},{"text":"so its like when o i do the work, lets say the fn of subroot data is when i do my work ,thats when i print","width":832},{"text":"whats the first this i print","width":256},{"text":"given the tree here","width":192},{"text":"","width":64},{"text":"well im gonna involke the the root ","width":320},{"text":"but the first thing i don on the root node isn't print its recurse, so im gonna resurse to left first which means im goint to recurse left here, ill  recurse to left on d and return and come back up the recurse to the right then return.","width":1472},{"text":"now i print out the d","width":64},{"text":"then i would return now im back up at the c","width":448},{"text":"i ve gone left","width":128},{"text":"so i go right now  so i go to the e ","width":256},{"text":"againg its not printing when i get there, its resursing, so i recurse left","width":256},{"text":"d was first ant the e i recurse left i go to the f, at the f its null so recuse left return","width":704},{"text":"so then f is the 2nd thing printed, i go back to e, ive gone left, now i go right, so nowi go to the g","width":640},{"text":"i go left null, return, go right null return, now i print out the g's so gi is third","width":512},{"text":"u can continue this process, to see how this tree is printed","width":576},{"text":"","width":64},{"text":"","width":64},{"text":"","width":64},{"text":"it could be whatever, im just saying for a working example pretend that its printing, yes it can only look at it","width":768},{"text":", yes","width":128},{"text":"","width":320},{"text":"so if you pass in a functor that tried to take in non const reference to a tree, it would compile","width":576},{"text":"the argument to fn here is a const const t","width":512},{"text":" it can be converted to a t reference or a t, but not a t ref, because t ref would be mutable","width":320},{"text":"","width":192},{"text":"","width":128},{"text":"is this only way i can write taversal, no ","width":320},{"text":"there is 3 different ways","width":256},{"text":" they all differ in where i do my work, so as written when i do my work after recursing we call this a post order taversal","width":640},{"text":"becasue i've done the work post order the traversal","width":320},{"text":"i did travering first and only whena node has finished with all its children does that node do finally its work","width":576},{"text":"so another way of thinking about what the order that tree was printed in is that every node is","width":384},{"text":" being printed only when its entire left subtree and its entire right subtree have been completely printed","width":384},{"text":"so this is post order","width":256},{"text":"if insted i put it here , so we traverse left, do my work, then traverse right, this would be an in order traversal","width":512},{"text":"","width":512},{"text":"right because now nodes are printed after their left subrrot have [rinted","width":448},{"text":"then node prints then right subtree.","width":256},{"text":"so it follows the way the tree is ordered, so this is an inorder traversal","width":128},{"text":"finally i put it here, pre order ","width":576},{"text":"im printing beforei do the traversing, so this is preorder","width":448},{"text":"it would look like function of subroot data, traverse left , traverse right, so i do the work immediately whne i hit the node then i trasvese left the i traverse right.","width":832},{"text":"all that by just shifting a couple line around","width":384}]