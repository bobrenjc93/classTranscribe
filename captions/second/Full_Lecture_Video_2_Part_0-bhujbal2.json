[{"text":"okay so despite all odds it looks like we'll actually be able to start on time today,","width":901},{"text":"despite multiple printers conspiring against me to make sure we don't start on time. ","width":396},{"text":"okay so quick pop quiz to uh check if you retained all of last lecture. What is the name and major of the person sitting next to you","width":534},{"text":"just kidding","width":87},{"text":"uhm so the important parts of that were sort of at the end of that lecture so we're gonna go revisit uhm the makefiles in particular ","width":427},{"text":"and do a little bit of a sample excersize to make sure that sunk in","width":241},{"text":"but first i did i fix my script to now i actually have the prelecture responses from prelecture 1 and prelecture 2","width":567},{"text":"so i'm just gonna quickly go over some of those","width":356},{"text":"where can we learn more about using make","width":130},{"text":"so we'll talk more about make a little bit today if you're still thirsting for knowledge about make after today's lecture","width":532},{"text":"if you go on the course website and click on the resouces tab there should be a link to a makefile tutorial","width":465},{"text":"which is pretty good and i know there are many different online resources for learning make","width":330},{"text":"but there's also a video i made years ago that is halfway decent that you can see that focuses purely on make","width":510},{"text":"and there's also a video by another person on course staff i think will satchel","width":253},{"text":"that gives you a little bit more intuition about what rules and dependencies are","width":1081},{"text":"are we're going to apply object oriented programming principles on every assignment throughout the course? pretty much","width":365},{"text":"that doesn't mean we'll be using every feature of object oriented programming ","width":194},{"text":"but typically we're going to wrap up our data strucutres into some kind of object which sort of means we're using object oriented programming","width":611},{"text":"will there be an A+ for the class, A+ is my discretion","width":339},{"text":"like i said first lecture","width":479},{"text":"how prevelent are the concepts from CS 173 for the class is there anything especially you should know? treat hw0 as a diagnositic","width":409},{"text":"tool for that. hw0 should be not overly difficult it should be just a matter of dusting off your discrete math knowledge maybe pulling out your textbook and refreshing your brain not incredibly difficult","width":870},{"text":"it shouldn't be incredibly difficuly. the most important things from 173 that i can think of...","width":431},{"text":"if i can pick one single topic from 173 that you should be super comfortable with that we're going to use for algorithm analysis in the entire class that would be induction","width":660},{"text":"so you should be able to prove, do proof by induction, be able to prove things using an induction to kind of understand what is the base case whats a recursive step what the inductive hypothesis, that sort of thing. That's kind of the most important thing, and then just general sort of feeling comfortable with sums and log properties that stuff will be helpful too","width":1731},{"text":"Do you have to use terminal for C++? No, so if you've heard of xcode, you can write c++ in xcode, and that's a nice editor that's for os 10, if you've heard of microsoft visual studio","width":969},{"text":"that's another IDE for C++ that doesn't use the terminal at all, so you can definitely write c++ without being on linux terminal","width":677},{"text":"in this course we will do everything in the linux terminal however just because it's easier to have a single enviroment for everything and teach you using one set of tools","width":674},{"text":"that being said you should have some success running the assignments on a os 10 computer if you have xcode and the command line windows users your best bet is to use the remote ews machines so ssh in using putty or using fastx so if you go on the engineering IT website you should be able to find ","width":1560},{"text":"pointers for those ","width":259},{"text":"i think there should be links on the resources page, but since the cites wiki... ","width":508},{"text":"trying to do that today","width":423},{"text":"this is an interesting questions","width":177},{"text":"so this is a question about auto so figuring out so remember auto is that keyword that you used if you don't want to figure out your type and you want C++ to figure out what the type of the right hand side of the expression is","width":651},{"text":"and so somebody asked a question like what if i have and int m int n and auto x = n/m?","width":458},{"text":"so i'm dividing two integers, does c++ know to make that auto variable a double?","width":425},{"text":"no unfortunately not in general if you're dividing two integers you're always going to get back an integer.","width":384},{"text":"so if you wanted to make sure you were getting a double you would have to explicity cast one of the integer arguments into a double or assign it into a temporary double and use that as part of the calculation. ","width":640},{"text":"that's a good question because maybe that's non obvious what happens if youre dividing two integers and you use auto","width":576},{"text":"it's actually true even if you said double k  = n/m where n and m are integers its still going to give you an integer value and assign an integer value into a double, it's not actually gonna give you a floating point value","width":968},{"text":"the video said that after you compile object files using -c","width":308},{"text":"so you have clang ++ std=whatever stdlib =whatever -c name of file we output object files and you said we needed to fill in the blanks","width":773},{"text":"when does the filling in the blanks happen? that's the linking step","width":193},{"text":"so compiling with dash c makes object files the object files are incomplete they are machine level instructions but they're missing some parts the linking step is what links","width":636},{"text":"everything together and sort of fills in okay, i actually know where that lives now it's over at this part of the binary it's over there so it ties everything back together so you actually have a full complete program","width":726},{"text":"so the linking step is that so you may have a compiler error when making an object file or you may have one while linking","width":604},{"text":"there's compiler errors when you're making the actual machine code for functions or for a class when we get to classes or linking errors when it can't fill in the gaps","width":807},{"text":"so like maybe you declared a function and then never defined it, so then it would be a linking error because it knows that you've promised me there is going to be this function with this signiture somewhere and then failed to tell me where ","width":943},{"text":"so that would be a linking error","width":127},{"text":"so even within compilation there's kinda two steps there's this generating the code and then there's this linking","width":781},{"text":"somebody asked a question about if there's any information missing over summer compared over the regular semester, a little tiny amount i've tried to keep as much as i possibly can in for better or for worse, because it does have to be the same class, but we don't touch on btrees so","width":1177},{"text":"so i guess about btrees you can look those up, at that point we don't have time to delve into that","width":373},{"text":"the regular course i don't think does at least the regular course as of a year or two ago still didn't do them justice anyway so it's not really that big of a loss i don't think","width":384}]