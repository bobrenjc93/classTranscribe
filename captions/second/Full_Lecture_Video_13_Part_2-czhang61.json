[{"text":"Copy down all the elements.","width":751},{"text":"And I get my insert of seven and my insert of eight for free.","width":239},{"text":"So now the question is does this change anything in our analysis. ","width":263},{"text":"So, let's be formal.","width":128},{"text":"So we're going to start off with trying to come up with our closed form for C of N, which is the number of copies made to do n insertions. ","width":529},{"text":"So, c of n..","width":418},{"text":"One way of looking at this, so we could try and do the same thing we did last time, and argue how many times each individual cell is copied. ","width":384},{"text":"An easier way for me to think about this is to look at how many copies are being made at each array size.","width":410},{"text":"So, if I say that the number of resizes that I'm going to do is something... Some variable h which we'll solve for later.","width":626},{"text":"I have h of these things, where h is one at the first array, h is two at the second array, so it's like the number of arrays that I've gone through. ","width":419},{"text":"I can look at how many copies I'm doing at each one of these array sizes. ","width":318},{"text":"So, how many copies do I do at h equals 1?","width":553},{"text":"Just for that, not worrying about when I go to the next size, but just for that array, how many copies do I do?","width":563},{"text":"Two, I have to put it in the array, that's a data copy. ","width":211},{"text":"So I do two copies here, well two is the same thing as d, I started off with this array of size d.","width":346},{"text":"So I do d copies at the first level. ","width":289},{"text":"Then I'm going to the second level, how many copies do I do at the second level?","width":305},{"text":"Two d.","width":123},{"text":"One d comes from copying down the old array, that resize after I resized the array and copied down all of the other things from the old array, that was a d.","width":604},{"text":"In terms of copies.","width":128},{"text":"And then I added d more cells to this array, so then I have d copies to fill in that array. ","width":339},{"text":"So I did, two d copies there. ","width":354},{"text":"What about the third?","width":143},{"text":"Three d.","width":64},{"text":"Two d to copy down the old array, because that old array is now of size two d, and then I have an extra d at the end of this array. ","width":403},{"text":"So that makes for three d. ","width":277},{"text":"Likewise this bottom one is going to be four d. ","width":221},{"text":"And five d, and six d.. right?","width":102},{"text":"So the number of copies at each level in this thing is going to be the next integer times d.","width":406},{"text":"So we have something that looks like, d plus two d, plus three d, plus...","width":585},{"text":"Which we can write in terms of h, as the summation from k equals 1 to h, of k d.","width":861},{"text":"At first level is one d, second level is two d, etc.","width":311},{"text":"Okay that's good and fine.","width":64},{"text":"So then we know this is the same thing as, well d is a constant it's not changing inside the summation so that's the same thing as d times summation of k equal 1 to h, of k.","width":747},{"text":"Which we know has a nice close form.","width":116},{"text":"So this is going to be d times h, h plus 1 over two.","width":480},{"text":"Which is big O of h squared.","width":208},{"text":"But that's not helpful is it?","width":98},{"text":"H isn't what we want here.","width":128},{"text":"H is the number of arrays I've made, but I want something that's in terms of n.","width":276},{"text":"The number of operations that I'm doing, or the number of elements that end up in my array.","width":336},{"text":"This technique is going to be useful, we're going to do this several times, we're going to find formulas in terms of some other variable that we then solve for n for.","width":494},{"text":"This is one particular case where I'm introducing this technique. ","width":151},{"text":"So now we have this formula in terms of h, but it's not in terms of n, and if I tell you it's a big O of h squared, and you divide by n then.......","width":512},{"text":"I don't know what that means.","width":64},{"text":"So what is h?","width":210},{"text":"Well, we know that this bottom array has how many things in it?","width":608},{"text":"N, it's the last array we got to.","width":480},{"text":"It's also at height or it's the hth array that we've made, so how many things are also in it in terms of h and d?","width":790},{"text":"H, d, right?","width":157},{"text":"The number of elements at any array in this structure is the array number starting at 1, times d.","width":598},{"text":"The very first array was just d, second array was two d, third array is three d.","width":256},{"text":"So this is n, is the same thing as h d. ","width":448},{"text":"Which then means that, n over d must be h. ","width":457},{"text":"Then if we look at this formula over here in terms of h, we have d times n over d n..... ","width":737},{"text":"Over d plus 1, divided by 2, now the d's cancel.","width":369},{"text":"But fundamentally what is that?","width":202},{"text":"Has that changed anything, that dividing by d inside the multiplication?","width":251},{"text":"Nah.","width":51},{"text":"This is still big O of n squared.","width":375},{"text":"Which then this means that our analysis hasn't changed at all, and we're still going to have order N as our amortized cost for a push back.","width":550},{"text":"Crap.","width":94},{"text":"Notice that this didn't depend on 2, this is completely independent of your constant size. ","width":353},{"text":"You could add a thousand elements every time you resize, and this analysis won't change, it's still going to have an amortized cost of big O of n for every push back.","width":583},{"text":"Doesn't matter what d is, d can be any large number that you want, and it's not enough. ","width":448},{"text":"Alright, so that means that constants aren't going to work, so what's the next level that we can try?","width":403},{"text":"Multiples, of what?","width":192},{"text":"Of the length of the current array, yeah.","width":128},{"text":"So let's double.","width":220},{"text":"So this third analysis, will be for doubling.","width":1052},{"text":"I'm going to do this analysis in two ways.","width":192},{"text":"Foreshadowing this one is going to work finally, and there's two ways you could show it can work.","width":329},{"text":"I'm going to do the way we've been doing so far, which is aggregate analysis.","width":264},{"text":"So, we're going to find c of n, and then divide c of n by n and then show that that's constant. ","width":256},{"text":"And then I'm also going to use banker's method. ","width":162},{"text":"So you can see how that works, alright?","width":192}]