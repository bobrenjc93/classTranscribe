[{"text":"Call delete on null pointer just doesn't do anything. ","width":384},{"text":"Okay.","width":64},{"text":"We could check for null and not do delete brackets but delete is fine. ","width":448},{"text":"You can delete on null pointers.It just doesn't do anything.","width":64},{"text":"Okay so..","width":64},{"text":"Check to be get not do anything but delete will do it anyway so don't do it.","width":320},{"text":"Don't bother.","width":64},{"text":"It's not wrong if I did.","width":128},{"text":"Okay.","width":64},{"text":"So now I've gotten rid of all of the chapters. How do I get...I still have the array of pointers now right?","width":384},{"text":"So I still have to get rid of that .","width":128},{"text":"How do I do that?","width":64},{"text":"Delete[ ] lines_? Good.","width":192},{"text":"That is going to say delete [ ] lines. It will get rid of this.","width":704},{"text":"Okay now we are at the part that I forgot last time,which is what?","width":320},{"text":"Delete[ ] length_.","width":128},{"text":"So I have to get rid of those length.","width":192},{"text":"Right? There are still this if I stop here I've leaked memories. So last time I accidentally leaked memory.","width":320},{"text":"So let's get rid of that, which is easy.","width":128},{"text":"It's just delete.","width":256},{"text":"Brackets ","width":192},{"text":"length_","width":128},{"text":"which is then going to get rid of this.","width":384},{"text":"Now I can look at the picture and see all of the the things that floating around the heap are gone. ","width":256},{"text":"And so I know that I am done.","width":64},{"text":"Okay?","width":64},{"text":"Any questions on that?","width":192},{"text":"Yeah in the back.","width":128},{"text":"[students are asking questions]","width":576},{"text":"Yeah so question was that delete [ ] we know that it deletes an array. ","width":320},{"text":"What if I accidentally call it on something that wasn't an array.","width":256},{"text":"like just one thing.","width":64},{"text":"Undefined behavior.","width":64},{"text":"So segmentation fault, runtime crash...  ","width":576},{"text":"So it's not defined, The standard doesn't say what actually happens.","width":192},{"text":"Probably will crash.","width":128},{"text":"[Student asking questions]","width":64},{"text":"No, the compiler does.","width":640},{"text":"It has to know at runtime.","width":192},{"text":"So it wouldn't a compiler error. It will be a runtime error.","width":256},{"text":"Yeah good question.","width":128},{"text":"Let's move on.","width":320},{"text":"Notice a trend here you coworker will be pretty useless.","width":320},{"text":"So your helpful coworker wrote a copy constructor for the book for you.","width":320},{"text":"What's wrong with it.","width":128},{"text":"So look at that.","width":192},{"text":"Think for a little bit.","width":192},{"text":"Raise your hand when you find something wrong with it.","width":512},{"text":"Bad thing. And we will fix it down here.","width":512},{"text":"[students are thinking]","width":384},{"text":"See anything wrong with it yet?","width":576},{"text":"Okay.","width":64},{"text":"Yeah.","width":64},{"text":"Right.","width":384},{"text":"So the first thing he noticed was okay the argument to this thing doesn't make sense. ","width":192},{"text":"It can't be a copy constructor unless it's taking it by reference.","width":192},{"text":"And then even when it is taken by reference it should be taken by const reference.","width":256},{"text":"So this part is wrong because it will try make a copy,which we are trying to define what the coping does.","width":576},{"text":"So that's not right.","width":64},{"text":"Okay.Good.","width":192},{"text":"Anything else wrong with it?","width":256},{"text":"These are private variables.That's Okay. Because we are inside of the book class.","width":768},{"text":"So as long as the thing we accessing the private member variable of is also a book ,it's okay.","width":448},{"text":"And reason for that is to stuff like this.","width":192},{"text":"Right?","width":64},{"text":"So if you inside of the book class,and you are accessing the private member variable  of another book.","width":256},{"text":"It's fine.","width":64},{"text":"Okay.","width":64},{"text":"It doesn't have to be only your own.","width":192},{"text":"Private member variable of anything of that class type.","width":128},{"text":"If it was something other than book,no.","width":128},{"text":"Bad, yeah.","width":64},{"text":" Definitely bad.","width":64},{"text":"But here it's fine.","width":128},{"text":"Yeah.","width":64},{"text":"Right.","width":256},{"text":"So this is basically the exact same thing as the system provided.","width":320},{"text":"Copy constructor ignoring the fact that its' argument is wrong.","width":192},{"text":"This part is just kind of doing a member-wise copy.Right?","width":192},{"text":"It's copying over the size,which is fine.","width":192},{"text":"It's just a number.","width":64},{"text":"But then it copies over the lines_,which is a pointer. So it will copy over the value of the pointer ,which is just a memory location.","width":384},{"text":"So now I've got again they're both pointing at the same stuff.","width":192},{"text":"And same thing for lengths_.","width":256},{"text":"Alright?","width":64},{"text":"So this is not actually doing a deep copy. This is doing a shallow copy,which doesn't really mean anything to me.","width":320},{"text":"It's not actually copy unless it's a deep copy.","width":128},{"text":"So it's not even doing a copy.","width":64},{"text":"It's doing a weird sharing thing.","width":256},{"text":"It's not actually making a copy, you using the same pieces of memory,which isn't good. Right?","width":256},{"text":"This is bad because that's just not right.","width":192},{"text":"That's the behavior that would be provided by the system and that's behavior that we don't  want.","width":320},{"text":"So will change how that works.","width":64},{"text":"Okay?","width":128},{"text":"Alright.","width":64},{"text":"Based on that discussion, we know this must be a const book reference of other.","width":768},{"text":"Now I do need the parameter because I'm going to use it.","width":128},{"text":"So I need to save the name so that I can refer to that parameter. ","width":64},{"text":"Alright.","width":64},{"text":"Again a one line implementation of a function below it.  So hint. It probably will use a helper function here.","width":384},{"text":"So I'm going to say copy other .","width":448},{"text":"Then means up here it should have a void copy const book reference.","width":896},{"text":"Okay.","width":64},{"text":" I just have that helper function that I'm going to be using because we will end up using it later.","width":384},{"text":"So...","width":64},{"text":"Okay,so that means our copy is going to take a const book reference .","width":832},{"text":"What's that thing is going to do?","width":64},{"text":"Let's get the easy part out of the way first .","width":384},{"text":"which is to setup a size.","width":64},{"text":"[writing]","width":512},{"text":"Like member-wise copy is fine. I'm just copying over the integer.","width":384},{"text":"So that's okay.","width":64},{"text":"But now I want to do something more intelligent for the lines_ and for the lengths.","width":384},{"text":"Okay.","width":64},{"text":"Which on do you want to do first?","width":192},{"text":"It doesn't actually end up mattering but which one do you want to do first?","width":128},{"text":"Lengths_?","width":128},{"text":"Okay let's do the lengths_ first.","width":64},{"text":"So how am I going to set up the lengths_?","width":256},{"text":"What do I want that to be?","width":384}]