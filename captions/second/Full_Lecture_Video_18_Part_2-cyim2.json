[{"text":"and then I you know update the array base don that picture adn then I run again, and again, and agian a,dn agin","width":1},{"text":"does that make sense?","width":64},{"text":"Right, so this is why we're aminting a size index","width":1024},{"text":"so instead of using the size of the array as our temrination,, we use our size variable","width":384},{"text":"So we don't keep going","width":128},{"text":"So instead of chekcing the actual size of our array, we check what is our heap size. So we start that out with the size of the array, and then we decrement that every time we do a pop","width":512},{"text":"Theres still stuff int eh array below the 7","width":384},{"text":"But we stopbecause we're pretednign that our array stops wherever our size index is, and there's nothing after that.","width":832},{"text":"It's jsut pop a whoel bunch of times, except for that you dont' actually remove antyhing you decrement an index","width":768},{"text":"There's nothing complicated here","width":128},{"text":"It's just pop pop pop opopopopopopopoopopop","width":192},{"text":"Build a heap","width":256},{"text":"So we're gonna build a heap","width":3072},{"text":"We're gonna repadintg call pop() without actually removing any elements, instead we're just gonna shrink thte part of the array that we pretened is the heap","width":640},{"text":"Adn we're leaving those elemetns in our array, and we end up with this array being completely sorted.","width":384},{"text":"Right?","width":192},{"text":"So if we wanted this array sorted in ascending order, that is smallest to largest, how is the algorithm gonna change?","width":768},{"text":"Use a max heap instead","width":192},{"text":"The only difference is in what kind of heap I build","width":384},{"text":"If I wanted in descending order ,I use a min heap","width":256},{"text":"If I wanted in ascending order, I use a max heap","width":256},{"text":"Cuz what I'm filling in the array is actually the last element first","width":384},{"text":"So I'm going back to front","width":128},{"text":"So I'm using reverse of what I actually want the elemnts sorted as","width":192},{"text":"Does that make sense?","width":128},{"text":"How long does our actual sorting process take then?","width":512},{"text":"Well we know its basically jsut calling pop again againag aginagiangaingag","width":320},{"text":"How many times do we clal popp?","width":192},{"text":"n tiemes","width":64},{"text":"How long does each one of htose pops take?","width":256},{"text":"Log i, where I is the current size of the heap","width":256},{"text":"Not every one of them is log n","width":128},{"text":"The first one is log n","width":128},{"text":"The second one is log n- 1","width":192},{"text":"etc","width":64},{"text":"So what you really have is a summation from i = 1 to n of log i","width":896},{"text":"But we know from HW0 and other things that we've done already, that this is big 0 of n log n","width":832},{"text":"You coudl use this as an alternative","width":896},{"text":"The whole algorithm is gonna take Big-O of pre-processing step plus sorting step, which is just big-O n log n","width":1024},{"text":"This gives you the same running time as most of the other sorts that you probably know about, that are good","width":256},{"text":"This is like the best case for quicksort, worst case for mergesort","width":512},{"text":"This gies us the same theoritcal runtime as mergesort","width":512},{"text":"So you could use this alternatively instead of using a mergesort","width":256},{"text":"When might you wann do that?","width":192},{"text":"Space!","width":384},{"text":"This is in-place","width":192},{"text":"This has a really nice property","width":128},{"text":"which it shares with quicksort, that it's in-place","width":256},{"text":"We don't hafta allocate any new arrays, any temp storage","width":320},{"text":"We use exactly this array, and only this array","width":64},{"text":"So if you're worried about space consumption, and your array is real realyrealyrelyarly big, and you still need the guarantee that your sort is n log n (which quicksort doesn't give you), and you also are concerned about your size, using a heap sort is reasonable","width":1216},{"text":"This algorithm is called heapsort","width":542}]