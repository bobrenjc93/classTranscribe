[{"text":"Now I am going to construct temp","width":320},{"text":"Which whatever this type is has inside of it.","width":320},{"text":"A dynamic array. And I am constructing it by invoking the move constructor I think A right? ","width":576},{"text":"So I am going to move construct into temp","width":448},{"text":"What is that going to do?","width":384},{"text":"What should that do?","width":64},{"text":"Yeah?","width":128},{"text":"Yes","width":448},{"text":"So temp is going to look at what x is, and x is going to be left empty","width":320},{"text":"That's how a move constructor should behave","width":192},{"text":"When I move out of something into something else it should leave where it came from empty, and all of the things of the old one should be now on the new one","width":640},{"text":"This is the part where I made, temporary is my temporary box and now I have taken the guts of A and put them in this temporary box and now A is left totally empty","width":512},{"text":"Right? A now has a null pointer, right?","width":448},{"text":"So it is not","width":128},{"text":"Ok? Then","width":256},{"text":"I am saying ok do an assignment","width":128},{"text":"A equals std move B","width":256},{"text":"So now I am invoking","width":256},{"text":"A assignment operator","width":128},{"text":"Not a constructor","width":192},{"text":"Right?","width":128},{"text":"This is going to do the same thing","width":192},{"text":"I am going to move the value from the right hand side","width":256},{"text":"Into the temporary value for operator equals","width":192},{"text":"Then swap them, right?","width":192},{"text":"So the temporary value in operator equals will hold what my old values were","width":320},{"text":"It is going to hold whatever the value in the temporary was ","width":576},{"text":"So what effectively happens here","width":128},{"text":"Is what you would expect, which is I am moving the values from B to A","width":512},{"text":"So ok B is Y, b is, I am moving from that into this","width":640},{"text":"So this is going to point there and this is going to be left empty","width":512},{"text":"Take the things from the B box and take them over the A box","width":192},{"text":"Now the B box is empty","width":128},{"text":"Right?","width":128},{"text":"So then the last thing was take my temporary and move it into A","width":448},{"text":"So now that's going to. Oh move it into B","width":256},{"text":"Take my temporary and move it into bB","width":192},{"text":"So that's going to do what we would expect ","width":128},{"text":"That means that temporary is now going to point at nothing and B is going to point at that","width":320},{"text":"So I have just swapped the two arrays around","width":192},{"text":"Notice that I didn't make any new dynamic memory","width":512},{"text":"At all","width":64},{"text":"There was no new array here made ever","width":256},{"text":"It was just moving the ownership of that dynamic array around between","width":384},{"text":"Instances of the class","width":64},{"text":"That's the move semantics part","width":192},{"text":"Ok. If I didn't use move semantics, instead, what I would get","width":448},{"text":"When I construct","width":576},{"text":"temp from A I would get a deep copy","width":192},{"text":"I would get. Ok I am going to make a deep copy of this","width":256},{"text":"","width":576},{"text":"Now I am going to assign um","width":192},{"text":"I am going to assign B into A","width":192},{"text":"Ok, so B is","width":256},{"text":"I am assigning Y into X","width":576},{"text":"I am going to make a copy of this","width":640},{"text":"Make X point there","width":768},{"text":"And delete this","width":64},{"text":"And I am going to assign the temporary into B","width":512},{"text":"Into Y","width":192},{"text":"So that means that again I am going to make a copy of that array","width":384},{"text":"So I am going to say Y is going to point at this new array","width":192},{"text":"That's got 1, 12","width":448},{"text":"Y is going to point here instead","width":128},{"text":"Delete this","width":64},{"text":"The function returns, delete taht","width":128},{"text":"Ok now I have swapped them but I made a whole bunch of arrays","width":576},{"text":"I made a whole bunch of stuff that I didn't need. Yeah?","width":128},{"text":"This one? Yes?","width":640},{"text":"You wouldn't","width":64},{"text":"We are doing this so that you know how to write a template function","width":320},{"text":"And you know how to write one that uses move semantics","width":64},{"text":"You obviously would not write this yourself","width":192},{"text":"But I want you to know how to write it yourself","width":192},{"text":"So that you can write similar thins","width":128},{"text":"Like if you are writing the swap member function of your class","width":128},{"text":"You go to know the right way to do this","width":256},{"text":"Like if my class has, you know, when I am writing a move constructor for my class or something","width":320},{"text":"And I have got a bunch of member variables that","width":128},{"text":"Can move out","width":128},{"text":"Yeah you wouldn't","width":256},{"text":"Don't reimplement the standard library","width":128},{"text":"That's a good point. Yeah?","width":128},{"text":"So remember what is happening in the assignment operator","width":1088},{"text":"I pass the argument by value to make a copy","width":384},{"text":"And then I swap with taht","width":64},{"text":"So really what I got is a temporary on a stack frame","width":192},{"text":"That is pointing at my own stuff and I am pointing at the copy","width":128},{"text":"So then when that returns the destructor for that is automatically invoked","width":192},{"text":"Ok","width":768},{"text":"Let's move on","width":192},{"text":"To a template class","width":64},{"text":"So here I want you to declare","width":320},{"text":"A template class triple","width":128},{"text":"That holds 3 values, first, middle and last","width":256},{"text":"And I want you to allow each of these variables to have a different type","width":448},{"text":"We want to declare a constructor for a triple given 3 elements","width":192},{"text":"And a separate function for getting each element","width":256},{"text":"What is going to go in the angle brackets here for the template?","width":512},{"text":"Ok","width":512},{"text":"Class A, class B, class C","width":448},{"text":"Why do I have 3 template arguments?","width":256},{"text":"Right, so that each of the 3 things could be a different type","width":384},{"text":"So my member variables are going to be A first","width":384},{"text":"B middle","width":192},{"text":"C last","width":448},{"text":"Could A, B, and C be the same type? Yes!","width":448},{"text":"Right? They don't have to be different","width":128},{"text":"They are just allowed to be different","width":128},{"text":"At compile time, when this is instantiated ","width":192},{"text":"It is going to fill in A, B and C with whatever types you have typed in","width":384},{"text":"And so they could be the same type, they could be different types","width":64},{"text":"It's just allowing for flexibility here","width":128},{"text":"What would the constructor look like?","width":384}]