[{"text":"Is that unbalanced? No, that's still balanced","width":320},{"text":"","width":256},{"text":"That's still balanced.","width":256},{"text":"","width":384},{"text":"That's still balanced... That's not balanced","width":384},{"text":"So does unbalanced always mean a linked list? Not necessarily.","width":448},{"text":"Is that tree balanced? No. Where is the imbalance? Which node is the first one from the bottom up that you see a balance factor that's wrong?","width":832},{"text":"","width":192},{"text":"I mean, it's not this one it's not this one. This one we've got a height one, a height zero so that's fine. So this one kind of is the first one I see that's bad.","width":640},{"text":"The height of the left subtree here is two, the height of the right subtree is zero, so what's the balance factor of the root here? Two.","width":640},{"text":"So in some sense the sign of this balance factor tells you the side that it's heavy on. If it's negative and has absolute value greater than one you know it's unbalanced and heavy on the right. If it was positive and has absolute value greater than one you know it was heavy on the left.","width":1280},{"text":"","width":128},{"text":"So these are kind of this is the property that we're thinking about. We want to have a guarantee that every single node. ","width":576},{"text":"The difference in the heights of the subtrees is no greater than one.","width":384},{"text":"We're allowing for - these trees aren't gonna be perfect anymore. The perfect tree is a completely balanced tree, it's the best you can get. But that's very restrictive and it makes it harder to do update operations on that if you're trying to guarantee that it's both - you can't even guarantee that it's perfect if you've got not the right number of nodes right so the best you could do is complete and then maintain a complete tree","width":1600},{"text":"That also is a binary search tree is kind of a headache. So we're gonna relax that a little bit","width":320},{"text":"And allow for the subtrees to be different by only one.","width":256},{"text":"So every spot in this tree the subtree heights will only be different by one.","width":320},{"text":"Yeah? [student question]","width":256},{"text":"The subtrees in a balanced tree should also be balanced. This property will hold recursively. Let's write the recursive definition.","width":576},{"text":"","width":320},{"text":"So a balanced...","width":192},{"text":"binary...","width":256},{"text":"tree...","width":192},{"text":"T","width":64},{"text":"is either - what's the simplest balanced binary tree? Empty tree.","width":768},{"text":"","width":256},{"text":"because our condition for being balanced would be vacuously true","width":256},{"text":"Ther are no nodes so there are no subtrees so the heights of them are trivially no larger than one because there aren't any.","width":640},{"text":"","width":320},{"text":"Otherwise we've got a root a T-left and a T-right","width":256},{"text":"Our standard definition of a binary tree.","width":384},{"text":"So let's do the check at the root and then do the recursion. What are we gonna check at this root node?","width":512},{"text":"Right so the absolute value of the balance factor is less than or equal to one. In other words, um, ","width":640},{"text":"Where absolute value of height of T-left minus height of T-right","width":768},{"text":"Is smaller than or equal to one","width":320},{"text":"and then we have to do our recursion, so and TL and TR are balanced","width":640},{"text":"","width":1152},{"text":"So this restriction is going to keep us from having trees that look linked-listy","width":384},{"text":"they're gonna be more - they're not completely perfect but they're gonna have shapes that kinda look more like that","width":384},{"text":"Tomorrow we'll make an argument about why that bounds the height with the better value than linear","width":512},{"text":"For now we're just gonna think about how could you do this and how could you manipulate trees so this behavior exists","width":448},{"text":"","width":256},{"text":"So here's an example of a tree. I'm gonna tell you that this tree is imbalanced.","width":448},{"text":"I want us to think about the algorithm for adjusting this tree.","width":448},{"text":"","width":192},{"text":"Not gonna write any code yet, just think about the process","width":448},{"text":"So which node is the imbalance located at? Yes?","width":384},{"text":"","width":896},{"text":"So, this tells me that the heights of the left and right are different by one but it doesn't tell you anything about those subtrees themselves.","width":512},{"text":"So you could have the following tree if you forget this condition, you could have the following tree and consider it balanced","width":768},{"text":"","width":128},{"text":"Because the height of the left and height of the right are different by one but that's not really balanced, it looks like two linked lists glued together","width":448},{"text":"The height of that is gonna be n/2 or something which is still linear.","width":320},{"text":"We want something a little bit stronger than just locally at the root node this is true, we want that to be true at every single root node.","width":448},{"text":"So THIS would be imbalanced and we'd have to change it to look something like this and then we've got a balanced tree.","width":576},{"text":"","width":128},{"text":"So that recursive step is actually fairly important.","width":320},{"text":"","width":320},{"text":"It guarantees that below the root things are actually nice and balanced.","width":384},{"text":"If we forget that then all we're making a claim about is the tree we're rooted at and that's not quite enough tot ell us that the whole tree is balanced.","width":640}]