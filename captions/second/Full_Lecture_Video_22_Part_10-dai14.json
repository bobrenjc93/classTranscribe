[{"text":"now the words h is no greater than 2log n","width":448},{"text":"lets.... the same thing is saying that h O(log n)","width":448},{"text":"we ignore the constants, so i can pick a c i can pick a k for which the O defination apply","width":448},{"text":"or condition is true, so now i know... the important take home fact, the height, of any validate avl tree","width":896},{"text":"is log of number of nodes you have in the structure, why do we care?","width":512},{"text":"we did i do all that work to prove to you that the height of avl tree is log n","width":512},{"text":"yeah on the back","width":64},{"text":"and more over all of the adt function would be log n","width":768},{"text":"so we show that for bsts all of the dictionary adt function were O(h) where h is the height of the bst ","width":640},{"text":"now we have a special kind of bst for which all of the arguments still applicable, find the still O(h)","width":448},{"text":"move still the O(h), sort still O(h)","width":128},{"text":"but now we've been able to say what h is in terms of n and its not linear in n,s its not O(n), its O(logn)","width":512},{"text":"so we are now able to make the claim that all dictionary...adt....functions....and...implemented....","width":1152},{"text":"....with avl trees....","width":512},{"text":"have running time ..... O(log n)","width":896},{"text":"......thats why we care, so now if we choose to use this avl tree, you have a dictionary adt implementaion","width":896},{"text":"that gives you log running time ","width":192},{"text":"that is significantly better than linear","width":192},{"text":"to make that increase appreciably you have to double your data size ","width":256},{"text":"log running time is actually pretty good, log running time should remind you like binary search","width":512},{"text":"you know is pretty fast","width":128},{"text":"pretty much the only thing we will talked about, is like sort of faster than log is like constant time ","width":384},{"text":"so log is pretty good ","width":128},{"text":"it could be better but log is pretty good ","width":192},{"text":"the next data structure that we will talk about is gonna trying to improve this bound ","width":384},{"text":"from log n to something better than log n","width":128},{"text":"but you have to do a lot of tricks","width":320},{"text":"ok so before you walk out, im not gonna do this right now, because we are oiut of time ","width":256},{"text":"however,  this should sound familiar, im not gonna do these two functions you should do them because they are good examples  ","width":640},{"text":"i like questions like this because they test if you are able to use data structure beyond just implement","width":320},{"text":"so these may make good exam questions....","width":448},{"text":"we are starting to talk about a new data structure next time ","width":256},{"text":"*blank*","width":14336}]