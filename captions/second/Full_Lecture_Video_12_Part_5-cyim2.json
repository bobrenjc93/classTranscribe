[{"text":"And figuring out whether you're in the front or the back of the list would be hard anyway","width":448},{"text":"What about a vector? Get me position i in the vector?","width":256},{"text":"Constant! Its just an index","width":256},{"text":"It's an array","width":64},{"text":"So its very very easy, its like construct a class from an int. That was the int that was given, and there you go, thats the iterator at that postition","width":704},{"text":"The reason that I bother doing this is for the next two functions. Insert beofre, and insert after","width":576},{"text":"Insert before given an iterator and something of type T, is going to stick a new element in the list before the element pointed to by the iterator","width":704},{"text":"Insert after, same thing but on the other side","width":448},{"text":"Stick it after this element in this list","width":320},{"text":"So lets lookat that, draw some picture. Insert_before / insert_after, singly linked list first","width":704},{"text":"As you can be sick of drawing list by the end of this lecture","width":768},{"text":"I want u to get really good at it cuz it will help you on the MP. You'll draw all kinds of pictures for the MP","width":832},{"text":"I've got something that looks like this, maybe its longer, I'm just feeling lazy. And we wanna do insert before a given iterator. What is going to be contained inside of the iterator for a singly linked list? What do I need to refer to an element in the list for a singly linked list?","width":1408},{"text":"Oh come on, we know this","width":576},{"text":"What do I need to store to refer to an element in a singly linked list?","width":384},{"text":"A pointer to a node!","width":448},{"text":"A pointer to a node refers you an element in a singly linked list, there's nothing else that would work","width":512},{"text":"That's how you maintain your state when you're printing, you had a node pointer. That node pointer walked along your list, you hafta have a poiter","width":512},{"text":"So the iterator in a singly linekd list is going to store a ptr to a node, so this is the same thing as saying insert before a given pointer in the linked list","width":704},{"text":"So I'm gonna give you something, it.curr or it.node is going to point to a node and you're given that","width":960},{"text":"And you wanna stick something before this in the list","width":192},{"text":"That is, here","width":64},{"text":"How do I do that?","width":256},{"text":"What node do I need to get to, to inject a node before the current one that I'm given in this list?","width":704},{"text":"One before it, so maybe this is a bad example","width":320},{"text":"So lemme add one more node to this list, just so you can see it","width":256},{"text":"So what node do I need to get to so I can insert something before it, so it needs to be the 2","width":1600},{"text":"But how do I get to the 2? I can't....","width":192},{"text":"I can't go back again","width":64},{"text":"So I hafta walk from the head, in this case I only need to walk one but you can imagine this being really long and having to walk a very long distance before you get to the node beofre the iterator that you're given","width":768},{"text":"Does that make sense?","width":256},{"text":"If you wanted to do this, yes","width":512},{"text":"If you assume that somebodys given you the iterator, then they've already done the walking for you, so now its just how long does it take given the iterator to get there.","width":640},{"text":"But yes, if you wanted to insert an arbitrary position you would hafta walk to the position you want and then also call this function","width":192},{"text":"[question]","width":576},{"text":"So you're saying store the node that you used to be at in the iterator so you can go back?","width":1088},{"text":"Assuming that we're not here ","width":256},{"text":"Um but that would work, you coudl do that","width":128},{"text":"As long as, well.... that doesn't matter in this case anyway","width":448},{"text":"Assuming that we don't have a prev ptr in the iterator, we need to walk from the head","width":640},{"text":"If we had a prev ptr in the iterator, which we would hafta maintain as we move around, then it'd be easy since we'd have a node to the prev one","width":704},{"text":"But we hafta get this guy from somewhere to somewhere, and if its not stored it'd take us linear time to get that","width":384},{"text":"Once we have this, call it curr, then what?","width":128},{"text":"Wanna inject lets say 5 between the 2 and the 3","width":320},{"text":"Maybe? Make a node, alright....","width":896},{"text":"With value 5, now what?","width":128},{"text":"I'm gonna have some ptr, call it n, now what?","width":384},{"text":"Yea, set it next to own the 3, so how would I do that? What node do I need to steal a value of?","width":576},{"text":"Yea, 2's next. So curr's next","width":384},{"text":"So I need to steal that ptr, ok? My list hasn't disappeared cuz I still have every node is currently being owned by something, but you hafta keep track of that. Now what?","width":832}]