[{"text":"Did that make sense? So pts is double star  star pts is that a double takes of a pointer because it is derevelaning once and there is double times integer there is double where is double live stack ummmm it is an  ummm stack with some value in it ok auto pdoub, &doub what is that do what is &doub do address of so this give me the memory location of doub so what is the type of pdoub  to what  a double point to a double that is fine pointe","width":3584},{"text":"is  stack memory that is also fine the same thing just normally happens a pointers is just a memory location so all of these just another so.. good question  so pdoub is a pointer the thing at the end of the pointer must be type double because it is double star, and it happens to point here if i do nothingelse the question is what happens what goes on here when the stack flame is released when the function return whatever, so I have a memory leak because of the pts right I have something in theheap I have no other pointer to it and stack flame goes away so I leak that memory So lets fix that how can I fix that what pts ok that say delete this point and get rid of thing in the heap of that pointer am I done of a pointer do I need to delete p doub why not right so I only need to delete thing that is locate in the heap even though I got a pointer pdoub to doub its on the stack the thing points to is on the stack I if I just I donot  do anything of the stack flame itself is going away , so the memory with doub is going away its a variable sit on the stack right I donot actuallyneed to worry about anything leak any memory and it is no problems find to have pointer on the stack to stack memory so the delete agru release the memory pointer points at so I want say delete pts is the argument to delete is the point on the stack but then what delete does is looks that what is pts point at and delete that thing free that thing release that thing nothing so it still point at whatever used to point at is just that hte location refer to release back to system so using it  this after words right that is bad might woke might not because pointer still pointing at something but what point at u donot own anymore it not part of program u release back to the system so the system can do whatever what do with it so doing that might segment fault might crash might hard drive no idea right if you .. it is a good practice to say your pointer to null after u delete them so i might say something like equal to nullptr with its used to represent a pointer that is not point at anything okay techly what it is nulptr is const just means address 0 and address u is never ever ever ever of your program to access   there is no head file name space used here nullptr just part of language thank you what this do is it says that pts no long point here point null which I denote like that it still point at sth  it just happens to points address 0 which is never vaid value to your program nullptr like a key version if you using it is key word it will highlight ok how do you feel about the code on the left int* p = nullptr I have a point p on the stack I say it not point anything now I using it doesnot point anything int x p = x  what kind of error is that compiler error this is not complier because of this line because I assigning a int to a point these type not match not compile what about the code on the right int * p * p =54 p = nullptr *p = 87 are there any compiler error there oh right so ..  ","width":22080}]