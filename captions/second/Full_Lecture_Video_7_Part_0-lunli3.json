[{"text":"nothing","width":2496},{"text":"let's go ahead and get started","width":128},{"text":"so as far as announcements","width":320},{"text":"lab_allocate is due tomorrow 11pm","width":384},{"text":"as usual, labs due 2 days after released","width":256},{"text":"hopefully you have done that in the lab","width":768},{"text":"if you have not, you do have until tomorrow 11pm to finish it","width":256},{"text":"mp_memory.1 is due tomorrow 11pm","width":384},{"text":".1 is quite easy. i mention it's one of the hard mp but .1 is not the hard part.","width":512},{"text":"the hard part is array and collage. the scoped pointer should be quite easy","width":512},{"text":"if you write a bunch of one line function, it's probably right","width":448},{"text":"the scoped pointer is super simple, but it's a nice little wrapper class you can use to make sure not forgetting any delete","width":704},{"text":"the point of this scoped pointer class is to say ok. i created and when i created, gave a new thing to the heap, and when i goes out of scope, it's gonna delete this pointer so i can't forget","width":704},{"text":"you should do that before tomorrow 11 so you can get the extra credit","width":1600},{"text":"the array is move evolved and the collage is the hard part i think","width":512},{"text":"ex1 next week. practice exam stuff. ","width":13824},{"text":"prelecture responses. can operator be overloaded to allow a template to work with a wider range of types? yes","width":768},{"text":"absolutely. so i could, you know it not. template functions are sort of the same as any other functions except for the weirdness where you have to define them","width":640},{"text":"but anything that is a valid function i can also template so i has a constructor that has a template argument, i can have a operator() that has a template argument","width":704},{"text":"i can have any kind of those operators that have template argument.","width":256},{"text":"in fact, when you're writing the scoped pointer, the class itself is a template, so every single function on the class is a template","width":512},{"text":"you fill in t at the instantiation time, so yes absolutely. any of the operator we've talked about can be overloaded with templates to work with larger amount of types","width":832},{"text":"the only thing you need to have be the case is that whatever your template argument is, if you're calling functions on other calling,you need to know these thing exists for this type t or you get a compiler error","width":704},{"text":"that's fine if t has a reverse() function","width":640},{"text":"it's more about the concrete type than what this type have to implement.","width":384},{"text":"if you give you and int and calls reverse(), not gonna work","width":256},{"text":"yes absolutely.","width":256},{"text":"you can overload pretty much any of the operators with all sorts of template","width":192},{"text":"to make that overload","width":448},{"text":"so somebody asked a question of why when he's doing a max() and put in int() in the type of the function?","width":768},{"text":"the reason for that is i need to disambiguate what the was, because max() is the function that took 2 refs to the t right?","width":768},{"text":"2 refs were both Ts so they're both the same type.","width":192},{"text":"and i gave it 2 different types","width":64},{"text":"so it didn't know whether to treat if l have and double and an int.","width":256},{"text":"don't know T was double or T was int","width":128},{"text":"but i told it explicitly","width":128},{"text":"pretend t is int or pretend t is double","width":128},{"text":"so then call max(d,d) and max(int,int) but i know how to convert between double and int","width":384},{"text":"so i'm gonna do that first and then invoke constructor","width":128},{"text":"purely helping the compiler figuring out which one to call","width":320},{"text":"we'll hit on that a little bit.","width":1024}]