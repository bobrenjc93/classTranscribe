[{"text":"So that't my complaint of the other version of the swap function.is it's, you know","width":349},{"text":"we are passing in things by a pointer, which is fine, so we'll do semantically what we want.","width":384},{"text":"But there's this potential for somebody to do something silly with an \"and\". if I can prevent you from doing something silly I'd like to.","width":384},{"text":"So I prefer the second version. ","width":121},{"text":"cause it's vastly more difficult for you to somehow give me an invalid reference.","width":320},{"text":"than it is for you to give me a pointer to null.","width":192},{"text":"Initializing the variable of the  call to swap I'm giving you references, they have to be variable names so they are pretty much guaranteed to be valid.","width":461},{"text":"So no longer I have to design, I have to check if the reference is good before I use it, like, the reference is always gonna be good. If they give you a variable it should be good.","width":552},{"text":"So you then don't have to do a null check inside your swap and then, the swap body can truly be just this.","width":576},{"text":"(student asked a question)","width":423},{"text":"Yeah, yeah. So this particular code wouldn't ever do that, cause I'm passing in, like amperpercent of x couldn't ever be null.","width":466},{"text":"But I could do something like, you know, int * x = nullptr","width":704},{"text":"y = 4, ","width":208},{"text":"swap (x, &y)","width":384},{"text":"probably that's silly, right? You probably wouldn't actually do that because you know it's gonna be bad, but you could imagine the situation where, ","width":431},{"text":"You dealing with like, things are getting way more complicated than this, not actually knowing that you are about to pass this nullptr when you passing pointers around. ","width":512},{"text":"didn't mean to be null, but if it was, then it crashes. ","width":174},{"text":"rather than, you know, not even compiling, cause, hey, you are giving me a pointer and you mean you give me a reference.","width":295},{"text":"Make since, right? References are king of preferable cause you don't have to worry about this null stuff.","width":768},{"text":"All right. Let's move on and start talk about classes.","width":512},{"text":"I've given you a partial header file below, ","width":367},{"text":"and I want you to fill in the header file with the declaration of the following functions.","width":320},{"text":"And we are gonna write the implementation of a couple of functions, 3 of these functions. ","width":240},{"text":"As if they would appear in rectangle.cpp","width":192},{"text":"Want to use const where appropriate, so where are appropriate places to use const?","width":532},{"text":"Well, we might use const on parameter to functions, right? When we are passing in a reference, we might pass in a const reference, we wanna guarantee that you can't change the variable through that reference.","width":832},{"text":"Where else could const appear here though?","width":128},{"text":"Now we are in the context of a class.","width":192},{"text":"Sorry?","width":64},{"text":"So where area() would it be?","width":320},{"text":"Where would I say const, specifically?","width":128},{"text":"After the parenthesis.","width":256},{"text":"right? So that's another place I could place const.","width":162},{"text":"So I could say, when I'm declaring the function area( ), if I say const, after the function name, what does that mean?","width":448},{"text":"For a member function, I have a const that trails it, what does that mean?","width":448},{"text":"The function promises to not modify any of the data members of the class.","width":679},{"text":"If you attempt to do so, what happens?","width":173},{"text":"If you write that function and you mess up and you accidently modify a member variable, what will happen?","width":256},{"text":"The compiler error or runtime error?","width":334},{"text":"Compiler error.","width":116},{"text":"So this is a way of making sure that when you are writing your class, ","width":205},{"text":"So not only you are signaling to people that \"hey, this function promises not to modify it\", but the compiler is gonna hold you to that promise and make sure that you are not actually modifying any member variable when you are implementing the class.","width":704},{"text":"So there are 2 purposes. One is to signal to people \"hey, this does not modify stuff\".","width":250},{"text":"And the other is to help you make sure you don't actually modify stuff.","width":192},{"text":"So it's good to use const wherever is appropriate.","width":218},{"text":"So this is called writing const correct code.","width":192},{"text":"All right.","width":128},{"text":"So let's declare some stuff. Let's declare a constructor that takes a width and a height","width":305},{"text":"So how would I declare that?","width":128},{"text":"In that public section, right? Goes in that header file, goes in that public section, what's the function call?","width":568},{"text":"Rectangle. What's the return?","width":128},{"text":"Nothing. It's a special function, right? So it's just gonna be called rectangle. ","width":384},{"text":"OK, and I want to take a width and a height. So width and height look like they are just integers here, so I'm Â allowing for negative here, I guess? So just pass in some integers here. ","width":724},{"text":"So you know, int w, int h.","width":384},{"text":"Do I need a const?","width":192},{"text":"All right. Could a constructor ever be const?","width":367},{"text":"No, right? The point of a constructor is to modify the member variables, right? You are creating an object, right? So the constructor will never be const. Cause it can't be. It's modifying stuff. ","width":704},{"text":"OK. So that's good.","width":208},{"text":"We've got our constructor declared.","width":111},{"text":"OK. area(), which returns the area of the rectangle. So how would I declare that?","width":256},{"text":"What's the return type?","width":128},{"text":"int? OK, good.","width":192},{"text":"int area, ","width":192},{"text":"It's no arguments?","width":220},{"text":"Should I add const?","width":192},{"text":"Yes, why?","width":128},{"text":"Yeah, area. I'm asking for the area. I'm not modifying this in some way. I'm not saying, \"OK, come up with dimensions that make your area be this value.\" No. What is your area, right? That shouldn't modify the rectangle. So it should be const.","width":1216},{"text":"Why didn't I have to do like, rectangle::area()?","width":384},{"text":"It is inside of the class right now. If you look at the how header file is set up, ","width":343},{"text":"From here, up until here, I'm inside of the class. So I don't need to scope things here. ","width":384},{"text":"When I'm in the cpp file, I do, cause I'm not inside of the class anymore. ","width":367},{"text":"I have to explicitly say, I'm defining, inside of this class, this function, and then, when you are in the body of the function, you are inside of the class. ","width":519},{"text":"But here I'm just declaring the class, so I'm inside of the class, so I don't have to scope things, cause I'm already in it. ","width":576}]