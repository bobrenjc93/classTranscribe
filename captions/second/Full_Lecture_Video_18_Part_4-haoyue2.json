[{"text":"okay","width":1472},{"text":"any thoughts on this?","width":192},{"text":"so how might you do this?","width":64},{"text":"go I've given you an array of size n","width":192},{"text":"and a constant k significantly smaller than n","width":256},{"text":"and I want you to","width":64},{"text":"find me the top ten elements ","width":128},{"text":"in time faster than nlogn","width":192},{"text":"the largest things could be at the back","width":576},{"text":"if you only sort the first k","width":64},{"text":"you don't find it","width":128},{"text":"okay","width":512},{"text":"yes","width":64},{"text":"so he was like okay well","width":192},{"text":"we just saw heap sort","width":64},{"text":"we know we could build the array","width":256},{"text":"build the heap","width":64},{"text":"in linear time","width":64},{"text":"and then when we were removing things","width":192},{"text":"we were getting the first elements","width":192},{"text":"right in order at the back","width":192},{"text":"so if you did something like that","width":128},{"text":"but you just stopped before you were completely done","width":256},{"text":"you stopped after you've popped 10 times","width":192},{"text":"so","width":64},{"text":"so","width":64},{"text":"so I like this idea","width":192},{"text":"so let's see what the running time is","width":128},{"text":"so choice one is","width":64},{"text":"ummmmmmmmmmm","width":128},{"text":"like heap sort","width":192},{"text":"but","width":256},{"text":"stopping ","width":128},{"text":"but stopping early","width":448},{"text":"so","width":64},{"text":"how long does our print processing take?","width":256},{"text":"we've got an array of size n","width":192},{"text":"and we need to build a heap of the appropriate time","width":320},{"text":"what is our definition of priority in this case?","width":128},{"text":"yeah it'd have to be a max heap","width":320},{"text":"we want the top k things","width":64},{"text":"so we know that the ","width":128},{"text":"if we are stopping early","width":128},{"text":"we only get the 10 highest priority elements at the back of the array","width":512},{"text":"if we are doing a partial heap sort","width":128},{"text":"if we want the largest k","width":64},{"text":"we definitely have to build the max heap","width":192},{"text":"building a max heap takes linear time","width":256},{"text":"then how long does it take us","width":128},{"text":"to get the next element off this thing?","width":192},{"text":"in terms of k?","width":256},{"text":"and n?","width":64},{"text":"well the heap has size","width":256},{"text":"n","width":64},{"text":"so","width":64},{"text":"pop on that heap should take","width":192},{"text":"log n","width":64},{"text":"and yes","width":256},{"text":"technically it's log n","width":128},{"text":"and logn -1, logn-2","width":192},{"text":"if k is significantly smaller than n","width":256},{"text":"than it's not going to matter","width":128},{"text":"so now we can use the argument that I've been telling you not to be using","width":512},{"text":"because K is a constant","width":64},{"text":"it's not doing the whole array","width":192},{"text":"so it's basically logN for every one of them","width":320},{"text":"so what is the running time of this","width":128},{"text":"well it's O(N)","width":320},{"text":"_","width":64},{"text":"+","width":64},{"text":"o(n) + ....","width":256},{"text":"so how many times are we removing an element?","width":192},{"text":"K times!","width":64},{"text":"so here's our building the heap step","width":256},{"text":"we're removing K elements","width":128},{"text":"how long does it take to remove one of those k elements","width":256},{"text":"log(n)","width":64},{"text":"is that better than nlogn","width":320},{"text":"yetah","width":64},{"text":"if k is significantly smaller than n, k log n is smaller than nlogn","width":704},{"text":"linear is significantly better than logn","width":256},{"text":"you could copy it first","width":2688},{"text":"in n time","width":64},{"text":"build a heap in the copy","width":64},{"text":"and modify that copy instead","width":128},{"text":"it wouldn't be in place anymore","width":128},{"text":"but that's fine","width":64},{"text":"I didn't specify that it had to be in place","width":384},{"text":"so here's the first algorithm","width":128},{"text":"there's a different choice you can make","width":192},{"text":"can anyone think of a significantly different way of doing this?","width":320},{"text":"this way is actually my favorite","width":125},{"text":"you're building a k area heap?","width":1024},{"text":"using a binary heap","width":128},{"text":"you could probably do that","width":128},{"text":"but","width":64},{"text":"does anyone have any other ideas?","width":192},{"text":"doesn't have to be","width":448},{"text":"for the first algorithm yes","width":256},{"text":"yes","width":64},{"text":"AHAH!","width":192},{"text":"YES!!!!!!!!!!!","width":64},{"text":"right s","width":64},{"text":"so the first algorithm is using a heap of size n","width":320},{"text":"right","width":64},{"text":"we make the heap out of all of the elements","width":256},{"text":"what if we just maintained a heap of size k","width":192},{"text":"the content of our heap is always going to be","width":384},{"text":"the top 10 elements","width":64},{"text":"that we've seen so far","width":128},{"text":"that's the","width":256},{"text":"trick here","width":64},{"text":"so this is going to be to maintain","width":128},{"text":"a ","width":128},{"text":"heap ","width":64},{"text":"of size k containing highest elements thus far","width":1344},{"text":"highest k","width":64},{"text":"elements","width":64}]