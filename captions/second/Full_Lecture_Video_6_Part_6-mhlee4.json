[{"text":"lets move on","width":192},{"text":"so in the prelecture we talked a lot about uum","width":256},{"text":"move constructors and rvalues an Lvalues","width":320},{"text":"and i want to sort of drill you on on making sure that you have an intuitive feel for what an lvalue is and what an rvalue is","width":384},{"text":"I've given two definitions here for Lvalue and Rvalue","width":128},{"text":"these are very loose definitions as in if you go and look in the standard ","width":298},{"text":"they will have a different definition","width":64},{"text":"for these than I do.","width":64},{"text":"The point of these definition is to help you have a good rule of thumb that is right almost all of the time","width":422},{"text":"Â for whether something is an rvalue or whether something is an Lvalue","width":311},{"text":"So my rule of thumb for Lvalues is an refers to a persistent object i.e. one that has a name","width":640},{"text":"in other words an lvalue is something that can appear on the Left side of an assignment statement","width":377},{"text":"an lvalue is something that you could potentially assign into","width":154},{"text":"its like got a name its variable of some kind","width":192},{"text":"an Rvalue is everything else","width":243},{"text":"so two is an rvalue","width":106},{"text":"i can't assign into two","width":144},{"text":"2 =4","width":82},{"text":"no","width":18},{"text":"what","width":51},{"text":"what?","width":46},{"text":"that deosnt make sense right","width":73},{"text":"two doesn't have a memory location","width":64},{"text":"two is just a literal","width":128},{"text":"its not variable","width":99},{"text":"it doesnt have a name","width":64},{"text":"doesnt live anywher","width":41},{"text":"it's just 2","width":128},{"text":"2 is an Rvalue. Int x ","width":192},{"text":"x is a Lvalue","width":192},{"text":"x can appear on the lefthand side of an assignment statement","width":192},{"text":"x has got a name, it's got a memory location","width":64},{"text":"i cant refer to it","width":64},{"text":"right so that's an l value. so that's kind of our rough rule of thumb that we're going to be using to try to sort of try and tease these things out. so let's go through some of these","width":625},{"text":"so five L value Rvalue. Rvalue, right, i can't assign in to five, right, so it's just the same thing as two.","width":512},{"text":"into foo and i'm going to call foo. is that an lvalue or rvalue? rvalue, right? ","width":494},{"text":"i can't say foo parentheses equals 4","width":384},{"text":"that doesn't make sense, right? The return value here is not got a name that is a temporary value so it's an rvalue","width":394},{"text":"Does that make sense?","width":35},{"text":"I couldn't assign into that because it's saying that 12 equals something else","width":368},{"text":"Alright. What about this one? So this one is a bit more complictaed","width":233},{"text":"I've got class, thing, it returns an int ref value which has a value inside of it","width":256},{"text":"the implementation is literally to return the value member value, okay fine. ","width":256},{"text":"So thing t.value is the result of that function. An R value or an L Value?","width":786},{"text":"Could it appear on the left hand side of an assignment table?","width":289},{"text":"S. ","width":128},{"text":"It's a reference.","width":128},{"text":"This is the same thing as when we were doing that book stuff. When we returned by reference to modify the line, here","width":541},{"text":"Here, we've returned a string reference, which then validly appeared on the left hand side of the an assignment statement","width":464},{"text":"so actually, because we're returning a reference here this is actually an lvalue ","width":941},{"text":"it can appear on the left hand side of an assignment statement","width":164},{"text":"it does have a memory location","width":128},{"text":"i could take the address of it and go to a place in memory where that thing exists. it does have a name it lives somewehre","width":454},{"text":"so it's an Lvalue, okay?","width":289},{"text":"The way you can think about this is: Can I take its address?","width":282},{"text":"That's another rule of thumb that you could use.","width":154},{"text":"Can I take its address? Can I take the address of the return value? Yeah, it's a reference. It lives somewehre","width":320},{"text":"Can I take the address of two?","width":190},{"text":"No","width":12},{"text":"It doesn't live anywhere.","width":128},{"text":"Another way of thinking about this....Just trying to give you some rules of thumb that you can apply in thinking about whether the things are Rvalues or Lvalues","width":640},{"text":"Alright. What about this one?","width":109},{"text":"Same thing as before. Thing two, except now it's returning an integer by value.","width":425},{"text":"So then is the return value of the t.value function","width":173},{"text":"is that an Lvalue or an Rvalue","width":256},{"text":"Rvalue","width":49},{"text":"I can't take its address anymore ","width":93},{"text":"its just a value","width":64},{"text":"it hasn't been place anywhere yet","width":192},{"text":"it doesnt refer toa n existing value","width":160},{"text":"it's referring to just - its a return value of somekind","width":150},{"text":"its a temporary return value of some kind","width":64},{"text":"so its not got a name ","width":250},{"text":"its not got a an assigned memory location","width":149},{"text":"so this is an Rvalue","width":213},{"text":"does that subtle difference make sense?","width":180},{"text":"one of them is a reference to an existing variable","width":128},{"text":"the other one just a value thats being returned","width":128},{"text":"so it hasnt yet been assigned into anything","width":240},{"text":"its just kind of a temporary thats floating around","width":128},{"text":"if you dont do anything with it it's as good as though it never existed","width":192},{"text":"it gets dropped on the floor","width":384},{"text":"what about this one?","width":96},{"text":"int x x is a.... Lvalue","width":218},{"text":"i can go ahead and assign into x","width":79},{"text":"thats fine x has got a name its got a memory location","width":128},{"text":"i can refer to it","width":128},{"text":"x is an lvalue","width":64},{"text":"const int a","width":64},{"text":"a","width":64},{"text":"is a","width":128},{"text":"ok so using my rules it would be an Rvalue","width":167},{"text":"can i take its memory location","width":131},{"text":"yes ","width":33},{"text":"its actually an lvalue","width":64},{"text":"i know thats weird","width":192},{"text":"ok","width":64},{"text":"it lives somewhere","width":192},{"text":"its nota temp value","width":64},{"text":"it ahs a name","width":26},{"text":"I can refer to it by its name","width":128},{"text":"its an lvalue","width":64},{"text":"even though i cant assign into it","width":192},{"text":"I can't assign into it its const","width":192},{"text":"however it could syntactically appear on the lefthand side of an assignment statement.","width":192},{"text":"except for it can't because it's const","width":320},{"text":"this is where maybe you can use the other rule","width":137},{"text":"can i take it's memory location yes so its an Lvalue","width":171},{"text":"I threw that one in there because it is a caveat.","width":166},{"text":"the rules are loose","width":68},{"text":"But you should be starting to get a kind of intuition about these things","width":345},{"text":"so what about this one","width":318},{"text":"arrray is a stack allocated array of size 2","width":338},{"text":"And i just say the array","width":224},{"text":"this is actually an rvalue","width":192},{"text":"because in order to get an lvalue you have to say array at a position ","width":256},{"text":"if i just say the array it's not- i can't assign into that","width":256},{"text":"i cant","width":128},{"text":"so this actually an Rvalue","width":289},{"text":"However this one is an Lvalue","width":161},{"text":"when I start referring to a position in the array then its fin","width":192},{"text":"then i can actaully assign into it","width":64},{"text":"but just the array itself is actually an Rvalue","width":192},{"text":"again just another quirk","width":256},{"text":"yea","width":448},{"text":"its","width":147},{"text":"yee","width":73},{"text":"nnnn yes","width":47},{"text":"so the problem is that the array itself like just the name","width":505},{"text":"weeds","width":31},{"text":"the array itself is just a memory location","width":320},{"text":"particularly for stack allocated arrays","width":149},{"text":"its not like a memory location that you can change","width":147},{"text":"its something that's built burnt into the stack frame","width":256},{"text":"so the array itself is literally just like a hard coded memory location","width":192},{"text":"its not actually variable","width":192},{"text":"it","width":64},{"text":"it's the elements of that that are variable","width":94},{"text":"it's weird. its a weird kind of its specifically stack allocated arrays","width":320}]