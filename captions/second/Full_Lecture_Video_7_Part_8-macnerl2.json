[{"text":"yeah?","width":128},{"text":"<question>","width":320},{"text":"so this is a good question","width":704},{"text":"so he's saying suppose that we also write this one that we talked about the one that takes an r-value reference","width":384},{"text":"and we still have the one that takes just a normal const reference okay","width":320},{"text":"and I say something like a+=b","width":320},{"text":"one of those is called and what's true about \"b\" at the end?","width":256},{"text":"I now have two operator +=","width":384},{"text":"one that takes an r-value reference, one that takes a const reference and I say","width":256},{"text":"a += b","width":64},{"text":"which one of those overloads is invoked?","width":192},{"text":"the const reference one this is the r-value, l-value questions from last lecture right?","width":320},{"text":"what is the right hand side here what is \"b?\"","width":384},{"text":"\"b\" is an l-value so it can't invoke the r-value reference taking one because \"b\" is an l-value","width":384},{"text":"so this will invoke the one that we wrote in full which is going to do a deep copy of the \"b\" part","width":384},{"text":"so then what's true about \"b\" at the end of this function?","width":256},{"text":"still the the same. It's not modified. It's passed in by const reference; it could not have been changed.","width":320},{"text":"okay","width":128},{"text":"now","width":64},{"text":"if I change this slightly","width":64},{"text":"and instead said a+=","width":320},{"text":"a+=std::move(b)","width":320},{"text":"now which one is invoked?","width":256},{"text":"r-value reference one. The argument now, std::move(b) is an r-value reference it's not an l-value anymore","width":576},{"text":"its saying we pretend that be is an r-value, okay fine","width":192},{"text":"b is an r-value","width":64},{"text":"pretend b is an r-value is the result of this function alright","width":256},{"text":"now its going to say okay which one of those two functions matches better, one that takes a const reference","width":448},{"text":"one that takes an r-value reference. well the one that takes an r-value reference is better because I don't have to convert it","width":320},{"text":"so im going to take the r-value reference overload and invoke that function instead","width":192},{"text":"okay","width":64},{"text":"but now what's trua about be","width":320},{"text":"at the end of that +=?","width":128},{"text":"yeah \"b\" no longer has any of the strings that used to be inside of its array so all of its ","width":576},{"text":"chapters are now empty","width":64},{"text":"okay","width":64},{"text":"because we moved out all the strings","width":64},{"text":"based on the way we've wrote this, it's not actually totally empty. Its arrays are still there,","width":384},{"text":"but the strings are gone","width":192},{"text":"the strings have moved out","width":192},{"text":"okay","width":64},{"text":"what we did was we stole the strings, we didn't steal the arrays. We could steal the arrays","width":256},{"text":"except for here it wouldn't help because we need to make a new array; it's not really","width":448},{"text":"<question>","width":192},{"text":"\"b\" now will be a book that doesn't have the lines in it anymore all the","width":448},{"text":"lines have moved out","width":192},{"text":"they're all empty","width":64},{"text":"pretty much","width":448},{"text":"you're signaling to whatever function you're calling with that variable \"you're free to steal stuff from this thing\" you're garaunteed","width":512},{"text":"that that object is always left in a valid state, but you don't know what that is. it could be empty, it coulde be","width":320},{"text":"like this case where it's got","width":192},{"text":"it's not empty, it doesn't have any of it's strings in it anymore, but it's still valid.","width":192},{"text":"It's still a valid book object, it's just that all of the chapters are empty strings","width":256},{"text":"you're guaranteed that \"b\" will be a valid book, but it still has stuff ","width":448},{"text":"that may have been taken away","width":64},{"text":"it might be empty it might not be we don't know","width":448},{"text":"it's a way of saying \"pretend that was a temporary\" and when it's a temporary it's just going to do stuff that","width":128},{"text":"you know it just assumes you're not going to look at it later","width":320},{"text":"trying to print out \"b\" at the end of this you don't really know what would happen; it depends on what they did.","width":320},{"text":"it depends whether they decided to empty out \"b\" or not.","width":192},{"text":"or parts of \"b\" did they steal or not","width":384},{"text":"so its a way when you do std::move() of a variable and you pass it into a function it's a way of","width":576},{"text":"signaling to the compiler \"pretend that was a temporary so do whatever memory stealing that you can on that\"","width":384},{"text":"that's safe to do","width":128},{"text":"you're efficient thing that we could do is steal the strings","width":768},{"text":"the rest of it we had to make new arrays anyway so it wasn't like we could use","width":64},{"text":"arrays and any other object","width":192},{"text":"so the only thing we ","width":128},{"text":"yeah","width":64},{"text":"alright good question so when do we delete the temp object?","width":512},{"text":"somebody else","width":128},{"text":"when do we delete the temp object","width":192},{"text":"yeah at the end of the function","width":64},{"text":"the temoop objet is here","width":256},{"text":"has been declared there so its a stack allocated local variable to a function so when the function returns","width":640},{"text":"the destructor for the temp object will be invoked right","width":64},{"text":"so the critical line for understanding why that's okay is this one","width":320},{"text":"we swapped with the temporary so now the temporary has all of our old arrays","width":256},{"text":"and stuff","width":64},{"text":"and we now have all of the things that we were putting inside of that temporary object","width":256},{"text":"so now when the temporary object goes out of scope, it's just getting rid of our old memory","width":192},{"text":"which is what we wanted","width":256},{"text":"okay","width":64},{"text":"really god question so we're referring to rhs' member variables. Like rhs.stuff_thats_definitely_going_to_be_private","width":1216},{"text":"why is that okay? and when is that okay the","width":320},{"text":"answer to that is its okay as long as the function that is doing that is a member funtion of the book class, so even though rhs is not the same book as us,","width":704},{"text":"we can go ahead and access its private member variables because we are scoped to the book class.","width":384},{"text":"so if this was a freestanding function like a freestanding operator + or something: no go. can't do it","width":384},{"text":"this function is not a member of the book class so it doesn't have any access to its private member variable","width":448},{"text":"s","width":64},{"text":"but if you have","width":64},{"text":"a function that is scoped to the class, then it can go ahead and access the private member variables, both of the current instance and of any instances passed in.","width":512},{"text":"and the reason for that is you need to be able to do that to write copy constructors and stuff","width":256},{"text":"otherwise there's not an easy way of doing that","width":256},{"text":"have a seperate getter() function for everysingle member variable of your class","width":192},{"text":"which you shouldn't have","width":192},{"text":"yeah","width":64},{"text":"uhhh","width":64},{"text":"yeah","width":512},{"text":"yeah if I had all of my member variables were public and I could just access them willy-nilly from anywhere which is really BAD","width":384},{"text":"but if it was true","width":128},{"text":"then I wouldn't need to be scoped to the book class here because I can just go ahead and directly","width":256},{"text":"access the left hand sides mem","width":192},{"text":"being part of that class","width":128},{"text":"right","width":64},{"text":"I'd have to change this to not be scoped to the book class and take two arguments instead of one","width":384},{"text":"but yeah you could do it","width":128},{"text":"its just super not recommended because you don't want people to have unprotected access to your private meber variables because then","width":448},{"text":"they can start messing around with your class and they can really screw up the way that it's configured","width":448},{"text":"wow","width":192},{"text":"okay","width":320},{"text":"lets skip the operator + stuff I think you can figure out how to do that","width":576},{"text":"lets quickly, real quick write a template function swap that is capable of swapping two things of the same type. Okay so we're going to write  a template function so we know it always begins with","width":704},{"text":"template","width":192},{"text":"angle brackest class lets call it T","width":320},{"text":"void swap it doesnt return anything it's just going to swap the arguments, what should my arguments b? T reference","width":1152},{"text":"first","width":64},{"text":"T reference second","width":64},{"text":"why t reference?","width":512},{"text":"right so yeah it's T because I dont know I want the comipler to fill in what T is when I use htis function. why reference?","width":768},{"text":"void","width":192},{"text":"why am I passing in the arguments by reference? I want to change them. so im passing themselves","width":640},{"text":"in by the variables where they actually live","width":64},{"text":"so i'm passing them in by reference here to be able to modify them.okay?","width":192},{"text":" totally out of room because I write too big. So I'm going to write the implementation over here. So right. So you might be tempted to write something like this:","width":576},{"text":"kinda like what we did before with the integers except now we got a t in there okay.","width":1472},{"text":"yah","width":192},{"text":"yeah yeah yeah","width":128},{"text":"tempted to write it this way and that's probably fine for things that are small but what if im swapping like books. yeah I just made a deep copy of a book to move to change you know move this book over there move that book over there right. I forced a deep","width":1472},{"text":"copy to occur here thats probably not what I wanted right. so lets optimize this lets make it fast. so what can I","width":448},{"text":"do instead of making a deep copy?","width":192},{"text":"move them right so ive got a ive go first and ive got second. What I'm gonna do im gonna move instead of copying first into temp, im gonna move","width":704},{"text":"first into temp so now first is empty then move second into first so now second is empty and then move temporary into second. notice ive not made any deep copies at all, all ive done is shift memory around. so if the class has a move constructor this is going to be way faster than doing a you know","width":1216},{"text":"the full deep copy then swap that copy and be very unhappy. So what i'm going to say here instead of this is","width":512},{"text":"T tmp is std::move() first","width":512},{"text":"first is emptied all of first's stuff is in my temporary T im gonna say first is std::move()","width":704},{"text":"second","width":256},{"text":"all of second's stuff is in first second is now empty temporary has what first used to have ","width":768},{"text":"so now I say second is std::move() temporary","width":448},{"text":"so now ive optimized this so that if the class T has a well defined move constructer it wont make a deep copy. if it doesnt it will still make a deep copy because it wont have a move constructor it'll have to make a copy. So this still works","width":1088},{"text":"for stuff that doesnt have move constructors, its not like you're required to have a move constructor now. it's just you're more efficeint","width":320},{"text":"when you do","width":128},{"text":"okay, we'll pickup with triple next time.","width":320}]