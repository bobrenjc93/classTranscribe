[{"text":"(administrative stuff pertaining to exam 3 postmortem)","width":1856},{"text":"let's jump in and discuss disjoint sets","width":576},{"text":"we designed this uptree structure where every node in this tree pointed up at its parent and we used the roots of those trees to represent the disjoint sets","width":1088},{"text":"this uptree structure tells me how many sets are there?","width":384},{"text":"how many sets are there in this disjoint sets data structure right now? 2","width":256},{"text":"there are two roots","width":192},{"text":"every node in this structure refers all the way up to its root and that root is its set representative","width":384},{"text":"so i have two sets currently","width":128},{"text":"and I want to merge these two sets together","width":320},{"text":"remember what operations I get for the union find ADT","width":64},{"text":"or the disjoint sets ADT is defined ","width":192},{"text":"the set representative for a specific item and to merge together two sets","width":320},{"text":"two different items are in","width":256},{"text":"what I am doing now, is saying something like s.merge(7, 4) and i want to merge the sets 7 and 4 together to be one big set","width":832},{"text":"and the question is how do I do that so that I can start to say something about the overall guarantees of the height of this structure","width":832},{"text":"if i cant say anything at all then we know it is linear and then we are sad because we haven't made anything better","width":384},{"text":"so i want to be able to do something that allows me to be able to say something about the height of this uptree","width":64},{"text":"and so you have two different options, and either one works equally well","width":576},{"text":"the first was union by rank, alternatively height, which says that we want to try and minimize the number of times that the total height of the tree is increased","width":1216},{"text":"in which case, i should pick as the root the tree that is tallest so that I don't increase the height of the tree as otherwise","width":320},{"text":"i want to increase the height of the tree as infrequently as possible ","width":256},{"text":"so if i'm able to pick the smaller tree and make that the child of the taller tree so that i don't increase the height of the tree","width":704},{"text":"i will still be increasing the height of the tree sometimes, like when both trees have the same height ","width":192},{"text":"i can't pick one to be the child, then not increase the height of the tree","width":448},{"text":"so in some cases i will still increase the height","width":128},{"text":"but if i have two different sets with uptrees with different heights, i can avoid increasing the heigh","width":384},{"text":"so the intuition here is to try and increase the overall tree height infrequently","width":1152},{"text":"i'm going to pick in this case, the taller of the two uptrees to be the root","width":640},{"text":"so that means that i wanna pick 4 to be the new root and say 7 points up at the 4","width":448},{"text":"so 7 is going to shift down and be a child of 4","width":320},{"text":"now in terms of the array, ","width":192},{"text":"what does this look like?","width":192},{"text":"so let's start with before I did the merge","width":64},{"text":"i've filled in all of the other pointers except for the roots","width":576},{"text":"because it turns out that we can't just have the roots be -1","width":64},{"text":"why not?","width":192},{"text":"how am I supposed to figure out what the height of 4 and 7? ","width":960},{"text":"I need to pick the height of which one is taller","width":64},{"text":"to be the root and if they both say -1, then i don't have a nice way of doing that","width":320},{"text":"furthermore, i could try and traverse the height","width":256},{"text":"but how do i get to the lowest leaf","width":256},{"text":"i could scan the array i guess, but how do I know that 11 happens to be the lowest leaf of the 4 and not the 5? i have no idea","width":448},{"text":"so we have to be a little more cleaver and store a bit more info","width":384},{"text":"what is the height of the uptree rooted at this position? ","width":512},{"text":"we have to be careful that we are using negative numbers still","width":320},{"text":"because anything that is positive refers to an index","width":128},{"text":"so we can't just store the height itself because it is storing an index to another node which may or may not exist","width":320},{"text":"i guess it is always guaranteed to exist. anyways","width":512},{"text":"so we have to be careful when we are storing the heights","width":576},{"text":"furthermore, if we just store the negation of the heights, we can have trees that only have one element in them","width":320},{"text":"i could easily have a node twelve that just sits there","width":192},{"text":"which is the root node but has height 0","width":128},{"text":"so i can't just store the negation of the height, i have to store the negation of the height + 1","width":512},{"text":"so that the one node tree, the height 0 tree, actually stores a -1","width":512},{"text":"the height one tree actually stores -2, etc","width":128},{"text":"so i'm going to store one more than the height, and the negation of that so that it is a negative number","width":448},{"text":"so what am i going to store in the cell 4 then?","width":256},{"text":"-4","width":128},{"text":"the height of that tree is 3, so we store -4. what about 7?","width":384},{"text":"the height of that tree is 2, so we store -3","width":576},{"text":"now when i am doing the merge, i look and say, well the two roots i am merging are 4 and 7","width":832},{"text":"i wanna see which tree is taller","width":384},{"text":"so i'm looking for which root's number is smaller","width":384},{"text":"smaller number means larger height","width":320},{"text":"so which node has the smaller number or largest magnitude","width":256},{"text":"and i pick that to be the root","width":192},{"text":"what do i have to do before i reassign the 7 to point at the 4?","width":512}]