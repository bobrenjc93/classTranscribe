[{"text":"This just the way it is.","width":192},{"text":"The constructor and the destructor don't have any return type.","width":448},{"text":"Of the reason that, it's just, it is.","width":384},{"text":"Yeah.","width":128},{"text":"Why do I put a int in front the of the rectangle there?","width":320},{"text":"Cause the area function returns a value.","width":156},{"text":"The first one does not have a return value cause it's a constructor.","width":242},{"text":"That one does have an int to return a value. And the 3rd one has a void because it does not return anything. ","width":402},{"text":"The only function I could omit are the return type for the constructor and destructor because those are just special. ","width":448},{"text":"OK. Let's start looking at this book class. We probably won't finish today, and we can pick this stuff up on Monday. ","width":930},{"text":"Here's a header file.","width":192},{"text":"For the book class, we wanna fill in the declaration of the copy constructor and the destructor. ","width":512},{"text":"First of all, why do I need a copy constructor for this class, based on just the header file?","width":448},{"text":"Why is it that I want to have a copy constructor for this book class?","width":704},{"text":"Different question: Why would I ever write a copy constructor?","width":640},{"text":"If I want to customize what it means to copy something.","width":576},{"text":"Right?","width":64},{"text":"And condition often that is true that when you actually want to do that, is when you managing dynamic memory, or when you have, in another words, when you have pointers into heap memory. ","width":726},{"text":"So if we look at the member variable of this class, look at the comments that I've left to you, ","width":375},{"text":"string ** lines_","width":151},{"text":"We know from last time that could be 4 different things. It could be a pointer to a pointer to a string, it could be a pointer to an array of strings, it could be an array of array of strings, it could be array of pointer to strings. Right? I think that's all 4. ","width":973},{"text":"If we look at the comment, it says \"line_[I][j] gives us the jth line in the ith chapter.","width":704},{"text":"What is that tell you that string ** lines_ actually is?","width":320},{"text":"array of arrays of strings.","width":256},{"text":"Cause I have 2 subscript operators. So one of them is accessing first array, and the second is accessing that array. ","width":434},{"text":"So lines of i is an array of strings that are in lines of chapter i,","width":448},{"text":"and lines of i of j is the j th line in the i th chapter.","width":320},{"text":"Is that make sense?","width":73},{"text":"This is a 2 dimensional dynamic array. ","width":256},{"text":"Which means that it's gonna be in the heap, which means I'm gonna change what it means to copy my class. ","width":384},{"text":"Why is the default system provided copy constructor not sufficient when you got dynamic memory?","width":448},{"text":"What does the default system provided copy constructor do?","width":512},{"text":"Memberwise copy. Which means it's just gonna copy over the value of the pointer. ","width":384},{"text":"Not the actual, it's not gonna make any new arrays for you. It's not going to, you know, copy the book. It's just gonna say, OK, sure, here's the new book, and it happens to refer to that old book. So if change one of them, you change the other. ","width":832},{"text":"Right? So if I wanna to make a copy of the book and write my notes in it, I'm writing my notes in the same book that everybody else has, which is not at all, should be true. ","width":512},{"text":"So we need to customize what it means to copy a book here, because the default provided one is just gonna do a shallow pointer copy, so then we are gonna have multiple classes referring to the same piece of memory","width":872},{"text":"sort of like the gallery class in the prelecture. ","width":149},{"text":"So let's declare the copy constructor. What do I need to write here when declaring the copy constructor?","width":640},{"text":"Right here.","width":256},{"text":"What is its name? book.","width":137},{"text":"What's its argument?","width":289},{"text":"const book reference.","width":448},{"text":"Why reference first?","width":374},{"text":"Why is the parameter of the copy constructor a reference?","width":202},{"text":"Those are good reasons for using const references","width":1280},{"text":"But why specifically for the copy constructor must have the argument to be a const reference?","width":366},{"text":"Yeah.","width":64},{"text":"If I pass in anything other than a reference here, ","width":512},{"text":"Ignoring pointers, cause pointers won't be a in a copy constructor. It doesn't do the same thing that we want. It must be something of the same type that's passed in, so my choice is either a value, or a reference. ","width":778},{"text":"If I pass in a value, when I pass in anything to a function by value, a copy must be made. I'm changing what it means to do that. So if I pass in the value, I pass in the argument to the copy constructor by value, It's gonna try run my copy constructor again that I'm defining by pass in a value, which is gonna try run my copy constructor again which is...","width":1344},{"text":"Define by pass in a value which is gonna call a copy constructor again, and it's gonna infinitely recurse and will not actually gonna finish. ","width":384},{"text":"So it can't be a value, because we are changing what it mean to even do pass by value in this case. ","width":384},{"text":"So it has to be a reference.","width":181},{"text":"Why is it const?","width":128},{"text":"Right. We shouldn't change other if we are copying something. It doesn't involve me modifying what I'm copying. If I give you a worksheet and say \"go make a copy of that\", I don't expect you to come back with a worksheet like ripped in 2.","width":960},{"text":"You shouldn't modify it, that the original shouldn't be modified through a Xerox machine.","width":448},{"text":"So making a copy of a book shouldn't change the argument that we passed in to copy. ","width":422},{"text":"So it has to be a const. Reference cause we can't make a copy cause we are defining what it means, and a const because it can't be modified. Don't wanna modify this thing. ","width":576}]