[{"text":"Then you have to swap.v ","width":377},{"text":"Sure you can move the root to the last element, or you can move the last element up to the root and then pop back, but then you still need to swap that all the way down.","width":939},{"text":" Try to write the code if you are missing move, it won’t work.","width":214},{"text":"You need to have a swap.","width":193},{"text":"Okay, so we’ve shown that the running times of this push, of this pop depend only on the height of this tree, but if you are giving somebody a priority queue, it don’t have a clue what height is. ","width":900},{"text":"If I told you, oh yeah, the running time of this function is the height of the priority queue, when I first showed you priority queues, you look at me and like, what the heck are you talking about, the height? Of a list? What are you… what? Right?","width":791},{"text":"So height has no meaning to our users, they don’t have a clue what height means, right? Because if you are giving somebody a priority queue implementation, they should be completely oblivious that how you got actually implemented it, right?","width":814},{"text":"So if you say, oh yeah, my running time is O(h), and then like, all I know about is n , the number  of things I put in the heap, or put in the priority queue. What’s the running time in terms of n, the number of things I’ve asked you to add, right?","width":768},{"text":" That’s the big care about, we can’t give them height, they will be unsatisfied, okay? The height of this is something that’s sort of an internal property of our data structure, so we need to be able to say, what is the height as the function of n so that we can say, oh, the running time is actually, in this case, logarithmic in n, log of n, okay?","width":1152},{"text":"So this is gonna leverage a proof that we did, you know, what I think like a week ago from now, where we talked about the number of nodes that were in a perfect binary tree of height h? Right?","width":741},{"text":"And we showed in lecture that that was equivalent to 2 to the h plus 1 minus 1, okay? So we end up with the summation that was something like 2 to the i, from 1 to h, okay? So if this is the number of nodes in a perfect tree of height h, let’s start with that first. What does that tell us about the height of a perfect tree?","width":1589},{"text":"So, if, so perfect tree, and again I’m in the binary world, I’m not thinking about ternary or quaternary or anything like that, I’m thinking perfect binary tree, complete binary tree, so perfect binary tree, we know that number of nodes N is 2 to the h plus 1 minus 1, okay?","width":1856},{"text":"So then what is the height, well we can just solve for h, right? So, you know, we get N + 1 is 2 to the h +1, so we take the log of both sides, and then subtract 1, we have h is log N + 1 – 1, quantity minus 1, okay? ","width":1565},{"text":"All I did was take logs and move stuffs around, right? If N is going like 2 to the h, then the height must be something like logarithmic N. Another way thinking about that is that in order, so this is basically the same thing as saying the h is growing exactly like log N.","width":1889},{"text":"The fix number of nodes in a perfect tree, so there’s not like any case says, well okay, what if N is small, what if N is large.","width":621},{"text":" N is the exactly this value, so whatever this value grows like is exactly like what the height is growing on, so the height is growing exactly like log N, it’s not any worse than log N, it’s not any better than log N, this is exactly log N with some constants, alright? ","width":780},{"text":"Another way of thinking about this is if I’ve got a tree, I give you a perfect binary tree of height h, and I tell you make me a perfect binary tree of height h + 1, you have to kind of, you have to add a whole bunch of nodes in that bottom of those bubbles, alright?","width":1209},{"text":" You have to double the number of nodes in the tree before you get the next height, right? Every time I want a tree that’s one larger, if it’s perfect, I have to fill in the bottom of those level which is always gonna be doubling the number of nodes, right? ","width":960},{"text":"And you can reason about this like what’s the number of leaves in a perfect binary tree of height h, and then you know that the number of nodes you’d have to add is twice that, because each one has two children. All the number of leaves is something proportional to N, so you end up basically doubling the number, okay? So this is for perfect tree.","width":1308},{"text":"Is every heap a perfect tree? No. Could a heap be a perfect tree? Yes.","width":802},{"text":"So I can only conditionally use this fact, only if my heap is perfect could I use this fact to say my height is logarithmic.","width":504},{"text":"But that's not true in general.","width":169},{"text":"So we need to actually prove this, prove that something like this is true for the general case of complete trees.","width":524},{"text":"So I'm gonna start off similarly.","width":356},{"text":"So if we've got a complete tree.","width":241},{"text":"We know that the number of nodes, we can put an upper and lower bound on this thing.","width":861},{"text":"So if I say that I have given you a heap, or a complete tree, of height h, what's the minimum number of nodes that you would need to have that complete tree of height h?","width":1216},{"text":"So we know that every complete tree is a perfect tree up to height h - 1, so we're gonna necessarily have something like 2 to the h-1+1 - 1 number of nodes for the perfect part of the tree.","width":1595},{"text":"which is the same thing as just 2 to the h - 1.","width":221},{"text":"So that's the perfect part, and then how do I get it to be 1, larger when I only have one node.","width":426},{"text":"So plus one, so those go away, so it's just 2 to the h.","width":384},{"text":"And that would look like this, where here is my perfect tree, and then add that one node to it to get it to be height h + 1.","width":1098},{"text":"So that's the smallest number of nodes I could have in a complete tree.","width":204},{"text":"What's the largest number of nodes it could have in a complete tree of height h?","width":201},{"text":"A perfect tree.","width":172},{"text":"That's the whole bottom level is filled.","width":132},{"text":"So then I know that this is bounded above by 2 to the h+1 -1.","width":374},{"text":"So I can bound N on either side.","width":376},{"text":"So I can show, one direction I can show that it's O(N), and another direction I how it's big can somega, so I can show that it's theta.","width":468}]