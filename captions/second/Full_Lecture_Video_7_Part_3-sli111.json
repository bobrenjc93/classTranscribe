[{"text":"Ok.","width":64},{"text":"So we make a stack frame for operator equal, or passing our argument by value.","width":448},{"text":"But our argument is now this thing.","width":300},{"text":"So that means that when the compiler goes to construct that value, for the operator equal, it is constructing it from the thing that I just put in the box.","width":704},{"text":"That's std::move thing, ok?","width":128},{"text":"Remember std::move does not actually move anything. It just says we pretend this is an r value.","width":384},{"text":"Just make whatever you are referring to an r value.","width":320},{"text":"So now, when I do this assignment and I am constructing the argument for the operator equal, I am constructing it from something that I explicitly said to the compiler treat this as an rvalue.","width":704},{"text":"So now the compiler goes and says, fine, I am going to construct an r value book from whatever you just gave me, which happens to be an rvalue reference to a book.","width":512},{"text":"So I am going to invoke the move constructor.","width":192},{"text":"So in my operator equal, I am going to have a new variable called rhs.","width":320},{"text":"...","width":64},{"text":"This something of whatever the type is that we are talking about, doesn't really matter.","width":448},{"text":"I am going to initialize that from a std::move of a, which is an rvalue reference to a.","width":576},{"text":"So I am going to move construct an a.","width":192},{"text":"What does that mean, if ...","width":128},{"text":"Basically what's happening, is the compiler is going to do something like, you know...","width":256},{"text":"Remember this is my thing rhs is being constructed from, std::move of a. ","width":563},{"text":"That's what's happening.","width":97},{"text":"Before your function is invoked, that's what's happening.","width":192},{"text":"It's making right hand side before the function can go.","width":223},{"text":"It asked to put the right hand side on the stack frame so you have your arguments there before the function happens.","width":320},{"text":"So I am constructing my hand side from std::move of a.","width":284},{"text":"What will that do to my picture here?","width":188},{"text":"...","width":314},{"text":"Rhs is gonna point to a, and what will be true about a?","width":240},{"text":"If it is well-written.","width":128},{"text":"It should be like null or empty.","width":250},{"text":"I should leave when I move construct something, I am taking all values from the thing that I am constructing from, putting them in my object, and leaving the thing that I took them from empty.","width":725},{"text":"If I have a box full of stack, here a box that's empty here.","width":209},{"text":"And I take a stuff from that box, and put it in this box. That box'll be empty.","width":211},{"text":"If it's not, what the heck?","width":97},{"text":"That doesn't make any sense right?","width":87},{"text":"So when I move constructing something, I should leave the argument empty, and then myself should look exactly like what my argument used to.","width":428},{"text":"So in terms of the picture here.","width":111},{"text":"Right hand side is gonna point at this memory that a used to have, and a is gonna be empty, for whatever empty means for that class.","width":542},{"text":"So there's only one array, and this example class that I am using here, then, a will probably just have a null pointer here.","width":435},{"text":"Ok?","width":84},{"text":"So now I've successfully created my argument for operator equals, now I'll actually do operator equal.","width":458},{"text":"...which just says swap right hand side.","width":192},{"text":"So now what happens?","width":108},{"text":"What is right hand side?","width":84},{"text":"Oh, sorry, what is this, currently?","width":320},{"text":"This is B, it is pointing to b.","width":502},{"text":"Right?","width":41},{"text":"When I am doing the assignment, b equals something else.","width":202},{"text":"That's effectively the same thing as saying b does operator equal, something else.","width":272},{"text":"So this pointer is pointing at B.","width":174},{"text":"So when I say swap, or star this dot swap right hand side, I am gonna swap whatever is in b with whatever is in right hand side.","width":751},{"text":"Ok?","width":55},{"text":"So my diagram will looks like this now.","width":167},{"text":"B is gonna point at this thing.","width":170},{"text":"This is gonna point at this thing.","width":138},{"text":"Right?","width":93},{"text":"I just moved thing around.","width":94},{"text":"Just swap things.","width":64},{"text":"So now notice that the thing that used to be a has now moved over to B.","width":448},{"text":"So that part of the move assignment has worked as I expected.","width":304},{"text":"A is already empty, perfect, great.","width":172},{"text":"So the move from the user's perspective has happened exactly as they would expect.","width":298},{"text":"And now the only thing left to do is make sure I get rid of the memory that used to be in B.","width":332},{"text":"I know how to do this thing.","width":128},{"text":"I just return.","width":128},{"text":"...which means that this stack frame is going away, which means the destructor for this object has to be invoked.","width":321},{"text":"It's a local variable, it's going out of scope, its destructor must be called.","width":320},{"text":"So destructor's invoked meaning that it goes through and frees this memory for us.","width":320},{"text":"Back in this stack frame, for me, where everything has happened exactly as we would expect.","width":373},{"text":"The memory for b is now gone.","width":157},{"text":"A has been left empty.","width":192},{"text":"No memory leaks.","width":140},{"text":"Everything is what we expect.","width":153},{"text":"And we didn't have to write any extra code for this to happen.","width":128},{"text":"All we had to do is write a copy and swap style assignment operator.","width":269},{"text":"And the move constructor.","width":73},{"text":"We got this for free.","width":64},{"text":"Ok?","width":128}]