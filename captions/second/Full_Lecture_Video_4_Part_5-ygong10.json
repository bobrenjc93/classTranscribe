[{"text":"irk, no, why not?","width":448},{"text":"Whats wrong with that reference?","width":384},{"text":"yeah, I have given you a name for something that no longer exist, you can still use the name I give it to you but it no longer exists, right? So I have an invalid reference, I have given you a reference to stack memory that is gone, so now when I try to use that to set up my image, I'm referring to memory that's no longer there and I get a crash, ok? So this is also a runtime error.","width":1536},{"text":"If you use a good compiler, clang is one of these good compilers, it will tell you th and terrible, it will say saying a reference to local variable and it is bad, don't do that ok? so don't return references to local variables you are about to do something horrible, if you are going to return, the moral of the story here is if you are going to return  either a reference or pointer to something, out of a function ok? You must be able to guarantee that that memory that you are referring to either via other reference or via other pointer, is guarantee to live longer than your function does, right?","width":2880},{"text":"so, the first one I fixed by making sure I put it in the heap because I know that heap memory live longer than my function does. The second one I am referring to memory that's allocated on the stack and so that's not going to guarantee that it is going to live longer than my function does.","width":832},{"text":"only real way to fix this one is to change my return type to make a copy instead, so just png out, so now what it is returning is not a reference to the old memory, but an copy of that memory so then I can actually initialize my new image inside the stack with the memory of that copy ok?, so the bug here was referring to memory that no longer existed","width":1856},{"text":"...","width":1600},{"text":"Oh, so the problem is that what you are giving to, this gets a little bit into the stuff that we haven't covered yet but or we are going to cover today, what this is doing is this is going to invoke the copy constructor when you are setting up that image","width":1216},{"text":"what you are giving it is not a copy of the return value but the actual reference to the return value and the function is gone at that point, so when you are accessing stuff thats not going to work, if I said like, ummm, ","width":768},{"text":"if I said in the initialization for img like const, it might work cause then const references are weird, and they guarantee that the lifetime are extended for a lot, a while, but it... not here. I'm pretty sure that this is broken, I think I've tested it. Go ahead and test it if it doesn't break, then show me the debug output and I can actually did and why that was different. ","width":2112},{"text":"Oh, so right. So when I am returning a reference, I'm not actually returning an address right? because it is a different type it is weird it is like it internally if you think about how  the reference might be implemented, this exactly a wrapper around memory location, but I'm not actually returning a pointer so I just return the variable in it knows if I'm returning a reference of I'm declaring a reference to just rename it. ok.","width":2112},{"text":"So, let's move to our swap function. So I'm curious, is anyone brave enough to write their swap function in here","width":1024},{"text":"In the back, yeah.","width":320},{"text":"Yeah, you can just write it on here,  I got a pen in here","width":448},{"text":"k so what's interesting about this swap function. well, void swap so it is not returning us anything, so it not like it can  return to us something that indicates like how the variables have been changed or something, right? So that means then my arguments to this swap function have to be something .. you hold on the button it is erase yeah so just hold on the button","width":1664},{"text":"so the arguments to this swap function needs to be something, some type that allows me to modify the actual memory of the parameter that I passed in somehow. Somehow I'm doing an assignment inside this function I need to be able to change what x and y are. right? so my parameter need to be something that allows me to do that. So there's a couple ways you could do this, so this is the first one, good excellent um","width":1728},{"text":"so this is good, and then how would I call this? just x and y down here","width":448},{"text":"right? because I need to pass in references so I don't need & they are not pointer, I am just passing in references, so I just passed in x and y","width":448},{"text":"ok? now what does this do?","width":128},{"text":"right? so if we think about what this is doing, when I pass in x and y into this swap function right? I am declaring when the function is invoked, I get a stack frame I get x and y as references initialized at the start of the function, so the x and y inside the swap are going to be initialized to refer to the x and y in the stack frame for main.","width":1728},{"text":"ok? so this is just another name it is a way of saying when you say x inside of swap, we really mean x inside x, so if you change, if you assign into the variable x you are actually signing into the variable x inside of main sometimes it is clear to when I'm talking about this if I just name these different, so maybe I'm going to call this a and b, so then this is a, and that is","width":2048}]