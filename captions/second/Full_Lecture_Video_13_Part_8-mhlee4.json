[{"text":"Then i'm going move with the head pointers then I look at this and then I'm going to move the head pointer again so that head looks there","width":902},{"text":"constant time, right?","width":192},{"text":"easy. Didn't have to update the tail. The tail is still where it is. ","width":124},{"text":"Push three same story, add a node","width":532},{"text":"pointers up","width":98},{"text":"shortcutting some steps here but that's easy. it looks like its constant","width":421},{"text":"if I do this though and I tell you to pop, what happens?","width":988},{"text":"What do I have to do here?","width":170},{"text":"I need to change head, just move this over","width":290},{"text":"And I have to be a little bit careful if I want to return it.","width":241},{"text":"But I'm not returning it. I'm just removing it so that's fine","width":64},{"text":"So that implementation looks fine","width":384},{"text":"Where is the top of the stack if I do it that way?","width":320},{"text":"The head of the list so I'm adding things to the head of the list and the next thing that I'm removing is the head of the list","width":427},{"text":"And this looks okay, alright?","width":225},{"text":"That looks like our best case. That's write that down. ","width":192},{"text":"So singlely linked lists 0 1 for push","width":384},{"text":"0 1 for pop. How would I do peek?","width":269},{"text":"Just look at the head pointer. That's easy","width":358},{"text":"0 1.","width":265},{"text":"So that's fine.","width":64},{"text":"What if I add at the back instead?","width":539},{"text":"If I say the top of my stack is the back of the list?","width":569},{"text":"So I push 2 instead of doing it at the head. I'm going to do it over here so that makes it 2 and I set tail point at that","width":948},{"text":"easy to push back","width":249},{"text":"push 3, easy.","width":235},{"text":"again, same thing","width":128},{"text":"so that doesn't look like it's that hard so maybe this is okay","width":128},{"text":"this might be another valid implementation","width":402},{"text":"what if i do pop now?","width":148},{"text":"i saw somebody shake their head already","width":298},{"text":"what do i have to remove if i'm doing a pop","width":228},{"text":"three","width":64},{"text":"how long is it going to take to remove 3?","width":194},{"text":"n. why?","width":238},{"text":"i got to get to the one before and i don't have any way of getting there without walking the list","width":509},{"text":"i have to be careful, here. ","width":145},{"text":"moral of the story here is that i have to be careful","width":171},{"text":"when i'm using a singlely linked list for my implementation of a stack it really really matters where the top of my stack is","width":647},{"text":"i need to make sure that the top of the stack is the head of the list. not the tail","width":1386},{"text":"so what else could i do?","width":162},{"text":"what's another structure that i could use to implement this stack","width":320},{"text":"double e linked","width":128},{"text":"natural analogy. so let's try that. so we have a head ","width":598},{"text":"all null","width":132},{"text":"easy enough.","width":275},{"text":"where do i insert if i'm going to add a 2 or does it matter?","width":464},{"text":"let's insert it at the tail","width":154},{"text":"and see if that matters","width":321},{"text":"should sort of be your review because we've talked about these operations before but it's good to cover it more than once","width":414},{"text":"so we're going to add something to the tail","width":590},{"text":"2 so that means that it's going to point there. this is going to point there","width":659},{"text":"then we update tail","width":249},{"text":"pretty easy. you just graph that  on the back of the list","width":120},{"text":"we've covered the operation the exact C++ statement that you need to do that before","width":384},{"text":"if i want to do it again i should make a new node","width":256},{"text":"graphed it on the back","width":768},{"text":"so that's all good and fine","width":128},{"text":"that looks all constant","width":268},{"text":"what if i want to remove now?","width":78},{"text":"where do i remove from?","width":258},{"text":"the back, the tail of the list","width":256},{"text":"and how long does it take for a doublely linked list","width":106},{"text":"constant time","width":64},{"text":"why","width":64},{"text":"i can get right to the node that i need to get to to remove the tail","width":384},{"text":"i can set curr directly to this by saying tail pre","width":207},{"text":"and then i can blank out that pointer","width":128},{"text":"the node no longer has an owner so if i blank out this pointer","width":256},{"text":"if i set that to null, this doesn't have an owner anymore","width":192},{"text":"which means that it's going to be deleted by a destructor or by a clear function inside of the unique pointer when i set it to null","width":320},{"text":"that was easy and that was constant time, right","width":384},{"text":"and the front of the list case won't change at all because if it worked for  singely linked list. why won't it work for a double ist","width":451},{"text":"so i could insert either at the tail or head for a doublely linked case","width":298},{"text":"but for the singlely linked case, it made a big deal of difference","width":320},{"text":"so for doublely linked lists it doesn't really matter which one i do","width":256},{"text":"i can do 0 1 push","width":128},{"text":"order 1 pop","width":192},{"text":"and order 1 peak","width":256},{"text":"peek","width":64},{"text":"if the head is at the tail i just look at the tail pointer","width":192},{"text":"if the head is at the head i just look at the head, right?","width":256},{"text":"now which of these would you prefer?","width":820},{"text":"if you were implementing a stack which of these implementations would you pick and why","width":428},{"text":"let me rephrase that","width":64},{"text":"which of these implementations would you not pick?","width":192},{"text":"array","width":64},{"text":"why not an array?","width":342},{"text":"you need to resize it ","width":256},{"text":"amortize a constant","width":128},{"text":"amoritize a constant shouldn't be so bad","width":433},{"text":"it is a little bit more expensive","width":180},{"text":"what's good about an array though the null result is contiguous which means that the operation on the array are going to be very fast compared to hopping the pointers, right?","width":704}]