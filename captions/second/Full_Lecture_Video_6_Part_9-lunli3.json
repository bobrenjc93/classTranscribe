[{"text":"Okay, so eight says \"Add a declaration for the move constructor to our book class header file at the beginning of the worksheet.\"","width":512},{"text":"ok fine. so all the way back up here, what's gonna be called?","width":448},{"text":"what's it argument?","width":448},{"text":"graph graph(not sure)","width":1024},{"text":"rvalue reference to another book","width":128},{"text":"ok, so now because i have this function and this function, the compiler can now choose when it's going to construct a book from another book","width":832},{"text":"they can decide \"okay, is that book that I making it from an lvalue or rvalue\"","width":384},{"text":"okay, if it's an lvalue i invoke the copy constructor and everything is exactly the same as before","width":384},{"text":"if it's an rvalue, i know that i can do something more efficient, so i'm going to this other constructor which is the move constructor, which is gonna to something a little bit better than making a copy","width":768},{"text":"the motivation here if i'm constructing a book from a rvalue to a book,(a book rvalue), that means that's like a temporary,it's going away, it's got a bunch of memory in it,and i want to copy it,but it's going away and no one is gonna use it later","width":1088},{"text":"so rather than you know okay, i want to, here is the pen i want to have that pen and i notice this pen is going to go away immediately anyway, rather than okay clone the pen have a pen over here and delete the pen okay now i have got","width":768},{"text":"two pen, right? instead say okay,make another pen from this pen but it's temporary is gonna go away anyway, go ahead and just steal everything then leave it empty","width":768},{"text":"no memory allocation. none at all. no heap memory allocation at all. just swap it. okay, moved it. took all of values from overhere, moved overhere, left this one empty","width":832},{"text":"unfortunately there is still two pens,but one of them is empty so then since i had the temporary value that actually is a temporary, it's gonna have a descructor invoke. it's empty so the descructor is like okay fine,yes delete nullptr fine. doesn't do anything, very fast","width":1024},{"text":"and now i've not done. this has everything i need in it, and it's going away. no one is going to look at whatever again. i'm gonna copy all values and then throw away this one","width":512},{"text":"why that was useful? this already has everything you need in it and you know it'a a temporary if you are in the move constructor, so you just go ahead and steal everything from it and leave it empty. and then when it's released, the dectructor invoked which is now operating on an empty object so it's not gonna to do much","width":1216},{"text":"alright. real quick, i want to write the swap helper function cuz i'm going to use it again.","width":768},{"text":"let's write it. so i guess let's just put it right here. so the swap function is a member function that take another reference to a book, right? all it's gonna do is exactly what you'd expect swap the member variable. alright","width":960},{"text":"so i'm just gonna say ok void book::swap(book& other)","width":960},{"text":"lazy using std::swap, so now i wanna take swap, it will means std::swap","width":640},{"text":"so swap(lines_,other.lines_); swap(lehgth_,other.lehgth_);swap(size_,other.size_);","width":2560},{"text":"okay, so just swap all the member variables. you can do that with like temporary and thru(?) values whatever you want to do that, it just sawping all the values. I'm just using a bulit in function called standard swap that swap any arbitrary value","width":960},{"text":"so this is just i don't have to repeatedly say std::swap. in this function, i'm gonna to pull in std::swap into the global scope, just for this function. that's the way you don't have to say std many times","width":1216},{"text":"Q&A, no sound","width":1088},{"text":"so right,the question was could i use a pointer here to the other thing i want to swap with? yes, the answer is yes. and the discussion is kind of the same thing when we are talking about writing the swap function where if we take in a pointer we have to handle the case where mighr be null. we take in a refference that can never be null so it's not possible for me to invoke swap on like a null book because there isn't one. so i have to deal with null check here","width":2048},{"text":"yes we have to kind of include <utility>, hopefully have that. nope, i think it's mighted included itself but yes i'll need to include","width":1600},{"text":"again, i mean the swap calls, you can write the swap function yourself the swaps pointers, integers or whatever. you kind of know how to do that. i'm just using a built in function to save time","width":576},{"text":"Q&A, no sound","width":512},{"text":"unfortunately not, there is not a way saying ok for every attribute call swap, there might be in the future but not for c++11, probably not for 17 either. you're looking for something called reflexion, if you're curious","width":1152},{"text":"ok, alright. we've got a swap function, i want to finish this worksheet, i'm gonna finish the first sheet for the entire semester. okay,so we've got a swap function, now let's write the move constructor for the book class. okay? as it would appear in this cpp function, i've given you a hint that i'm just gonna write it. but the hint is that it should remind you of the copy and swap idiom for the assignment operatot, right? it's gonna look very very similar","width":1792},{"text":"so i'm gonna take my (book&& other), and remember my goal of the move constructor is to steal all of the valuse from this guy and leave the argument empty, right?","width":1856},{"text":"that's my method body, what do i need to do in the initiallizer?","width":640}]