[{"text":"if you are working with a single threaded process and use sigprocmask","width":416.18181824684143},{"text":"guess what, if you're compiling with pthreads, then use pthread_sigmask","width":491.18181824684143},{"text":"this allows you to have different masks for different threads","width":897.1818182468414},{"text":"so now we can talk about whether a signal will be delivered","width":519.1818182468414},{"text":"for a multithreaded process","width":215.18181824684143},{"text":"and we saw that it will be delivered","width":532.1818182468414},{"text":"to one thread and it can be any thread that is not blocking the signal","width":2151.1818182468414},{"text":"so what does this mean in practice? in practice this means typically in our initialization code before we called pthread_create","width":619.1818182468414},{"text":"let's just try and block everything, let's just serve a big mask and say hey we don't want to know about signals right now","width":393.18181824684143},{"text":"and then later in one particular thread, we'll say we'll deliver signals to this particular thread","width":370.18181824684143},{"text":"and we'll lower our guard, we'll lower the mask for that particular thread","width":358.18181824684143},{"text":"so what's it mean when a thread actually gets a signal","width":163.18181824684143},{"text":"it means that thread is going to be stopped from executing the code that it's currently working on","width":343.18181824684143},{"text":"and they are going to steal it","width":104.18181824684143},{"text":"we're going to use its stack","width":132.18181824684143},{"text":"to execute the code that we write inside the signal handler","width":387.18181824684143},{"text":"so anything it was in the middle of doing, let's say it was in the middle of malloc, let's say it was in the middle of updating a data structure","width":515.1818182468414},{"text":"that is put on hold","width":170.18181824684143},{"text":"whilst we do whatever is inside our signal handler","width":183.18181824684143},{"text":"this is why things can be signal unsafe","width":307.18181824684143},{"text":"suppose your halfway through updating your data structure or suppose malloc is updating its data structure","width":348.18181824684143},{"text":"and then you try to go in and do something to that datastructure","width":246.18181824684143},{"text":"whoops now you're reading and writing from the wrong bytes","width":387.18181824684143},{"text":"we can't use mutex locks for this to prevent this because we are actually stealing the thread in order to run our signal handler code","width":783.1818182468414},{"text":"so I'll talk about a way around this in a moment where we can take a lot more careful control about when and how we handle particular signals","width":722.1818182468414},{"text":"okay so how do I learn more about this?","width":319.18181824684143},{"text":"on linux, not on your mac, but on linux, in section 7, there's a whole long article all about signals","width":603.1818182468414},{"text":"so we use -s7 to say go to section 7 and we can read all about that","width":939.1818182468414},{"text":"so let's talk about appending signals","width":141.18181824684143},{"text":"remember appending signals is our signals we're about to throw","width":534.1818182468414},{"text":"and pending signals work in the opposite way to our signal disposition","width":410.18181824684143},{"text":"that when we call fork the new child has nothing","width":550.1818182468414},{"text":"on the other hand if you call exec some sort of exec call","width":488.18181824684143},{"text":"pending signals are preserved","width":256.18181824684143},{"text":"so that means you could do something like that following","width":197.18181824684143},{"text":"let's fork and then in the child...","width":446.18181824684143},{"text":"we know there's nothing appending yet because we've just forked right?","width":303.18181824684143},{"text":"so let's deliberately raise something here","width":763.1818182468414},{"text":"okay so I'm going to raise SIGINT","width":225.18181824684143},{"text":"now if I hadn't done a signal mask at this point that could be delivered straight away","width":338.18181824684143},{"text":"whoops I've just managed to control C myself","width":337.18181824684143},{"text":"but instead in this little example, we're going to suppose...","width":402.18181824684143},{"text":"we've already set our mask","width":602.1818182468414},{"text":"suppose our mask already includes SIGINT, in other words, I'm not...","width":286.18181824684143},{"text":"going to accept your SIGINTs right now, talk to the hand right? I'm blocking this","width":275.18181824684143},{"text":"but the next thing we do is we exec something","width":626.1818182468414},{"text":"wahahaha what happens now?","width":406.18181824684143},{"text":"pending signals preserved","width":167.18181824684143},{"text":"the mask gets reset","width":160.18181824684143},{"text":"because that's what happens when you...","width":255.18181824684143},{"text":"oh, wait wait","width":243.18181824684143},{"text":"I'm certain that if in my exec code, if that now changes the mask, it can get my control C, I could actually interrupt a process before it has even started up by generating a pending signal","width":1249.1818182468414},{"text":"so my other process will get the signal later when the mask is changed","width":847.1818182468414},{"text":"and we won't say generated, we'll say delivered!","width":1501.1818182468414},{"text":"so reasoning about signals and working with them is tricky because we have to think about the timing of when things happen and we have to be careful about what our masks are","width":1165.1818182468414},{"text":"right so I've talked about pending signals","width":343.18181824684143},{"text":"if I want to send a signal, if I'm inside a multithreaded program I want to send a particular thread I can use pthread_kill","width":803.1818182468414},{"text":"if I want to just send a signal to my whole process I can send raise, if I want to send it to another process, I can use kill","width":837.1818182468414},{"text":"so signals are at the process level","width":220.18181824684143},{"text":"however, in a multithreaded process which thread actually catches them and performs a signal handler that you've installed","width":668.1818182468414},{"text":"is dependent on the signal mask of all your processes","width":372.18181824684143}]