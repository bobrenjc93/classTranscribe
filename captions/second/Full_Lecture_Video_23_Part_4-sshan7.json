[{"text":"vice versa","width":103},{"text":"so what do they stand for? they stand for host to network short","width":290},{"text":"and network to host short","width":195},{"text":"[silence]","width":1129},{"text":"so here's an example","width":179},{"text":"where we want to specify the port","width":211},{"text":"as port 1100","width":182},{"text":"notice how I chose a port greater than 1024 ","width":189},{"text":"and I want to set it directly into this structure here","width":291},{"text":"socket address","width":285},{"text":"and so I have to remember to actually set this up to be the network","width":455},{"text":"the network port number","width":308},{"text":"so this port number is actually going to be passed directly into the network card we're going to assemble the packet and that packet will have these bytes in now the correct order to say okay [something] on this particular port","width":1085},{"text":"you can use these inside your own code","width":205},{"text":"let's say you wanted to have a high performance server","width":236},{"text":"and you're not going to send ascii information, you actually want to send binary information","width":236},{"text":"and you want to send say the position of your players to all of the other, you want to cast it out to all of the order players on your game server","width":768},{"text":"you would have to decide on your protocol to say am I going to send this out in little endian or big endian format","width":312},{"text":"and you could use these kinds of calls to make sure that it doesn't matter whether your C code is compiling on an ARM platform an Intel platform","width":591},{"text":"that we always on the network are sending bytes out in the same order","width":368},{"text":"same endianness ","width":154},{"text":"alright so that's just a little aside, you'll see these codes and now you know what they do","width":250},{"text":"and here's the other one where you use it for a long so you can use it for 32 bits","width":434},{"text":"right so okay right","width":291},{"text":"so it's quite often said that setting up a server takes four cores","width":285},{"text":"we better say what they are","width":233},{"text":"and it's a common exam question or interview question to say what's the order of these?","width":306},{"text":"and what does each one do?","width":162},{"text":"right so the first one is easy, hey we need a socket","width":181},{"text":"you're not going to get very far without a socket","width":112},{"text":"we need a way to configure our network","width":339},{"text":"and a socket gives us back a file descriptor that we can then start to use","width":248},{"text":"once we've got that file descriptor","width":289},{"text":"we want to bind it to a local port","width":921},{"text":"let's bind it so we are now going to be on a particular local part and we set it up, we pass it","width":627},{"text":"now actually we're ready to go","width":145},{"text":"here's the nice thing that we can do with server sockets","width":269},{"text":"we can ask the kernel to do that little handoff trick and to start queuing up any connections","width":364},{"text":"so now we can start listening","width":213},{"text":"at that moment...","width":204},{"text":"we're live!","width":71},{"text":"our kernel is starting to actually accept connections for us","width":266},{"text":"and we'll generate a small queue of incoming connections that we can now start to process","width":375},{"text":"so with listen, we actually specify the queue size","width":660},{"text":"so as part of that little handoff process when we say oh actually go and reconnect to me next time on this other port number","width":396},{"text":"now the kernel has taken that and said okay by the way expect connections on this other port number, so internally its got a little queue","width":516},{"text":"when we want it from our user's side, we call...","width":339},{"text":"yes I'm prepared to accept this reverse call","width":520},{"text":"accept!","width":411},{"text":"so on the server side, when you call accept, you get...","width":407},{"text":"a new file descriptor","width":268},{"text":"okay so here's a big gotcha","width":156},{"text":"is that you've now actually got two file descriptors to play with","width":222},{"text":"if you want to be talking to your clients that are connecting","width":226},{"text":"this is one","width":202},{"text":"you get a new file descriptor each time accept returns","width":397},{"text":"also, this blocks","width":634},{"text":"until we have a client","width":243},{"text":"if your code is a bit slow in calling accept","width":185},{"text":"don't panic, that's why we called listen","width":148},{"text":"listen says look uhh my user code may not be able to call it except immediately so have a little backlog of connections that the kernel will maintain","width":720},{"text":"and hopefully I'll be able to call accept in the future","width":169},{"text":"so its very simple code, very simple server","width":306},{"text":"we can just call accept once, and that's it and that's what we'll do in a demo in a moment","width":231},{"text":"later can call accept in the loop to process one client at a time","width":399},{"text":"probably not going to be the best webserver in the world","width":222},{"text":"but hey it works and we can run that on some tiny embedded hardware","width":331},{"text":"later we might do things like hey let's for every accept call start a new thread","width":405},{"text":"and then everybody can talk to my server in parallel","width":387},{"text":"well that works until a thousand people try to connect and then you have a thousand threads that start on a machine with 8 CPUs that's probably going to work out so great","width":710},{"text":"so then we need to start figuring out even better ways to have a high performance server","width":368},{"text":"but anyways that's our four calls, socket, bind, listen and accept","width":240},{"text":"alright let's see this in action","width":300},{"text":"ooh look code!","width":192}]