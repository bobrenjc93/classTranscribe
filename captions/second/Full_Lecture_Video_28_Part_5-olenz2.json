[{"text":"And when the user says insert a vertex here's the data I want you to insert with this vertex","width":320},{"text":"I put it in this list and I give them back a vertex object that itself just points into the list. So they can ask that vertex, hey what's your picture and it just dereferences this pointer and goes to that list node.","width":768},{"text":"[Long student question]","width":768},{"text":"It could, the issue with that is you don't necessarily want to have to copy the vertex data if you're giving it to a user","width":768},{"text":"If the user wanted to hold a couple vertices, its easier to just have them hold a couple sort of shell classes that just point at the vertices in my list rather than having them hold the whole vertice including the picture itself too","width":1152},{"text":"Removing a vertex in the edge list representation will take O(m) time and the reason for that is because I have to scan the edge list, I do not have to scan the vertex list.","width":1088},{"text":"I'm assuming I'm being given the vertex itself which itself will be a pointer to the list node in the vertex list","width":640},{"text":"Alright, so removing a vertex in an adjacency matrix.","width":512},{"text":"How long is that going to take me?","width":192},{"text":"O(N^2) right, I have to again get rid of a row and a column and maybe getting rid of a row is easy but getting rid of a column is hard but maybe getting rid of a column is easy but then getting rid of a row will be hard.","width":960},{"text":"Depending on how you've laid out your matrix, one of those will be painful and you have to shift over a lot of data, so removing a vertex would be O(N^2)","width":768},{"text":"What about an adjacency list representation, so if we have the picture above on the worksheet, how long does it take me to remove a vertex there?","width":768},{"text":"O of the degree of that vertex","width":256},{"text":"Again, the vertex when I'm asking to remove a vertex, they're giving my vertex struct which itself has a pointer directly into the vertex list of where that vertex exists, so then when I for example if I'm removing W, what I'm being given to do the removal is a pointer directly there.","width":1600},{"text":"so what do I do when I need to do this removal, I want to remove W, is it fine to just remove W from the linked list constant time? No.","width":640},{"text":"Why?","width":256},{"text":"Right, there's a bunch of edges in the W, when I'm asked to remove W, for the graph to continue being a graph it can't have edges that go to nonexistant vertices, so I need to also get rid of any of the edges that are incident on w","width":1280},{"text":"So how do I do that given this representation?","width":256},{"text":"Yeah?","width":128},{"text":"So I sort of use my list here to get rid of the circled nodes because those are the things that are in the lists other than mine that I need to delete","width":1728},{"text":"and then once I'm done, I get rid of my nodes, and then I get rid of w","width":320},{"text":"Key observation here is again that removing a specific list node in a linked list when you have a pointer directly to it can be done in constant time, so each one of the operations that I did when I circled the node to delete it can be done in constant time.","width":1664},{"text":"So then the question is how many of those operations did I do?","width":320},{"text":"Two for every adjacent vertex of W, so twice the degree of W, so in terms of big-O this is just going to be the degree of the vertex that I'm removing so this would be big O of degree of V","width":1152},{"text":"That make sense?","width":320},{"text":"Alright, so adding an edge, so if I want to add an edge between U and V in the edge list representation, how long does that take?","width":704},{"text":"again I'm going to assume that U and V are actually vertex structs that they are giving me that can only be created by interacting with the graph itself so I know that these two vertices exist and furthermore I'm assuming that the users aren't going to be dumb and add edges that already exist","width":896},{"text":"So don't worry about checking to ensure the constraint the graph is simple, that's the users' problem not ours","width":448},{"text":"So I'm just adding an edge UV to an edge list representation, how long does that take?","width":406},{"text":"Constant time","width":64},{"text":"I just push_back onto the edge list","width":234},{"text":"What about the adjacency matrix?","width":215},{"text":"O(1)","width":64},{"text":"Set two bits to one","width":256},{"text":"not increment the bit","width":192},{"text":"set the bit to 1","width":64},{"text":"How long does it take me to add an edge in an adjacency list representation?","width":576},{"text":"I hear O(1) I agree with O(1), why is that? Suppose I wanted to add an edge between U and Z, why does that take constant time?","width":994},{"text":"Yeah?","width":256},{"text":"Right, I go to U, I'm adding an edge between two given vertices, so I know that my input is a pointer here and a pointer here, effectively, so then all I need to do is add a new node to the front or back doesn't matter how you do this depends on whether you have a head pointer and a tail pointer or not, but","width":1333},{"text":"Pick your favorite push, and add Z to the adjacency list of U, and then go to Z and add U to the adjacency list of Z","width":682},{"text":"and I know that I can add things to linked lists in constant time and all I did was add two things, I also need to be careful and set up the pair pointers, but that's also easy to do, I added the node I already have a handle on that node I just say .get() on it or whatever, get pointer to it and setup those pairs","width":1079},{"text":"That all can be done in constant time, just a bunch of pointer manipulation.","width":320},{"text":"Didn't have anything to do with the number of vertices that I had, had nothing to do with the number of edges I had it was just easy to do that.","width":448},{"text":"So what about removing an edge, and again pay attention the signature, I'm giving you two different vertices, so I'm giving you two vertex structs, I'm not giving you a special edge struct, I'm giving you two vertex structs","width":1024},{"text":"So removing and edge between U and V in an edge list representation, how long does that take you? O(m) I have to scan the whole edge list looking for an edge that corresponds to this pair that I've asked you to remove","width":1152},{"text":"There's nothing fancy I can do there it's O(N)","width":256}]