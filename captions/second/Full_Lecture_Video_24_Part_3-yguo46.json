[{"text":"Are you designing an appropriate hash function for this specific problem?","width":259},{"text":"I think so.","width":128},{"text":"You have to be careful in general. ","width":258},{"text":"So think of whether that will work in the general case. It might work for this input. ","width":448},{"text":"But will it work for arbitrary keys, for arbitrary table sizes?","width":248},{"text":"If you can, then true. If you can't, then, like, if I just tell you, write the hash table","width":1024},{"text":"You don't even know your key type is yet.","width":152},{"text":"So you just have to use the hash function directly. If I tell you specifically like, your input will only be, the names of the current CS professors as of 2015, you can design an appropriate hash function for that specific problem, for sure.","width":832},{"text":"But we are writing for the general case where we have no idea what even what keys might be.","width":384},{"text":"I'm just using a particular example here so you can see what's going on. But in general your hash function could be anything, your table size could be anything, your key could be anything. ","width":576},{"text":"So you might be able to design something specifically for this problem, but it might not generalize","width":256},{"text":"This will generalize.","width":128},{"text":"OK. Let's insert 4.","width":256},{"text":"4 mod 7, 4, right?","width":384},{"text":"So I'm gonna insert here.","width":320},{"text":"Fine. 13 mod 7. What's that gonna give me?","width":896},{"text":"Sorry?","width":320},{"text":"remainder.","width":384},{"text":"The remainder is 4.","width":128},{"text":"So 13 mod 7 is gonna give me what?","width":512},{"text":"The very last thing, right?","width":108},{"text":"cause if it's one more, it would be 0. So it's gonna be the last thing here.","width":192},{"text":"everything is been sort of happy up till this point. ","width":640},{"text":"29 mod 7?","width":384},{"text":"Now it's giving me 1.","width":320},{"text":"So now I have a collision. ","width":320},{"text":"I have 2 things that wanna to occupy the same location.","width":192},{"text":"So what is my collision resolution strategy hre?","width":320},{"text":"Yeah. Just add it to the list. However that's convenient. Maybe I put it to the end, maybe I put it up front. In this case, based on the picture I've drawn, I ought to put it at the front cause I only have a head pointer. ","width":832},{"text":"So I'm gonna put it at the front. So I'm gonna say, OK, we are gonna have 29, ","width":768},{"text":"pointing at the 8","width":226},{"text":"So now 29 and 8, live in the same slot. ","width":192},{"text":"11 mod 7?","width":384},{"text":"So now I've got put something else in the position of the 4","width":384},{"text":"Now I need to insert the 11","width":320},{"text":"And then the last one, 22","width":832},{"text":"22, it give me 1 again, right?","width":256},{"text":"So, I have to, add a cell here, ","width":512},{"text":"Yeah?","width":576},{"text":"Oh OK. Right. I could do either. I didn't draw my tail pointers. So it's just easier for me to adding at the head. But yeah, if you have a tail pointer, you could push_back.","width":1344},{"text":"You just wanna make sure. The key thing you wanna make sure is that your push function is gonna be constant time. So pick the end of the list for which that's convenient. ","width":512},{"text":"If you have, you can assume you got a tail pointer, which you can pretty always assume that, it doesn't really matter.","width":374},{"text":"Here I only drew the head pointer so I was only doing one thing.","width":384},{"text":"Is that make sense? Basically the idea here is if you are inserting, you hash your key, you mod the size, you go to the bucket, where belongs, you need to insert into that bucket, ","width":1111},{"text":"Now, something about that should sort of feel potentially bad.","width":654},{"text":"What is that, what's the nagging feeling you got?","width":278},{"text":"Well the concern is that it might not be constant time to the find, right?","width":384},{"text":"Our list is sort of growing in length.","width":256},{"text":"We don't know if I ask you the question what's the length of the list at bucket x, you don't really know the answer. It could be large, it could be small, we are not sure yet.","width":704},{"text":"So it looks like it might not be constant time.","width":172},{"text":"So we need to do some kind of analysis that shows the length of the list can be bounded. ","width":384},{"text":"At least in expectation.","width":192},{"text":"So we have to do that now.","width":192},{"text":"So this work in terms of revolving collisions, the question is, does this actually get us a good running time?","width":512},{"text":"It turns out if we are not resizing, no. So we have to figure out how to handle this.","width":320},{"text":"This is right sort of the problem we have at this point.","width":256}]