[{"text":"Ok, alright, let us think about another traversal.","width":640},{"text":"This is the last traversal we are going to talk about and then we will move on to a new data structure, which is fun. ","width":256},{"text":"So, we're going to write another function, traverse levels.","width":384},{"text":" Actually, hold on, I forgot something.","width":320},{"text":"Sorry, go back, forgot something. ","width":256},{"text":"So, as it stand, users can't invoke our traverse function, right?","width":320},{"text":"Cause itâ€™s private, so it's sort of useless.","width":256},{"text":"So let's create a way for users to be able to invoke this traversal function.","width":256},{"text":" How might that look?","width":192},{"text":"Where is it going to go?","width":128},{"text":"Void traverse, taking a functor.","width":128},{"text":"Where's it going to go?","width":64},{"text":"Public.","width":64},{"text":"Is it going to be a template?","width":128},{"text":"Yes, it has to take a functor.","width":256},{"text":"Right, I have to take in functor to this public function and pass it down through all of the recursive calls as well.","width":448},{"text":"So this is also going to be a template function.","width":128},{"text":"So it'll look, in the public section it'll look something like template, class, fun, void, traverse, fun fn const. ","width":1280},{"text":"Again const cause its promising not to modify the tree and we need it to be const to call it through const reference. ","width":384},{"text":"What would the implementation of that look like? ","width":256},{"text":"What'd the body of that be?","width":256},{"text":"It's a one-liner, I'm not even going to write it. ","width":128},{"text":"Traverse with first argument, what's the first node I'm going to call traverse on?","width":704},{"text":"Root arrow get, or sorry, root dot get and fn.","width":512},{"text":"And that's it. ","width":192},{"text":"They just have to kick off the recursion.","width":192},{"text":"So now we can actually, now users can actually print their stuff. ","width":256},{"text":"Ok. Now let's switch gears and talk about a different traversal.","width":320},{"text":"Oh no, question? OK.","width":64},{"text":"This allows me to do anything on the elements of my tree.","width":1280},{"text":"So, I could have just printed them out, if all I wanted was to print things, I could print them.","width":448},{"text":"This is more generic than just printing.","width":128},{"text":"A user can give me anything here.","width":128},{"text":"So, this could be traverse the tree and add all the elements in a certain order into a list.","width":384},{"text":"This could be traverse the tree and based on the value in the node make a firework appear on some graphic display. ","width":384},{"text":"I have no idea what's happening, I just know they have a function that they've given me that says please run this on every data element of the tree. ","width":512},{"text":"So, it could be printing, it could be any number of other things. ","width":192},{"text":"Yea. Yes I could. Yea. ","width":960},{"text":"So his question was could you make one of these that is super generic that takes 3 different functors, one that's called as you get to the node, one that's called after the left has been recursed on, and one that's called after the right has been recursed on. ","width":832},{"text":"Yes. And you could customize what happens in pre-order, in-order, or post-order. ","width":256},{"text":"OK. Right. So now, for real, let's move on to this last traversal. ","width":640},{"text":"This is going to invoke the provided functor on the elements in order according to their levels. ","width":512},{"text":"So, instead of either pre-order or post-order, I'm printing these things out level by level. ","width":960},{"text":"So, A would be the first thing, then B, then M, then C, then H, then D, E, I, J, F, G, K, L. OK. ","width":896},{"text":"So, I'm printing this out level by level from left to right. ","width":256},{"text":"So the question is, how do we do that? ","width":320},{"text":"How do we get that to happen? ","width":192},{"text":"And my hit is that we're going to use some kind of ordering structure. ","width":704},{"text":"So we've talked about ordering structures, right? ","width":128},{"text":"We've stacks, queues, and priority queues, all of these can be thought of as ordering structures because all they really let you do is put something in and take something out. ","width":512},{"text":"So it's a way of ordering you data in some way. ","width":128},{"text":"So we're going to use some kind of ordering structure to keep track of sort of the next things that we're going to be invoking this functor on. ","width":576},{"text":"And we want this to go level by level. ","width":192},{"text":"How might we do that?","width":256},{"text":"Oh, I'm going to use, it's not going to be a priority queue here, cause theres not really a priority value that I need to have here. ","width":1024},{"text":"So it's either going to be a stack or queue. ","width":256},{"text":"Well, let's think about what might I want to do for A. ","width":512},{"text":"Let's say I'm currently at node A. ","width":256},{"text":"We don't know how we're getting there yet, but let's say we're currently at node A. ","width":192},{"text":"What are the next 2 things to be printed? ","width":192},{"text":"B and M. ","width":192},{"text":"Right? But it's hard to do recursion here. ","width":320},{"text":"If I recursed on my B, it's going to want to recurse too and go to all its children. ","width":384},{"text":"So, I can't really use recursion here nicely. ","width":192},{"text":"I'm sure you could, but we're not going to. ","width":192},{"text":"I have access to the things I want to print next, and I know what order. ","width":384},{"text":"It should be B and then M. ","width":192},{"text":"So, I heard queue. ","width":192},{"text":"So what if we had a queue? ","width":64},{"text":"We're adding things there and moving things there, and I'm currently at the A. ","width":576},{"text":"I do whatever I need to do on A, cause that's the node I'm currently at, and what do I do to this queue? ","width":384},{"text":"Push B and I could push M, or pointers to them really. ","width":448},{"text":"I could push B, then push M. ","width":192},{"text":"OK. And how do I get to the next node I need to print? ","width":384},{"text":"Yea, pop it off the queue. ","width":384},{"text":"So B can pop. ","width":64},{"text":"So I can say B is the next node I want to be at, so we're going to pop the B off, now we're going to be here. ","width":448},{"text":"And then we can do the same thing. ","width":128},{"text":"I know that M is coming next and it should be followed by C and H. ","width":256},{"text":"So I'm going to push C and then I'm going to push H.","width":192}]