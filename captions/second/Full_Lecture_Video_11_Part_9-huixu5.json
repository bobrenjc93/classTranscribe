[{"text":"so,we have the owning pointer head that point at the node.","width":384},{"text":"one , and the next node two and the next node three and last pointer pointer set to null","width":1216},{"text":"what should push front to do, well this is the ADT function that add something to the front of my list","width":448},{"text":"so how to implement that for single linked list.","width":384},{"text":"i need to make a unique_node first","width":128},{"text":"first i need to make some node that said has data 0;","width":384},{"text":"okay,and then need to set its next pointer to what.","width":448},{"text":"the current value of head which means i am gonna to move it because it is a unique_pointrer","width":256},{"text":"so this is gonna to move to here pursue a way you know that something point to this node and what?","width":704},{"text":"move curr to the head. so the curr actually don't owned what does it have.","width":192},{"text":"that piece memory head does.","width":192},{"text":"here is basically.","width":256},{"text":"how long did that take?","width":128},{"text":"in terms of n","width":128},{"text":"the number of the elements in the list.","width":64},{"text":"constant, i just did some pointer assignment.","width":256},{"text":"i didn't have it did not depend on how long this list could go;","width":320},{"text":"in the , i don't know which direction of it gonna be.","width":256},{"text":"and it wouldn't change adding something to the front of it.","width":192},{"text":"right?","width":64},{"text":"it is constant time.","width":128},{"text":"so for the singled linked list,","width":128},{"text":"push front is o(1);","width":64},{"text":"it's push_front is o(1).","width":704},{"text":"now,what do you want to do next","width":512},{"text":"pop_front() on singled_linked list?do you want to do it on the doubled_linked list?","width":64},{"text":"push_front","width":192},{"text":"for that part.","width":64},{"text":"so do you run it this way and this way on the table","width":128},{"text":"doubled_linked,what to get in the doubled_l","width":384},{"text":"doubled_linked list.","width":64},{"text":"it's what does it look like.","width":256},{"text":"well, i am gonna still have a head, and it's gonna point to node which is longer now.","width":896},{"text":"each one of this is unique_pointer and this is the row pointer i just use the arrow.","width":640},{"text":"ok , how do i add a node to a doubled_linked list at the front ?","width":576},{"text":"the  look of  any different? no , i need to do one more additional step but the function look on whole different.","width":896},{"text":"i make a node of the right sides, the right dat i am gonna to set previous to null.","width":512},{"text":"some gonan have , you know that gonna set to its previous to null.","width":64},{"text":"you know i am gonna to have a curr and then what's assigning  the next step, i assign the next step next to the head","width":704},{"text":"so head don't gonan to pointer there anymore.","width":64},{"text":"then what , am i done? i am gonna to fix the previous pointer . curr next previous","width":704},{"text":"please point to the curr .get().","width":64},{"text":"i am gonna to do the same thing the curr and head. there is little bit more wok.","width":512},{"text":"but it still depend on the number of the elements.","width":192},{"text":"the linked of double linked lis has no impact of the function","width":576},{"text":"so the double linked is also constant","width":448},{"text":"make sense,good","width":192},{"text":"all right, what about the vector","width":384},{"text":"this is a list who implement base on the vector.","width":128},{"text":"and the the vector is implemeted with array. the elements always started on the 0.","width":448},{"text":"increment the row of throw the array.","width":256},{"text":"so that means the the list gonan look like this","width":704},{"text":"this is always enough room for it ,1,2,3, and all the sets doesn't matter","width":896},{"text":"how do i push in front of this","width":384},{"text":"i am gonna make space for it ","width":192},{"text":"i remove3 over here , 2 ,1, here. so it's gonna look like this.","width":512},{"text":"how long did that take in terms the num of the list","width":1216},{"text":"o(n). i have to do the  linear shift.","width":192},{"text":"every thing need to remove over a element , actually one over that.","width":640},{"text":"how any elements in the list?","width":64},{"text":"so this is gonna to be o(n).","width":512},{"text":"what about the verse operation","width":320},{"text":"i want to remove the first of the list ,how could i do that, so i have to goback to our list","width":576},{"text":"the single list ,how do i do that?","width":64},{"text":"and i need to grid of the first node have the head point to the next one.","width":1152},{"text":"say that, what would that do?i don,t have any more . just head;","width":1664},{"text":"s this is gonna to become null. and head is gonna point to what  that was","width":192},{"text":"and other unique ptr so that first node now? no okay? there are no owning pointer to that node","width":1024},{"text":"move assignment. head would leak the memory for that , this is gone","width":448},{"text":"that node of the map we got to move the assigning have to some else","width":448},{"text":"we need to delete first and allocate the memory, the dame thing happen here, just different function, how long does it gonna take?","width":768}]