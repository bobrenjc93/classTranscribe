[{"text":"Ok, class welcome class to CS 241","width":324},{"text":"First announcement","width":101},{"text":"Yes, CS 241 is a lot of work but you may have noticed there are seniors still walking around in this building","width":397},{"text":"They survived CS 241 and you can too","width":255},{"text":"Why not get a T shirt","width":171},{"text":"Yes I appreciate its a lot of work","width":97},{"text":"But this is what kind of sets you apart from other students in other universities","width":289},{"text":"By the end of this course you really are going to know your stuff ","width":147},{"text":"And you really are going to change the world","width":122},{"text":"Ok so here's what we're going to do today","width":119},{"text":"We're going to talk about scheduling","width":154},{"text":"We're going to look at some simple different ideas about how to do different schedules","width":320},{"text":"And similar effects it has on things like the waiting time","width":217},{"text":"And exactly when each schedule is is uh uh exactly when each process is scheduled","width":401},{"text":"Right so let's have a look at this and in a moment","width":126},{"text":"I'm going to ask you to calculate this","width":227},{"text":"So as this is a model of - we're going to uhm be clairvoyant - we we we know when","width":471},{"text":"as a design we know when our processes are going to be ready to run","width":347},{"text":"And uh we've got four processes, we've labelled them one two three four","width":223},{"text":"We can say hey process four doesn't exist at the beginning","width":195},{"text":"or it's not ready to run","width":63},{"text":"Perhaps it's waiting on a condition variable, the process is waiting for some data to revive","width":337},{"text":"But anyway we don't need to consider it in the very beginning of our model here","width":360},{"text":"Uhm and then these different processes have different amounts of execution time they need in order to complete","width":568},{"text":"So for example in process one takes thirty milliseconds","width":216},{"text":"So we're going to look at our little simulation in ten millisecond blocks and see","width":344},{"text":"which process is using the CPU for each block of time","width":331},{"text":"Now here's our different scheduling approaches we've got","width":256},{"text":"Okay","width":52},{"text":"We've got something called round robin","width":281},{"text":"So with round robin what we do is we try to be fair and say","width":330},{"text":"Well you can have the CPU for a certain block of time","width":300},{"text":"In this little example, 10 milliseconds","width":135},{"text":"And after 10 milliseconds the alarm goes off","width":138},{"text":"Ding! A little hardware clock goes off","width":112},{"text":"And that causes an interrupt","width":131},{"text":"the interrupt then causes the CPU to execute some code inside the kernel","width":220},{"text":"The code inside the kernel says AHA you're out of time","width":245},{"text":"And now I'm going to give the CPU to a different process","width":252},{"text":"So the idea is we're going to do this every 10 milliseconds","width":391},{"text":"Uh we'll try to be fair","width":63},{"text":"So this means that if there's a long running job","width":162},{"text":"It shouldn't matter too much since after two milliseconds we're going to give the CPU to someone else","width":282},{"text":"And they get a chance to execute","width":150},{"text":"Okay so that's round robin","width":136},{"text":"We'll work that out in a moment","width":103},{"text":"And you'll notice in this little example","width":171},{"text":"I've actually got three processes","width":105},{"text":"All ready to go at the very beginning","width":180},{"text":"So what we'll say is the order in which they ask if you're ready","width":288},{"text":"Is just dependent on how we've written them done","width":105},{"text":"So process 1 we're going to run before process 2 et cetera et cetera et cetera ","width":330},{"text":"And then the next we're going to calculate is shortest job first","width":360},{"text":"Meaning we actually know in advance these timings","width":300},{"text":"And we give this to the operating system","width":101},{"text":"To the scheduler","width":64},{"text":"So it can decide when to run them","width":404},{"text":"A \"I gotcha here\" is remember you can't actually run process 4 at the beginning of time because it doesn't exist yet","width":346},{"text":"It only comes into play, it only enters the stage after 10 milliseconds","width":329},{"text":"Alright so that's not a choice at the very beginning","width":166},{"text":"And then we have first come first serve","width":218},{"text":"This is just a simple queue","width":228},{"text":"Whoever arrives first gets to eat first","width":224},{"text":"And they continue to eat, to use the CPU until they are finished","width":302},{"text":"So it doesn't matter how long they take","width":176},{"text":"So that's first come first serve, FCFS","width":244},{"text":"That sounds pretty fair to me but we'll see if there's a problem with it later","width":290},{"text":"Now we can make these a little more complicated","width":164},{"text":"We can talk about how to preemptive shortest job first","width":296},{"text":"And the idea here is if a new job arrives","width":312},{"text":"In other words appears on stage ready to go","width":199},{"text":"Then if it's shorter we'll run that instead","width":325},{"text":"Now, one thing to look out for shortest job does not mean remaining time","width":273},{"text":"It means the actual original specified time","width":221},{"text":"So if you've only got ten milliseconds to run on a thirty milliseconds job","width":256},{"text":"","width":2},{"text":"It still compares thirty milliseconds","width":83},{"text":"Not the remaining time, it's the actual total time","width":170},{"text":"When we talk about shortest job first","width":130},{"text":"And then the other variant is preemptive priority where","width":206},{"text":"instead of thinking about the execution time ","width":151},{"text":"We have some sort of priority assigned to each process","width":226},{"text":"So for example if this was controlling a lunar lander","width":248},{"text":"Controlling the rockets is probably more important than say running the -inaudible- activity right now","width":455},{"text":"We need to make sure that we make immediate course corrections","width":338},{"text":"So uh, in this, we've got higher value equals a higher priority","width":269},{"text":"And if a higher priority job arrives on the scene","width":162},{"text":"Ready to go","width":52},{"text":"Then we will give the CPU immediately to that job","width":250},{"text":"So that's the process we're going to run in a moment","width":254},{"text":"Let's go back to these questions","width":90},{"text":"So when might a process be in the ready queue","width":269},{"text":"Let's think about processes you've programming, you've written","width":222},{"text":"Why might it be in a ready state?","width":207},{"text":"Not running on the CPU","width":114},{"text":"But in a ready state","width":143},{"text":"What could have happened?","width":413},{"text":"Yes!","width":226},{"text":"Okay so there's more than one process who wants to run","width":169},{"text":"And someone else has currently got the CPU","width":206},{"text":"Give me something that might have happened to your process","width":126},{"text":"That makes the mediates become ready","width":344},{"text":"Ok, thank you. It's waiting for say disk IO, or say network IO","width":349},{"text":"Perhaps you've called read","width":118},{"text":"Perhaps you've called accept","width":158},{"text":"And now you're waiting for a client to connect to your web server","width":238},{"text":"To your chat server","width":51},{"text":"To your database server","width":86},{"text":"That thread of execution cannot run yet until the operating system says","width":279},{"text":"Okay, yes! I've got your data, off you go","width":165},{"text":"Okay","width":118},{"text":"What else?","width":1023},{"text":"No ideas?","width":263},{"text":"Yes!","width":38},{"text":"Let's say you call sleep and your process sleeps for five seconds","width":332},{"text":"After five seconds your operating system says","width":120},{"text":"Oh, okay, right, fine","width":90},{"text":"Time to wake this process up","width":77},{"text":"I'll let this process continue, I'll let that thread continue","width":321},{"text":"Similarly if you had a call with a timeout","width":244},{"text":"Alright, there's going to be time when your processor stops","width":389},{"text":"A zombie is not ready to run","width":232},{"text":"A zombie can't run, it's finished","width":107},{"text":"It's still taking up space in memory","width":155},{"text":"Inside the processor control block","width":86},{"text":"because we have things like it's exit status","width":256}]