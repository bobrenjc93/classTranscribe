[{"text":"i want the best looking spanning tree, i want a tree so i want to be able to get to every vertex in a graph, but i want those edges to minimize the sum of the edge weights that i've picked.","width":704},{"text":"thats a natrual thing to want to do","width":320},{"text":"so, we're going to do one of these algorithms, the first algorithm, were going to do two of these, the first one were going to talk about is kruskels algorithm, which is sort of, in my opinion, the easier one to think about","width":640},{"text":"so were going to try and pick out the edges that make the minimum spanning tree. but we have to be a little bit careful. ","width":640},{"text":"so first of all the output of this thing is something that people will debate about, im going to define the output of this algorithm as a stack of edges that are in the spanning tree","width":1024},{"text":"other people might say that it should return you a new graph, which is the graph of those nodes and those edges, ok thats fine too, you can do that, its the same thing, its not going to change anythign. so im just going to say that were going to have a set of edges..","width":1088},{"text":"for the output","width":128},{"text":"and when i say a set, like, data structure, set, what is that?","width":512},{"text":"what is a set?","width":128},{"text":"vector? is it a list?","width":384},{"text":"is it a hash table?","width":192},{"text":"is an avl tree? what is that?","width":192},{"text":"what is a set?","width":128},{"text":"ok so, think intuitively what does set mean in terms of math? can you have repeated elements in a set? no.","width":576},{"text":"so a vector you can have repeated elements in a vector, so a vector is not going to cut it","width":320},{"text":"so what is this then? what is a set?","width":320},{"text":"its like a hash table","width":128},{"text":"where the things in the set are the keys and i have no values","width":384},{"text":"i only care about whether the key exists or not, i dont have any values associated with it, so a set is going to be like a hash table or a balanced binary search tree with just keys and no values, thats all the set is","width":896},{"text":"that makes it easy to see if something is there, you can iterate over it just fine, you just loop over the hash table or in the tree, thats easy enough to do, we know how to do that","width":640},{"text":"we add things to the set","width":192},{"text":"so a set is just going to be implemented exactly like a dictionary, just where we dont have any values, we only care about the keys","width":576},{"text":"so set of edges, because i dont want any repeated edges in this thing, the tree is only going to have that edge in there once","width":384},{"text":"how do i do this?","width":448},{"text":"a natural thing that you might think of, not even thinking in terms of code, but just looking at this, can i just pick the lowest weight edges?","width":768},{"text":"pick the smallest edge, then the next smallest edge, then the third..","width":192},{"text":"seems like a natural thing to do if im just trying to do this","width":320},{"text":"so what happens if i do that?","width":128},{"text":"well i look at this thing, whats the smallest edge?","width":64},{"text":"right edge weight one, so it's this thing between v and x","width":448},{"text":"next smallest thing was this one, w-x","width":256},{"text":"next is 3, v-w","width":192},{"text":"thats nto a tree anymore is it?","width":320},{"text":"ive got a cycle, i just made a cycle","width":192},{"text":"theres a loop in this, trees dont have loops, trees are acyclic","width":320},{"text":"darn, the simple algorithm of just picking the smallest edges is not going to work, so i cant just take the edges, sort them and then pick the smallest onces, that wont work, i need to do a little more work.","width":768},{"text":"so i have to do something to check if im going to make a cycle or not","width":320},{"text":"so what am i going to use for that?","width":256},{"text":"i can use a disjoint sets","width":256},{"text":"what are the equivalence classes then?","width":896},{"text":"i used disjoint sets, to represent an equivalence relation, so what are the equavalence classes?","width":640},{"text":"right","width":704},{"text":"so the equivalence classes going to be the things that are currently connected, so i start off with everything being it's own set, because none of them are connected, then when i add an edge, im going to merge those two sets together, so when i have a set of things that are connected and everything else because they're all disconnected","width":1024},{"text":"if im doing that, then what does the operation look like for checking whether adding this edge would cause a cycle to be created?","width":512},{"text":"so i look at whether the end points of that edge are both in the same set","width":640},{"text":"so if v and w are both members of the same set i cant add that edge because they're already in the same set and adding an edge would create a cycle","width":448},{"text":"so v and w are connected, they're going to be in the same set, so i cannot add the edge three so i skip three","width":512},{"text":"so then i look, whats the next smallest edge, ok 4","width":256},{"text":"are v and u in different sets, sure they're not connected","width":256},{"text":"so i add, 4, ok, so then the next smallest thing i add is 5","width":704},{"text":"are u and w in the same set?","width":128},{"text":"yes","width":64},{"text":"so i cant add that one, so i skip that, the enxt one is six","width":320},{"text":"are w and z in same set?","width":192},{"text":"nope","width":64},{"text":"so i can use this edge","width":128},{"text":"next smallest is 7","width":384},{"text":"z and x in same set?","width":128},{"text":"yeah i cant use that","width":128},{"text":"ok fine","width":64},{"text":"what about edge with weight 8 between x, y","width":384},{"text":"thats fine","width":64},{"text":"those are in seperate sets","width":128},{"text":"now i can check i added 5 edges","width":256},{"text":"added n-1 edges i have a tree so i can stop","width":448},{"text":"so what adt is going to allow me to get the next smallest edge?","width":576},{"text":"need something to order those edges, so i can ask the data structure to give me the  next smallest edge","width":704},{"text":"what ADT, you've giving me implementations","width":448},{"text":"priority queue","width":128},{"text":"[no audio]","width":512}]