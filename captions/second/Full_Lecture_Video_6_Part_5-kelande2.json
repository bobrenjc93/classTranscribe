[{"text":"to call operator= I get a new stack frame","width":256},{"text":"I make a copy of the rhs because it is passed in by value","width":384},{"text":"remember any time that you pass in by value, the system invokes for you, your copy constructor ","width":128},{"text":"so i copy the rhs, which is B","width":256},{"text":"so i get a new object rhs, which has got a pointer to a deep copy of the array of B","width":640},{"text":"that's going to invoke my copy constructor which we have already defined and written ","width":640},{"text":"so that it does the appropriate","width":64},{"text":"thing, so it sets up the array properly","width":64},{"text":"I call swap with rhs ","width":512},{"text":"this is just going to swap our pointers around","width":256},{"text":"so that means that, remember the current object is the lhs, so the current object is A","width":512},{"text":"so if i call a swap, what i am really doing is saying rhs, look here, A look here. ","width":512},{"text":"that's all swap is going to do, it's just going to swap the member variables","width":384},{"text":"then I say return *this","width":320},{"text":"which means that the stack frame for operator= is going to go away","width":448},{"text":"and remember that anytime a stack frame goes away, the destructors for all of its local variables ","width":256},{"text":"including parameters are invoked in reverse order of their allocation","width":320},{"text":"so when i return out of this function, i invoke the destructor for any temporary variables","width":256},{"text":"I have 1 temp variable here, rhs","width":256},{"text":"I invoke its destructor","width":64},{"text":"which means that it is going to delete whatever heap memory that it allocated","width":448},{"text":"which happens to be this array here","width":64},{"text":"stack frame from rhs goes away","width":320},{"text":"and now I have A being an independent copy of B","width":192},{"text":"i've leaked no memory","width":192},{"text":"I'm strongly exception safe, because if the exception is thrown","width":320},{"text":"it happens before I am able to change anything","width":64},{"text":"what about self assignment?","width":384},{"text":"so the answer to the efficiency question is going to come with an asterisk","width":512},{"text":"I still do the same thing","width":256},{"text":"so if I say A=A, I make a copy of A, I swap myself with my copy","width":512},{"text":"I destroy the memory that was associated with me","width":64},{"text":"and then I return","width":192},{"text":"self assignment is less efficient than it was before","width":448},{"text":"however, self assignment still works","width":128},{"text":"after I do this self assignment, the object has not changed its value","width":448},{"text":"internally, maybe it is looking at different memory, but the values are going to be the same","width":384},{"text":"so this is robust to self assignment, yes it is less efficient, but who really cares","width":448},{"text":"how often are you doing A=A?","width":64},{"text":"as long as this still works for A=A, I am happy","width":448},{"text":"the reason we had to before was to make sure it was even valid","width":384},{"text":"not just as an optimization","width":256},{"text":"if we didn't, it would have been broken","width":128},{"text":"here we are not checking for self assignment because we dont have to","width":576},{"text":"I would rather write this than the crazy alternative","width":384},{"text":"remember that the strong exception safety here is not to prevent the error from happening","width":1216},{"text":"it's to prevent if there is an exception thrown when i am making the memory that the assignment","width":320},{"text":"doesn't happen","width":64},{"text":"the problem with the other one wasn't that it could run out memory","width":512},{"text":"it's that when it runs out of memory, and i say A = B, i've somehow changed A in an assignment that shouldn't have been allowed ","width":256},{"text":"because i couldn't make memory","width":128},{"text":"that was the problem","width":128},{"text":"so this new one, if i can't make the memory, i can't even call the function","width":448},{"text":"so nothing is going to happen to my lhs","width":256},{"text":"this can still throw, if i can't copy my argument, i'm still going to throw a bad alloc","width":448},{"text":"but the difference is that the lhs is not changed in that case","width":448},{"text":"whereas before we lost See Spot Run","width":64},{"text":"and it was just gone for ever, even though the system said that assignment didn't happen due to bad alloc","width":320},{"text":"now, if we say A = B, it doesn't get rid of See Spot Run ","width":448},{"text":"until it is sure that it can do the assignment","width":128},{"text":"so now, if it fails, i still get std::bad_alloc, but See Spot Run is still there","width":384},{"text":"it is actually true that the assignment didn't take place","width":320},{"text":"the point is not to catch the exception","width":448},{"text":"the point is to say if doing the assignment is to throw an exception, we don't want the lhs to be different","width":1280},{"text":"we want it to be as if nothing happened at all","width":128},{"text":"the one before doesnt work because if an exception is thrown during the memory allocation","width":384},{"text":"which happens when we call the copy function","width":320},{"text":"exception is thrown there","width":256},{"text":"we've already modified the lhs, we cleared the lhs","width":192},{"text":"that's what i mean","width":192},{"text":"i don't mean that there are no more exceptions","width":320},{"text":"i'm saying that when an exception is thrown, ","width":192},{"text":"the lhs is still left in a valid state that is what it was before. as if it was not modified","width":512},{"text":"when I get an exception out of an assignment, it should be as if that didn't happen","width":128},{"text":"when i throw an exception out of the pixel access operator, ","width":256},{"text":"I didn't actually access an invalid pixel","width":128},{"text":"i just threw an exception, like no, don't do that","width":128},{"text":"so it should be as if it didn't happen.","width":384},{"text":"I didn't make any changes ","width":64},{"text":"i didn't modify the lhs, the assignment never happened, it couldn't","width":192},{"text":"that's the difference","width":128},{"text":"always write your assignment operator like here because \"reasons\"","width":448}]