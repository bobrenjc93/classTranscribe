[{"text":"What is symmetric? What is symmetry in this? So symmetric says that for.. if I pick student 1 and student 2 in my set and I say s1 relates to s2 this implies s2 relates to s1.","width":2944},{"text":"I share the favorite food with someone, that student shares the favorite food with me. So our relation satisfies that as well. So what is transitive? This is the favorite mathematical property of girls in my middle school. I just dropped the cap to my pen, I'm never gonna find that. Lets see if that works without it, it doesnt. Cool.","width":4224},{"text":"So the transitive property is telling me that if x relates to y and y relates to z, then x relates to z.","width":3072},{"text":"So if x relates to y and y relates to z, this implies that x relates to z.","width":1024},{"text":"If x shares the same favorite food as y, and y shares the same favorite food as z, then x shares the same favorite food as z.","width":704},{"text":"X relates to y, y relates to z so then x relates to z. A friend of a friend is a friend.","width":1024},{"text":"So we're gonna write a data structure that does this.And it's gonna be called disjoint sets. Disjoint sets abstract data type. So the Disjoint Sets ADT, you'll see this alternatively called the union-find ADT cause sort of what you're doing is unioning sets together and finding the set representative of different elements. Called by the operations it has. So this abstract data type maintains a set s0, s1 to sk of different sets that are all disjoint. What does it mean for two sets to be disjoint?","width":4928},{"text":"There's no shared elements. Sort of means that there doesn't exist a \"s in S\" such that s is in s1 and s is in s2.","width":2112},{"text":"In other words, there is not a student that exists in two different sets. You can only exist in one set, these sets are all disjoint. And these sets are what you'd get as the result of an equivalence relation. If you partition a set by an equivalence relation you're gonna get disjoint sets. You're not gonna have things that are equal to one thing but not equal to the other because you have transitivity. You're gonna have disjoint sets being represented here.","width":2688},{"text":"Modeling it this way is equivalent to modeling an equivalence relation so we're gonna model it this way. Conceptually you can think of representing for everyone what set it belongs to. Thats equivalent to saying they're related.","width":1088},{"text":"Alright so it prescribes the following operations. Create a disjoint sets object that has a certain size and give it a certain number of initial sets, each one being disjoint. So when I create a disjoint sets object with 7 sets it means that all 7 sets are all on their own and unique and have no relations to anything yet.","width":1856},{"text":"Find(i) so I use i as a set id, so if I made disjoint sets with 7 elements I have set ids from 0-6, just like an array. So I can find the set representative for the member i so initially the set representative for set i will always be i cause there's nothing else in the set yet. But when we're merging things together it no longer necessarily means the set representative for i is itself, it could be referring to somebody else. So find(i) is going to tell me what set representative is the canonical root of this set.","width":2816},{"text":"And then merge i and j will merge the two sets together so if i and j are members of some set so if I merge i and j I am merging together those two sets, so all of the things in those two sets are now going to belong in one larger set together. And they will have to pick some representative to be canonical for that set.","width":1664}]