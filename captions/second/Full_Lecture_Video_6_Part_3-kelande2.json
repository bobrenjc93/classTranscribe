[{"text":"So that's not why it's not exception safe. ","width":192},{"text":"If one of them wasn't memory page and one of them wasn't, and I was doing a comparison it wouldn't compile because it would be a type mismatch.","width":768},{"text":"So, that's not it.","width":64},{"text":"So, I say exception, it's not exception safe. ","width":704},{"text":"So remember that the exceptions happen to be thrown when there's an error condition.","width":64},{"text":"So when something didn't work or when whatever function you're calling can't reasonably satisfy your request. ","width":640},{"text":"Even without seeing the definition of copy and clear, you kind of know what they are doing. ","width":320},{"text":"Clear is is going to delete a bunch of memory and copy is going to allocate memory, copy over all the values","width":384},{"text":"to do your deep copy","width":192},{"text":"Which one of those two things could possibly throw?","width":320},{"text":"Based on what you know right now. Technically the answer is both, but...","width":192},{"text":"Ok, so the answer is copy, but that's not quite the right reason. ","width":832},{"text":"Because we know that the right hand side is going to exist because it is a reference. ","width":320},{"text":"As long as our class is well written and we don't have any of these bad instances of classes floating around","width":640},{"text":"The right hand side should be valid. The problem is in copy though. ","width":64},{"text":"I'll give you a hint","width":192},{"text":"Imagine you are writing something for a kindle","width":192},{"text":"It's like a book manager on a kindle","width":256},{"text":"it is a very resource constrained environment, you don't have a whole lot of RAM","width":192},{"text":"You've got somebody that is the world's most avid book reader that has loaded every book in existance ","width":512},{"text":"What if there is no more room?","width":640},{"text":"I've only got like maybe less than a gig of RAM","width":640},{"text":"and I'm going and I'm going and allocating a whole bunch of heap memory","width":320},{"text":"when I get to here, let's say the rhs I am copying a really large book.","width":576},{"text":"And I'm assigning into a book that was really tiny","width":128},{"text":"like See Spot Run","width":128},{"text":"So, the overall memory usage of my program is probably going to go up after this","width":448},{"text":"because I'm assigning into See Spot Run, a huge book","width":256},{"text":"So See Spot Run is going to get deleted and then I'm going to copy over this huge book","width":384},{"text":"which is going to blow up my memory","width":192},{"text":"the problem is that when I go to allocate that big book to do my deep copy","width":512},{"text":"it could fail","width":64},{"text":"","width":128},{"text":"if i'm out of memory what can you do if I asked for new {bazillion}, and I have a couple bytes of memory left","width":448},{"text":"new wont work","width":64},{"text":"it can't because there is no more space","width":128},{"text":"because the heap is full","width":128},{"text":"we like to pretend that the heap is infinite, but its really not","width":320},{"text":"eventually we are going to run out","width":128},{"text":"and when we do, the system is going to throw an exception when we try to call new","width":320},{"text":"it will throw an instance of bad alloc ","width":192},{"text":"we're not catching any exceptions here ","width":576},{"text":"and the answer is not to catch the exception","width":128},{"text":"what would happen if I say a = b and a was See Spot Run and b was Dances with Dragons","width":640},{"text":"what happens to a?","width":384},{"text":"it's gone, I cleared it","width":256},{"text":"I didn't actually do the assignment","width":192},{"text":"but I cleared the lhs","width":128},{"text":"that's bad","width":128},{"text":"if I throw an exception, that means I wasn't able to complete the operation that you asked me to do","width":384},{"text":"so when bad alloc is thrown, it should be the case that it is as though the assignment never even happened","width":448},{"text":"so a should be the same, a should be See Spot Run","width":384},{"text":"It shouldn't have been cleared, it should be exactly the way it was","width":192},{"text":"then if the programmer knows how to handle the out of memory exception, then they can","width":256},{"text":"otherwise, the kindle crashes","width":128},{"text":"but at least we have given the opportunity to properly handle that, and we leave the books on the lhs","width":384},{"text":"and on the rhs in a valid state","width":128},{"text":"the safety issue here is not actually that this could throw an exception","width":896},{"text":"it is when this throws an exception, weird crap happens","width":192},{"text":"if this throws an exception, the assignment should not happen","width":320},{"text":"but it kind of did","width":128},{"text":"we have an empty thing on the left","width":64},{"text":"i couldn't do this assignment, but by the way, a is gone","width":256},{"text":"this is bad. this is what I mean by it not being exception safe","width":384},{"text":"this is how a lot of people write operator=()","width":192},{"text":"and unfortunately it has this problem with it","width":384},{"text":"if you can, its good to try and make your assignment operator strongly exception safe","width":384},{"text":"you want to have your assignment operator give you the strong exception guarantee","width":512},{"text":"which means that its as though it never happened","width":320},{"text":"if its going to throw, it properly acts like it didn't do anything","width":128},{"text":"the answer here is not to catch bad std alloc and do something","width":704},{"text":"i just want the assignment to fail","width":192},{"text":"but that just means that i don't want the lhs to change either","width":320},{"text":"how do we fix this?","width":256},{"text":"it will be robust in self assignment and strongly exception safe","width":1088},{"text":"and it will reuse code we've already written ","width":448},{"text":"i'm going to write the declaration up here","width":1216},{"text":"for what the assignment op looks like","width":192},{"text":"the fact that i am writing a declaration that is different from the other one should tell you that the signature is going to be different ","width":384},{"text":"the signature is going to to look like this:","width":512},{"text":"book& operator=(tbc in next video)","width":128}]