[{"text":"You can't really make that a whole lot faster but...","width":192},{"text":"just copying the three integers right? There is nothing to steal","width":233},{"text":"If the three integers were baked into the class itself so providing a move constructor for something like that is pointless","width":395},{"text":"Because, there is nothing. You couldn't make it faster.","width":128},{"text":"You provide a move constructer when you can actually make","width":256},{"text":"The thing faster, like think of your linked list class, right.","width":155},{"text":"You could make move construction a hell lot faster than you can make copy constructions","width":368},{"text":"Copy construct a list, you have to go trough a new up a new note for all old nodes the whole thing.","width":317},{"text":"and copy over all those values","width":128},{"text":"And that is gonna be really slow and really costly","width":256},{"text":"Um, if I am just moving a list, just fill the pointer right?","width":256},{"text":"steal a head pointer, steal a tail pointer, steal a size.","width":140},{"text":"Right? then you're done.","width":64},{"text":"So I can make that vastly faster. That was constant time versus linear time.","width":255},{"text":"to copy the list right?","width":64},{"text":"You can move the list at constant time and can copy the list in linear time.","width":114},{"text":"Cause moving doesn't actually touch the date, it just steals pointers and stuff.","width":256},{"text":"The actually data is still sitting there.","width":128},{"text":"Right? Same thing is true for your dynamic array class. You are circular array class.","width":256},{"text":"So you can... right?","width":128},{"text":"If we got a pointer to some heap-allocated array","width":192},{"text":"I can steal that in constant time.","width":128},{"text":"I can't copy it in constant time.","width":128},{"text":"So, when I am in the scenario where I can actually do a stealing operation faster, that's probably when I care about writing move constructor.","width":448},{"text":"Alright. So we've talked about constructers and we talked about assignment.","width":448},{"text":"So our assignment operators were used when I set stuff like A=B","width":384},{"text":"When A already existed and B already existed.","width":192},{"text":"Right? So remember that weirdness where I say, I probably have an example here.","width":320},{"text":"uh... do I?","width":128},{"text":"Uh...Yes so...here","width":192},{"text":"Is that an assignment operator call?","width":320},{"text":"No.","width":218},{"text":"This is the weird thing.","width":64},{"text":"Remember if you are declaring the variable and assigning into it same stuff","width":320},{"text":"that's not an assignment operator.","width":64},{"text":"That's a constructor. ","width":64},{"text":"The reason I harp on that is that people would try to test their assignment operators like this","width":345},{"text":"and go like \"Oh, it's working.\" It didn't even call your assignment operator.","width":192},{"text":"This is a constructor.","width":64},{"text":"This is the same thing as say book","width":256},{"text":"...a...","width":128},{"text":"...b...","width":117},{"text":"Ok.","width":64},{"text":"Those two things means the same thing.","width":128},{"text":"Ok.","width":128},{"text":"So the assignment operator is called when you have on the left hand side object that was already constructed.","width":316},{"text":"And on the wright hand side you have some object.","width":192},{"text":"So you will have to be assigning in a new variable that already exists.","width":192},{"text":"Already has been constructed. Already has values in it.","width":128},{"text":"Alright?","width":128},{"text":"Which is natrally is you do it all the time, you say X=Y.","width":192},{"text":"All the tine that's reasonable things to do.","width":128},{"text":"And so again for the same reasons that we needed to provide a copy constructor when our class is sort of non trivial.","width":384},{"text":"We need to provide a assignment operator the classes gone non trivial.","width":256},{"text":"Cause the default version of the assignment is not gonna work any more.","width":128},{"text":"We are gonna leak memory we are gonna have pointers pointing to the same thing and all kinds of terrible, horrible things happening.","width":384},{"text":"Ok.","width":64},{"text":"So I need to redefine what it means to do assignment in the cases where I would need ...","width":192},{"text":"... to redefine what it means to copy.","width":192},{"text":"Alright.","width":192},{"text":"So.","width":320},{"text":"If I was...","width":128},{"text":"Let's get this thing finish off with this.","width":192},{"text":"You should be all rattled that off.","width":128},{"text":"for any type now","width":64},{"text":"at this point","width":64},{"text":"um...","width":64},{"text":"So I wanna write an assignment operator and I want that assignment operator to give me the strong...","width":256},{"text":"exception safety garantee","width":192},{"text":"and I and writing it for class book so what should this thing return","width":192},{"text":"You sure need a book reference. Why a reference?","width":640},{"text":"Right. So I am returning a book so I can chain assignment.","width":353},{"text":"I am returning a book of reference so I don't do a copy every time for everyone of the equal","width":310},{"text":"say A=B=C=D","width":128},{"text":"I don't wanna copy the book for every =","width":64},{"text":"I wanna just keep passing down the same one by reference","width":285},{"text":"I am returning by reference here. What are my arguments?","width":160},{"text":"Ok. And...","width":448},{"text":"Why is it by value","width":128},{"text":"It must be by value when you are doing a copy and swap . Why is it by value?","width":256},{"text":"Yes...","width":64},{"text":"Right, the goal here of the copy and swap","width":256},{"text":"is I mean the goal of the assignment operator, right, is to make an independent copy of","width":251},{"text":"whatever the right hand side was","width":87},{"text":"And nake sure any value of the current object already had","width":256},{"text":"are destroyed","width":128},{"text":"But if I don't do that step i will leak all the stuff that all the current object got right?","width":231},{"text":"So I have to make sure that the current object is emptied out","width":128},{"text":"Before I copy all the values or everything","width":192},{"text":"So what am doing here is passing it by its value","width":192},{"text":"meaning that","width":128},{"text":"I am going to get an independent copy that's either made by a copy construction","width":256},{"text":"or by a move construction","width":128},{"text":"into the stack frame for this operator =","width":192},{"text":"At which point I can just swap my values with it","width":128},{"text":"and return","width":64},{"text":"When I return the local variable right hand side, we'll go away and swap with it","width":320},{"text":"All of my values are in that temporary so that temporary destructor will clean up my values","width":288},{"text":"And since I swap with the argument, I now have all the things that used to be argument. ","width":267},{"text":"Ok. What I have done this copy first swap with it and thenI return my old values are cleaned up","width":320},{"text":"I have the values","width":64},{"text":"I don't have to worry about","width":64},{"text":"exceptions because when I am doing the pass by value is where the exceptions might happen","width":384},{"text":"doing the swap is not throw an exception","width":64},{"text":"but copying might if I run out of memory or some type inside of it when some type throws an exception or whatever.","width":407},{"text":"It might happen when I am copying","width":128},{"text":"not gonna happen if I am doing this swap","width":64},{"text":"Ok.","width":64},{"text":"So, if I copy first do swap return then I am sort of garanteed.","width":320},{"text":"The strong exception safety","width":128},{"text":"of these functions","width":64},{"text":"so...","width":115},{"text":"This would just look like that","width":192},{"text":"This is assuming I have got a swap help function if I don't you have to write one","width":576},{"text":"But it is probably simple you just swaping some pointers around","width":128},{"text":"Ok.","width":64},{"text":"There is a question in the way back","width":128},{"text":"Seven part two this one","width":512},{"text":"Ok.","width":128},{"text":"So.","width":128},{"text":"The question is on this line","width":256},{"text":"whether that is a copy construction, a move construction or operator =","width":384},{"text":"Ok.","width":64},{"text":"I am not gonna touch it all here","width":128},{"text":"on return value optimization cause the answer could be it's none","width":100},{"text":"Because the compiler might optimize it out","width":188},{"text":"So I am ignoring return value optizations.","width":148},{"text":"So here I am calling a make book function which makes a book on the stack frame, does stuff to it and returns it","width":503}]