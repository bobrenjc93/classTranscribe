[{"text":"So not because of the template class but because of the system. The same story applies for the system supplied copy constructor. The system also supplies a move constructor.","width":1024},{"text":"Assuming that the 3 types you've got in there also have move constructors which we are assuming so the system provides them for us. Even if I provided a custom constructor I still get a copy constructor for free.","width":1088},{"text":"Yes.","width":128},{"text":"Well, not the things in the ret, those are gonna be move constructed because I've moved them now. But the arguments to the function are all going to be constructed independently. ","width":1472},{"text":"I'm constructing T1 first that'll construct the T1 from whatever my argument is to the first variable in this function. ","width":576},{"text":"So if its an rvalue I do a move construct. If its an lvalue do a copy construct.","width":256},{"text":"Same thing for T2 middle, now I'm gonna look at what the second argument to the function is.","width":384},{"text":"Is it an lvalue, rvalue? If its an lvalue I do a copy construct. If its an rvalue I do a move construct.","width":64},{"text":"Same thing for T3 last. What is the last argument to this function? Is it an lvalue or an rvalue? If it's an lvalue do a copy costruct, if its an rvalue do a move construct.","width":1088},{"text":"So that means that any of the variables could be l or rvalues and its gonna do the appropriate thing for me and I don't have to overload for all the specific cases.","width":1024},{"text":"There are multiple constructions happening here.","width":768},{"text":"This is implying there are many construction calls here. There is a constructor call for T1 first, T2 second, ","width":1280},{"text":"T3 last, those 3 things have to be constructed. There's a construction call again inside of making ret for the first, middle and last, and theres a construction call again for the return value of the stack frame of the caller.","width":1152},{"text":"Which may then again invoke a constructor for","width":256},{"text":"the 3 arguments of the triple class. The assumption here is that the move constructor is going to be very fast. You've got these big types, think about your collage class how many lines of code is your move constructor? Maybe 2 lines?","width":1024},{"text":"In fact you might be able to get away with not having one at all depending on how you write it. Think about your dynamic array how big is the move constructor for that? It's a pointer assignment and a size, that it.","width":512},{"text":"It's very very fast. There's no dynamic array allocation, nothing really slow about that.","width":512},{"text":"That story is going to be true most of the time with your move constructor all its doing is stealing pointers its going to be very very fast.","width":384},{"text":"3 assignments. Not anything to really be worried about optimizing. If you're paranoid you can optimize it out, if youre a man named Scott Meyers you learn to do that, but I dont agree with his stance on this.","width":1024},{"text":"Finally, let's write a call to our above function to make it a triple with an int, double, char, and then lets also make a constructor call for the same thing and then you will see why in the world would we even bother writing that make triple function when all it would do is construct a value and return ","width":1536},{"text":"Let's do the constructor call first on the right","width":384},{"text":"I'm gonna make a triple taking a double an int, and a char","width":576},{"text":"t and i have to initialize it 1.2, 1, A","width":768},{"text":"What about using make triple? What does that call look like?","width":640},{"text":"Look ma, no template arguments!!","width":1664},{"text":"This is why make triple was nice. Once I've got a template function, I can do template argument deduction which means figuring out what the template argument is and stamping out the function through those template arguments","width":1024},{"text":"I dont have to explicitly say double,int,char","width":448},{"text":"I just give it a double, int , char and it knows thats a double, int, char","width":320},{"text":"thats a call to make triple double, int, char","width":384},{"text":"which then constructs a triple double, int, char","width":320},{"text":"And I dont have to say a type because I've got a return value of the left hand side that I know is going to be a triple double int char, so I can say auto t is the return value of that. And I've gotten away without having to type out a whole bunch of template stuf..","width":832},{"text":"triple auto auto wont work","width":704},{"text":"just saying auto will--auto will figure out what is the type of the rhs. well the rhs is the return value of make triple 1.2, 1,A ","width":384},{"text":"That is a double int char so I look at the return value for make triple is triple T1, T2, T3, so the return value of that is triple double int char, T is--this is the same thing as saying triple double int char T = make triple....","width":1152},{"text":"but I can avoid saying that long type and say auto","width":384},{"text":"it only works for one particular type, which is the triple part","width":192}]