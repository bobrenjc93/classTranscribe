[{"text":"I need to spend one to do my insert so now i have 2 dollars. Im going to put in the two.","width":448},{"text":"I have 2 bucks left over so im going to save both.","width":704},{"text":"Weve got two dollars sitting at that 2.","width":384},{"text":"Im gonna do another insert.","width":128},{"text":"Before i did the insert i dont have anything in my pocket its all on the board. Im gonna do my insert. I now have 3 dollars plus the two that are on the board. I need to do a resize.","width":1152},{"text":"And that means that i need to copy data.","width":320},{"text":"Im gonna use the money that is on the board to do the data copy. This pattern is going to continue. Im gonna use the money i have in the data structure to move the elements that are in the current data structure.","width":896},{"text":"Im gonna use the money that i have in my pocket to do an insert and save it for later.","width":256},{"text":"So when im doing this copy im gonna take one of the dollars at the two and erase it without getting the whole array. To move down the 1. Spent 1 of the dollars that was on the board. Now i need to move the 2 so i can spend the other dollar that was at the 2.","width":1600},{"text":"I still have 3 dollars in my pocket to do the insert of the 3. So spend 1 of them to do the insert of the 3 and then i save 2 dollars in the array.","width":768},{"text":"Insert 4, i have 3 dollars to do the insert. I dont need to do any data copies. So im going to spend 1 of my 3 dollars to put it in.","width":576},{"text":"Save 2 dollars in that step. Now im gonna do an insert of 5. Whats gonna happen here: new array need to double it. ","width":1792},{"text":"Now i need to copy over all the elements of the old array. ","width":384},{"text":"I have enough money to do that. Remember i have 3 dollars in my pocket and whatever is in the data structure available.","width":448},{"text":"Where is the money gonna come from? Already in the array. Im not going to need to go into anything in my allowance for this operation. I can use what is in the array. Do you see how thats working? Every new element. New. Element. That i have added after ive done a resize whats true about it always?","width":2112},{"text":"It always has 2 dollars available to it. And it uses one of those to copy its buddy in the old half of the array and it uses one of those dollars to copy itself down.","width":704},{"text":"So after every resize i wont have any dollars left over in the data structure but as im filling up the N things that ive added im putting 2 dollars in the structure everytime. ","width":576},{"text":"So that when it comes time to resize it. The new elements pay for the old ones.","width":576},{"text":"And then they also have 1 dollar for themselves to copy themselves down. So when i do this resize im going to spend 1 of the dollars at the 3 to move down its buddy which happens to be 1.","width":1024},{"text":"One of the dollars at the 4 to move down its buddy the 2. ","width":320},{"text":"The dollar at the 3 to move down the 3, The dollar at the 4 to move down the 4. And i insert my 5 with its extra 2 dollars that i have.","width":960},{"text":"Right and if i continue doing this inserts im going to have 6, 7, 8, because im getting 3 for every insert and im putting 2 in there and using one to actually place the data in the array.","width":1088},{"text":"And its always going to be the case, theres always 2 dollars at the new elements in the array. ","width":832},{"text":"And so i always have enough to copy the data over whenever i need to do that.","width":384},{"text":"Key observation of this method: is that what was the cost that i had to associate with each operation? Each aggregate operation. Push back operation how big was that?","width":1152},{"text":"Was the cost for doing a push back in terms of dollar amounts? If i was the parent paying the allowance how much would i pay? 3 bucks per push back. Thats a fixed constant amount. The amortized cost of doing these push backs is 3.","width":1216},{"text":"Where 3 is the 3 elementary operations. However long it takes you to do a data copy, it costs 3 of those amortized for a push back. So each push back is going to take time proportional  to 3 data copies.","width":1344},{"text":"One of them is for itself and then it saves 2 to be able to use later. The whole point of this method is to try to make sure you come out even whenever youre going to do one of these expensive operations. Its using the cheap operations to pay for the expensive ones.","width":1216},{"text":"And the observation here was that the amortized cost was fixed. ","width":320}]