[{"text":"so we've made the obilisk part","width":118},{"text":"we've made the member variables for the monolitj","width":217},{"text":"now we can actually run the monolith construtor","width":192},{"text":"so now we finally see","width":64},{"text":"mono","width":192},{"text":"but only after all that other stuff happened first","width":256},{"text":"the monolith is an obilisk","width":128},{"text":"so the obilisk path must be constructed first","width":256},{"text":"then any of the member variables of the path are constructed net","width":320},{"text":"so thats where the baselisk constrcutor is invoked","width":64},{"text":"then finally we enter the body of the monolith constructor","width":320},{"text":"and we do whatever we need to there","width":128},{"text":"so thats why we see this particular order","width":256},{"text":"is that it?","width":128},{"text":"destructors","width":192},{"text":"the destructor print too","width":128},{"text":"i've only answered half the question","width":192},{"text":"now we've got to think about what order are the destructors going to be invoked in","width":320},{"text":"reverse","width":64},{"text":"remember that phrase that I said alot","width":256},{"text":"when a stack frame returns","width":128},{"text":"all of the variables are going to have their destructors invoked","width":256},{"text":"in reverse order of their allocation","width":64},{"text":"same thing here","width":64},{"text":"ok?","width":128},{"text":"so I've got to run these destructors in reverse order of what I had before","width":320},{"text":"So the first destructor that is going to be invoked is what?","width":256},{"text":"Monolith","width":192},{"text":"so I'm going to say combo","width":128},{"text":"Now the monolith part is going away","width":384},{"text":"so now the destructor of all the member variables must be invoked","width":256},{"text":"notice that this happens after the destructor call","width":256},{"text":"has happened","width":128},{"text":"your member variables are still involved in your destructor you can still refer to them","width":256},{"text":"that's by design","width":64},{"text":"you need that","width":128},{"text":"brackets on your bracke","width":83},{"text":"they have to still be there","width":128},{"text":"its only after your destructors body has run that those member variables are cleaned up","width":142},{"text":"the actual member variable itself","width":256},{"text":"like this pointer is thrown away","width":192},{"text":"we've run through the destructor for the monolith","width":384},{"text":"and now we need to blow up all of our instance variable","width":256},{"text":"we've only got one which is this baselisk part","width":192},{"text":"this thing","width":64},{"text":"so now we are going to invoke that destructor","width":192},{"text":"so that destructor says snake","width":128},{"text":"Now we've done that","width":384},{"text":"now the monolith itself and all its instance variables are gone","width":269},{"text":"so now we have to destroy the remaining part of the object","width":192},{"text":"which is any of its base classes","width":128},{"text":"again in the order of inheritance","width":128},{"text":"in reverse order of inheritance","width":192},{"text":"So we're going to go up the tree now","width":64},{"text":"we're going to go up to obelisk","width":128},{"text":"and invoke that destructor to get rid of this part","width":192},{"text":"we handled this part already","width":128},{"text":"we handled getting rid of that","width":192},{"text":"so now only thing left is the obelisk","width":256},{"text":"so that prints out pillar","width":64},{"text":"lots of stuff going on","width":832},{"text":"those semantics are important to keep in mind","width":320},{"text":"so you keep straight when things are being initialized and when things are going away","width":320},{"text":"it's important that your base class is intialized before you enter your own constructor","width":256},{"text":"that means you can refer or call methods that exist in your base class after you've entered your body","width":448},{"text":"if it didnt work that way, then the base class part isnt even initialized yet","width":384},{"text":"that doesnt make any sense","width":64},{"text":"its important that that happens first","width":192},{"text":"its also important that your instance variables are set up before you enter the body of the function","width":256},{"text":"You're going to start calling functions on those instance variables and if they weren't being intialized","width":448},{"text":"if their constructors are never being called","width":128},{"text":"how am i supposed to call functions of those things?","width":192},{"text":"so its important that it happens in this order","width":64},{"text":"the semantics will make sense if you think about the types of things you would like to be doing inside of your constructor","width":320},{"text":"but it can be confusing","width":128},{"text":"so","width":64},{"text":"thats why i did this example","width":149},{"text":"so you can see what is the order that things are being constructed","width":147},{"text":"whats the order in which things are being destroyed","width":256},{"text":"lets take a brief detour and be software engineers for a bit","width":896},{"text":"you're eventually going to be in an interview room and someone is eventually going to ask you this question","width":192},{"text":"or something very similar to it","width":128},{"text":"what are the three tenants of object oriented programming and how are they implemented in X","width":320},{"text":"where X might be C++, Java, Python, Ruby, SmallTalk whatever","width":384},{"text":"some language","width":64},{"text":"so we're doing C++ in this class","width":320},{"text":"what are the three main principles ","width":192},{"text":"people fight about this","width":128},{"text":"there are three that are pretty stable","width":128},{"text":"so ill focus on them","width":128},{"text":"what are the three main principles of object oriented programming and how are they implemented/accomplished in C++","width":192},{"text":"yeah","width":64},{"text":"encapsulation","width":192},{"text":"what does that mean","width":448},{"text":"so this is implemented by a public","width":448},{"text":"/private","width":192},{"text":"moreso private than public","width":256},{"text":"what is encapsulation mean?","width":384},{"text":"it's part of object oriented programming","width":576},{"text":"hiding the details","width":128},{"text":"encapsulation","width":128},{"text":"to make capsule","width":114},{"text":"like a capsule","width":64},{"text":"like a pill is a capsule","width":160},{"text":"its a barrier","width":44},{"text":"to make encapsulated","width":192},{"text":"to put in a box","width":64},{"text":"to put in a barrier","width":64},{"text":"so what this is saying that encapsulation is about protecting","width":442},{"text":"your class from the outside world","width":138},{"text":"hiding things from the outside world","width":256},{"text":"hiding my implementation details","width":128},{"text":"in the matrix class from one of the prelectures","width":246},{"text":"I used a single dimenional array","width":64},{"text":"and I didnt have to think about whether i was  using a single dimentsional array or a double","width":384},{"text":"a grid structure in the heap","width":128},{"text":"all they had to thing about how do i interact with this thing","width":164},{"text":"what are the public functions","width":192},{"text":"i coudlv'e implemented that all kinds of different way","width":192},{"text":"Theres eleventy bajillion matrix implementations on the internet","width":188},{"text":"all optimized for doing different things","width":256},{"text":"There's things for sparse matrices and dense matrices","width":152},{"text":"theres things for special matrixes for do cindi operations","width":263},{"text":"when you want your math to be fast","width":128},{"text":"The point is that they dont have to think about all of this implementatiion details","width":241},{"text":"they just have to think about how do i interact with this object","width":190},{"text":"im hiding how the class works","width":259},{"text":"somewhere else","width":124},{"text":"users just have to think about how do interact with it","width":256},{"text":"what are the operations that are defined on this type?","width":256},{"text":"so encapsulation","width":128},{"text":"good","width":64},{"text":"implemented with private sections","width":192},{"text":"you can also say the separation of .cpp from .h files","width":448},{"text":"good","width":64},{"text":"whats another one","width":128},{"text":"inheritance","width":64},{"text":"implemented in C++ with class A: public B","width":832},{"text":"what is inheritance?","width":384},{"text":"why do I want inheritance?","width":192},{"text":"give me an answer that doesnt involve virtual functions","width":512},{"text":"why might i want inheritance even in the absense of virtual functions","width":320},{"text":"I want to be able to add onto existing objects","width":672},{"text":"it has nothing to do with me wanting to treat my new object of a thing of that type","width":384},{"text":"its just that i want to extend my exisiting object","width":64},{"text":"I dont want to rewrite the stuff that i already have","width":128},{"text":"for another object","width":64},{"text":"i wanted to have orbs be able to glow","width":448},{"text":"and spears were just spears","width":64},{"text":"i didnt want to add this glowy part to spear ","width":256},{"text":"when iw as gonly gonna use it every once in a while","width":192},{"text":"but inside of my orb i wanted it to be still a sphere","width":64},{"text":"i still wanted to compute its area and have a radius or whatever","width":192},{"text":"so inheritance is about being able to extend objects","width":256},{"text":"its about being able to take an exisiting object and ad onto it with whatever extra functionality you have","width":421},{"text":"thats inheritance","width":64},{"text":"whats the last one?","width":76},{"text":"polymorphism","width":160},{"text":"woah","width":64}]