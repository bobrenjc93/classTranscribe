[{"text":"How do I check if a node has no children?","width":448},{"text":"If the right and the left are both null. So if I say !subroot->left && !subroot->right, if I don't have a left child and I don't have a right child, so I can just call my no child remove function.","width":2048},{"text":"Unique pointers themselves have the same bool-ish properties that normal properties do.","width":1664},{"text":"So that's my no child remove. How do I check if it's a one child remove? If I have one of those children. If one of them is none null and one of them is. I'm going to cheat, and use the easier case. I'll check if neither is null, and then use that in the else and just call the one child","width":2368},{"text":"So if I said something like, subroot->left or subroot->right, that will be true if they're both non-null, and I need to special case that","width":1280},{"text":"So here I'm just going to do the two first, because it is just an easier statement to write. So if subroot->left && subroot->right, if I have a left child and a right child, then I know it must be a two child remove.","width":1792},{"text":"Then otherwise it must be a one child remove","width":704},{"text":"If I fall out of the first statement, I know that at least one of them is non-null","width":1856},{"text":"But both of them could be non-null. So if I just do subroot->left || subroot->right, that's going to  be the case if they're both non-null","width":1216},{"text":"This is easier for me to think about","width":1152},{"text":"You can write it anyway you want, right? You just have to diagnose which one to call.","width":960},{"text":"Ok, so next time we will start to actually write the helper functions themselves.","width":512}]