[{"text":"How do templates deal with self-defined type?","width":400},{"text":"So I assume that means as in like class I have written myself, the same way that deals with any built-in type.","width":440},{"text":"All it does is that when you make a template, you are giving it sort of this template, this cookie cutter for a function.","width":576},{"text":"And it stamps out the implementation of that once it is invoked, with a particular type.","width":384},{"text":"If I have a template function, and I call it max function. ","width":256},{"text":"If I call the max function with books, it will try to make out a function that does max on books.","width":384},{"text":"That works if I have a less than for books.","width":256},{"text":"If I don't have a less than for books, it does not work.","width":128},{"text":"Because it looks for, okay, you are trying to say book b less than a, when b and a are books.","width":512},{"text":"And I will  look for operator less than, taking book and book, don't find one.","width":192},{"text":"Ok?","width":128},{"text":"So it deals with your built-in type the same way as it deals with any other type.","width":209},{"text":"It tries to stamp out this function.","width":192},{"text":"It looks for any of the functions that you are calling on these things.","width":320},{"text":"And if they exist, it is fine.","width":64},{"text":"If they don't, well, how could it know how to do, right?","width":192},{"text":"Hmm","width":64},{"text":"So it works the same for built-in types or your self-defined types, or primitive types like integers, doubles as well as classes like PNGs and strings and books, and everything else.","width":960},{"text":"Right?","width":64},{"text":"Its mechanism applies.","width":128},{"text":"Also for making a function that returns auto and takes auto as its arguments.","width":1008},{"text":"Hmmm","width":102},{"text":"Not really.","width":90},{"text":"So you can have... we'll hit later on having a function returns auto, but it doesn't really return auto, we then tell it what it actually it means later.","width":640},{"text":"Hmmm","width":64},{"text":"You can take auto as arguments, because the way that auto works, is it that it figures out what the type of the right hand side expression is, and replace the auto with whatever that type is.","width":1024},{"text":"So if you just got a function taking auto and auto, there is no initialization of the variables yet.","width":448},{"text":"So it can't, it doesn't know, right?","width":128},{"text":"So in that case, the right way to have something like that is to use templates.","width":256},{"text":"You take a T and it depends on T and B.","width":768},{"text":"They are not really but kind of, you can look at the auto return types and there is some stuff there.","width":576},{"text":"There is some stuff in C++11 that lets you do that.","width":192},{"text":"But C++14... they can't, the problem there is that you can't take auto arguments.","width":576},{"text":"That doesn't work.","width":64},{"text":"We won't really do that.","width":348},{"text":"Is there any extra credit for doing partner MPs alone? No, you are just a bad ass.","width":385},{"text":"Hmm, so right, there is a question on how do I know where to put files?","width":960},{"text":"So we got this slash include folder, we got this slash src folder. What goes where? And why?","width":322},{"text":"So the slash include is for anything that is a header file, or anything that is going to be pounded and included. ","width":412},{"text":"And they are coded somewhere.","width":128},{"text":"Ok?","width":64},{"text":"So, all my header files will go to slash include, because some more else I am gonna say pound and include, name of header.","width":439},{"text":"So by convention I will put all my includes in the include folder.","width":347},{"text":"Ok?","width":64},{"text":"And then all my cpp files, my source files that are defining all my functions, nor declaring, but defining, are put in the slash srt folder, which is short for source.","width":638},{"text":"My include in one folder and my source in another folder, and that kind of distinguishes.","width":247},{"text":"That gives some money when we start talking about templates, because you have to define the body of the function for templates actually in something that is included in everybody else's code.","width":676},{"text":"Because you don't compile templates down the object files.","width":216},{"text":"You instantiate them and then it compiles.","width":116},{"text":"But only when it is called.","width":86},{"text":"Only when the compiler sees there is reference to that templates.","width":142},{"text":"Then it instantiates it and generates code.","width":155},{"text":"So templates are a little bit weird.","width":157},{"text":"So to make that weirdness clear, I am having this separate extension for those files and they go into include folder.","width":445},{"text":"They go into include folder, because they are pounded and coded from the bottom of the header file.","width":237},{"text":"Scoped pointers dot h, for example, pounds and includes scoped pointer dot tcc at the bottom of its header file.","width":417},{"text":"So since I am including, I am gonna put it in the include folder. ","width":283},{"text":"The other reason for that is if you are shaping this as a library, you want another people to use it, the include folder is gonna be the stuff you must give to users and the source is the stuff you don't have to give to users.","width":811},{"text":"The thing in /src is gonna be compiled down the object file.","width":316},{"text":"You can just in principle give people the object files and the header files and they have enough, they can build their programs against your stuff.","width":423},{"text":"So you don't have to give them source files. ","width":104},{"text":"You have to give them header files.","width":102},{"text":"They don't have the declaration of your class and what functions it got, even if you give them object file, they don't know what that does.","width":664},{"text":"They don't know what functions are there.","width":188},{"text":"Without a header file.","width":115},{"text":"So the stuff that goes in include is just the stuff you have to give to users if you are shaping this as a library.","width":384},{"text":"And the stuff that goes in src is the stuff you wouldn't have to..","width":132},{"text":"But if you are nice, you want to open source your stuff, then great. You know.","width":222},{"text":"Make that public, but you wouldn't...","width":456},{"text":"We will talk that later.","width":143},{"text":"I got a blue screen if death half way through this prelecture. So friends don't let friends use Windows.","width":284},{"text":"....","width":384},{"text":"...","width":128},{"text":"So this is interesting question, if two classes are defined in a template, and are used in function.","width":470},{"text":"The example here is template class T class B.","width":239},{"text":"T ref function ","width":192},{"text":"T bar one T bar two T bar three","width":192},{"text":"So here is a template function has two types of arguments, T and B.","width":220},{"text":"And it is taking two of type T and one thing of type B.","width":176},{"text":"The question is that can T and B be the same thing when I instantiate this.","width":335},{"text":"So another way of saying is that I got template class T class B, void Foo T a, B a, can T and B be the same type? Yes!","width":654},{"text":"That's allowed.","width":83},{"text":"Just that definition allows them to be different, but they could be the same.","width":384},{"text":"I can't fill in T and B with the same type and that's OK.","width":226},{"text":"It's not required that they be different.","width":160},{"text":"If I said, T a, T b in that function, and I only have one template argument.","width":295},{"text":"Now the T have to be the same.","width":105},{"text":"Because I am using T, that is like a type variable.","width":235},{"text":"Right?","width":37},{"text":"So I am filling this in, I am gonna replace all the Ts with a particular type.","width":197},{"text":"That's gonna say like int a, int b.","width":192},{"text":"Whereas I have one that takes two arguments, class T, class B. ","width":256},{"text":"Then in there if I say T a, T b, it could be int a, int b. It could be int a, double B.","width":384},{"text":"It could be string A, book B.","width":243},{"text":"It could be anything.","width":83},{"text":"Because they are allowed to be filled in with different types.","width":131},{"text":"They could be the same, they could be different.","width":131},{"text":"There is not a restriction that requires them to be different.","width":280},{"text":"Now you can write a function that does, but I am not gonna show you how.","width":227},{"text":"Because that gets a little bit involved.","width":167}]