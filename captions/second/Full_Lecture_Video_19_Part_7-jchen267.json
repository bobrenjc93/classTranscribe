[{"text":"yes again, it's exactly like your find or your insert, right? It has to locate that key first. ","width":609},{"text":"So..our base case if (!subroot), so we're asked to remove a key that does not exist, right? Cause that means that we've searched the whole tree and we found an empty tree so ","width":735},{"text":"none of the keys compared equal, so what you do in that case is sort of up to you. ","width":384},{"text":"Do you think it's fine to let people remove keys that don't exist, if so you should just return and do nothing. ","width":355},{"text":"If you think you ought to have users know that hey, I didn't even know about that key so you probably are removing stuff that doesn't exist then maybe that's a bug. ","width":512},{"text":"Then maybe you throw exception, I'm just gonna be lazy and just return. ","width":448},{"text":"If you ask me so if it means that in my binary search tree implementation, if you ask me to remove a key that doesn't exist, it just doesn't do anything. ","width":512},{"text":"It does a traversal look for the key, doesn't find it and then stops. ","width":320},{"text":"","width":192},{"text":"So then this is gonna look like the find function more compared to the insert, so we've got..","width":448},{"text":"a happy base case, which is we found the key that we were looking for. So if key is subroot->key, we've found the node that contains the key we want to remove, what do we do? ","width":1216},{"text":"","width":256},{"text":"We have a magic helper function that takes a pointer to a node, and delete that node. ","width":418},{"text":"So what should I do? Call the magic function that we'll write later. ","width":256},{"text":"It's more complicated than just doing a couple of pointer manipulates. ","width":320},{"text":"there're a bunch of cases that you would have to care about, so we're gonna break this down into a sub-brick and then into a separate helper function so we can think about the problem of locating the node and actually doing the removal of that node separately. ","width":832},{"text":"So then in this case I'm gonna call this helper function remove_node() on subroot. ","width":640},{"text":"","width":640},{"text":"This is not a recursive call. This is a separate function. okay? ","width":547},{"text":"So we're just working on the assumption that we got a function that give it a pointer to a node it will remove that node from the tree.  ","width":340},{"text":"Okay the it would also make sure that the tree is in fact a binary search tree when it's done. So it's got a lot of work to do. ","width":471},{"text":"We're gonna write those cases in a sec. ","width":289},{"text":"Then we've got sort of our similar other cases if it's smaller then the current key, we've got to go left. If it's larger than the current key, I'm gonna go right. So I'll race you in terms of writing that. ","width":640},{"text":"else if (key< subroot->key)..remove(subroot->left, key);","width":1344},{"text":"Otherwise remove (subroot->right, key); Did you beat me? Nice :D","width":960},{"text":"My excuse is my hands are cold...and I'm not typing","width":512},{"text":"","width":214},{"text":"Be more of a fun race if it's typing right? ","width":384},{"text":"So pretty straight forward right, just locate the node, remove then that we call our remove node helper function on it. ","width":414},{"text":"So obviously the guts of what makes this function hard is gonna come into how do you actually do the removal of that node. Cause you have to think about how does the tree have to be mutated in order for that to work out. ","width":780},{"text":"So just on paper here, let's think about how we remove some of these nodes. ","width":496},{"text":"And then that would be enough for you to sort of see what are all the edge case that you'd have to deal with. ","width":320},{"text":"So what if we ask somebody to remove the node 9?","width":256},{"text":"Well we know based on our remove function that we just broke, it would be if left, left, left..","width":384},{"text":"found it! So I call remove_node() on the 9 which","width":302},{"text":"when I say I'm calling remove_node() on the 9, I really mean I'm calling it on this pointer here. ","width":448},{"text":"It's not on the node, it's on the pointer to the node. ","width":270},{"text":"So I'm calling it on the left pointer of 12. Cause it's passed down by reference. ","width":448},{"text":"So in this case what do I do? ","width":256},{"text":"","width":192},{"text":"How do I get rid of the nine? And makes sure this tree is still a binary search tree? ","width":256},{"text":"[]","width":232},{"text":"Set it to null right? ","width":169},{"text":"If I set it to null, I just get rid of the 9 there's nothing about this tree that's broken. ","width":247},{"text":"This case is the easy case. So here I can just set it to null and be done. ","width":320},{"text":"If I set the 12's left to be null, we know the first thing it does is grab that pointer that wants to be assigning into, clear the memory and then move the pointer into the unique pointer. ","width":824},{"text":"So we would clear out the 9, get rid of the 9, and everything is fine cause the tree is still ordered. ","width":366},{"text":"Alright so that was easy. How would we want this slightly less easy? So what about 23? ","width":345},{"text":"So if we want to remove the 23, ok so that's left, right, okay I found it. ","width":570},{"text":"Here's the 23. And again I'm gonna call remove_node() on this pointer here. ","width":640},{"text":"If I just set that pointer to null am I done?","width":256},{"text":"No in fact, I've messed up the tree. I've dropped the 19, I removed the node that somebody cared about. ","width":448},{"text":"If this binary search tree was associating you know netIDs with grades, somebody is really unhappy. ","width":512},{"text":"You just nuked somebody's exam grade. So that's not good. So what do I need to do here? ","width":576},{"text":"[]","width":64},{"text":"Swap WAT WAT?","width":212},{"text":"The 19 and the 23, I know that the left child of the 23 can become the right child of the 17. ","width":623},{"text":"Cause it's by nature of it being in the right subtree I know it's greater than the root at 17 so I should be fine. ","width":526},{"text":"just moving it off the tree, so what I'm gonna do here is adjust this pointer to instead of look down here. ","width":553},{"text":"Then I'm gonna get rid of this. So I'll probably std::move the 23's left into the subroot pointer that I've got or something. ","width":512},{"text":"Just the pointer manips. ","width":154},{"text":"So that's harder that not too bad. ","width":320},{"text":"And then one quick thing, ","width":256}]