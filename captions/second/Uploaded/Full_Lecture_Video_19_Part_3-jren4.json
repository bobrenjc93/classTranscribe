[{"text":"Okay. Let's check man 7 fread.","width":1093},{"text":"So we need a pointer and size of nmemb, and stream, so we got the order wrong here","width":897},{"text":"So our pointer into the buffer.","width":435},{"text":"And okay. Alright, the number of bytes read was zero.","width":565},{"text":"Why?","width":339},{"text":"Yes! It's still at the end! Whoops. ","width":153},{"text":"Okay. So before we read in the entire file, let's seek back to the beginning. Alright, so how can I do that?","width":493},{"text":"I could do this two different ways.","width":152},{"text":"We could specify an absolute position 0.","width":348},{"text":"So I could call SeekSet. Okay, let's do that. Where is my..there it is.","width":871},{"text":"Or I could do relative to the current position. So if I know that I'm 71 bytes ahead. I could say move negative 71 bytes backwards. Alright, this time how many bytes we got?","width":685},{"text":"What? 1?","width":163},{"text":"Oh I must have messed up the constants here. Number of bytes read...","width":784},{"text":"Uh.. bop ba bop ba doo. Alright.","width":524},{"text":"Or we may have to read the... Oh no no no no no. That's correct.","width":479},{"text":"I did this wrong way around. Okay. Here we go.","width":304},{"text":"So, I specify this as \"Hey read 1 chunk and that chunk size is position.\"","width":363},{"text":"So now if I set my fread constants correctly, it would say the size of chunk is 1 and I want to read 71 of them. In other words 71 characters.","width":625},{"text":"Then the result I get is correct! I managed to read 71 characters.","width":341},{"text":"So great, I read the entire file into memory in one go. And we could print it out.","width":450},{"text":"So let's just puts. Where is the buffer? Okay. Buffer.","width":711},{"text":"Now is this safe code? Do you trust it?","width":391},{"text":"Look, it printed out the contents of that file. Printed out Hello world. ","width":332},{"text":"Is that safe?","width":285},{"text":"Correct! There is no null pointer guarantee at the end.","width":211},{"text":"So actually we should have made the buffer one byte larger and then actually put a zero byte in at the very end.","width":673},{"text":"So, safer code would just say \"Look, I know the file is there, so I'm gonna treat it like text later.\"","width":356},{"text":"But fread is just saying, okay read all the bytes into this memory. If I truly wanted to treat it as a single string, c-string. I better make sure that it is terminated at the end.","width":886},{"text":"So my code might have to be put at the buffer.. There we go.. Make sure that truly is terminated.","width":975},{"text":"Alright, so now we got a fast way to read in the entire file.","width":488},{"text":"Yes! ","width":492},{"text":"Here?","width":199},{"text":"fseek here?","width":259},{"text":"Okay, so this means the very end. Past the end of the file.","width":325},{"text":"So if you would to then open this as reading and writing, you would actually being appending to the current contents of the file.","width":509},{"text":"Yes?","width":645},{"text":"Okay. So.. does the a typical text ... does a typical text have a null characters in it?","width":537},{"text":"No they don't. It's only when we pull strings into memory when we append a null character to represent the c-string.","width":655},{"text":"But files don't have the null characters in them.","width":134},{"text":"Sorry, the text files don't normally have a null characters in them.","width":315},{"text":"No. It does not have an end of file character.","width":173},{"text":"So, instead there's some meta information to say, \"Oh actually this file is currently have this many bytes.\"","width":452},{"text":"And there is going to be an alternative ..so the meta information we will see about the file is the thing would be something like when was it modified? Who modified it?","width":419},{"text":"Who created the file, and how many bytes on disk does it currently use.","width":805},{"text":"Right. So the fseek does not actually walk along the file checking for the byte. It can quickly use the meta information of the file to tell how big the file is. So it's pretty fast.","width":757},{"text":"Yes?","width":449},{"text":"Would there be what?","width":490},{"text":"Yeah. There's actually is something call stat. But we will talk about it later.","width":342},{"text":"Yes. So the alternative way to get the file length is to use stat.","width":217},{"text":"But I'm using the fseek, ftell as a way to introduce fseek and ftell as \"Hey here is one practical way of using it.","width":620},{"text":"And stat is low level system call. If we use fseek and ftell, you are using a c-library and nice thing about that is that it is little bit more portable then getting straight down into the POSIX.","width":954},{"text":"land of using stat.","width":340},{"text":"Okay, for example, this would work on a windows machine.","width":456},{"text":"One gotcha is that you saw is that fseek gave you a long.","width":433},{"text":"So this would only work on medium sized files. These days we can have files that are gigantic.","width":545},{"text":"And much larger can be represented than just a long type.","width":325},{"text":"Yes?","width":534},{"text":"Right, so if you fseek back to the beginning, you can set it up so you can only write over specific bytes.","width":691},{"text":"So the trick here is the option we give to fopen. As so whether you want it to start brand new file or append to an existing file.","width":799},{"text":"But the way to think about this is simply that my file is basically just an array on disk.","width":594},{"text":"And I've got a pointer that points to where I would write some bytes. So if I wrote 3 bytes, I'm going to just overwrite 3 bytes.","width":636}]