[{"text":"actually we can do more than just print out an error number","width":328.18181824684143},{"text":"there's a function that allows us to go from that error number to a useful string","width":422.18181824684143},{"text":"so we've got strerror and we can pass in a number","width":293.18181824684143},{"text":"like twelve well I don't want just twelve, I actually want the number that the system has set for us, so let's print that out as well and see what we get","width":807.1818182468414},{"text":"okay right here we go so yeah our read returned -1 to say hey I've failed","width":465.18181824684143},{"text":"we've got an error number that's now set to a non zero value","width":211.18181824684143},{"text":"and we've got bad file descriptor, which now makes sense to us","width":206.18181824684143},{"text":"yeah we've passed in an invalid file descriptor number","width":324.18181824684143},{"text":"so before we've played around with things like printerror","width":302.18181824684143},{"text":"and it will print out something like","width":426.18181824684143},{"text":"It is a Friday let us go okay","width":674.1818182468414},{"text":"and perror takes the text we've got followed by okay here we go","width":586.1818182468414},{"text":"It's a friday let's go with a colon and guess what, the same message: bad file descriptor","width":320.18181824684143},{"text":"which is if you were a user a completely useless message","width":329.18181824684143},{"text":"bad file descriptor? sounds like the beginning of a bad movie","width":327.18181824684143},{"text":"no it's worse, so okay put this into your log file but don't display it to the user of course","width":423.18181824684143},{"text":"but now you can see how perror might actually be implemented in terms of this strerror function","width":612.1818182468414},{"text":"okay so that's our error number, it's set when a system call fails","width":483.18181824684143},{"text":"so if we go back to our little handout here","width":321.18181824684143},{"text":"so what is errno? it's just an int","width":409.18181824684143},{"text":"and when is it set?","width":129.18181824684143},{"text":"well when a system call fails","width":735.1818182468414},{"text":"you can find out what went wrong","width":720.1818182468414},{"text":"so nine is not a particularly... yes","width":420.18181824684143},{"text":"[question]","width":742.1818182468414},{"text":"a new line? you mean because printerror adds a new line as well?","width":435.18181824684143},{"text":"is that your question?","width":125.18181824684143},{"text":"okay right so we don't need to deal with these numbers like nine, we don't need to remember that nine means bad file descriptor","width":597.1818182468414},{"text":"because guess what? on the man page of read","width":247.18181824684143},{"text":"[something] we discover the return value","width":283.18181824684143},{"text":"we got a list of errors, here they all are","width":625.1818182468414},{"text":"so lots of things can go wrong and if we wanted to write a robust program","width":362.18181824684143},{"text":"we might actually choose to handle some of these","width":289.18181824684143},{"text":"you might say okay in the generic sense, just crash the program or write to the log file","width":273.18181824684143},{"text":"but there might be others where you might decide to say print a message to the user","width":253.18181824684143},{"text":"and that's how we can do it, we can check errorno to see exactly why the system call failed","width":581.1818182468414},{"text":"and then we can just compare it to these constants","width":326.18181824684143},{"text":"so in our code here, we could say if errorno equals bad file descriptor EBADF, your file descriptor, your program is a mess!","width":1514.1818182468414},{"text":"okay so we are going to handle this particular problem","width":1089.1818182468414},{"text":"what are we going to do about multiple threads?","width":151.18181824684143},{"text":"let's say I've got threads making system calls, they are calling mutex lock, they are calling sem wait, they are calling read, they are calling write","width":652.1818182468414},{"text":"if they fail, don't we have a problem?","width":437.18181824684143},{"text":"how would you know which one actually failed?","width":163.18181824684143},{"text":"suppose you're trying to read error just as another thread also fails","width":500.18181824684143},{"text":"houston we have a problem","width":125.18181824684143},{"text":"we don't know which thread set errorno","width":780.1818182468414},{"text":"muahahah yes, okay, errorno is not just an int","width":479.18181824684143},{"text":"each thread gets its own errorno integer","width":1100.1818182468414},{"text":"how does that happen you ask? easy magic","width":493.18181824684143},{"text":"actually it uses something called thread local storage but never mind about that","width":240.18181824684143},{"text":"so that means if you want to know what happened inside your thread, easy, write errno","width":324.18181824684143},{"text":"if you want to know what error happened inside another thread, you can't","width":330.18181824684143},{"text":"you'd have to write the mechanics to share that information","width":239.18181824684143},{"text":"right, so it's actually local to each thread which is particularly clever","width":396.18181824684143},{"text":"yes, you can which brings us to the next question thank you very much for playing, right","width":288.18181824684143},{"text":"when is errno set to zero?","width":209.18181824684143},{"text":"when your process starts and that's it","width":397.18181824684143},{"text":"so here's a gotcha, that if we did something like if errorno is equal to something like we have the EBADF","width":1290.1818182468414},{"text":"then we just assume that that happened because of the previous call we just made","width":260.18181824684143},{"text":"that may not be true, perhaps this happened, perhaps errno was set many many many microseconds earlier in our program","width":690.1818182468414},{"text":"so errno is never reset back to zero","width":228.18181824684143},{"text":"if you want to set it back to zero, do it yourself","width":252.18181824684143},{"text":"and in fact that's quite a good kind of programming practice","width":150.18181824684143},{"text":"that if you intend to check its value","width":241.18181824684143},{"text":"then remember to set it to zero beforehand","width":2171.1818182468414}]