[{"text":"[silence]","width":9075},{"text":"okay so let's sketch out some ideas, remember the basic form of when you call merge sort","width":436},{"text":"is we pass in some sort of like low and high we calculate a mid point","width":449},{"text":"and then the first thing we do is ","width":174},{"text":"say okay do merge sort say from low to mid","width":295},{"text":"and merge sort from mid to high","width":335},{"text":"and then finally, do the merge to take those two halves, copy all the values in order in some sort of scratch space and then copy that back into the main array","width":886},{"text":"so maybe what we could do is say well look let's in these two calls here ","width":348},{"text":"let's do these independently right? so our first idea might be","width":228},{"text":"that instead of calling these directly","width":181},{"text":"I will call pthread_create ","width":578},{"text":"and obviously I want to know","width":300},{"text":"what it's doing","width":78},{"text":"and I'll pass in some sort of task","width":228},{"text":"information","width":56},{"text":"so on the heap I'll make a little struct that says okay go from this value up to this value","width":462},{"text":"I'll create a little struct and I'll pass in a pointer to that struct","width":273},{"text":"and my little function that runs can take that task, read the contents, and when it's finished it will free it","width":350},{"text":"so I'm creating the memory, but the other thread will call it","width":209},{"text":"and similarly on this one, we'll call pthread_create","width":342},{"text":"and we'll call this task two","width":162},{"text":"and then I better wait before doing any merge, I've got to wait for these two threads to finish","width":364},{"text":"okay so then I'm going to call pthread_join on t_id one and pthread_join on t_id two","width":625},{"text":"so that might be my first attempt","width":325},{"text":"so some things to comment on this is first of all, we've got a running thread, why not use it?","width":380},{"text":"so what are we doing? we're saying hey create two threads and then just sit around and block until these two other threads have finished","width":575},{"text":"well that seems a little bit kind of inefficient","width":163},{"text":"we should have actually used the calling thread as well","width":163},{"text":"so we might for example try to speed this up a little bit by saying you know what just execute the second task myself directly","width":661},{"text":"but even this is going to create a lot of threads","width":278},{"text":"way more threads than actual CPU cores that I have","width":265},{"text":"and you could imagine that say I'm dealing with several megabytes of data","width":411},{"text":"and I'm splitting into these little two hundred and fifty six integers","width":176},{"text":"then that's many many threads","width":386},{"text":"so maybe we should be a little bit more clever in how we do this and get even better performance","width":366},{"text":"and that's where the idea of a thread pool comes in","width":214},{"text":"here's what we'll do, we'll make a preset number of threads","width":287},{"text":"and then we'll treat them to work, we'll actually separate them from the actual tasks that we want each one to do","width":680},{"text":"instead we'll put our tasks into a queue","width":226},{"text":"hey guess what, this is starting a bit like producer consumer","width":218},{"text":"our threads will go to the queue and say hey what's next what's next give me some work","width":296},{"text":"if there's no work for them to currently do","width":167},{"text":"that request will block until another thread puts some work into the queue","width":490},{"text":"right? so we've actually got conceptually now a whole load of threads going back to the queue saying okay I'm free give me some more work","width":439},{"text":"give me a little task structure and that might even have a pointer to a function","width":410},{"text":"and some other additional notes","width":120},{"text":"and integers etc and pointers to floats, whatever to actually perform the work","width":383},{"text":"so we think of our little thread as a little worker","width":218},{"text":"that just keeps going back to this and say okay I'm ready to consume the next task, okay?","width":299},{"text":"so our second idea then is to do thread pool","width":559},{"text":"that uses the ideas we've learned from the producer consumer and its consumer is consuming","width":600},{"text":"tasks","width":775},{"text":"now we have to be a little bit careful in this because suppose we've just finished creating let's say this block","width":823},{"text":"right? our task was to do the merge and to create this block","width":300},{"text":"another thing might be to say okay not I've finished this I should put in a new task into the producer","width":357},{"text":"I should submit a new job and that is to do this big merge","width":338},{"text":"but we have to be careful, we have to make sure that the other half of the data is actually ready is actually finished","width":592},{"text":"now, I'm not going to elaborate all of the ways you could do this because we're going to do a little competition and see who can actually write the fastest merge sort","width":780},{"text":"but I'll give you one idea","width":128},{"text":"and that's this: don't start on all of the five hundred and twelve jobs until you've finished all of the smaller jobs","width":512}]