[{"text":"what have I got here?","width":199.18181824684143},{"text":"I've got useful things about","width":202.18181824684143},{"text":"how my memory is organized","width":125.18181824684143},{"text":"let's have a look at Swap information","width":257.18181824684143},{"text":"you see that my Swap file here is","width":263.18181824684143},{"text":"about a Gigabyte in size","width":598.1818182468414},{"text":"and let's get a look at my CPU","width":371.18181824684143},{"text":"okay so I can get a whole lot of data but my CPU I can discover, say","width":213.18181824684143},{"text":"what features my CPU has","width":173.18181824684143},{"text":"but my favorite thing about CPU is I can discover","width":229.18181824684143},{"text":"how many bogomips it has","width":306.18181824684143},{"text":"in fact this little particular box has 4 CPU cores","width":228.18181824684143},{"text":"and each CPU has 6,000 bogomips","width":484.18181824684143},{"text":"a bogomip is one of the most well-known fake measurements of how good a processor is","width":640.1818182468414},{"text":"and it's this: when Linux starts up","width":142.18181824684143},{"text":"it runs a timing loop","width":107.18181824684143},{"text":"to see how quickly a CPU runs","width":158.18181824684143},{"text":"before the hardware timer interrupts","width":173.18181824684143},{"text":"so we can get an idea of roughly how many instructions we can run per second","width":272.18181824684143},{"text":"and that's what this is telling us","width":110.18181824684143},{"text":"roughly, our little CPU can run","width":267.18181824684143},{"text":"six thounsand million instructions per second","width":457.18181824684143},{"text":"that's a pretty fast CPU","width":131.18181824684143},{"text":"and of course it's a completely fake measurement","width":163.18181824684143},{"text":"we don't ever start to get close to that","width":126.18181824684143},{"text":"but it's a cute way of being able to compare","width":172.18181824684143},{"text":"one CPU to another and have an idea of how fast the timing loop is","width":353.18181824684143},{"text":"if we're just writing a very simple - in Assembler - kind of a litle for loop","width":236.18181824684143},{"text":"to wait for, say, a hundred instructions or so","width":209.18181824684143},{"text":"so that tells me something about my CPU speed","width":226.18181824684143},{"text":"and as you can see I can see how many CPUs I've actually got in my system","width":481.18181824684143},{"text":"so I can look at these","width":180.18181824684143},{"text":"these system-wides prompters, but I","width":277.18181824684143},{"text":"can also discover things about specific processes","width":263.18181824684143},{"text":"remember these numbers over here? They're just process numbers","width":293.18181824684143},{"text":"how about we find out","width":162.18181824684143},{"text":"something about our own process","width":223.18181824684143},{"text":"well I've got two ways to do that","width":137.18181824684143},{"text":"actually, the shell","width":143.18181824684143},{"text":"in a variable, tells me the process number of itself","width":611.1818182468414},{"text":"haha!","width":79.18181824684143},{"text":"I'm now inside the Matrix","width":219.18181824684143},{"text":"here I am inside of the process number of my shell","width":277.18181824684143},{"text":"let's see what we can find out about it","width":271.18181824684143},{"text":"all sorts of things","width":92.18181824684143},{"text":"so we can","width":470.18181824684143},{"text":"we can discover something about its memory","width":651.1818182468414},{"text":"make that a little bit more readable","width":707.1818182468414},{"text":"there's a lot of stuff inside of maps","width":231.18181824684143},{"text":"the first thing is, this tells me how","width":184.18181824684143},{"text":"the memory of my process is mapped","width":243.18181824684143},{"text":"so I remember how I said \"Hey, some memory's not mapped to anything\"","width":161.18181824684143},{"text":"well here's the proof","width":154.18181824684143},{"text":"the very lowest part of memory is not mapped to anything","width":163.18181824684143},{"text":"the first we've got, actually, is","width":230.18181824684143},{"text":"memory starting at this virtual address going up to that virtual address","width":281.18181824684143},{"text":"and... come back!","width":600.1818182468414},{"text":"and it's at this address that memory is actually","width":320.18181824684143},{"text":"executable, and it's mapped from a file called /bin/bash","width":312.18181824684143},{"text":"then later I've got heap memory, here it is","width":294.18181824684143},{"text":"then I've got all of these librarys like ld","width":208.18181824684143},{"text":"libc, you could probably guess what's inside of libc","width":204.18181824684143},{"text":"all of the C calls that we call","width":247.18181824684143},{"text":"and eventually we should find the stack down here aswell","width":165.18181824684143},{"text":"oh there it is","width":93.18181824684143},{"text":"and there's our current stack","width":547.1818182468414},{"text":"I've got schedule information, I've got other status information","width":443.18181824684143},{"text":"and I've even got the file descriptors","width":423.18181824684143},{"text":"and I can look at even the","width":143.18181824684143},{"text":"the command line that was used to start this","width":272.18181824684143},{"text":"so if these are readable","width":256.18181824684143},{"text":"then that suggests an important security concern","width":155.18181824684143},{"text":"which is anything you put on the command line","width":260.18181824684143},{"text":"other people can read","width":108.18181824684143},{"text":"so it's probably not a good idea, on a shared system","width":197.18181824684143},{"text":"to put your passwords, or any other secret information, on the command line","width":308.18181824684143},{"text":"because this interface","width":159.18181824684143},{"text":"allows people to actually discover","width":171.18181824684143},{"text":"what's on the command line of all running processes","width":756.1818182468414},{"text":"let's start something in the background","width":185.18181824684143},{"text":"so let's start sleep","width":140.18181824684143},{"text":"10 echo","width":426.18181824684143},{"text":"so let's go into","width":630.1818182468414},{"text":"okay that was the wrong process","width":316.18181824684143},{"text":"with a little bit of searching we could have found","width":123.18181824684143},{"text":"that command line for echo","width":323.18181824684143},{"text":"and discover the secret","width":234.18181824684143},{"text":"alright so","width":137.18181824684143},{"text":"that's enough of these virtual file systems","width":135.18181824684143},{"text":"I think it's time to talk about virtual memory, so","width":162.18181824684143},{"text":"page 2","width":1206.1818182468414},{"text":"so using virtual memory is","width":157.18181824684143},{"text":"and using memory-mapped memory","width":187.18181824684143},{"text":"is relatively easy","width":459.18181824684143},{"text":"I'm going to show you one version today which is","width":254.18181824684143},{"text":"where we have our memory-mapped file","width":211.18181824684143},{"text":"and we actually have a real file behind the memory that we're going to use","width":397.18181824684143},{"text":"next lecture we'll play with forking and show you how we can","width":299.18181824684143},{"text":"use this with IPC aswell","width":128.18181824684143}]