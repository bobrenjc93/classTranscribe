[{"text":"so now we can carry on, let's change our signal proc mask to whatever it used to be","width":618.1818182468414},{"text":"we'll print exiting and we'll return zero","width":141.18181824684143},{"text":"right so let's see what happens, how far will we get in this program before it finishes?","width":1059.1818182468414},{"text":"alright so we've sent out SIGINT nothing happened but then we changed the procmask again and that turned out to be our doom, our downfall","width":542.1818182468414},{"text":"by resetting signalprocmask to what it used to be, the signal could be delivered","width":316.18181824684143},{"text":"and of course what's the default behavior for SIGINT?","width":282.18181824684143},{"text":"kill the process. yes?","width":420.18181824684143},{"text":"there can be a delay","width":231.18181824684143},{"text":"so the system does not make any guarantees about when the signal will be delivered","width":414.18181824684143},{"text":"typically it will be as soon as you make an operating system call","width":242.18181824684143},{"text":"and that brings me on to my friday demo, I want to show you something really cool which is not directly related to signals","width":381.18181824684143},{"text":"but go on quick question","width":658.1818182468414},{"text":"yes, we're going to do that in a moment, we're going to make a thread to handle signals","width":252.18181824684143},{"text":"which is a nice engineering solution to working with signals","width":246.18181824684143},{"text":"but no I want to show you something called strace","width":295.18181824684143},{"text":"strace allows us to look inside the matrix, it allows us to see the operating system calls, it gives us a system trace","width":529.1818182468414},{"text":"of what a function is doing","width":263.18181824684143},{"text":"alright? so","width":100.18181824684143},{"text":"let me show you the code once more of...","width":297.18181824684143},{"text":"my little demo here, here it is okay","width":151.18181824684143},{"text":"we are going to set the um...","width":207.18181824684143},{"text":"called sigfillset, sigprocmask, we're going to write sending sig out, we're going to raise, etc","width":447.18181824684143},{"text":"so that's the code, now let's run this again","width":333.18181824684143},{"text":"with strace","width":488.18181824684143},{"text":"wahhhh lots of output okay, let's...","width":353.18181824684143},{"text":"scroll up here and make it a little bit smaller","width":588.1818182468414},{"text":"okay","width":333.18181824684143},{"text":"we can see every single system call that ran as part of this process","width":407.18181824684143},{"text":"you probably recognize quite a few of them right now","width":200.18181824684143},{"text":"first of all, what do we do? well after forking we had to call exec to actually load the process","width":507.18181824684143},{"text":"then we called break to discover where the beginning of the heap was","width":151.18181824684143},{"text":"we called mmap and we said we want to be able to read and write into this space","width":273.18181824684143},{"text":"we want it to be private, anonymous, etc ","width":199.18181824684143},{"text":"and just give me some space 4096 bytes","width":213.18181824684143},{"text":"negative one at the end tells me it's not associated with any file descriptor","width":233.18181824684143},{"text":"and then we call open on this LD thing and then we call fstat on that","width":503.18181824684143},{"text":"we call oh yeah it returns three","width":426.18181824684143},{"text":"sorry file descriptor three","width":226.18181824684143},{"text":"and then we call mmap to get that into memory","width":153.18181824684143},{"text":"give me a private copy with this file descriptor","width":192.18181824684143},{"text":"and here's the address that it goes in","width":113.18181824684143},{"text":"then we load the C library","width":279.18181824684143},{"text":"also file descriptor three because we closed it and we're going to mmap that","width":331.18181824684143},{"text":"so we're pulling the C library into our file system","width":222.18181824684143},{"text":"sorry into our virtual memory","width":271.18181824684143},{"text":"okay so we set up a few more memory mapped regions","width":263.18181824684143},{"text":"okay and here's the beginning of our code","width":268.18181824684143},{"text":"we are setting the signal masks","width":293.18181824684143},{"text":"see that puts being turned into a low level write call","width":380.18181824684143},{"text":"so a tgkill thing","width":181.18181824684143},{"text":"which is a low level version of our raise","width":201.18181824684143},{"text":"and then we set the signal process mask again","width":266.18181824684143},{"text":"and that's when our process gets interrupted by SIGINT","width":460.18181824684143},{"text":"so this is pretty cool right? you can actually see what a process does","width":337.18181824684143},{"text":"at the operating system level","width":96.18181824684143},{"text":"you can get between any process and all of the kernel calls","width":281.18181824684143},{"text":"that means that we can set our process up into lala neverland and make arbitrary return values to anything that asks for the system to do","width":926.1818182468414},{"text":"so strace is very powerful","width":133.18181824684143},{"text":"you can shim into every operating system call and see what it's being called with and see the return values","width":378.18181824684143},{"text":"right so that's our sigprocmask little demo","width":315.18181824684143},{"text":"let's go back to the handout","width":693.1818182468414},{"text":"right so I mentioned this hey instead of using signal, use sigaction","width":327.18181824684143},{"text":"here's how we use sigaction","width":141.18181824684143},{"text":"we need to give it a signal number and we also set up one of these structs","width":350.18181824684143},{"text":"struct sigaction with everything we need to do or we want to say what to do when a signal is delivered","width":609.1818182468414},{"text":"okay how do we set it up?","width":198.18181824684143},{"text":"inside my struct, I could have a regular handler just like we did with signal","width":478.18181824684143},{"text":"here's the function that should be called when the signal is delivered","width":347.18181824684143},{"text":"there's actually another function which allows me to get a lot more information about the signal","width":443.18181824684143},{"text":"but we're not going to talk about it in 241 but if you wanted to write a more complicated signal handler you might use this other function prototype instead","width":493.18181824684143},{"text":"okay what's different tough is that there's a mask","width":309.18181824684143},{"text":"a set of signals and these flags","width":192.18181824684143},{"text":"and it's important to remember to set up these other two items","width":383.18181824684143},{"text":"so here we go, here's some example code, right we're going to have our little struct","width":282.18181824684143},{"text":"we'll set up our handlers so that's our callback function","width":363.18181824684143},{"text":"let's do something with that mask","width":123.18181824684143},{"text":"I'll tell you what that mask does at the moment, typically you either empty it or fill it","width":283.18181824684143},{"text":"and then with our flags, typically you either set this to zero or sa_restart","width":476.18181824684143},{"text":"and then finally okay let's register for SIGINT","width":259.18181824684143},{"text":"this information","width":63.18181824684143},{"text":"so this set of signals","width":319.18181824684143},{"text":"does not affect delivery of the signal, this set of signals says what should be my mask when I'm actually inside the signal handler","width":1179.1818182468414},{"text":"so for example, if I'm handling a SIGINT","width":300.18181824684143},{"text":"do I want to block all other signals","width":174.18181824684143},{"text":"do I want to prevent a SIGTERM from coming in","width":273.18181824684143},{"text":"now for our typical easy little programs","width":157.18181824684143},{"text":"naw we don't need to worry about them, we don't need to care about these race conditions","width":193.18181824684143},{"text":"but if you're writing something complicated when you might have to say prevent SIG control C","width":439.18181824684143},{"text":"but also make sure that realtime information, realtime signals are always processed","width":364.18181824684143},{"text":"then you might actually use this to work out which signals can temporarily block another signal of a lesser priority to you from being executed","width":672.1818182468414},{"text":"of a lesser priority to you from being executed","width":640.1818182468414}]