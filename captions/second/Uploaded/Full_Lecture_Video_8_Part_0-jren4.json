[{"text":"[background noise]","width":4403},{"text":"good morning you gin lads and welcome to the bountiful C","width":269},{"text":"the wonderful c, the giver of life, the platform that allows us to compile our codes on new hardware","width":481},{"text":"you wanna take a program, you wanna put it on your new hardware, don't worry you just need to make a C compiler","width":373},{"text":"the wonderful C","width":83},{"text":"perhaps you've written it in python, doesn't matter, python itself is written in C","width":300},{"text":"perhaps you've written Minecraft","width":271},{"text":"ahhh,well don't worry about that, that's written in Java, well Java of course is written in, well c++, but nevermind, it's almost C","width":556},{"text":"perhaps you've written a ruby program, well guess what? ruby the interpretter is written in C","width":281},{"text":"yes, so C is underneath it all","width":201},{"text":"and that is partly why C is such a powerful and potent language","width":342},{"text":"it is also a fantastic langauge for working directly with hardware because we can create memory structure that map directly onto bytes and bits","width":688},{"text":"of our hardware","width":84},{"text":"so C gives you tremendous power because it's so close to assembler","width":344},{"text":"but a lot easier to write than assembly code","width":244},{"text":"alright, so","width":108},{"text":"we've been talking about making our c programs run with say two processes or doing two things at the same time","width":347},{"text":"well this is where things start to get interesting","width":171},{"text":"for example, let's count our gold ","width":243},{"text":"I've got a little function here called countgold() and you can see this is going to effect ","width":413},{"text":"so let me run this, i'll make a separate thread to do it","width":342},{"text":"alright, how do I do that? ","width":63},{"text":"well I need to pass in some sort of identifier and then I've got some options I don't care about","width":482},{"text":"what next?","width":52},{"text":"and then the function countgold and finally I want to give countgold a parameter of nothing, so I can just pass in null here","width":593},{"text":"and of course we want to wait for this to finish","width":213},{"text":"this time I'll call pthread_join() because I don't want to just finish at this point, I want myself to print out the value of the sum","width":600},{"text":"great, so, let's wait on this","width":301},{"text":"and I can, I'll have to put my little pthread_t type in here tid1","width":420},{"text":"and I can actually have an exit value as well","width":208},{"text":"so what did it say?","width":186},{"text":"that can just be a, whoops, void pointer and I'd better give it the address of that thing","width":523},{"text":"so let's compile this and see what we get","width":457},{"text":"arlight, argh, sum is zero","width":213},{"text":"now why was that?","width":334},{"text":"that's a good question, why was that? ","width":178},{"text":"we should've waited on this so let's first of all check that I'm using this correctly","width":533},{"text":"so we'll check the value of tid and see what it is","width":484},{"text":"and we should have ","width":503},{"text":"ok we've got a valid value","width":66},{"text":"so why did pthread_join() not ","width":430},{"text":"join terminate","width":327},{"text":"OK, alright, so at this point","width":387},{"text":"OH, yes, hahaha","width":351},{"text":"what did I pass to pthread_join()? the address of tid1","width":420},{"text":"not the value of tid1","width":193},{"text":"so, we needed the address up here because we wanted pthread_create to push the id into that variable","width":536},{"text":"but pthread_join() we just said here's your address and pthread_join() says thank you very much for that address, I'll take that as your thread identifier","width":411},{"text":"no, we wanted the value","width":250},{"text":"ok, so normally because that would take us about four or five days to discover","width":467},{"text":"good, so this time now it's waiting","width":140},{"text":"and finally it prints out the sum is a million","width":224},{"text":"fantastic","width":39},{"text":"now let's not just have one part that's going to count the gold, we want two","width":394},{"text":"so we'll have two threads going ","width":219},{"text":"they're both going to run the same function, but you and I know they both have their own threads","width":241},{"text":"so they both have their own stacks","width":207},{"text":"so each thread has it's own value of i","width":320},{"text":"OK, so, we'll, of course if we didn't do any waiting","width":591},{"text":"ah, thank you","width":290},{"text":"we didn't do any waiting, then our value is just some other value","width":276},{"text":"happens to be 56,000","width":154},{"text":"in other words we had two of these other threads running at the same time","width":195},{"text":"and our main program just decided to carry on and by the time we actually read the values ","width":482},{"text":"those other threads had already incremented it","width":196},{"text":"so we'll change this now to actually wait and any time that we copy paste code be very very careful to make sure you change everything you need to change","width":757},{"text":"I don't need two exit values, I don't care that both of them are going to write from the same thing","width":326},{"text":"so, now my program says OK,wait until the first thread is joined and then our main thread says now wait for the second thread to join","width":480},{"text":"and there we go","width":57},{"text":"my sum is about one and a half milliion","width":359},{"text":"whoops, I did not get two million even though both threads were just adding one to the sum","width":507},{"text":"perhaps you can see why","width":95},{"text":"we'll surely then we can fix this by saying rather than sum plus equal one, I'll just say sum plus plus","width":678}]