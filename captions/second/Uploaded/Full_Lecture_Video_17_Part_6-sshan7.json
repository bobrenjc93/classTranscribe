[{"text":"Right, so, we're gonna wake all the monks up","width":270},{"text":"But have we finished our code?","width":576},{"text":"I'm sorry? Signal?","width":479},{"text":"Okay, so if we've just added money to our wallet, it could be that somebody that's trying to subtract could now proceed","width":546},{"text":"So let's wake up","width":141},{"text":"someone in the subtraction","width":132},{"text":"So are you going to do something like","width":207},{"text":"pthread_cond_signal on which one, on the other condition variable?","width":481},{"text":"Right, so, this will wake up one thread and that happens to be waiting to subtract.","width":481},{"text":"Would you do that?","width":513},{"text":"So hopefully your answer is \"no, I wouldn't do that, I wouldn't write that code\"","width":326},{"text":"Why not?","width":239},{"text":"Perhaps you could explain to your neighbor ","width":122},{"text":"or to your imaginary friend","width":126},{"text":"why you don't wanna wake up one thread","width":3728},{"text":"Okay, so, let's think about a particular example","width":196},{"text":"Let's suppose you've got ten dollars in your wallet","width":332},{"text":"Are we doing... I'll change it like this","width":205},{"text":"Say we've got 90 dollars in our wallet","width":178},{"text":"And one thread wants to add 10, another one wants to add 20","width":503},{"text":"I'm going to make them larger sorry","width":127},{"text":"Add 20 or add 30","width":246},{"text":"So they're both blocked right now","width":114},{"text":"And then ","width":234},{"text":"A moment later, another thread comes in and say, pull out, let's say, 15 bukcs","width":498},{"text":"I could see that the adding 20 could now proceed","width":389},{"text":"But our code was unlucky, it decided to wake up just one of the other threads, and so it woke up the one trying to add 30.","width":496},{"text":"It came out, it managed to lock the mutex, it tested its conditions and said \"oh i'm sorry, I would still blow the budget, I would still go above 100, and so therefore I'm going back to sleep\"","width":640},{"text":"What we should have done is woken up all of the threads trying to add, in case any one of them could now continue","width":455},{"text":"Right, so the correct code in this","width":279},{"text":"And get rid of that...","width":67},{"text":"Is to wake up all of the other threads, right, so let's fix our code... let's substitute the word \"signal\" for \"broadcast\" everywhere in my program","width":641},{"text":"There we go","width":37},{"text":"Right, and now I think I'm done. Now I think I've got an asynchronous wallet where all threads sleep until they are able to add money, yes!","width":812},{"text":"When do I unlock, when?","width":343},{"text":"Why do I unlock after broadcast?","width":170},{"text":"In this particular example, it doesn't matter...","width":186},{"text":"for the stop method...","width":107},{"text":"But for the other ones, it does matter.","width":159},{"text":"And it comes down to the fact that you can reason about exactly when things happen.","width":392},{"text":"And you don't want another thread going into... ","width":261},{"text":"Let's say you're an add, you don't wanna know the threads going into the remove method, ","width":215},{"text":"and going to sleep just as you are sending the broadcast message.","width":322},{"text":"Otherwise you have a very small but potential race condition.","width":206},{"text":"If you have the lock, then you know that it can't actually go to sleep while still sending the broadcast message.","width":398},{"text":"And it's a tiny, tiny, tiny race conditon","width":134},{"text":"but it's easy to fix by always having this mutex lock.","width":288},{"text":"So, with that, welcome to the world of synchronization.","width":229},{"text":"Thank you very much, hope you got a lot out of this lecture; for those of you that want to find your tests, please come down here and have a great section and have fun with the MP! Thank you very much.","width":576}]