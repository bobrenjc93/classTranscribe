[{"text":"pthread_exit that just means no more for this thread","width":697.1818182468414},{"text":"that particular chef has walked out of the kitchen","width":259.18181824684143},{"text":"and will never come back","width":157.18181824684143},{"text":"so before you call pthread_exit","width":141.18181824684143},{"text":"make sure your thread has cleaned up any resources that it might have acquired","width":369.18181824684143},{"text":"questions?","width":169.18181824684143},{"text":"yes?","width":268.18181824684143},{"text":"ok so umm when a thread finishes","width":352.18181824684143},{"text":"it can finish in two different ways, it can..","width":275.18181824684143},{"text":"call pthread_exit","width":243.18181824684143},{"text":"or can return","width":73.18181824684143},{"text":"in fact, they are actually equivalent","width":490.18181824684143},{"text":"so this is a way to send some information back to the rest of the process","width":373.18181824684143},{"text":"and we had an example down here calling pthread_join","width":207.18181824684143},{"text":"and saying \"what did that thread say at the end?\"","width":173.18181824684143},{"text":"and you don't have to use this mechanism","width":202.18181824684143},{"text":"is actually common to make a struct and pass that to pthread_create","width":572.1818182468414},{"text":"That's the purpose of pthread_exit and this return here is that you can get the exit value","width":675.1818182468414},{"text":"let's say that you wanted more than just a void pointer","width":260.18181824684143},{"text":"what we can do here is","width":255.18181824684143},{"text":"define some sort of struct","width":190.18181824684143},{"text":"umm i won't bother the struct definition","width":180.18181824684143},{"text":"i'll say hey, let's have some memory and i'll call it \"my to do struct\"","width":589.1818182468414},{"text":"ok so","width":205.18181824684143},{"text":"calloc( sizeof(todo)) and i just need one of them","width":339.18181824684143},{"text":"and then i would set..oops","width":396.18181824684143},{"text":"set things up on this","width":91.18181824684143},{"text":"hey like..umm..","width":120.18181824684143},{"text":"you know.. start.. blah blah blah","width":200.18181824684143},{"text":"please stop..umm zero","width":168.18181824684143},{"text":"exit value in here, etc.","width":93.18181824684143},{"text":"so i could use this struct","width":97.18181824684143},{"text":"because both my main program and my thread that knows about this struct","width":236.18181824684143},{"text":"cause i can..","width":143.18181824684143},{"text":"pass in it","width":160.18181824684143},{"text":"so that allows me to assemble a whole body of information that i want to pass to the other thread","width":560.1818182468414},{"text":"ok let's get back to our little questions here","width":177.18181824684143},{"text":"why would you call pthread_exit in your main method","width":232.18181824684143},{"text":"well, this is typically done in kind of simple or small programs","width":213.18181824684143},{"text":"where we say most of the work is actually going to happen by all of my other threads","width":255.18181824684143},{"text":"and my program can finish after all of those other threads have finished","width":485.18181824684143},{"text":"so we would do this if there was no clean up in the main thread","width":652.1818182468414},{"text":"and we'll be happy just to wait","width":330.18181824684143},{"text":"until","width":132.18181824684143},{"text":"all thread are done","width":313.18181824684143},{"text":"so this is equivalent of saying hey last person out of the kitchens turn out the lights","width":315.18181824684143},{"text":"and the process will finish","width":253.18181824684143},{"text":"so I gave you two ways that a thread can be terminated just now, I said it could return from its function","width":494.18181824684143},{"text":"so.. we could .. return a value and i gave you that 0x12345 thing","width":375.18181824684143},{"text":"so..","width":158.18181824684143},{"text":"if you return from the function that was originally started by the thread","width":223.18181824684143},{"text":"i also showed you that you could call pthread_exit","width":336.18181824684143},{"text":"but apparently there's four ways","width":218.18181824684143},{"text":"What other two ways might a thread exit?","width":219.18181824684143},{"text":"and i have mentioned them already in this lecture","width":671.1818182468414},{"text":"yes!","width":142.18181824684143},{"text":"yes! if someone calls pthread_cancel() on that chef","width":218.18181824684143},{"text":"they're done, okay yes","width":103.18181824684143},{"text":"so if a thread is in a cancelled state, it may exit","width":358.18181824684143},{"text":"and how else might a pthread ... yes?!","width":242.18181824684143},{"text":"yeah, the whole process dies","width":117.18181824684143},{"text":"so if another thread for example, segfaults","width":173.18181824684143},{"text":"that's it for all of your processes","width":143.18181824684143},{"text":"segfaults if like blurring up the entire chemistry lab or the entire kitchen","width":343.18181824684143},{"text":"the whole thing is gone","width":68.18181824684143},{"text":"the whole process is gone","width":110.18181824684143},{"text":"we need a valid process in order for our threads to finish","width":263.18181824684143},{"text":"let's talk about pthread_join","width":131.18181824684143},{"text":"it actually has two purposes.. we can wait ","width":363.18181824684143},{"text":"for a thread to finish","width":412.18181824684143},{"text":"and get its exit value","width":473.18181824684143},{"text":"the other thing it does is..free up resources","width":733.1818182468414},{"text":"okay what resources might that be?","width":219.18181824684143},{"text":"well","width":42.18181824684143},{"text":"every thread has some space in its process memory for its stack","width":418.18181824684143},{"text":"and every thread has an exit status, an exit value","width":367.18181824684143},{"text":"the library is going to keep them around","width":200.18181824684143},{"text":"because who knows, someone will call pthread_join on the thread","width":246.18181824684143},{"text":"so we can only release those resources after pthread_join has been called","width":426.18181824684143},{"text":"if you're writing a short simple program and you don't about these things then fine","width":239.18181824684143},{"text":"but when you want to write longer running programs that don't have resource leaks","width":227.18181824684143},{"text":"you should call pthread_join on every process, i mean, every thread yes","width":851.1818182468414},{"text":"so pthread_cancel, you're giving a chef another thread the marching order to say hey leave","width":492.18181824684143},{"text":"okay. I'm canceling you, i don't want any more of your work","width":152.18181824684143},{"text":"I'm canceling..you know that stuff i told you to do? don't do it anymore, okay?","width":388.18181824684143},{"text":"so..","width":77.18181824684143},{"text":"pthread_exit says","width":137.18181824684143},{"text":"i'm done","width":83.18181824684143},{"text":"and by the way, here's my result","width":68.18181824684143},{"text":"and i ..","width":44.18181824684143},{"text":"so it's an act by the thread that says i don't want to do anymore work","width":415.18181824684143},{"text":"yes?","width":493.18181824684143},{"text":"yes!","width":236.18181824684143},{"text":"oh okay, right","width":259.18181824684143},{"text":"the point i was making here is..","width":245.18181824684143},{"text":"that you know that when you return from main, the process is done","width":233.18181824684143},{"text":"you know that when you call exit, the process is done","width":388.18181824684143},{"text":"okay","width":57.18181824684143},{"text":"pthread_exit has a supple part of the specification","width":319.18181824684143},{"text":"that says the main threads is finished, but the process continues until all threads are finished","width":1571.1818182468414},{"text":"corrrrrrect! yes","width":113.18181824684143},{"text":"so, if i called pthread_exit() after printing Â - eh","width":445.18181824684143},{"text":"hi","width":62.18181824684143},{"text":"right? now the process is done","width":204.18181824684143},{"text":"so it's the last chef out that turns out the lights to the whole process","width":315.18181824684143}]