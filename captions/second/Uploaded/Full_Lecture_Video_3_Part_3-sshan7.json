[{"text":"okay alright so, we've got a typedef that say \"typedef void (*sighandler_t)(int)\"","width":404},{"text":"and then this sighandler underscore t. let's talk about this for a moment. as to how to parse this","width":868},{"text":"alright, so we know that typedef just really means \"hey! I'm an alias\" I'm just defining a new type and in this case, this is a function pointer","width":752},{"text":"so, we can [something] this by unpacking it from the inside out. so, we can have a function that takes an integer","width":586},{"text":"and returns nothing","width":271},{"text":"and, our type goes in the middle (between the parenthesis)","width":196},{"text":"so have a pointer to a function. in other words, just, where do we want to send the CPU to actually execute some code? here's our little function that's gonna happen","width":584},{"text":"and then I can install this handler for a particular signal","width":260},{"text":"so should a certain signal happen, run this handler","width":246},{"text":"alright, so, let's do that","width":513},{"text":"I'm gonna have a signal handle then. and I can call it noway. I can call it anything I want, really.","width":559},{"text":"remember it takes a void. call it agentsmith alright, you'll see why in a moment. and remember it takes an int","width":858},{"text":"so, at this point, we'll write something out. like, \"you can't stop me!\"","width":549},{"text":"okay, how many letters is that? who knows? about 13","width":363},{"text":"and, we want this to run anytime someone tries to stop this program","width":214},{"text":"so, let's use that signal() thing","width":153},{"text":"so we'll say signal when I get a SIGINT, run agentsmith","width":675},{"text":"and, then i'll have a little loop that does a. keeps itself busy. while(1) loop forever","width":460},{"text":"so, while true, keep going","width":117},{"text":"alright so, let's run this little program here","width":851},{"text":"okay, off it goes, and let's try and press Ctrl-C","width":479},{"text":"oh no! alright, you can't stop agent smith here. anytime you press Ctrl-C, that signal is delivered and fortunately, you can press Ctrl-\\ and that should","width":876},{"text":"okay, there we go, alright. I can at least Ctrl-Z it so I can actually stop the program. so something else to show gives me the ability to pause the program.","width":506},{"text":"and if I wish, I could actually put that into the background. does it support it? okay, yeah, it does and now its in the background","width":617},{"text":"and now it's just running and using up my CPU","width":181},{"text":"if I do \"ps\", there it is. it's running. it's used up 32 seconds, now its used up 34 seconds of CPU, I'd better kill it.","width":502},{"text":"okay, kill minus 9 106","width":235},{"text":"it's gone! remember, SIGINT you cannot stop. so you could try to. sorry, SIGKILL or SIGTERM you cannot stop SIGTERM","width":784},{"text":"alright let's go back","width":195},{"text":"right, so let's first see what it's going to do with child processes. here's the whole thing. let's change our message to say \"child finished\"","width":631},{"text":"and this time, we will make our message a string here so char mesg","width":736},{"text":"I can get a signal when one of my children dies","width":325},{"text":"so strlen(mesg)","width":270},{"text":"okay, right, so, write out the number of bytes that's in that message","width":536},{"text":"so now, rather than doing SIGINT, guess what, there's something called SIGCHILD","width":364},{"text":"and let's make this a little larger","width":354},{"text":"and this time rather than looping forever, we'll do our fork() and now when the child is finished running ls, why did it, oh, aha!","width":1672},{"text":"that's not gonna be very useful, okay.","width":329},{"text":"we'll get rid of the sleep() there as well","width":341},{"text":"so, this time, the child runs ls hopefully, oh, no.","width":367},{"text":"SIG, oh, I can't spell","width":195},{"text":"yes, for some reason, CHLD is spelled without the I","width":272},{"text":"I guess bytes were expensive in those days? okay, alright so, hooray! here's what we've got","width":769},{"text":"the child ran and then the parent was notified asynchronously that the child finished","width":506},{"text":"so if you wanted to do some stuff in the background and you're worried about zombies, this is the perfect place to put that waitpid","width":475},{"text":"to say \"hey! I need to clean up my children\"","width":156},{"text":"so that's in fact a very common convention with these kinds of programs","width":334},{"text":"is, if you don't want to just fork() and then wait() immediately, just write yourself one of these signal handlers and then we can put our waitpid in here","width":595},{"text":"so, we'll need to know the child id, we have a status variable, and a zero here, okay","width":724},{"text":"the last thing I need to do here is that child itself [something] out of scope here. so instead, let me declare as a global variable","width":723},{"text":"now, global variables in large programs considered [something] programming practices. however, you will often see them in small, single-file system programming examples","width":943},{"text":"because it's an easy way to communicate with signal handlers","width":401},{"text":"alright so now, okay, well, you can imagine if I was actually able to type, you can see that we're being good citizens and we're cleaning up our children using a signal handler","width":896}]