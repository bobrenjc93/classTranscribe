[{"text":"They must be hungry or they're dead","width":376},{"text":"Okay here's a solution for ya alright","width":371},{"text":" The philosophers spend time thinking, and then get hungry","width":402},{"text":" They pick up the left and right fork and then they eat when they're done they put down the left fork and they put down the right fork","width":801},{"text":" Any guesses about what might happen here? What's wrong with this? Everybody grabs the left fork first, whats gonna happen? They'll starve","width":1894},{"text":" This doesn't work","width":66},{"text":"Because what's going to happen is oh left fork, left fork, left fork and one more left fork","width":444},{"text":"And now when I try to pick up the right fork, there's no right fork there and they can't do anything, they're blocked","width":458},{"text":" Or deadlocked","width":217},{"text":" Which properties does our solution have? Does it have mutual exclusion? It better have all of them - it's deadlocked. What's causing the mutual exclusion?","width":1022},{"text":" Can't share forks - which is good for winter time which is good in the winter time because otherwise we'd all get sick","width":226},{"text":" What's hold and wait? I have one fork and waiting for another fork","width":642},{"text":" No preemption - No stabbing the philisopher next to you to steal their fork","width":513},{"text":" Circular wait is this potential of causing a cycle, each waits for the next neighbor to put down their chopstick","width":1010},{"text":" So lets just look at this in context of the resource allocation graph","width":340},{"text":" So if the philosophers are the processes","width":625},{"text":"That means the forks are the resources and if we model this using our resource allocation graph we can say everyon tries to pick up their left fork","width":762},{"text":" They all get cause there's nobody's using them so there's an arrow from process to the resource and they all get it, those are the request edges","width":564},{"text":"and everyone succeeds","width":218},{"text":"oh sorry those are requests, now everyone succeeds so everybody's got it from the resource to the process","width":419},{"text":" Now everyone tries to pick up the right fork","width":156},{"text":" There's request edges","width":139},{"text":" And there's our cycle right there, cycle equals deadlock","width":543},{"text":" I had a lot more examples of how to solve deadlock, how to solve the dining philosophers problem, but I think you'll be doing more of that later","width":915},{"text":"The only thing he told me to do is introduce the dining philosophers problem and say why it's bad to pick up chopstick 1 and eat. So  any questions about the dining philosophers problem?","width":845},{"text":"Any questions about deadlock? What is preemption? So that means you can't take the resource away from somebody","width":1148},{"text":" Once the philosopher has the fork you can't force him to give it up","width":613},{"text":" Preemption means you can take it away. No preemption means you can't take it away","width":252},{"text":"And actually preemption is a solution to recovering from deadlock","width":266},{"text":"Because one way to solve this would be to say okay Aristotle you need to give up your fork and once he does Socrates can pick it up","width":932},{"text":" Sorry Descartes can pick it up and now he eats, puts it down","width":264},{"text":" And the cycle backs around","width":122},{"text":"And we've now solved our problem","width":258},{"text":" So you can use these types of graphs to help us solve the problem of deadlock as well as detect Â deadlock","width":416},{"text":"But the thing to be careful about is it's not easy to determine, in this one it's really easy you can say oh look there's the cycle","width":351},{"text":" I break it and it fixes everything, real systems have more complex cycles and more complex graphs","width":462},{"text":" Ok - It's been a pleasure, thank you","width":227},{"text":"And as far as I know unless he gets stuck in california, Lawrence will be back on Friday","width":351}]