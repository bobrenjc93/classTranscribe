[{"text":"Here we go! I'm going just hard code my, my constants. Like I said, we could have got this back from the address info.","width":764},{"text":"Today, I want to play with IP4, I want a TTP connection. There's my flags, those other flags you can set them here by bit-wise or-ing them.","width":591},{"text":"But we want a uh... a server, or passive connection. Yes, I remembered to set all my other unused fields to zero.","width":935},{"text":"Right. Yes, I'm going to call getaddrinfo. Check the result code; if it fails, I'll turn that into a useful error message.","width":610},{"text":"It's really really useful if your code doesn't work to actually check error messages by the way.","width":446},{"text":"Okay, so. We got a socket call, we got a bind let's connect to a local port.","width":460},{"text":"And look at this! I'm using the stuff I got from my getaddrinfo. I'm passing in that point of that struct and the size of that struct.","width":697},{"text":"okay, that's my set up: socket bind.","width":191},{"text":"Now, we start to say, \"Ooh!\" Um, please start listening and have a little backlog of ten connections.","width":583},{"text":"Okay. So, just for fun, I want to show you that I can say, \"I'm just doing a particular port. If I reach into one of these low-level C structures, I better remember to reverse the right order to turn it into from network to host (ntohs) and use the result of that call.","width":1955},{"text":"And now we're going to have our little server.","width":362},{"text":"This server code didn't actually send anything back to the client. It just listens to hear what the client has got to say.","width":438},{"text":"How do we do that? We call accept. Later on if we wanted to have to fill in the structure, like where the client was connecting from. We wanted their own IP address we can fill out these structures here.","width":923},{"text":"And remember how I said accept returns a new client? Here it is! Here is a new file descriptor (fd), and I'm going to use that on my read call and then turn it into a C string and print out what they said. Okay","width":1098},{"text":"So, let's uh, let's run this.","width":812},{"text":"Hmm. *bzzzzzzzzzzzz* Okie dokie, alright, so there's no error checking in this last part, um, alright.","width":515},{"text":"So I can... clear this right gcc ./server1 (./server1.c). Okay! Alright","width":1337},{"text":"Oh, look at that! That's my OSX is saying do you want to accept it?","width":329},{"text":"Wait! And it chose file descriptor 3, is this your port 1234? Shall we connect to it?","width":616},{"text":"Okay, alright. So, let's do this um, now I could write some C code, but instead I want to show you a pretty useful tool. It's called netcat.","width":1021},{"text":"Here is netcat. Blah blah blah, blah blah, blah blah blah, blah blah blah. Look it's like cat, except you can connect to an arbitrary machine, using an arbitrary protocol.","width":891},{"text":"And anything we sent this, it will use standard in and standard out.","width":546},{"text":"So today, I want to connect to 127.0.0.1, my local host, and I want to connect to port 1234.","width":1168},{"text":"So our code is working! The accept call has returned. ","width":192},{"text":"And it has given back our new file descriptor. Right, should we send something to it! Yes, okay here we go. HELLO GET / HTTP/1928349q87eyfaiu7tbeiqvwfa SAfuigae","width":831},{"text":"And here we go. So, it got that from the socket and printed that and stopped.","width":597},{"text":"This is the most useless web server in the world because it accepts one request then quits.","width":539},{"text":"Very easy to make a denial of service (DOS) on this particular web server. So what we'll do is make it so it cannot accept multiple clients. We're not going to do any threading code in this (we could though!). Right as soon as accept returns, why don't we make a new thread and pass it on.","width":992},{"text":"Instead, we'll just put this little part inside a loop. Alright so a while there.","width":913},{"text":"Okay, so we put this accept call inside a loop","width":1773},{"text":"Make another connection, and so on and so on. So we got the basics now of a little web server. What we have to do now is figure out how we are going to pause this. what do we want to do with this information, and what do we want to send back to the client?","width":1271},{"text":"Alright, so in fact what we've made is something a bit like a honey pot. For example, here's why it's called a honey pot.Take a jar of honey, open it, and see what insects are there after a minute or an hour. We can do this with our server. We can get it to simply listen on a particular port and see who connects and say capture the IP address. Or we can pretend to masquarade to build a real machine. Oh look! people are trying to log into this let's see what kind of pass","width":2502},{"text":"let's see what password they typed in.","width":223},{"text":"We can see what kind of attacks they do to our machines.","width":283},{"text":"So, on many modern networks now we have these machines which appear to be real machines, but which are infact are simple honey pots.","width":556},{"text":"This is the simplest kind, right? Where we can simply log the connection attempts, who they're from, and what information is sent to us.","width":704}]