[{"text":"So I said that, hey we'd like to look at different files and maybe call stat on them","width":385},{"text":"Um, here's some starting code that maybe we can actually start to find different","width":431},{"text":"Look at, look at actually entries within a uh","width":302},{"text":"Entries inside the directory","width":305},{"text":"So here's the format of reading directories, we say okay I wanna open a particular directory","width":615},{"text":"And we're giving it dots. So what does dot mean?","width":404},{"text":"Current directory. Yes! So it depends on my process","width":202},{"text":"Where whatever the current directories of my my process.","width":137},{"text":"I could put it in an absolute directory here for example","width":244},{"text":"This opens a file descriptor","width":187},{"text":"So one way this could fail would be if you already got too many file descriptors open","width":399},{"text":"But it wraps it inside this DIR because we don't care about the actually bytes stored","width":374},{"text":"inside this magic file called a directory, we wanna pass it in terms of um","width":402},{"text":"uh uh uh the the names for example stored inside and the inode numbers possibly","width":339},{"text":"So that's what this uh readdir call does","width":236},{"text":"It updates an internal state inside this structure ","width":222},{"text":"and uh we can keep calling it and it will iterate all of those entries returning one at a time","width":493},{"text":"And then we could extract the name,","width":152},{"text":"maybe we care about trying to find a particular name","width":387},{"text":"So if strcmp returns 0, great we've got an exact match","width":239},{"text":"uh we could say yes we've found it","width":195},{"text":"Eventually readdir says okay I give up. ","width":190},{"text":"I um the the there's no more entries in which case it returns null","width":352},{"text":"So this is fairly kinda idiomatic C code ","width":189},{"text":"Where you not only ","width":157},{"text":"assign the result of a call to a variable","width":224},{"text":"you also uhh check it for something","width":212},{"text":"Like whether it's non-zero or not","width":252},{"text":"So eventually our while loop finishes","width":132},{"text":"we close the file descriptor and free any other internal resources","width":203},{"text":"perhaps we've malloced some memory inside there to hold the names","width":177},{"text":"and we return 0 saying we didn't find it","width":158},{"text":"okay so","width":137},{"text":"what's wrong with that code?","width":122},{"text":"Don't tell me. Explain it to your neighbor","width":314},{"text":"Or take a good guess","width":10361},{"text":"Okay so here's the code","width":190},{"text":"no errors found","width":310},{"text":"I'm gonna use it to try to find some file","width":227},{"text":"uh each time my little while loop, i'm going to print out the name i found","width":359},{"text":"Just run it","width":164},{"text":"okay","width":254},{"text":"Yay great! It actually all of the entries","width":317},{"text":"and remember how we said that we actually dot and dot dot","width":135},{"text":"yes, there they are, they're the first two entries  that we actually will see when we ","width":301},{"text":"iterate through the contents of my directory","width":173},{"text":"so i could start making this into a more useful program, I could start finding things","width":301},{"text":"uh for example, uh","width":169},{"text":"instead of just dot, i could actually make use of uhh the","width":291},{"text":"uhhm main. alright this could be for example uh argv(1)","width":781},{"text":"For now i've got a program that's a bit like DIR it's starting to look for things inside a certain directory","width":383},{"text":"okay right, so what's the error in this code?","width":568},{"text":"Yessss. Thank you, if you find what you're looking for you don't close the file descriptor","width":409},{"text":"Aight, the reason why this  I've bring this up because cause it's a really common error","width":345},{"text":"and it's really evil one to debug because when is it gonna you that it's gone wrong?","width":468},{"text":"somewhere else right? somewhere other time where you actually try to open a file descriptor","width":227},{"text":"when you try to open some you know simple file that exists","width":226},{"text":"and it's absolutely no reason why it can't open this file and yet your program fails in some bizzare way","width":377},{"text":"and its midnight and you've been staring at this for two hours","width":160},{"text":"and you wondered, why why did you learn to read? ","width":208},{"text":"you know life would've been so much simpler if you could kinda stayed in the yeah","width":216},{"text":"stayed outside and ran around and played or something","width":117},{"text":"right, so yeah watch out for this. and it's a very common error to forget about frame resources","width":355},{"text":"why blame only yourself but blame C","width":238},{"text":"C doesn't give us any support to actually uh remember to close resources","width":359},{"text":"hardware resources that we've opened","width":141},{"text":"and in fact your often find that's true for other languages as well even ","width":249},{"text":"with C++, uh we've actually got  to somehow remember to explicitly","width":298},{"text":"free those external resources and in this case it's remembering to call closedir","width":344},{"text":"So how can we closedir? Well one way is to make sure all possible","width":242},{"text":"code paths actually free the resource","width":240},{"text":"another thing that  we should probably do with our code if this is actually","width":237},{"text":"if we are being paid to write robust code","width":133},{"text":"is check the return value","width":101},{"text":"and being prepared to print out the actual error","width":243},{"text":"so if we actually written good code","width":237},{"text":"then our failure might have logged the fact that there were no more free file decriptors","width":343},{"text":"for us to use and that would've a strong hint that we were leaking resources","width":320}]