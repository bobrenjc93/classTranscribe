[{"text":"Yes","width":398.18181824684143},{"text":"Yeah","width":155.18181824684143},{"text":"Ok right. So what happens if you put static inside a function?","width":271.18181824684143},{"text":"Yes, so the variable itself lives forever, but static makes it a secret variable.","width":413.18181824684143},{"text":"yes the scope of it, the name start, is only available inside that function","width":403.18181824684143},{"text":"but the actual storage of that variable is for the lifetime of the process","width":300.18181824684143},{"text":"thats like one of those awful interview questions","width":200.18181824684143},{"text":"hey whats on page 37 of the C standard?","width":156.18181824684143},{"text":"i dont know. I didn't write it","width":323.18181824684143},{"text":"Knowing precisely how static works is an exercise left for the advanced C programmer","width":424.18181824684143},{"text":"But by defining static, the life time of the memory is for the duration of the process. other questions? yes?","width":1094.1818182468414},{"text":"To cast an int to a void pointer, no that's the other way of solving, if you're sure that a void pointer has enough bits to represent the parameter you're trying to pass in","width":883.1818182468414},{"text":"You can also just say, look void","width":255.18181824684143},{"text":"Let me choose a different value like 71","width":272.18181824684143},{"text":"That means, I gotta type as a pointer to some memory","width":212.18181824684143},{"text":"I'm not going to say what kind of pointer yet","width":140.18181824684143},{"text":"Im going to pass in this value 71","width":223.18181824684143},{"text":"you can do that providing you write the code to the other end to simply cast it","width":330.18181824684143},{"text":"if you attempt to read at memory 71","width":261.18181824684143},{"text":"oops, you'll get a segfault","width":516.1818182468414},{"text":"I will not talk about that right now, but yes, that's another way of solving this problem","width":630.1818182468414},{"text":"How about this one?","width":247.18181824684143},{"text":"So what I want to do here is that I want to send","width":261.18181824684143},{"text":"my value of i from 0 to 9 to some new threads","width":595.1818182468414},{"text":"So each one can get a value","width":266.18181824684143},{"text":"Why does this code not work?","width":280.18181824684143},{"text":"So take a moment with your neighbor to review it and I'll start writing it up as a demonstration - [silence]","width":6108.181818246841},{"text":"Ok so here's a version of that code","width":432.18181824684143},{"text":"The first thing we might comment is what might this code print out?","width":213.18181824684143},{"text":"It might jsut print out hello world and nothing else","width":152.18181824684143},{"text":"it could be that we return from our main before those other threads ahave  a chance to start up","width":399.18181824684143},{"text":"Before those chefs can be employed and waltz into our kitchens, the process itself is exited because we've returned from main","width":579.1818182468414},{"text":"alright, how should we stop that?","width":124.18181824684143},{"text":"Well we could just call pthread_join on every one of those ids","width":232.18181824684143},{"text":"But you and I know we can call pthread_exit() here and leave it up to the system to finish a process when all the other threads have exited. ok right, so let's run this","width":1308.1818182468414},{"text":"And this is the output we get","width":223.18181824684143},{"text":"Im printing out the value that's actually sent to each new thread and also the actual pointer we've got as well","width":705.1818182468414},{"text":"the first comment is look at all these numbers! They're all the same","width":245.18181824684143},{"text":"And it seems to work.","width":125.18181824684143},{"text":"If we only tested this with 6 threads, we think our code is fantastic! look at the all the threads I'm starting","width":368.18181824684143},{"text":"But instead I get 0,1,2,3,4,5 and four 10's. Why? yes?","width":1343.1818182468414},{"text":" So the for loop finished","width":286.18181824684143},{"text":"So, for the early threads, what happened?","width":169.18181824684143},{"text":"well we ran our loop, we start a thread. well we ran our loop, we start a thread. well we ran our loop, we start a thread","width":360.18181824684143},{"text":"For the remaining threads, it so happened we went around the loop and those threads did not start. ","width":303.18181824684143},{"text":"They weren't scheduled on the CPU","width":177.18181824684143},{"text":"They're going to be. It's just they didn't start straight away","width":341.18181824684143},{"text":"Eventually they do start","width":193.18181824684143},{"text":"And theyre all given the same address","width":190.18181824684143},{"text":"the address of i","width":129.18181824684143},{"text":"it just happens to be a stack variable in my main thread","width":211.18181824684143},{"text":"by the time they started, we've already incremented the value","width":250.18181824684143},{"text":"it had already been incremented up to 10","width":439.18181824684143},{"text":"and we saw that they really are looking at the same variable because we've printed out the variable that was given to us","width":464.18181824684143},{"text":"and that address, 7fe blah, blah, blah","width":405.18181824684143},{"text":"is just part of the stack of the main thread","width":523.1818182468414},{"text":"So let's to fix it","width":188.18181824684143},{"text":"We could make a struct for each of our threads using malloc()","width":311.18181824684143},{"text":"Or we can make an array in global","width":159.18181824684143},{"text":"but let's do the trick that you suggested","width":236.18181824684143},{"text":"lets just cast this","width":225.18181824684143},{"text":"to a void pointer","width":170.18181824684143},{"text":"because we're C programmers and we know what we're doing. said every C programmer. and what do we get? whoops","width":1019.1818182468414},{"text":"Absolute garbage, yes","width":120.18181824684143}]