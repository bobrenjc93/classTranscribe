[{"text":"there's lots of different things you can do to deal with deadlock","width":523.1818182468414},{"text":"you can try to prevent it. this is probably the most expensive thing that you can do","width":418.18181824684143},{"text":"you have to understand exactly how your system exists. you have to understand all the states in your system","width":419.18181824684143},{"text":"you have to be able to look at it, run from algorithms on it and say that nothing in the system, no program, no application can cause deadlock","width":582.1818182468414},{"text":"to be able to do that, you have to be very,very pessimistic","width":240.18181824684143},{"text":"because even if we're dealing with the zacks aren't very nice, if two of them never met, it's never gonna be a problem.","width":593.1818182468414},{"text":"so only if they actually meet that they cause deadlock","width":296.18181824684143},{"text":"a number of systems might try to do something like detection and recovery","width":299.18181824684143},{"text":"so detected that there was deadlock and now we're gonna come up some algorithms to recover from it","width":512.1818182468414},{"text":"avoidance is kinda somewhere in between. we're gonna look at our system and come up with systems that don't come up with dealdock","width":593.1818182468414},{"text":"a little bit more expensive than detection","width":183.18181824684143},{"text":"not quite as expensive as total prevention","width":193.18181824684143},{"text":"and then if you really have trouble you can have your system operator sit there and fix things that's your worst case - you don't want to do that","width":564.1818182468414},{"text":"does anybody know what unix/linux does","width":303.18181824684143},{"text":"for deadlock prevention","width":128.18181824684143},{"text":"or detection or avoidance or whatever","width":253.18181824684143},{"text":"anybody know?","width":158.18181824684143},{"text":"wanna take a guess?","width":130.18181824684143},{"text":"how does linux deal with deadlock?","width":425.18181824684143},{"text":"how many people think it does deadlock prevention?","width":275.18181824684143},{"text":"detection and recovery?","width":234.18181824684143},{"text":"avoidance?","width":223.18181824684143},{"text":"manual intervention?","width":163.18181824684143},{"text":"you wanna know what it does? nothing","width":341.18181824684143},{"text":"this is called the ostrich approach, you stick your head in the sand and ignore deadlock ever happening. that is pretty much what they decide","width":536.1818182468414},{"text":"they leave it up to the application writers to make sure they don't deadlock","width":320.18181824684143},{"text":"so, the nice thing about this is that none of the expensive components of prevention or recovery or detection need to be implemented","width":567.1818182468414},{"text":"they just say everything's faster and if it's rare is it really worth the overhead?","width":469.18181824684143},{"text":"the assumption is that it's rare and we're not going to use it or if it's really important for a particular application that that application take care of it","width":567.1818182468414},{"text":"that being said you can't ignore it because it's part of this class and i'm gonna talk to you about how to figure out what's going on with deadlock","width":519.1818182468414},{"text":"to be able to do so","width":157.18181824684143},{"text":"i wanna be able to model ","width":779.1818182468414},{"text":"i want be able to model my processes and my resource that they wanna use in a graph and this is called a resource allocation graph","width":532.1818182468414},{"text":"and my resource allocation graph has two components","width":267.18181824684143},{"text":"it has ","width":333.18181824684143},{"text":"it has processes which are these circles ","width":301.18181824684143},{"text":"and it has resources which are the squares","width":353.18181824684143},{"text":"and what i'm gonna do is i'm going to take an arrow","width":408.18181824684143},{"text":"from a resource to a process","width":207.18181824684143},{"text":"that means that p1 is using r1","width":284.18181824684143},{"text":"and i'm going to take an arrow from a process to a resource saying that p1 requested r2","width":614.1818182468414},{"text":"so this would be","width":327.18181824684143},{"text":"process 1 is using standard out","width":218.18181824684143},{"text":"process 1 has acquired a lock","width":273.18181824684143},{"text":"the second half, the right half would be","width":156.18181824684143},{"text":"some other process acquired a lock already and p2 is asking for it but doesn't get it until the other process has given it up","width":591.1818182468414},{"text":"so, why do we go through the bother of this? well it turns out that if we look at resource allocation graphs they have this great property that tell us how to deal with deadlock or how to detect deadlock, or how to detect deadlock","width":1132.1818182468414},{"text":"let's say we have this situation now where r1 acquires, sorry, p1 acquires r1","width":573.1818182468414},{"text":"so process 1 has acquires some resource","width":204.18181824684143},{"text":"and p2 has acquired a different resource","width":216.18181824684143},{"text":"but now","width":174.18181824684143},{"text":"p2 is gonna request that first resource that p1 has and p1 is gonna request the resource that p2 had","width":708.1818182468414},{"text":"what's gonna happen?","width":115.18181824684143},{"text":"so, if they're gonna hold on to these resources and they can't make any progress until they get the second resource, we've now created something called circular wait they're both waiting for something","width":824.1818182468414},{"text":"the zack's were each waiting for the other to move","width":191.18181824684143},{"text":"the cars at the intersection were each waiting for the other to move","width":194.18181824684143},{"text":"this is called circular wait","width":170.18181824684143},{"text":"and this type of cycle in a resource allocation graph tells us that there's dedlock","width":447.18181824684143},{"text":"so, on your handouts from today, you guys have some examples that we're going to go through","width":593.1818182468414},{"text":"so let me switch over to our examples","width":568.1818182468414},{"text":"can you guys see that okay or do you want me to put it on the center screen too?","width":820.1818182468414},{"text":"so, i'll help you through the first one","width":230.18181824684143},{"text":"the first one, here's my boxes","width":331.18181824684143},{"text":"and lawrence was calling them candyboxes and they hold candy","width":203.18181824684143},{"text":"and there's one piece of candy in the box and whoever gets it get's to take it and i guess when they're done they put it back. kinda gross","width":547.1818182468414},{"text":"so if you heard him say candyboxes he meant the resource squares and the resource allocation boses","width":503.18181824684143},{"text":"now how many processes do i have","width":140.18181824684143},{"text":"i have process 1 and process 2 so i'm gonna write p1 and p2","width":402.18181824684143},{"text":"and the way i read this is process 1 requests resource a and resource b","width":428.18181824684143},{"text":"so process 1 requests it and there's no arrows coming out of the resource","width":413.18181824684143},{"text":"that means that no one's using it right now and p1 can acquire it so i draw an arrow to p1","width":439.18181824684143},{"text":"because that means that p1 has acquired","width":303.18181824684143},{"text":"a","width":37.18181824684143},{"text":"and b","width":175.18181824684143},{"text":"now,","width":134.18181824684143},{"text":"process 2 comes along so this is time","width":309.18181824684143},{"text":"for each of these, down is time","width":118.18181824684143},{"text":"now p1 says i'm gonna request ","width":156.18181824684143},{"text":"oh i guess there's a 3rd one here","width":313.18181824684143},{"text":"p2 requests process c sorry process 2 requests resource c, which way does the arrow go?","width":606.1818182468414},{"text":"to p2","width":155.18181824684143},{"text":"towards p2","width":87.18181824684143},{"text":"and, what about b?","width":261.18181824684143},{"text":"which way does the arrow go?","width":177.18181824684143},{"text":"towards the resource or towards the process?","width":160.18181824684143},{"text":"towards the resource because a already has it","width":267.18181824684143},{"text":"is there a deadlock here?","width":212.18181824684143},{"text":"no why not?","width":193.18181824684143},{"text":"there's no cycle i don't have my circular wait, okay","width":262.18181824684143}]