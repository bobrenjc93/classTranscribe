[{"text":"[introduction]","width":1687.1818182468414},{"text":"alright good morning and welcome to the signal version of CS241","width":331.18181824684143},{"text":"here's what we're going to do today","width":114.18181824684143},{"text":"we briefly talked about signals way back at the beginning of the course","width":304.18181824684143},{"text":"cast your mind back to when we were creating processes and we said that hey when a process dies the parent gets notified","width":426.18181824684143},{"text":"we get a SIGCHILD right?","width":101.18181824684143},{"text":"and we talked about SIGINT for when you press control C as a way to stop a process","width":293.18181824684143},{"text":"or if you want to stop a process and you don't want it to prevent you","width":373.18181824684143},{"text":"you would call SIGKILL yes?","width":214.18181824684143},{"text":"and SIGKILL you cannot catch it you will terminate that process","width":458.18181824684143},{"text":"there's actually quite a bit more to signals and that's what we're going to talk about today","width":233.18181824684143},{"text":"and we're going to show you how to prevent signals from arriving at your process","width":383.18181824684143},{"text":"we're going to talk about some of the terminology about this","width":161.18181824684143},{"text":"and finally how to do it correctly with threads as well","width":425.18181824684143},{"text":"right so I've got two signals","width":306.18181824684143},{"text":"here they are, oh I need a volunteer thank you for volunteering","width":323.18181824684143},{"text":"you look like your busy, in fact, thank you for volunteering as well","width":218.18181824684143},{"text":"okay right","width":280.18181824684143},{"text":"a signal remember is an interrupt so we can interrupt a process from doing something by throwing a signal at it","width":466.18181824684143},{"text":"okay so here's an I not for illinois but for SIGINT right there we go","width":357.18181824684143},{"text":"okay so come over here you're the kernal","width":176.18181824684143},{"text":"thank you, here's my process","width":154.18181824684143},{"text":"okay and of course if I type control C","width":202.18181824684143},{"text":"we can deliver the signal to the process throw it at them","width":348.18181824684143},{"text":"ok look he caught it, right","width":155.18181824684143},{"text":"it appears that this process has installed a signal handler and has caught the signal","width":566.1818182468414},{"text":"so we delivered it, the process caught it, but the process carries on","width":304.18181824684143},{"text":"right? it didn't stop","width":120.18181824684143},{"text":"there are some signals however called like SIGKILL","width":186.18181824684143},{"text":"that cannot be caught","width":209.18181824684143},{"text":"if we were to send this then of course we know that the process dies","width":219.18181824684143},{"text":"now where can these signals come from?","width":91.18181824684143},{"text":"they can come of course from the process itself","width":230.18181824684143},{"text":"the process itself could say hey I'd like to send myself a signal right?","width":184.18181824684143},{"text":"you'd like to raise that crazy idea yes?","width":144.18181824684143},{"text":"and in fact the system call to do this is called raise","width":198.18181824684143},{"text":"so if you call raise, what you're doing is you're sending a signal to yourself","width":246.18181824684143},{"text":"alright so if you were to kill yourself you call raise SIGKILL","width":176.18181824684143},{"text":"if you want to send yourself SIGINT you say raise SIGINT","width":259.18181824684143},{"text":"now here's the exciting part, is that actually","width":283.18181824684143},{"text":"you can block signals","width":144.18181824684143},{"text":"you can block specific signals","width":287.18181824684143},{"text":"here's your signal mask","width":104.18181824684143},{"text":"if you'd like to hold that in front of you","width":183.18181824684143},{"text":"the amazing thing about this signal mask is that it actually stops ","width":291.18181824684143},{"text":"well we can set it to stop a lot of signals but we'll set it up to say block SIGINT","width":446.18181824684143},{"text":"because guess what if we want to send SIGKILL I don't care what you do with your mask this is getting delivered","width":324.18181824684143},{"text":"SIGKILL you cannot block but you can stop","width":262.18181824684143},{"text":"SIGINT","width":119.18181824684143},{"text":"now if you set up that mask","width":357.18181824684143},{"text":"okay? what do you think is going to happen to the signal","width":583.1818182468414},{"text":"you're going to block it right? so it's going to rebound off that piece of paper","width":313.18181824684143},{"text":"good guess but not correct, here's what happens to the signal","width":189.18181824684143},{"text":"if you're going to hold this and look as if you're going to throw it at the process","width":320.18181824684143},{"text":"no just hold it like your like practically in a sporting magazine or something","width":413.18181824684143},{"text":"here's what happens, the operating system says okay you've set up your mask, here's what I'll do","width":391.18181824684143},{"text":"this signal is pending","width":213.18181824684143},{"text":"I'm ready to deliver it to the process anytime you drop your guard down","width":420.18181824684143},{"text":"so anytime this mask goes down, we're going to send a signal","width":467.18181824684143},{"text":"how are your arms doing? yeah okay","width":178.18181824684143},{"text":"right so I'm interested to see some of the terminology right? we've got a pending signal","width":319.18181824684143},{"text":"so the word pending is the idea between when we created the signal and when we wish to deliver it","width":534.1818182468414},{"text":"so what happens if you think at this moment in time","width":220.18181824684143},{"text":"we start pressing control C control C control C control C or we start raise SIGINT raise SIGINT raise SIGINT we keep trying to raise more signals","width":470.18181824684143},{"text":"do we get a backlog of all of these signals ready to be thrown at the process?","width":352.18181824684143},{"text":"hundreds of balls about to arrive at you any moment you change your SIGMASK and let through SIGINT","width":622.1818182468414},{"text":"actually no, there's not a queue of the","width":277.18181824684143},{"text":"if you have raised SIGINT, if you've generate a signal, there's only one SIGINT to be delivered","width":617.1818182468414},{"text":"whilst we stay in this kind of captured moment in time, think back to par shell and when we talked about preventing zombies yes","width":602.1818182468414},{"text":"and we installed a signal handler to catch sigchild right?","width":391.18181824684143},{"text":"there's actually a race condition, oh you know what a race condition means now","width":183.18181824684143},{"text":"there's a race condition, suppose two children finish at exactly the same time or close to the same time","width":455.18181824684143},{"text":"it could be that we've generated SIGCHILD here","width":242.18181824684143},{"text":"and we're not going to generate another SIGCHILD for all of the other children that finish at the same time","width":331.18181824684143},{"text":"so actually the code that we wrote a while ago is not sufficient because there can't be a queue of the same kind of signal","width":663.1818182468414},{"text":"I can still have other signals for example my SIGKILL","width":220.18181824684143},{"text":"and I can deliver that but there's never a queue of multiple ones","width":213.18181824684143},{"text":"okay why is this? well imagine in an implementation where these signals are really just little bits","width":329.18181824684143},{"text":"we've got a little bit ready to fly just like a hardware interrupt where I've got a particular interrupt coming from the particular device","width":443.18181824684143},{"text":"I've got a particular signal I want to deliver to a particular process","width":430.18181824684143},{"text":"now the other thing we should talk about is what happens if this process calls fork","width":333.18181824684143},{"text":"and this process calls exec","width":173.18181824684143},{"text":"what might happen to my pending signals?","width":173.18181824684143},{"text":"what might happen to my SIGMASK","width":311.18181824684143},{"text":"the other thing we have to think about is what happens if this is no longer just a single threaded process but now uses say pthreads","width":564.1818182468414},{"text":"what should we do there?","width":93.18181824684143},{"text":"so suppose you are a pthread process okay?","width":205.18181824684143},{"text":"so in other words you've been compiled with pthreads","width":209.18181824684143},{"text":"and now you call pthread_create","width":317.18181824684143},{"text":"here's what happens if you call pthread_create","width":143.18181824684143},{"text":"you've now got two threads running yes?","width":120.18181824684143},{"text":"here's the great news, the second thread inherits your mask","width":395.18181824684143},{"text":"alright? so now they're both blocked from SIGINT","width":147.18181824684143}]