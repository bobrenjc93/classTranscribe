[{"text":"Big O tells me it's not any worse than this, Big Omega says it's not any better than this. so if it's not any worse than this, and it's not any better than this, it outta be that.","width":790},{"text":"That's all this is saying.","width":139},{"text":"So I'm going to go this way first, so I'm going to say it's not any better than...","width":488},{"text":"Something... so if I look at just this, well, I can take logs of both sides, so...","width":393},{"text":"That would give me that h is less than or equal to log base 2 of n.","width":612},{"text":"Sorry... yeah. yeah.","width":155},{"text":"h is smaller than or equal two log 2 of n. So here is my, sorry, so this is actually the upper bound, right?","width":499},{"text":"h is always going to be something smaller than or equal to log base 2 of n, so I could stop here and say it's O(logn).","width":443},{"text":"I'm not going to because I'm... I want to show that it's actually both big O and big Omega.","width":492},{"text":"So if I look at this side...","width":387},{"text":"And I say okay, well this is the maximum number of nodes...","width":294},{"text":"Then I know that, well, log base 2 of, okay here, let me just do it to be careful. So...","width":614},{"text":"n + 1 is less than or equal to 2^h + 1, so log of that is h + 1, so minus 1, so again we have a similar case as before, except that it's going the other direction.","width":996},{"text":"So h is bigger than or equal to some logarithmic function of n.","width":405},{"text":"h must be smaller than or equal to logn. h must be bigger than or equal to logn. h is logn.","width":464},{"text":"I've bounded it above, I've bounded it below, it can't be other than logn.","width":225},{"text":"So it's true then that even for the complete tree, that it's theta of logn.","width":663},{"text":"So if the height...","width":367},{"text":"is theta of logn, then we know that our- all of our operations that we were saying were O(h) are O(logn), because we know that the height is definitely logn.","width":724},{"text":"Questions on that real quick?","width":139},{"text":"So this is just kind of, we're using the fact that we knew we had a closed form for the number of nodes in a perfect binary tree, and then sort of using that to figure out, okay, what's the smallest number of nodes, and what's the largest number of nodes, in a complete tree...","width":827},{"text":"and then we can use the, what's the minimum number of nodes to get a height h to prove the upper bound, and we can use the maximum number of nodes to get a tree of height h to get a lower bound.","width":679},{"text":"So it's a little weird that we show the upper bound by looking at the minimum number of nodes, and we showed the lower bound by looking at the maximum number of nodes.","width":565},{"text":"Because the h is on the other side.","width":199},{"text":"We had n and h and h, so it flips what is kind of intuitive about that inequality. ","width":410},{"text":"That fact will be important later.","width":158},{"text":"When we're talking about other binary trees. We want to be able to- again, we'll have other trees, and we'll find that running times look like h, and we'll want to prove that h is some function of n, so we're going to want to show an upper bound on some function by asking what's the minimum number of nodes to get a tree of height h.","width":1097},{"text":"[Student asks question]","width":252},{"text":"Um, ok, so the first one was, so this one...","width":395},{"text":"is saying, look at this part of the inequality. 2^h is smaller than or equal to n.","width":397},{"text":"log base 2 of both sides. h is smaller than or equal to log base 2 of n.","width":347},{"text":"So I know now that...","width":180},{"text":"if h is smaller than or equal to log base 2 of n, that's equivalent to saying h is O(logn).","width":378},{"text":"If h is smaller than or equal to some function of n, I know that I can pick a constant c and k, and everything works out just fine.","width":585},{"text":"So that's the big O part. So this one comes from the left hand side of the inequality, which is saying, the minimum number of nodes to get a tree of height h.","width":755},{"text":"The other one, this one, is coming from this side of the inequality.","width":364},{"text":"Which is arguing that the maximum number of nodes you can possibly have in a complete binary tree of height h is 2^h+1 - 1.","width":525},{"text":"So then I just shift things around, right, so that's just +1 to both sides, so n + 1 is less than or equal to 2^h + 1...","width":425},{"text":"log base 2 both sides, so log base 2 of n  + 1 is less than or equal to h + 1.","width":378},{"text":"So subtract 1 from both sides, so h is bigger than or equal to some logarithmic function of n. Modulo constants.","width":638},{"text":"So now I've shown that h is bounded above by logn, and h is bounded below by some function that's logn.","width":490},{"text":"so h is definitely logn.","width":160},{"text":"Growing like logn.","width":128},{"text":"there's going to be some constant on it or whatever, but we're ignoring those because we can.","width":651},{"text":"So then, what does that say about the running times of this particular choice of implementation of the priority queue ADT?","width":878},{"text":"Note the difference- note how carefully I said that.","width":272},{"text":"The heap is an implementation of the priority queue ADT.","width":353},{"text":"A heap can be a priority queue.","width":237},{"text":"A priority queue does not have to be a heap.","width":288},{"text":"Just like with stacks and queues, the stack and the queue was the ADT.","width":320},{"text":"It just tells you what it can do. A stack could be an array.","width":272},{"text":"A stack could be a list.","width":84},{"text":"A stack could be a doubly-linked list.","width":139},{"text":"Those are all different implementation choices.","width":228},{"text":"For the stack ADT.","width":192},{"text":"Alright?","width":118},{"text":"So when we say that we're implementing the priority queue ADT, we're picking a particular implementation for the data structure.","width":521},{"text":"So if I just tell you, you've got a priority queue, you have no idea which of these choice's I've made, until I tell you, here's a priority queue implemented with a, blank.","width":576},{"text":"Now you know.","width":153},{"text":"So the ADT is not prescribing how it works, it's just prescribing what it does.","width":352},{"text":"And then you can make drastically different implementation choices.","width":320},{"text":"for any particulary ADT.","width":158},{"text":"The next one we'll cover has VERY different implementations.","width":256}]