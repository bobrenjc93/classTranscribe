[{"text":"","width":64},{"text":"I didn't write virtual here. Is that bad?","width":192},{"text":"does that cause.. does that make things blow up?","width":128},{"text":"No.","width":64},{"text":"I don't actually have to say virtual everywhere","width":128},{"text":"I can","width":128},{"text":"but it's implied from the base class, so I don't actually need to. It's OK for me to do a meet of virtual here.","width":512},{"text":"OK. So another question is what actually happens when I am running this kind of stuff","width":320},{"text":"so I have made a swallow","width":128},{"text":"","width":256},{"text":"It's a way of a coconut and I try to call s.fly()","width":384},{"text":"Does this compile?","width":192},{"text":"","width":256},{"text":"there like 3 yes and 1 no...","width":128},{"text":"I don't know where the no came from but the no is the right answer. Why does it not compile?","width":448},{"text":"","width":192},{"text":"so it's not the bases private, but I have tried to create a swallow class. Is swallow an abstract class or not?","width":576},{"text":"yes. It has a virtual double airspeed = 0, so I cannot create any instance of the swallow. So this actually won't compile. Because I've got a pure virtual function and I try to make an instance of an abstract class. It just won't let meSo for the sake of argument, let's pretend that I did provide an airspeed() default implementation in swallow. Okay so not the code does compile.If I call s.fly(), I've got a swallow. And I call s.fly().What method is invoked?","width":2485},{"text":"so it actually won't compile ","width":128},{"text":"Okay? Because I have got a pure virtual function and I try to make an instance of an abstract class. It just won't let me","width":448},{"text":"so OK","width":128},{"text":"for the sake of argument, let's pretend that I did provide an airspeed default implementation in swallow","width":448},{"text":"so the code now does compile","width":256},{"text":"if I call s.fly(), I've got a swallow","width":256},{"text":"and I call s.fly()","width":192},{"text":"what method is invoked?","width":192},{"text":"swallow's fly(). This one","width":320},{"text":"alright? The type is swallow, so I invoke swallow's fly().","width":512},{"text":"is this an instance of static or dynamic dispatch?","width":320},{"text":"static","width":128},{"text":"this is static dispatch. In order to get dynamic dispatch I have to go through either a reference or a pointer","width":512},{"text":"it's just the way it works. So since I'm going directly through a value here,it's static dispatch.","width":384},{"text":"and I'm gonna invoke, as you would expect the method is in the object that I create, so I just call the normal swallow fly()","width":704},{"text":"Okay. So bird b = s","width":384},{"text":"so what in the world is happening there?","width":320},{"text":"So I've got.. so on the right hand side I've got a swallow which is got extra stuff that birds don't have. It's got Boolean indicating whether it's carrying a coconut or not","width":576},{"text":"and then I'm assigning this swallow into a bird","width":320},{"text":"questions 1: does that compile? ","width":192},{"text":"yes","width":128},{"text":"it does compile ","width":128},{"text":"this's gonna invoke the copy constructor for the bird","width":512},{"text":"argument to my constructor here is making long ago. So this is a constructor not an assignment ","width":448},{"text":"so I'm invoking the constructor for bird here","width":256},{"text":"but my right hand side is a swallow","width":128},{"text":"but it is a bird, so it's fine to pass in a swallow as a const bird ","width":320},{"text":"so this invokes the copy constructor for the bird class","width":320},{"text":"","width":128},{"text":"I have not lost everything about the swallow in that bird","width":320},{"text":"the bird class only is so big, it doesn't have room for the Boolean that indicates whether it's carrying a coconut or not.","width":448},{"text":"it doesn't have all the those extra functions and stuff","width":128},{"text":"so this is gonna slice out everything that doesn't fit","width":256},{"text":"a bird, you know, is only that big, and than a swallow has some extra stuff to it","width":320},{"text":"but if I've got one of those, and I'm assigning into the one of these","width":320},{"text":"necessarily,  all these stuff is gonna get dropped to the floor ","width":192},{"text":"it's not like since I'm assigning into a bird from a swallow that suddenly that bird is not a swallow. It doesn't work that way","width":384},{"text":"I have declared a bird on the stack. I only got room for birds' stuff","width":256},{"text":"so I only more over the stuff that's common to bird and all those swallow's stuff is dropped because it can't","width":448},{"text":"","width":128},{"text":"maybe it doesn't do what you would expect, but it does compile","width":320},{"text":"it's just dropping all the things that made that swallow be a swallow. Now it's just a bird","width":320},{"text":"","width":640},{"text":"so this isn't the equal operator. This is a constructor call","width":320},{"text":"and the reason I know it's a constructor because I'm declaring the variable and initialize it all in one step","width":320},{"text":"so this is that tricky thing that was in one of the pre-lecture where this statement is exactly the same thing as","width":768},{"text":"just like int x = 5 is the exact same thing as int x{5}","width":576},{"text":"actually the same thing","width":64},{"text":"it's only an assignment when the left hand side already existed ","width":320},{"text":"If the left hand side is not already there, it's a constructor, not an assignment","width":320},{"text":"so after I first made the bird and then assign it for this to be an assignment operator","width":256},{"text":"","width":448},{"text":"bird b. b = s. question: is there an error?","width":256},{"text":"No","width":192},{"text":"so this will invoke the assignment operator now cause the bird b does exist","width":384},{"text":"oh actually yes it will. Yes this is a compiler error","width":192},{"text":"I can't make a default bird ","width":128},{"text":"that's not the question you are asking, but","width":192},{"text":"so I have to say like b of like... I don't know, 12.5","width":320},{"text":"","width":256},{"text":"OK. So this now will compile","width":64},{"text":"now there's not a problem","width":128},{"text":"what's gonna happen here is I'm invoking the assignment operator for bird","width":256},{"text":"which depending on your implementation either takes a const for reference ","width":320},{"text":"or just a bird","width":128},{"text":"you can use a copy and swap","width":128},{"text":"in either case","width":128},{"text":"I'm going to have to construct ","width":192},{"text":"a bird","width":64},{"text":"from a swallow. So I'm going to slice it down first, and then do my swap or in the copy constructor","width":448},{"text":"In the version it takes, a const for reference. I'm gonna clear myself and then copy over the bird","width":384},{"text":"but I've only got a bird reference now, not a swallow reference so I can only copy the stuff ","width":320},{"text":"and furthermore, I'm inside the assignment operator for bird","width":256},{"text":"which doesn't know anything about swallows","width":192},{"text":"","width":64},{"text":"swallow is a bird, but it doesn't mean birds know about swallow","width":256},{"text":"swallows know about birds, birds don't know about swallows","width":192},{"text":"so there's nothing I can do here to make this work","width":512},{"text":"always going to slice it down to be inside of bird, only have the bird stuff","width":448},{"text":"","width":128}]