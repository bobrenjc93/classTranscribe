[{"text":"What is an iterator, how is it defined, we will write one today, so hopefully that will help.","width":448},{"text":"How could we determine that null is a private implementation detail of a list class for given the expression list column, column, nodes, star.","width":512},{"text":"OK. So this requires a little bit more context than just that declaration cause that declaration alone doesn’t… it just said there is a nasty node inside of the list of new declared appointer to it. ","width":960},{"text":"The reason we know it’s a private implementation detail is that list could be implemented in all kinds of different ways.","width":384},{"text":"It could be a singly linked list, it could be a doubly linked list, it could be an array, it could be implemented by wrapping a vector. All sorts of things. All reasonable possibilities for implementing our list.","width":832},{"text":"So we know that the node class is implementation detail because the list itself doesn’t specify how it is implemented. ","width":512},{"text":"Right so if you referring to a node in a list, the node might not even exist. In array case, there is no node.","width":384},{"text":"If you have a list that is implemented as an array, you just have an array of the elements. Right? There is no nodes. ","width":320},{"text":"So… Oh I didn’t even project to it. How do I written down?","width":256},{"text":"So in the array base implementation, there is no node class.","width":576},{"text":"So that’s how we know it’s implementation to those, something appears in the private section for our list class because clients don’t need to know how we implement our list. They just be able to call the list ADT functions. ","width":896},{"text":"They need to be able to add things from list, remove things from list, asking for attempting what’s inside that sort of staff. Right? ","width":320},{"text":"But that doesn’t require them to know how to implement.","width":128},{"text":"Is the exam written on our computer base. Yes it is written. No electronic devices allowed, you will not have compiler, you will have your brain and a pencil.","width":768},{"text":"We’ve review a bit of list, when topics are relevant cause there is no pre-lecture Can you post the pre-lecture associated with last class.  There is no pre-lecture for last class so it’s physically impossible for me to post it.","width":1088},{"text":"There is none. Not ever lecture will have a pre-lecture","width":256},{"text":"The first sort of half…the first several weeks of the class are very pre-lecture heavy because for a lot of technical content that would just bore you to death if I talk to you about it.","width":576},{"text":"So those are perfect things for pre-lectures","width":128},{"text":"The goal to… So the…Here is the way I think about pre-lectures, isn’t the way you should think about the pre-lectures. ","width":384},{"text":"The goal of the pre-lecture video is not to convey the content of the lecture, the lecture is to convey you the content of the lecture. ","width":448},{"text":"The goal of the pre-lecture is to give you enough backgrounds you can come in to lecture and know what heck I’m talking about.","width":320},{"text":"OK? But it’s not…if you’re reviewing. So this is relevant for you for reviewing the exam. Watching all the pre-lectures will not cover all the material.  There are something that are only covered in lecture.","width":704},{"text":"They are not in the videos. They are not in the pre-lecture video. They are not even asking questions about pre-lectures.","width":320},{"text":"The goal of the pre-lecture is good, you probably should do that. But it’s not gonna give you all the information. There is something that have been only covered in this room.","width":448},{"text":"OK? So you should think of the pre-lecture being the supplementary materials so you can come here and know what the heck is going on. Not that pre-lecture is teaching you everything. This is review session every day. ","width":768},{"text":"OK? So that is the philosophy I’m using for the pre-lecture. So anything that I think is really boring, I can put it into a video and so that you can go back and review that.","width":896},{"text":"So anything that I feel is background information.  In order to even talk about this I have to sit here and talk to you for twenty minutes for whatever. Before you can even start doing any review work","width":768},{"text":"That’s sort of staff what I do in prelectures. OK? So it’s not necessarily the case there will be pre-lecture for each single lecture.","width":448},{"text":"There will be one for most. But not all.  So I can’t post one for last for yesterday because there wasn’t one or there won’t ever be one.","width":512},{"text":"Is there a difference between operator [] and dots. Operator [] is the unchecked operator, so you can just... you would not...","width":768},{"text":"throw exception, if you access out of bound, it will just happily do undefined behavior. ","width":256},{"text":"dot at is a checked access operator, so it's going to make sure that your index is balanced, and if not it would throw exceptions. That's the difference between the two. ","width":576},{"text":"And this is kind of implementation details for vector. It's not a general thing, it's just sort of common that operator [] doesn't do any checking, ","width":576},{"text":"whereas .at() is always gonna to check is this thing valid to the index in this structure. And if not they will throw exception.","width":384},{"text":"Define a collection classes, so collection is some class or data structure, that can hold objects, it's a container, it holds things. ","width":960},{"text":"iterators will be talked today.","width":128},{"text":"What's a raw pointer, anything just, the pointers we've been talking about before we did mp_memory,those are all raw pointers. ","width":640},{"text":"scoped pointer is not a raw pointer, scoped pointer is a class. Unique pointer is not a raw pointer, unique pointer is a class. ","width":448},{"text":"So, pointers are pointers, and I call those pointers raw pointers, to distinguish between the class that act like pointers, like the unique pointers, scoped pointers.","width":576},{"text":"and actual pointer type, just with the star. int* is a raw pointer, unique_pointer<int> is a owning pointer to an int.","width":576},{"text":"Mostly questions are about iterators, we'll talk about it today.  ","width":640},{"text":"Okay, anything before we start. ","width":256},{"text":"Operator basket is undefined behavior, so it could say false, it could crash, it will do something that we don't know. ","width":1344},{"text":"if you use .at() it will check if the  access is correct, and then if it is not, it will throw exception. ","width":384},{"text":"OK, let's get started. ","width":576},{"text":"Here i've got, I've given you the implementation of a print function on a list, the same list class we were dealing with last time. ","width":704},{"text":"Right?","width":256},{"text":"It's written slightly different than the solution that I give you in the lecture, but that's fine it does exactly the same thing. ","width":192},{"text":"So this is going to iterate in a for loop, getting a raw pointer to the head to initialized the for loop,  it's termination condition is when not curr.","width":640},{"text":"So, continue while curr, so curr is pointing at not null. ","width":320},{"text":"And the incrementation step, the increment step is just current is current->next.get()","width":384},{"text":"So this does the exactly the same thing as the while loop we wrote before. so that's just there, so you can see how to do it with a for loop. ","width":320},{"text":"What i want you to do now, is write a print function using recursion. So, I've given you  ... sort of this,","width":896},{"text":"print function that takes no arguments, that is going to invoke your recursive print function as a helper. ","width":384},{"text":"By invoking it on the head. Now I want you to write a recursive print function below. ","width":320},{"text":"and we are going to talk about it for a little bit. ","width":128}]