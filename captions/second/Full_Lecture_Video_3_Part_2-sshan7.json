[{"text":"so, now it's time to talk about signals","width":240},{"text":"unless anybodys got any last minute burning questions","width":263},{"text":"ok, right, signals are called. there's a lot to signals we're just going to do an introductory part today","width":446},{"text":"but signals are the software equivalent of hardware interrupts","width":379},{"text":"so, think about hardware for a moment ","width":208},{"text":"i can have things like a clock timer that goes off every say hundred milliseconds ","width":414},{"text":"and interrupts what the CPU is currently doing","width":173},{"text":"and when the CPU sees that it says 'oh I'd better stop doing what I'm currently executing' and run some additional code thats gonna cope with the fact that my little clock timer has gone off","width":692},{"text":"or I've got some bytes from the disk which are ready to read and I want to stop what I'm doing and execute some different code","width":434},{"text":"or some information on the USB bus has arrived like someone plugged in a USB keyboard or typed something and I need to handle those bytes","width":564},{"text":"right, so interrupts allow us to stop doing what we're currently doing and process some different code","width":384},{"text":"we could do the same thing with hardware and that's signals","width":183},{"text":"and, we can send signals to our children and we can get a signal back evern when one of our children dies, which is useful","width":663},{"text":"and we can have a lot of fun with them because they can do differnt things","width":488},{"text":"so, first of all, that's a list of all the processes","width":436},{"text":"let me send a signal to one of these processes","width":299},{"text":"so, uhh, ok, do I have a pid variable here? no I don't. okay so, let me just send -9","width":559},{"text":"to say process 43. what've I just done?","width":548},{"text":"yeah, I've killed myself","width":145},{"text":"ok, the kill command says 'send a singal' and -9 is the ultimate of signals - hint hint - terminate this thing with [something] it can't stop this signal","width":992},{"text":"if you send this signal to a process that process is gone","width":422},{"text":"there's no way to protect against this signal","width":296},{"text":"this is the big weight falling on top of a signal. this is how you can kill processes","width":232},{"text":"so if you know - if you are a superuser and you know a processes id, you can get rid of it","width":645},{"text":"OK, so fortunately I have another processes here. let's see if this one works","width":493},{"text":"unfortunately I can't actually write any code so it's time to reboot my machine","width":896},{"text":"okay, so! we can do something similar in our programs as well","width":391},{"text":"let's pull up some example code here","width":2347},{"text":"alright, we won't do that straight away, ok, so here's some typical fork exec() code","width":375},{"text":"the child decides to run /bin/ls and the parent will do something else","width":758},{"text":"so, let's first of all just start off with this. there's nothing new in this code, I just want to prove to you that the child runs exec() here and should print something out","width":773},{"text":"here we go, so yeah we'll move on it. the child runs","width":205},{"text":"okay now, what we'll do this time is I'm going to make the child sleep for one second because now I'm going to call kill() from my program here. I think you can guess what's going to happen here","width":701},{"text":"alright so, we'll check kill() on section 2 and you'll see that we can send a signal to a process","width":734},{"text":"alright so, we have the id that we wanted to call, there it is, it's called child, and what should we send it? well let's send it signal 9","width":1114},{"text":"oh, we had a sleep there. so this time you'll see the poor child never got to run /bin/ls, we klled it and it didnt' stand a chance","width":637},{"text":"we could also send a signal called SIGINT, in fact, rather than send it to the child, why don't we send it to ourselves","width":893},{"text":"let's do it straight away","width":249},{"text":"I wonder what SIGINT stands for","width":478},{"text":"ok, so the SIG is a standard thing you'll see prepended toward the singal of different names","width":446},{"text":"INT stands for interrupt","width":188},{"text":"remember how you can press ctrl+c and the program stopped? this is how it works","width":441},{"text":"the shell says 'oh look, look, someones trying to press ctrl+c, I will send SIGINT to the running process'","width":488},{"text":"and that's how we break our processes","width":594},{"text":"well, this is where the fun begins. I don't have to see my processes die when you press ctrl+c","width":572},{"text":"we can do other things for the SIGINT and for that we're going to look at SIGACTION","width":649},{"text":"SIGACTION allows us to register a callback function that's going to be run when the signal is given to this process","width":690},{"text":"ok, so, here's how sigaction() works. I didn't want to use sigaction(), I was going to use the simpler version","width":1042},{"text":"yeah, let's use signal() ","width":994},{"text":"we'll talk about sigaction() later on in the course","width":297},{"text":"ok, this is what I wanted to show you. so our typedef here. is that large enough for people? can I make it larger?","width":685},{"text":"can you read that at the back?","width":256}]