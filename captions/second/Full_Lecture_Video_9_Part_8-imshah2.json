[{"text":"Okay, and how is that implemented in C++? Yeah, virtual functions. ","width":1152},{"text":"Virtual function calls for which I am using dynamic dispatch. So what is polymorphism? If we dissect the word, poly \"many\", morph \"form\", ism \"having\", having many forms. Having many different appearances, having many different behaviors. ","width":1472},{"text":"So polymorphism is about being able to have a base class pointer to derive classes and then have those derived classes behave differently right?","width":704},{"text":"The way a truck draws itself is different from the way a circle draws itself, different from the way a triangle draws itself, but they all know how to draw, right?","width":768},{"text":"So this is polymorphism, each one of those objects is going to do something different, and I don't know necessarily what it's gonna do just because I have a drawable pointer. I just know it's gonna draw on something but I don't know what it's gonna do. Right?","width":448},{"text":"It's polymorphic it has many forms, it behaves differently, depending on the run time type at the end of the pointer.","width":512},{"text":"These are kind of the three that most people agree on, some poeple add different things or some people say well polymorphism is like religious inheritance.","width":576},{"text":"These are the pretty much the three that if somebody pegs you in an interview, and they say, what are the tenants of object oriented programming? If you say these three you're probably gonna pass the interview.","width":448},{"text":"Very good question, so his question was can templates be counted as polymorphism?","width":704},{"text":"The answer is yes. They're not quite the same as polymorphism from the object oriented perspective, but they are polymorphism, right?","width":640},{"text":"If i have a template, it takes a T and I call functions on that T that function is gonna do different things depending on what T is. ","width":640},{"text":"Think of that depending on what T is. Think of that triple, the constructor for that triple is gonna be massively different if the first argument is a clause versus if the first argument is an integer.","width":448},{"text":"So in some senses, templates is polymorphism, you'll hear this called static polymorphism, or compiled time polymorphism, or parametric polymorphism.","width":576},{"text":"Those are some of the vocab words you might hear about this, but yes templates can be considered polymorphism, but it's a different kind of polymorphism, it's not really polymorphism, its not virtual function calls, it has nothing to do with inheritance or class hierarchies or anything like that. ","width":1088},{"text":"It happens at a different time, it happens whhen the codes compiled rather than when the codes running, but yes templates can be considered a type of polymorphism for sure.","width":512},{"text":"And in fact a good interview question for working at a C++ company might be explain the difference between traditional polymorphism and compiled time polymorphism or static polymorphism. ","width":832},{"text":"And the answer is okay one of these uses class hierarchies in virtual functions, the other one uses templates. And the behavior differs depending on what the template argument is. One happens at compile time, one happens at run time.","width":832},{"text":"That is the cutoff for the exam.","width":640},{"text":"We're on to exam 2 stuff now.","width":384},{"text":"So what is the following structure? ie what does it look like in memory? how do we manage memory associated with it? and what can we do with it?","width":448},{"text":"so lets start with the first thing","width":192},{"text":"what does this structure look like?","width":192},{"text":"what does that mean, struct?","width":384},{"text":"have we seen that before? maybe from C? ","width":256},{"text":"struct in C++ means the exact same thing as class, except for now the default access is going to be public","width":448},{"text":"If I just say, class node and had stuff and didn't say public or private, that's fine and allowed. By default whatever I say is private. ","width":512},{"text":"if i say struct node and hear the things, then by default all those things are public","width":512},{"text":"This is just an object that has all public member variables that just contains a couple things for me.","width":512},{"text":"This is probably going to be used as an implementation detail of some data structure.","width":256},{"text":"So what does this look like? well a node has kinda got, two different things in it. Its got, next which is the scoped pointer to a node and its got data which is an int.","width":1088},{"text":"so it maybe looks something like this, you know 1 for the data, and the next is a scoped pointer which is why im putting it in a separate box because it's an object not just a raw pointer type, it's an object.","width":768},{"text":"which happens to have a pointer in it, which is maybe set to null.","width":384},{"text":"now that next that name next, is proabably hinting something to you. ","width":704},{"text":"it's a pointer to another node, this is recursive","width":320},{"text":"so i've got another node, so maybe i've got another node that's over here that's got two and its on the next pointer that's null","width":384},{"text":"and then maybe i connect these two, so now one points at two","width":192},{"text":"and maybe i add another thing, i can add now a next pointer to this that points at 3 ","width":576},{"text":"and i can add a node infront","width":320},{"text":"node 0 which has got a next pointer which is set to this thing","width":320},{"text":"and probably to make sure that this isnt all going away instantly ive got some scope pointer to the start of this thing. To hold on to this chain","width":768},{"text":"Think about the semantics of this. So we've got a scope pointer to the next thing, remember scope pointers are always telling you that they own uniquely a particular resource. That means that this list that i've got here, this chain that i've got here, i said the data structure.","width":1472},{"text":"This chain of linked memory that i've got here, has ownsership semantic such that the node in front of the other node owns the thing that follows. ","width":576},{"text":"So that is to say that this node here 1 owns 2 ","width":320},{"text":"and 2 owns 3","width":256},{"text":"When i get rid of 1, I get rid of everything it owns, which means I get rid of 2, which means I get rid of everything it owns, which means I get rid of 3, which means I get rid of anything it owns. ","width":704},{"text":"which is nothing, so I'm done","width":256},{"text":"So the semantics I've got here are that the nodes are owning the things that are later down in the chain, farther down the chain, later on in the chain","width":768},{"text":"yes, this is a linked list","width":128},{"text":"This is gonna be our next data structure","width":256}]