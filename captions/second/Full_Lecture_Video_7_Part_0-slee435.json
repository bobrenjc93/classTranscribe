[{"text":"Â ","width":2432},{"text":"Okay. Let's go ahead and get started.","width":293},{"text":"So as far as announcements, you should all be aware that lab allocate is due tomorrow at 11 pm as usual, right?","width":683},{"text":"The labs are gonna be 2 days after they're released, right?","width":571},{"text":"So hopefully you finished that in the lab, cause the labs are designed to be done in the lab.","width":427},{"text":"But if you're not done, you do have until 11 pm tomorrow to finish it.","width":219},{"text":"MP memory.1 is going to be due tomorrow at 11 pm.","width":410},{"text":"The point 1 is pretty easy.","width":213},{"text":"I mentioned that this is like one of the harder mps. The point 1 is not the hard part.","width":267},{"text":"The hard part is the array and the collage.","width":269},{"text":"That's where you start getting into hard stuff, but the scoped pointer should be very easy.","width":243},{"text":"So if you are writing bunch of one line functions and like \"this can't be right,\" it probably is right.","width":441},{"text":"So don't overthink that. The scoped pointer is super simple, but it's a nice little wrapper class that we can use to make sure that we're not gonna forget any delete().","width":680},{"text":"Right? The point of that scoped pointer class is to say that, okay,","width":159},{"text":"I create it, and when I create it I give it a new thing in the heap, and that when that goes out of scope it's gonna delete that pointer in heap.","width":485},{"text":"So I can't forget. Right? Since I've now tied that pointer to an object whose life time is limited, I'm never gonna forget to write a delete().","width":448},{"text":"The delete() occurs in destructor. So this is sort of a very very simple wrapper class that will help us later,","width":513},{"text":"but I want you to at least write it. But it's super simple, so you should really try do that before tomorrow at 11","width":411},{"text":"so you can get at least that half of the extra credit for this mp.","width":266},{"text":"cause the array is a little more involved. Not hard, but more involved.","width":304},{"text":"The collage is what I think is hard, but could be wrong.","width":227},{"text":"Okay. Exam 1 is imminent. It's next week at 7 pm. Rooms to be anounced.","width":641},{"text":"Probably here, and then maybe a room in Siebel.","width":277},{"text":"I think... big enough that I'll be slightly uncomf...","width":549},{"text":"... like that we're cozy in lecture. Don't like that we're cozy during exams.","width":205},{"text":"So probably we'll be in 2 different rooms, and I'll announce sort of what the splits are for that.","width":320},{"text":"Later we'll probably use the exact same application that you debugged in the lab to figure out where people are going,","width":362},{"text":"except for it's sort of a simpler problem for us cause it's only two rooms.","width":280},{"text":"But still. I'll post practice questions for the exam soon, as in like probably ...","width":944},{"text":"these will be based on past exams, so you can think of them as practice exams,","width":302},{"text":"except for there's not gonna be like \"here's is a full exam that you can go from beginning to end and kind of get a feel for both what the question content would be as well as the length\"","width":520},{"text":"because I have more exams than other semesters have, so it's hard for me to just say","width":321},{"text":"\"here's an exam that is exactly like what mine would be\"","width":192},{"text":"because one doesn't exist.","width":128},{"text":"So it'd rather be \"here's a whole bunch of exams. Look at only these problems and the other ones, we haven't covered yet\"","width":320},{"text":"because they have fewer exams. So I have to pull questions out of their exams and stuffs.","width":301},{"text":"So don't just click all the exams and be like \"OMG we haven't learned about that yet! I'm gonna fail!\"","width":285},{"text":"NO","width":64},{"text":"Okay? If you look at a question that I said, you should know about this question.","width":270},{"text":"And you feel like that, then panic. But only when that is true, okay?","width":280},{"text":"There's gonna be questions on those practice exams that we haven't even got into yet, and that's fine. okay?","width":311},{"text":"So just look at the ones that I suggest.","width":192},{"text":"The content for that exam will be mostly the C++ stuff, so not so much into data structures just yet.","width":606},{"text":"cause we haven't really taught you any of data structures just yet.","width":384},{"text":"But we're pretty well through at this point. Most of the language syntax stuff that we're gonna be using.","width":640},{"text":"We've got one more topic tomorrow which is inheritance and virtual functions and abstract classes and stuff,","width":365},{"text":"but beyond that for the majority of the things, we're pretty much through the C++ section, okay?","width":448},{"text":"So you should have sort of a pretty good feel for what's gonna be on that exam. Right?","width":287},{"text":"It's gonna be pointers. It's gonna be memory. It's gonna be functions. It's gonna be recursion. It's gonna be, you know, iteration.","width":384},{"text":"It's going to be template. It's going to be, after tomorrow it's going to be virtual functions and inheritance and this sort of stuff. Okay?","width":586},{"text":"So you should be fairly obvious of what I'm gonna test at this point.","width":441},{"text":"???","width":165},{"text":"Okay? Yeap. I'll let you know. Certainly through today, and tomorrow.","width":832},{"text":"It depends on if there's anything that I need to spill over into next week, really.","width":247},{"text":"I'll let you know.","width":74},{"text":"Like I'll say in lecture \"and here's the cut off point for what you need to study for this first exam.\"","width":501},{"text":"Probably it's just gonna be through Thursday. But that depends on how far I get on Thursday.","width":305},{"text":"Maybe Thursday and like ...","width":361},{"text":"Right. So prelecture responses. Lots of pretty good responses today.","width":389},{"text":"So \"can operators can be overloaded to allow a template to work with a wider range of types?\"","width":384},{"text":"Yes. Absolutely. So I could... It's not... Template functions are sort of the same as any other functions except for this weirdness of where you have to define them.","width":761},{"text":"But anything that is a valid function I can also template.","width":306},{"text":"So I can have a constructor that has a template argument.","width":157},{"text":"I can have an operator parenthesis that has a template argument.","width":176},{"text":"I can have any kind of these operators that have template arguments.","width":277},{"text":"In fact when you're writing the scoped pointer, pretty much the class itself is a template.","width":306},{"text":"So every single function on the class is a template.","width":158},{"text":"Right? You're filling in T at instantiation time. So yes. Absolutely.","width":384},{"text":"Any of the operators that we've talked about can be overloaded with templates to work with larger amount of types.","width":493},{"text":"The only thing that you need have be the case is that whatever your template argument is, if you're calling functions on another calling,","width":378},{"text":"you know, using it as a parameter of functions, you need to know that those things exist for that type T, or you'll get a compiler error. Right?","width":364},{"text":"But as long as that it's true, as long as you know, \"okay I know that T have a reverse function and I'm calling reverse on the T\"","width":448},{"text":"that's fine as long as you always give a T that have a reverse function.","width":256},{"text":"So it becomes less about the concrete type but more about what that type happens to implement.","width":270},{"text":"Right? If I give it an int and I call .reverse() on an int, not gonna work.","width":384},{"text":"Yes. Absolutely. You can overload pretty much any of the operators with also a template to make that a little...","width":768},{"text":"Okay. So somebody had a question of why when I was doing the max at some point I put in an actuall explicit in brackets the name of the type of the max function.","width":740},{"text":"And the reason for that is that I needed disambiguate what the types were","width":370},{"text":"cause I gave... max was the function that took two references to the two T. Right?","width":384},{"text":"They'll put those two references were both T's. They're both the same type.","width":192},{"text":"And I gave it two different types. So it didn't know whether to treat, like if I had a double and an int,","width":307},{"text":"it didn't know whether to say T was double or T was int.","width":171},{"text":"So I told it explicitly. Pretend that T is int. Or pretend that T is double.","width":223},{"text":"So then it's saying \"okay. Call max of double double and so that's an int, but I know how to up convert integers to doubles.","width":403},{"text":"So I'm gonna do that first and then invoke your template function.\"","width":142},{"text":"But it was purely for helping the compiler figure out which one to call.","width":275},{"text":"Cause it couldn't infer. Right? To infer, it was looking for something that was like max of something of type T, something of type T,","width":576},{"text":"and you did max of something of type T, something other than type T.","width":206},{"text":"And so then it didn't know what to do. So that's why I needed the dot there.","width":167},{"text":"We'll head on that on a little bit in the lecture as well.","width":192}]