[{"text":"","width":320},{"text":"","width":256},{"text":"You can get things from those types","width":128},{"text":"So what do I pass in here?","width":64},{"text":"Yeah","width":320},{"text":"So there is this interesting question here","width":128},{"text":"How do I want to pass in those arguments?","width":64},{"text":"Remember, and this is an important thing when you are thinking about template classes","width":256},{"text":"If it was like int, double and float","width":192},{"text":"It doesn't really matter how I pass them in because passing in int double and float is really fast","width":256},{"text":"If A is like a universe and B is like a book and C is an entire video game implementation","width":960},{"text":"Right","width":128},{"text":"I probably don't want to, I want to be careful about how I am passing these things","width":448},{"text":"I might be tempted to say ok","width":128},{"text":"I am going to have a constructor that takes the 3 things by const reference","width":192},{"text":"And I am going to have a function that takes the 3 things by r value reference","width":192},{"text":"And I am going to have a function that takes one of them by r value reference","width":192},{"text":"The other two by const reference","width":128},{"text":"And I am going to have one that takes two of them by r value reference and 1 of them by const reference","width":192},{"text":"And I am going to hate myself","width":64},{"text":"I have written an enormous number of these overloads","width":576},{"text":"But this is C++ 11","width":128},{"text":"So we can go ahead and make the assumption","width":256},{"text":"It may not be true, but we are going to go ahead and make the assumption","width":192},{"text":"That A B and C are well defined C++ 11 enabled types","width":320},{"text":"And so they have valid move construction","width":192},{"text":"Ok","width":128},{"text":"So what I am going to do here is actually take them by value","width":512},{"text":"So if I have to make a copy of them, which I have to do anyways","width":64},{"text":"Because I am storing them inside, I am not storing references","width":192},{"text":"I am storing them inside of the triple","width":128},{"text":"I can't avoid copying them if they are l values","width":192},{"text":"But then if they are temporaries ","width":128},{"text":"They are r values, I can move them","width":128},{"text":"Into the thing by value. Just like our assignment operator","width":128},{"text":"Could take the argument by value","width":256},{"text":"And we didn't have to write a separate assignment by const ref","width":256},{"text":"And write a separate assignment for ref ref","width":64},{"text":"For r value ref","width":128},{"text":"Right","width":64},{"text":"We could just write it once","width":128},{"text":"Same thing here","width":64},{"text":"I am just going to have this constructor take an A first, B second, C last","width":896},{"text":"","width":128},{"text":"This is going to make on the stack frame for the triple an instance of A, an instance of B and and instance of C","width":576},{"text":"Which are temporary, they only exist for that function","width":192},{"text":"But then I am going to move them out into my variables","width":128},{"text":"I will show you how we do that in a second","width":448},{"text":"Let's finish up the header file then","width":128},{"text":"I need to have a function that lets me have each of the values here","width":384},{"text":"So let's write the first one first","width":128},{"text":"So what is that one going to return?","width":64},{"text":"an A reference or maybe a const A reference","width":512},{"text":"Let's say triples are immutable once they have been created","width":192},{"text":"So lets just always return a const reference","width":320},{"text":"So const","width":64},{"text":"A ref first","width":256},{"text":"B second","width":448},{"text":"The first one is going to return a const A ref, the second one is going to return a const B ref, and the third one is going to return a const C ref","width":1280},{"text":"They are all going to declared const member functions, right?","width":320},{"text":"So the decision I made here is that once I defined the triple I can't ever change it","width":256},{"text":"I need functions that let me set, set middle set","width":512},{"text":"Set","width":64},{"text":"We know how to write a template class","width":256},{"text":"Yeah?","width":64},{"text":"Oh yeah maybe","width":448},{"text":"It doesn't really matter","width":64},{"text":"For consistency yes","width":128},{"text":"But it wouldn't actually change anything","width":576},{"text":"Ok?","width":192},{"text":"I am missing one thing in this header. What am I forgetting?","width":128},{"text":"Include what?","width":448},{"text":"I do have to include the implementation file here","width":320},{"text":"Because this is a template class","width":192},{"text":"That is the only time when yo do","width":128},{"text":"OK? And the reason for that is","width":128},{"text":"because the compiler needs the definition of all the template","width":192},{"text":"classes and template functions at compile time when it is instantiating them","width":320},{"text":"So it actually has to have the full definitions available","width":128},{"text":"Not just the declarations. Alright?","width":128},{"text":"This is different than in the case where we are linking","width":192},{"text":"We just promise we are going to give you the object file later","width":192},{"text":"Just believe me for now that it exists","width":128},{"text":"Right? We can't do that with templates because we have","width":128},{"text":"to build new classes all the time","width":320},{"text":"We might not necessarily know until we are parsing the code that you have given me","width":256},{"text":"How my template is going to be instantiated","width":128},{"text":"It is not like I go ahead and instantiate for all the templates all the time","width":192},{"text":"And then not worry about it anymore","width":64},{"text":"That's not possible","width":64},{"text":"So I have to have all the definitions available for the compiler","width":256},{"text":"So that it can actually go in and stamp out this class whenever I","width":192},{"text":"Make it with a different set of three types","width":128},{"text":"I have to say something like pound incldue","width":192},{"text":"","width":832},{"text":"By convention you might see it called hpp","width":64},{"text":"Or just another h","width":192},{"text":"I like to give it a different name to distinguish ","width":256},{"text":"The fact that it is not a cpp file","width":192},{"text":"It is different","width":128},{"text":"Cpp files are object that can compile","width":128},{"text":"The tcc files are things that I give to the compiler","width":128},{"text":"In the header as part of the definition for a template","width":192},{"text":"Ok I just like to make that","width":192},{"text":"It is not like you are required to call it that","width":192},{"text":"You are for the class because I want you to","width":128},{"text":"That's just because I am requiring it, there is no particular reason for that","width":192},{"text":"","width":320},{"text":"","width":384},{"text":"People might call it tpp instead","width":384},{"text":"","width":384},{"text":"There is like 3 or 4 different conventions ","width":64},{"text":"Pick one arbitrarily ","width":64},{"text":"","width":256},{"text":"I just like to have a different extension just to make it clear that this is not the same thing as a cpp","width":256},{"text":"Ok right","width":192},{"text":"So lets write that constructor because I think there were some questions about how to","width":320},{"text":"Let's write the implementation for the constructor of the triple class as it would appear int he triple.tcc file","width":448},{"text":"What is the very first thing I am going to write? ","width":128},{"text":"Template, right?","width":320},{"text":"The constructor is a member function of a template class","width":448},{"text":"So that means that the function","width":64},{"text":"Is itself a template, right?","width":128},{"text":"It is part of a template class","width":64},{"text":"When it is defined in a class, it has to also","width":192},{"text":"Define all the member functions","width":128},{"text":"And the member functions are templates as well","width":64},{"text":"So this going to be template","width":256},{"text":"Class A, Class B, Class C","width":768},{"text":"OK?","width":128},{"text":"How do I scope this?","width":192},{"text":"The constructor doesn't return anything so I don't worry about the return type but how do I scope this?","width":64},{"text":"To the right class?","width":128},{"text":"","width":320},{"text":"","width":192},{"text":"","width":64},{"text":"What's wrong with that?","width":320},{"text":"","width":64},{"text":"","width":64},{"text":"","width":64},{"text":"","width":64},{"text":"I need the A B and C","width":128},{"text":"What is triple?","width":128},{"text":"Well triple is in a class","width":64},{"text":"Triple A B C is a class","width":128},{"text":"Triple int float double","width":64},{"text":"Triple book png dog","width":256},{"text":"It is a clas","width":192},{"text":"But triple is not","width":64},{"text":"triple is a template","width":128},{"text":"So when I want to scope it to a particular class I need to say what","width":128},{"text":"class, so I mean that I am defining ","width":192},{"text":"this function as part of triple A B C","width":448},{"text":"","width":64},{"text":"","width":128},{"text":"","width":64},{"text":"That function is called triple, but I need to scope it to the right class here","width":384},{"text":"So it is triple of A B C","width":128},{"text":"So think of what the compiler is going to do when it stamps this out","width":128},{"text":"If I say A is int B is double C is float","width":192},{"text":"It is going to say triple, int, double, float","width":256},{"text":"So it is defining the triple constructor inside of the class triple int, double, float","width":320},{"text":"And I said I am going to take my arguments by value","width":256},{"text":"A first","width":640},{"text":"","width":128},{"text":"","width":64},{"text":"","width":64}]