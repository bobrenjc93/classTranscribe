[{"text":"Big O tells me it's not any worse than this.","width":388},{"text":"Big omega says it's not any better than this.","width":155},{"text":"So it's not any worse than this, and it's not any better than this, it ought to be that.","width":192},{"text":"So i'm gonna go this way first, so I'm gonna say it's not any better than something.","width":726},{"text":"So if I look at just this, while I can take logs of both sides, so that would give me that h should be less than or equal to log 2 of n.","width":652},{"text":"h is smaller than or equal to log 2 of N.","width":619},{"text":"So, here is my, sorry, this is actually the upper bound, right?","width":279},{"text":"h is always gonna be something smaller than or equal to log base 2 of N, I'm gonna stop here and say it's O(log N).","width":489},{"text":"I'm not going to, because I wanna show that it's actually both big O and big omega.","width":490},{"text":"So if  I look at this side, then I say this is the maximum number of nodes, then I know that N+1 is less than or equal to 2 to the h+1.","width":1576},{"text":"So log of that is h+1, so minus 1, so again we have a similar case as before except for it's going the other direction.","width":607},{"text":"So h is bigger than or equal to some logarithmic function of N.","width":340},{"text":"h must be smaller than or equal to log N, h must be bigger than or equal to log N, h is log N.","width":525},{"text":"I bounded it above, I bounded it below, it can't be anything other than log N.","width":343},{"text":"So it's true that even for the complete tree that is theta of log N.","width":322},{"text":"So if the height is theta of log N, then we know that all of our operations that we were saying were O(h) are O(log N), because we know that the height is definitely log N.","width":1255},{"text":"Questions on that really quick?","width":265},{"text":"So this is just kind of, we are using the fact that we knew we had a closed form for the number of nodes in a perfect binary tree.","width":448},{"text":"And then sort of using that to figure out what's the smallest number of nodes, and what's the largest number of nodes in a complete tree.","width":437},{"text":"And then we can use the what's the minimum number of nodes to get a height h to prove the upper bound.","width":299},{"text":"And we can use the maximum number of nodes to get a tree of height h to prove the lower bound.","width":260},{"text":"So it's a little weird that we show the upper bound by looking at the minimum number of nodes, and we show the lower bound by looking at the maximum number of nodes.","width":679},{"text":"Because the h is on the other side, we add N we add h, so it flips what's kind of intuitive about that inequality.","width":576},{"text":"That fact will be important later, when we're talking about other binary trees, you wanna be able to, again we'll have other trees, and we'll find that running times look like h, then we ought to prove h is some function of N.","width":741},{"text":"So we are gonna wanna show an upper bound on some function by asking what's the minimum number of nodes to get a tree of height h.","width":448},{"text":"So the first one was, so this one is saying look at this part of the inequality.","width":901},{"text":"2 to the h is smaller than or equal to N, log base 2 of both sides, h is smaller than or equal to log base 2 of N.","width":539},{"text":"So I know now that if h is smaller than or equal to log base 2 of N, that's equivalent to saying h is O(log N).","width":553},{"text":"If h is smaller than or equal to some function of N, I know that for I can pick a constant c and k and everything works out just fine.","width":505},{"text":"So that's the big O part, so this one comes from the left hand side of the inequality which is saying the minimum number of nodes to get a tree of height h.","width":798},{"text":"The other one, this one, is coming from this side of the inequality, which is arguing that the maximum number of nodes you could possibly have in a complete binary tree of height h is 2 to the h+1 -1.","width":962},{"text":"So now I just shift things around, right, that's just okay, plus 1 at both sides, N+1 is less than or equal to 2 to the h+1.","width":444},{"text":"Log base 2 both sides, so log base 2 of N+1 is less than or equal to h+1.","width":343},{"text":"So subtract 1 from both sides, so h is bigger than or equal to some logarithmic function of N.","width":539},{"text":"So now I've shown that h is bounded above by log N, and h is bounded below by some function that's log N.","width":619},{"text":"So h is definitely log N.","width":118},{"text":"Growing like log N.","width":140},{"text":"There is still gonna be some constant on that or whatever, but we are ignoring those, because we can.","width":360},{"text":"So then what does that say about the running times of this particular choice of implementation of the priority queue ADT?","width":1079},{"text":"Note how carefully I said that.","width":384},{"text":"The heap is an implementation of a priority queue ADT.","width":320},{"text":"A heap can be a priority queue.","width":266},{"text":"A priority queue does not have to be a heap.","width":238},{"text":"Just like with stacks and queues, the stack and queue was the ADT.","width":346},{"text":"It just tells you what it can do.","width":192},{"text":"A stack could be an array, a stack could be a list, a stack could be a double link list.","width":384},{"text":"Those are all different implementation choices for the stack ADT.","width":301},{"text":"So we say that we are implementing the priority queue ADT, we are picking a particular implementation for the data structure.","width":640},{"text":"So if I just tell you you've got a priority queue, you have no idea which of these choices are made, until I tell you, here is a priority queue implemented with a blank.","width":656},{"text":"Now you know.","width":79},{"text":"So the ADT is not prescribing how it works, it's just prescribing what it does.","width":379},{"text":"And then you can make drastically different implementation choices for any particular ADT.","width":489},{"text":"The next one we'll cover has very different implementations.","width":286}]