[{"text":"What’s the maximum number of rotation that I can possibly do, ignoring all of the whether you actually do the rotation or not? What’s the upper-most answer here?","width":1024},{"text":"LogN, the most I can possibly do that proved to be true in the prefecture in logN. So I know that the upper-banned answer is logN. The question is any smaller than that?","width":640},{"text":"Yes, how many rotations? If you can’t double rotations and just one rotation.","width":1024},{"text":"The reason behind that is you starting off with something that was completely balanced, inserting a node is gonna mess up only once of tree, only one tree balanced factor. ","width":832},{"text":"And after you rebalanced that, the height of that tree will what it was. So the balanced factor above are not gonna be changed. There is only one local tree where we’ve created imbalanced and after we do the rotation we’ve shrunk that tree a little. ","width":1408},{"text":"Because we rebalanced that height. So if inserting cause the height of some subtrees to grow by one . ","width":576},{"text":"When we find the node where the imbalance occurs when we rotate that, the height of the tree then shrunk but back down by one.","width":384},{"text":"So when we calling back out its height is exactly what it was before. So everything above it is heavy.","width":448},{"text":"So it turns out when you are doing an insertion into an AVL tree, you are gonna do at most one rotation. Even though we are checking every node on the way back out, we are only gonna do it once and find one node that is imbalanced and rotate it, fix it and come back out and find there’s nothing else that’s imbalanced.","width":1024},{"text":"Because after we rotate the guy is imbalanced, we shrunk its height back down and so then from all the trees perspectives above it’s like “okay, the height is changed”","width":704},{"text":"So for an insertion, exactly one, the constant node ","width":1280},{"text":"What about remove? We are not gonna write the code for remove but I believe you are capable of doing it at this point. So when we are doing the remove, how many rotations now?","width":832},{"text":"Well, we can’t make the same argument that we had before. The argument from before was insert. We mess up one like going from bottom up there’s some subroot trees balanced factories we mess up.","width":1344},{"text":"And we do a rotation and thats height goes back to what it was before. If I remove a node and I’ve messed up the balanced factors of some nodes, and I do rotation, is it height necessarily be what it was before?","width":832},{"text":"No, it might shrunk, which means that I balance the factor above me, it might been screwed up. ","width":512},{"text":"Shrinking the height of one of the subtrees when I’m coming back out may have just push the balance factors to minus two depending on which side I shrunk.","width":640},{"text":"So that subtree might do rebalance.","width":256},{"text":"And I rebalance it there. ","width":256},{"text":"","width":576},{"text":"And I come back out and if that shrunk the height that might also again change a balance factor for node above it and that has to do rotation.","width":64},{"text":"So it turns out that in the worst case for removal, you could actually have the maximum number of rotations done which is logN.","width":1856},{"text":"Note I’m talking about the number of rotations here, not the runtime.","width":448},{"text":"Now all over I can say that, you know, for not using the prefecture analogy, it’s to h numbers of rotations may have to do rotations back out.","width":576},{"text":"Yes. Yes, when you insert. It has to eventually, right? If I have a tree with, this tree, there’s nowhere to put it without increasing the height. ","width":1664},{"text":"So I will. The height can grow and it can grow from an insertion. The height doesn’t always grow from insertion but it can. And on average, you are gonna increase it after you roughly double the nodes you’ve got.","width":1088},{"text":"If assuming your keys are nice and distributed evenly","width":768},{"text":"When you do a rotation, you won’t increase the height.","width":512},{"text":"But you are not. The height of the tree itself could increase as a result of an insertion. But the height of the tree won’t increase by doing insertion or by doing rotations. ","width":576},{"text":"If it did, you are not fixing problems, like you are rotating to make things shrunk height always. So using a logic that are rotate will only shrink the height.","width":896},{"text":"Then you can get at this where the insertion you only need to do one whereas the removal you might need to do all of them will move back up the tree. If everyone of the rotations shrunk a height, you may have add every subroot all the way back up. You may mess up the balanced part.","width":1024},{"text":"Then you may have to do a bunch of rotations.","width":640},{"text":"All right, so given that an insert, we only do one rotation, how long does one of the rotations take?","width":448},{"text":"A constant time, right? So, then our insert function on the binary search tree running time is still what?","width":960},{"text":"Big O over h, right? We haven’t added a significant amount of over had to change that.","width":448},{"text":"Removal the same you applied, right? So we added every rotation takes constant time and we might do big O over h to them. But each one of them takes constant time and the running time of remove is already big O h.","width":704},{"text":"So we haven’t changed the running time variable. So now remains to be shrunk that the height of the tree is in fact log with it you are doing this height balance stuff.","width":704},{"text":"And if that’s true, then we can say something better about the running time about these functions. For now, we haven’t changed them all. ","width":384},{"text":"We certainly didn’t make anything works. The question is did we make things better. The answer is yes..","width":448}]