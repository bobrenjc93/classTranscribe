[{"text":"Make does it's variable expansion.","width":896},{"text":"If you want to actually output that variable as a string as part of a rule that's just the syntax for it.","width":320},{"text":"If you're changing the cpp file for bar or foo you ought to be updating the header file anyway.","width":1728},{"text":"It's just not going to matter.","width":192},{"text":"So -o here that's just telling you for the linker what the output program is.","width":1792},{"text":"If I don't specify that by default it's just a.out or something, which is like never want you want.","width":512},{"text":"You're just giving a name for the output program.","width":320},{"text":"So it'll write that file to the binary.","width":192},{"text":"So lets suppose I've got this Makefile set up and I've build my program once.","width":1344},{"text":"So it went through and it build everything so I've got a folder full of .o files and a binary,","width":320},{"text":"And then I go and I modify just foo.o, I change foo to foo1, what happens when I type \"make\"?","width":640},{"text":"I type make, make is going to parse my Makefile and start looking for the very first target and run that.","width":608},{"text":"The very first target here happens to be my_program, conventionally it should be all but I'm omitting that for this example.","width":325},{"text":"So it's going to try to build the binary, which is what we want.","width":256},{"text":"So it looks and and goes \"Okay I want to build my_program, I'm gonna check does foo.o, bar.o and main.o exist?\"","width":322},{"text":"They all do exist because I've run this before.","width":128},{"text":"Now it checks the time stamps, so what's the time stamp for foo.o?","width":256},{"text":"Now it checks time stamps including the dependencies.","width":448},{"text":"So it's going to check foo.o, what's the time stamp for foo.o?","width":192},{"text":"Okay it's not newer than my_program so that's fine.","width":344},{"text":"What about foo.o's dependencies?","width":128},{"text":"So foo.o depends on foo.cpp and foo.h","width":212},{"text":"What are the time stamps for those files?","width":64},{"text":"Oh foo.cpp is more recent than foo.o.","width":192},{"text":"So that means that I need to rerun the run to build foo.","width":320},{"text":"So it'll rerun the rule to build foo so now I'd output to new foo.o.","width":192},{"text":"So now I go back to my_program.","width":192},{"text":"Foo.o has been satisfied.","width":128},{"text":"Bar.o, look at bar.o.","width":64},{"text":"Look at it's dependencies have those been updated?","width":192},{"text":"Does bar.o exist?","width":184},{"text":"Yes okay fine, what's bar.o's time stamp?","width":192},{"text":"It's not newer than my program.","width":128},{"text":"Okay fine, what about bar.o's dependencies have they been updated since bar.o was made?","width":256},{"text":"No okay so bar.o's fine so don't build bar.o.","width":128},{"text":"It already exists.","width":64},{"text":"Main.o is the same story it looks at the header files... okay actually no it's not the same story.","width":320},{"text":"Main.o looks at the time stamp for main.o okay it's not newer than my_program so it's probably fine.","width":512},{"text":"But let's check the dependencies.","width":129},{"text":"Main.cpp is not newer fine, foo.h of crap probably newer right?","width":192},{"text":"So I should rebuild main.o maybe if I've changed the header file for foo.","width":394},{"text":"If I haven't changed the header file for foo if I just change...","width":192},{"text":"If I only modify, this is an important point that I'm almost making a mistake on.","width":576},{"text":"If you've modified just the cpp file for foo and I didn't change the header, for example if I change what it's printing and I didn't change the function signature, I don't actually need to rebuild main.o.","width":640},{"text":"Because main.o only depends on the declaration of the functions not the definition.","width":320},{"text":"So if I only change the definition main.o doesn't have to be rebuilt.","width":192},{"text":"So main.o will check main.cpp, the time stamp's fine.","width":353},{"text":"Foo.h hasn't changed so time stamps fine.","width":128},{"text":"Bar.h hasn't changed so time stamp's fine.","width":192},{"text":"Main.o is fine don't rebuild main.o.","width":128},{"text":"Then in this list of dependencies for the program, this one is new, this one is old and this one is old.","width":512},{"text":"That means I still need to rebuild it because one of my dependencies has changed.","width":192},{"text":"So then I run this one.","width":128},{"text":"So in short if I only modify foo.cpp after I've build the program once already and I run make again the only rules that will be run will be this one first and then this one.","width":704},{"text":"All of the Makefiles should try and build only the parts of the program that you actually need.","width":960},{"text":"So if you only change foo.cpp the only thing that you should need to rebuild is the .o file that actually says how foo.cpp works and the actual program to relink in the definition for foo.","width":754},{"text":"Plenty of time on that lets move on.","width":407},{"text":"Alright so this is a quick point that I want to make about variables in c++.","width":404},{"text":"So can anybody guess what the result of version one of this code is?","width":320},{"text":"So that's the one on the left.","width":64},{"text":"Int n std cout n.","width":216},{"text":"What does that print?","width":105},{"text":"A garbage value.","width":320},{"text":"So this is different than you'd expect if you're coming from Java or something.","width":320},{"text":"This is actually going to print, we don't know.","width":192},{"text":"So we have no clue what this is going to print.","width":320},{"text":"The reason for that is when we declare a variable int n semicolon all we've done is make room on the stack frame for whatever function that we're in for an int.","width":768},{"text":"And gave it a name n.","width":256},{"text":"We haven't actually filled that with anything.","width":128},{"text":"So the actual value of n is going to be whatever happened to be in the memory that you're using for the stack frame there, which might be zero is you're lucky but it might be 47, it might be some obnoxiously huge number or it might be some obnoxiously huge negative number.","width":1152},{"text":"You have no idea it's just whatever happened to be there, interpreted as if it were an integer.","width":256},{"text":"That's the value.","width":128},{"text":"So that might be unexpected or surprising.","width":256},{"text":"It's important to not use uninitialized variables this is called a use of uninitialized variables.","width":384},{"text":"The complier should warn you about things like this but they're not always perfect.","width":384},{"text":"It's gotten a lot better though.","width":64},{"text":"What about the one on the right, is that one any different?","width":320},{"text":"That one will actually output zero.","width":192},{"text":"The only difference are those 2 characters, those curly braces.","width":384},{"text":"But those curly braces after the integer means... so int n I'm declaring an integer on the stack so make room for an integer on the stack and call it n and then the brackets means initialize the value to whatever the default for that type is.","width":1024},{"text":"This is default initialization for whatever that is, which is well defined for integers to be zero.","width":384},{"text":"So we've actually done an explicit initialization to some default value for the integer.","width":384}]