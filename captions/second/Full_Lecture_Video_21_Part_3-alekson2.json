[{"text":"So looking at this tree","width":256},{"text":"Which node","width":64},{"text":"At which node is the imbalance","width":192},{"text":"80","width":64},{"text":"What's 80 balance factor","width":128},{"text":"What's the height of the left","width":384},{"text":"0?","width":128},{"text":"Height of the left subtree is 0","width":256},{"text":"Height of the right subtree is 2","width":64},{"text":"So the balance factor out ot be ","width":192},{"text":"negative two","width":64},{"text":"The balance factor is signed","width":256},{"text":"The balance factor of this node 80- is going to be negative two","width":448},{"text":"Indicating that one the balance factor","width":256},{"text":"The absolute value of that facttor is greater than 1","width":256},{"text":"So I knwo the tree is imbalanced","width":256},{"text":"And negative indicates which side","width":192},{"text":"Which is is heavy","width":128},{"text":"Right side because it is negative","width":128},{"text":"You can also just look and see that it is hevay on the right","width":192},{"text":"But in terms of programming if you're just looking at the height values you can use that sign which side","width":384},{"text":"This tree is heavy on the right","width":192},{"text":"We;re going to heigh balance this tree","width":320},{"text":"We do need to care about the ordering property","width":192},{"text":"This example is in fact a binary search tree","width":384},{"text":"So when we're doing this rebalancing we want to be careful that our result is also a binary search tree","width":576},{"text":"And then we can use these algorithms in implementing our modified search tree to guarantee that all of the nodes in the tree are balanced","width":448},{"text":"I sort of know that if I am heavy on the right","width":320},{"text":"I kinda need to move some weight over form the right to the left","width":320},{"text":"I need to move nodes over","width":128},{"text":"Exactly the algorithm","width":1024},{"text":"The observation is we need to move things from right to left","width":256},{"text":"So we're gonna try to move the 90 to be the new root","width":192},{"text":"And elt what was there let it dangle down there and let it attach as necessary","width":320},{"text":"I don't know ho to draw this so that it is clear","width":192},{"text":"But the way I like to think about this","width":128},{"text":"Imagine a little miniature conveyor belt","width":320},{"text":"Going that direction","width":192},{"text":"So if that conveyor belt is moving up","width":512},{"text":"The 80 is going to fall off the end a bit","width":128},{"text":"And we're gonna stop at the 90 at the top","width":192},{"text":"80 is gonna fall off the top a bit","width":128},{"text":"And become the left child of the 90","width":192},{"text":"Knocing off the 85","width":320},{"text":"Which grabs on for dear life so it does not die","width":192},{"text":"To the 80 node which just fell down","width":256},{"text":"I wish I could draw that with a stop motion or something","width":256},{"text":"But essentially we're gonna move the 90 up ","width":320},{"text":"The le;ft the child of the 90 is gonna become the 80","width":192},{"text":"And the 85 is gonna attach to the right side of the 80","width":192},{"text":"So","width":128},{"text":"We're gonna have a tree that looks like this","width":256},{"text":"Which now looks balanced","width":960},{"text":"Note that it also satisfies the binary search properties","width":384},{"text":"Everyhting left of 90 is smaller than 90","width":192},{"text":"85 is bigger than 80","width":192},{"text":"Only place it could go","width":192},{"text":"So this operation is called a left rotation","width":448},{"text":"Because you're kind of rotating the tree to the left","width":256},{"text":"Around the 80","width":128},{"text":"So we call this a left rotation about 80","width":192},{"text":"So this is the left","width":256},{"text":"Left rotate","width":320},{"text":"Possibly","width":576},{"text":"The problem there is figuring out how to reattach everything nicely","width":320},{"text":"Also you gotta remember that you could have","width":320},{"text":"you have arbitrary subtrees below this so you gotta be careful","width":832},{"text":"So the way this is done will still work nicely","width":256},{"text":"Even if you got a whole bunch of subtrees","width":192},{"text":"So this is the left rotate","width":320},{"text":"Kind move things to the right and left","width":320},{"text":"So there's also an analogous right rotate","width":320},{"text":"For the mirror of this case","width":128},{"text":"So if its heavy on the left","width":192},{"text":"And we need to move the things from the left to the right","width":256},{"text":"We move the items","width":128},{"text":"The answer is we're not gonna let it get bad","width":1024},{"text":"We're gonna always do this whenever possible","width":192},{"text":"So that our tree is always balanced","width":128},{"text":"When inserting, we're inserting to an already balanced tree","width":192},{"text":"So there's only one unbalanced place","width":192},{"text":"And we can sort of fix it all the way up","width":192},{"text":"Given an arbitrary search tree","width":192},{"text":"Yeah you're gonna have to a bunch of rotations all the wya to make the whole thing look nice","width":448},{"text":"We're gonna sidestep","width":64},{"text":"Incrementally after every single insertion make sure the tree is balanced","width":320},{"text":"So we only have to worry about one thing at a time","width":64}]