[{"text":"alright so here's what these two lines do","width":257.18181824684143},{"text":"they're basically saying hey operating system, I need some extra bytes","width":181.18181824684143},{"text":"heres how many","width":93.18181824684143},{"text":"talking to your operating system is very slow","width":156.18181824684143},{"text":"thats gonna take several microseconds to complete","width":411.18181824684143},{"text":"and then we're gonna say here, chosen","width":217.18181824684143},{"text":"im going to set this pointer to be sbrk and then call sbrk on size","width":274.18181824684143},{"text":"guess what that does. that also says to the operating system i need now size bytes","width":313.18181824684143},{"text":"they're actually calling sbrk 4 times","width":227.18181824684143},{"text":"to say alright give me some byte not only for the struct but give me some bytes in order for to satisfy the users request","width":507.18181824684143},{"text":"and what we're doing with the asterisk each time is raising the rule to mar raising the threshold for where our heap finishes","width":610.1818182468414},{"text":"so now we're gotten set up our little struct","width":137.18181824684143},{"text":"we'll set it's size","width":113.18181824684143},{"text":"we'll set that it's free","width":108.18181824684143},{"text":"and we'll set the next pointer to equal to metadata and we change the metadata chosen to the pointer","width":397.18181824684143},{"text":"so what we've done here is insert our new entry into the beginning of the linked list","width":515.1818182468414},{"text":"so the next time we call free or malloc we're gonna see this newly created entry inside our linked list","width":497.18181824684143},{"text":"and then finally we say back to the user here's the memory of size bytes that you needed","width":908.1818182468414},{"text":"questions about this code?","width":368.18181824684143},{"text":"yes?","width":531.1818182468414},{"text":"if chosen is bigger than the amount of space that you need","width":153.18181824684143},{"text":"yes","width":51.18181824684143},{"text":"so","width":64.18181824684143},{"text":"what this code does not do","width":133.18181824684143},{"text":"is do anything without spare space","width":293.18181824684143},{"text":"it's got a very simple view of the world","width":116.18181824684143},{"text":"its view of the world is","width":120.18181824684143},{"text":"yeah i've got a block here that was previously allocated, a block here, some memory here","width":412.18181824684143},{"text":"and if you want to say to this much memory then it's obviously not going to give you that one and it would give you say this block","width":703.1818182468414},{"text":"and you'd say well what about this space back here","width":149.18181824684143},{"text":"can we use that","width":69.18181824684143},{"text":"should we add another entry because maybe in the moment someone will malloc and attempt to make a smaller space","width":457.18181824684143},{"text":"ah too bad","width":128.18181824684143},{"text":"okay so we've got some fragmentation inside each of these allocations","width":282.18181824684143},{"text":"if we dont have a perfect fit","width":598.1818182468414},{"text":"yes?","width":558.1818182468414},{"text":"ah right","width":36.18181824684143},{"text":"okay","width":32.18181824684143},{"text":"so","width":47.18181824684143},{"text":"before this line","width":214.18181824684143},{"text":"we've got metadata","width":271.18181824684143},{"text":"pointing to our first entry","width":238.18181824684143},{"text":"yes this is my little struct now","width":108.18181824684143},{"text":"which then has a next pointer which points to another one which has a next one which points to another one","width":291.18181824684143},{"text":"and so on and so on and so on","width":140.18181824684143},{"text":"so what we do","width":160.18181824684143},{"text":"is ","width":93.18181824684143},{"text":"we set up our new struct","width":147.18181824684143},{"text":"so its next pointer ","width":365.18181824684143},{"text":"points to the old beginning of the linked list","width":294.18181824684143},{"text":"alright so when you see equals","width":146.18181824684143},{"text":"just remember","width":24.18181824684143},{"text":"your copying bit patterns","width":63.18181824684143},{"text":"you're just changing one pointer to look at the same thing as another pointer","width":360.18181824684143},{"text":"and then the next line is meaningful","width":148.18181824684143},{"text":"we've changed that variable metadata","width":142.18181824684143},{"text":"to look to our new brand link","width":970.1818182468414},{"text":"any other questions","width":232.18181824684143},{"text":"alright then","width":119.18181824684143},{"text":"so","width":898.1818182468414},{"text":"okay yes","width":41.18181824684143},{"text":"get your spectacles on","width":86.18181824684143},{"text":"i did this too small today and it was tiny","width":337.18181824684143},{"text":"when can a system use COW","width":91.18181824684143},{"text":"moooo","width":57.18181824684143},{"text":"that's a moot point","width":38.18181824684143},{"text":"no","width":69.18181824684143},{"text":"COW","width":54.18181824684143},{"text":"cow stands for copy on write","width":381.18181824684143},{"text":"here's the idea","width":169.18181824684143},{"text":"you and I can share a resource","width":158.18181824684143},{"text":"providing neither of us actually tries to change it","width":336.18181824684143},{"text":"and we can do that very quickly","width":97.18181824684143},{"text":"well the day that one of that you and i actualy need to write to that resource, that's when we're asked to duplicated it","width":497.18181824684143},{"text":"we'll do it very quickly before the other person notices","width":311.18181824684143},{"text":"so you can defer the actual copying process, the duplication process, until a change or modification happens","width":510.18181824684143},{"text":"ah this is a common idea for performance because quite often it turns out that we don't actually need to write to something or modify something","width":670.1818182468414},{"text":"so if you can detect when something is about to change","width":193.18181824684143},{"text":"maybe you're writing an alloc class or youre the operating system","width":238.18181824684143},{"text":"we dont actually need to initialize stuff or copy stuff until it actually is required","width":500.18181824684143},{"text":"and so","width":130.18181824684143},{"text":"a little brain teaser i have to today","width":136.18181824684143},{"text":"is how can we improve calloc performace here","width":285.18181824684143},{"text":"so COW is just copy on write","width":563.1818182468414},{"text":"so its a way to have shared data structures until something mutable happens","width":318.18181824684143},{"text":"until a change happens, and that way, we can use our resources efficiently","width":504.18181824684143},{"text":"right lets just see what you remember from previous lectures","width":177.18181824684143},{"text":"what's realloc","width":367.18181824684143},{"text":"it's when you change your mind","width":90.18181824684143},{"text":"you say, oh okay remember those bytes i malloc, actually i decided i need more bytes","width":393.18181824684143},{"text":"so we can use realloc when i say i'm creating an array","width":292.18181824684143},{"text":"and i keep going around a loop","width":93.18181824684143},{"text":"and i decide to say remember that array i made","width":125.18181824684143},{"text":"turns out it's not large enough","width":152.18181824684143},{"text":"okay so realloc works but there's a big caveat","width":355.18181824684143},{"text":"as you've just seen how malloc actually places things","width":210.18181824684143},{"text":"it could be that we can't keep the user data inside the same memory address anymore","width":356.18181824684143},{"text":"so when you call realloc be prepared to update your pointers with the return result of realloc","width":465.18181824684143},{"text":"so if i've got an array","width":153.18181824684143},{"text":"that i previously created say from realloc or malloc or calloc","width":457.18181824684143},{"text":"then don't just say you know what im gonna make it larger","width":786.1818182468414},{"text":"i'm gonna make it say 100x 100 entries larger","width":476.18181824684143},{"text":"infact, let me just change this code a little bit","width":143.18181824684143},{"text":"let's say that ","width":206.18181824684143},{"text":"you called calloc","width":126.18181824684143},{"text":"and","width":126.18181824684143},{"text":"i've got like a size of thing","width":222.18181824684143},{"text":"something","width":82.18181824684143},{"text":"and i've got like 50 entries here","width":362.18181824684143},{"text":"and then you say you know what actually 50 wasn't enough","width":122.18181824684143},{"text":"im going to double my space","width":165.18181824684143},{"text":"i've just managed to write two errors in 2 lines","width":508.18181824684143},{"text":"actually both of those were in the second line","width":140.18181824684143}]