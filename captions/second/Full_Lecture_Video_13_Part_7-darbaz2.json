[{"text":"okay, alright","width":192},{"text":"where have you seen this before?","width":256},{"text":"wow, yeah good","width":192},{"text":"prior to today, where have you seen this before?","width":320},{"text":"cs 125. okay","width":192},{"text":"stack frames!","width":64},{"text":"function calls","width":192},{"text":"the first 2 weeks of class","width":128},{"text":"this is what we're doing every day","width":158},{"text":"we're drawing a stack","width":64},{"text":"now you know why it's called the stack","width":192},{"text":"this data structure is called the stack","width":128},{"text":"and the same concept applies to functions","width":576},{"text":"in your program","width":80},{"text":"remember, when you're program is executing","width":192},{"text":"what stack frame is going to go away first?","width":320},{"text":"most recent one called","width":256},{"text":"main is the very last thing to go away but that's the very first thing that's put in. main is always at the bottom and then function call 1, 2 ,3 ","width":618},{"text":"that 4th one is going to away first, before the 3rd before 2nd before the 1st before main","width":384},{"text":"so you've seen this before, it's already being used to manage the memory associated with functions","width":455},{"text":"on the stack.","width":128},{"text":"so, this is a very familiar structure but it could be useful to also have a programmatic stack","width":387},{"text":"that is a data structure that represents a similar kind of thing","width":192},{"text":"so this is a stack, what internal storage would you use?","width":384},{"text":"there are all kinds of valid answers, I want to sort of look at all of them","width":492},{"text":"so what could I use","width":64},{"text":"give me one thing that I could possibly use","width":192},{"text":"an array, sure!","width":128},{"text":"I could use an array","width":128},{"text":"so let's say I have an array","width":256},{"text":"actually let's make it a small array first","width":320},{"text":"I have this array","width":576},{"text":"okay fine, push 1","width":180},{"text":"what do I do","width":32},{"text":"how does my picture change, where does the 1 go?","width":154},{"text":"on the left, okay","width":162},{"text":"so 1 goes here","width":64},{"text":"push 2, middle","width":256},{"text":"push 3","width":128},{"text":"end","width":64},{"text":"push 4? resize!","width":200},{"text":"how big do I make it?","width":64},{"text":"double, right?","width":192},{"text":"that's the same exact analysis that we just did","width":448},{"text":"right? so we know the amortized cost of that is going to be what?","width":512},{"text":"O(1)","width":192},{"text":"the star is to let you know that that's amortized, not worst case","width":832},{"text":"what is the worst case? n.","width":256},{"text":"amortized is what we really care about but I'm going to denote that by putting a star there to let you know that is not the worst case","width":320},{"text":"okay, so that's fine","width":192},{"text":"how do I do a pop?","width":128},{"text":"I would either blank out the cell or move my little capacity marker or size marker down","width":640},{"text":"so then if you think about it, if you think of this as being the picture, where is the top of the stack in this array based implementation?","width":694},{"text":"the back of the array","width":64},{"text":"the last element","width":128},{"text":"the bottom of the stack is the first element","width":192},{"text":"so we can go like this easily","width":128},{"text":"this means","width":246},{"text":"that I can use a vector for this implementation, remember vectors had push back and pop back","width":384},{"text":"push is just push back and pop is just pop back so I can use a vector for this implementation very easily, I don't even have to write the resizing array myself, I can just use the vector, that is pretty handy.","width":704},{"text":"so that's good. how long would pop take for an array then?","width":512},{"text":"we just talked about how to do it, how long does that take","width":281},{"text":"constant","width":64},{"text":"do I need to worry about amortization? no.","width":227},{"text":"I could","width":64},{"text":"I could, what would I have to be doing to care about doing amortized analysis for doing pop for this structure","width":832},{"text":"when I make the array smaller.","width":146},{"text":"suppose I pushed a whole bunch of stuff making a HUGE array and I just pop it all","width":384},{"text":"I really don't need an array of three and a half million elements when I have 2 things in the stack, so I could employ an array downsizing strategy aswell   ","width":768},{"text":"and you can do a similar amortized analysis for that, I'm not going to do it here but you can do the same thing there. The one caviat is you probably don't want to do it when you're just less than half full, because then somebody can sit right halfway and insert remove would cause you to remove every single time","width":1280},{"text":"so typically implementations will do resize when full to twice the size and then downsize when less than 1/4th full","width":640},{"text":"so you have to be really empty for this thing to resize back down","width":320},{"text":"but then it resizes down to just enough to hold there, so you can reclaim a whole lot of memory this way but if you did that then it's hard to argue that it's constant time without doing an amortized analysis because you need to look at how long it takes to downsize and copy the data","width":941},{"text":"but we're not going to worry about that here so this is constant.","width":320},{"text":"how would I do a peek? that is just tell me the next thing that's going to be removed","width":337},{"text":"I heard constant yes but what do I do?","width":192},{"text":"yes, just check that index. whatever my index is telling me where the last thing is, just go to that array index. very fast.","width":576},{"text":"okay, good.","width":192},{"text":"is that the only way?","width":128},{"text":"no, singly linked! good","width":192},{"text":"singly linked list. how could I do this with a singly linked list? so my picture is going to look...","width":384},{"text":"like this.","width":192},{"text":"just put a new node, we don't have to do much thinking yet.","width":627},{"text":"if I want to push two","width":192},{"text":"where does it go","width":384},{"text":"or does it matter?","width":192},{"text":"suppose that I put it in the front for a moment","width":192},{"text":"so I remember if I'm using a singly linked list I've got something like the head is here, right I also have my tail pointer","width":604},{"text":"and I'm going to push 2 and I'm going to stick it on the front so that means that I'm going to make a new node and I'm just doing push front.","width":768}]