[{"text":"Any other questions about it?","width":93},{"text":"I am so glad that you guys are here.","width":256},{"text":"Debug my code. Wouldn't it be good if we can code like this all the time?","width":277},{"text":"It's pair programming taken to the extreme.","width":256},{"text":"Alright. Fine.","width":128},{"text":"So there is one thing I wanna say about the interface.","width":246},{"text":"I made a simplifying statement and that is, you don't have to worry about popping an empty stack.","width":320},{"text":"If effectively, I mean, in fact, you probably should write code that is a little bit defensive to that.","width":448},{"text":"You should have an exception handled here.","width":192},{"text":"But we are not in a business of doing that.","width":128},{"text":"And moreover, in this class, and moreover, the fact that we gave the client the capability of checking to see whether there's an empty stack.","width":788},{"text":"The fact that we created this empty function means we can say, \"Ho, dude, that your responsibility.\"","width":493},{"text":"You have to check, to the client, you have to check, whether or not this is empty.","width":256},{"text":"I made no promises if you tried to pop an empty stack, Ok?","width":336},{"text":"So, providing a functionality to the client for checking for empty is kind of our way of saying that it's the client's responsibility to do so.","width":687},{"text":"OK","width":75},{"text":"And this is it.","width":64},{"text":"This is about the simplest guess in terms of the implementation.","width":256},{"text":"And I thought you would ask, \"don't we want to use a sentinel node?\"","width":512},{"text":"And the answer is \"no, we don't need a sentinel node here because all of our insertions and deletions are happening in that first spot.\"","width":768},{"text":"Right? We don't need to worry about the general case.","width":192},{"text":"In this case.","width":64},{"text":"So sentinel node is just sort of a waste of time here.","width":207},{"text":"Makes for more complex code.","width":177},{"text":"OK. So let's take about the array-base implement for a minute.","width":362},{"text":"OK. So the interface is the same. We are going to be implementing push and pop and, you know, empty just returns a boolean value referencing sending whether or not the size is zero. So that's easy.","width":1408},{"text":"Here is the constructor","width":516},{"text":"I don't know which order I may wanna talk about this. OK","width":338},{"text":"So in this case, I've gotten an item's poin... I have items which is an SIT pointer.","width":397},{"text":"And because we are implementing this as an array, you recognize this is just a dynamic array.","width":380},{"text":"Right? This is just a dynamic array.","width":143},{"text":"Now size here, is intended to be the number of elements in the stack.","width":448},{"text":"Capacity is the number that our stack can hold.","width":295},{"text":"So this is... Capacity is capacity. Size is size. Right?","width":384},{"text":"Capacity is, the number we can hold.","width":448},{"text":"And size is the number we are currently holding, or the number we do hold.","width":476},{"text":"OK. Any question about that?","width":256},{"text":"Yeah?","width":128},{"text":"Ah, do we wanna make capacity constant.","width":283},{"text":"So this is the moment. This is the moment where, we actually begin to discuss what it means to have a dynamic array.","width":640},{"text":"Because if we did not allow, for the the array to have variable size, then that would present a huge drawback over using a linked list, right?","width":896},{"text":"And so now it is the time we are actually going to first exploit the fact that it is a dynamic array.","width":614},{"text":"OK? Any question about that? So it is exactly the right comment.","width":237},{"text":"Alright. So this is going to be a dynamic array. Capacity is deliberately not going to be something fixed. We are going to allow it to vary.","width":557},{"text":"Alright. So what does the constructor do?","width":192},{"text":"It makes... It starts off with an array of size four.","width":256},{"text":"Arbitraryly chosen. Could 've been one. Probably couldn't be zero though. That would not be accepted probably?","width":463},{"text":"And then it allocates the memory.","width":192},{"text":"So now, effectively, after this thing is constructed, we are dealing with an array of size four.","width":512},{"text":"Any time we push onto it, we're going to check to see whether or not the size is greater than or equal to the capacity.","width":704},{"text":"That is, is the array full?","width":192},{"text":"Is the array......full?","width":256},{"text":"And if it is, we are going to grow the array somehow.","width":448},{"text":"Oh, that's new. That's what we are gonna talk about the whole rest of the day.","width":512},{"text":"OK, we are going to grow the array somehow.","width":128},{"text":"And then, we are going to enter in the element that we want and increment the size.","width":384},{"text":"What does the code look like?","width":320},{"text":"for pop?","width":114},{"text":"What does the code look like for pop?","width":128}]