[{"text":"Alright, any question about this. Oh yeah this only applies to a singly-linked list. I know, I just wanted you to think. And plus who wants to keep track of all those extra pointers when we don't have to. It's just going to mean you're going to have bugs.","width":1216},{"text":"Alright, so what's the running time of enqueue then? Constant time if we set it up wisely, oh no its dequeue. Either way so constant time either way and what's the running time of dequeue? Constant time if we are careful","width":1600},{"text":"Alright and that's all I'm going to say about the linked list implementation of a queue, is that okay?","width":576},{"text":"I'm assuming at this point that you can write that code because it's just like insert at front right?","width":576},{"text":"Yes? So this is a queue so the entry point is going to be the opposite of what you choose for exit. So we have to be careful with exit and entry is the other one. Now what you might be asking about is what if you have some structure at either end and thats called a deck or a double ended queue and it's a real thing. I think of it as a perfect test question becasue it's something we don't spend a lot of time on but it's perfectly within your grasp in terms of resoning in terms of how you implement it. So that issue that you bring up, even though you didn't intend it is actually germain.","width":3584},{"text":"Alright, any other questions about this. Yes? I'm going to through that to the crowd okay? Cuz it's a great question. So the question is if we augment our structure - and the choice of ink color here is a clue - if we augment our structure with a tail before tail, do we eliminate the problem of having to reset the tail pointer?","width":3584},{"text":"Well we do but then we have a problem beause have to reset the throwback thursday pointer so it solves one problem but it creates another. Okay any question about it?","width":1792},{"text":"Okay so lets see, the array based implementation of queue - I don't know what I' was going to say about this. Just absorb it, meditate for a second, get in touch with the array based implementation of the queue. I do know what I was going to say about it. Okay any question about the set up here?","width":2112},{"text":"You can look at it and go oh she must have copied and pasted. This stack looks a lot like the stack interface, it has all the same data associated with it and the quesiton is what might we be talking about here? So let's spend a few minutes kinda speculating on how we might use an array for the queue. Now just like we did for the linked list implementation we need to decide where is going to be the entry and where is going to be the exit for our data. Lemme make sure I don't do something stupid here.","width":3328}]