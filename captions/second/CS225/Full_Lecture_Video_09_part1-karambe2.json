[{"text":"Okay let's get started. So you guys in the back here. Yes, no. Nooooo. How about now, now, now, now, can't have it be a multiple tree. Alright sooo. Mp2 is due tomorrow night. There have been grading runs every night for the past you know five days or so. Uhm its looking like things are going really well.","width":2176},{"text":"Only thing is I didn't get an autograder message from last night. Did anybody get a result from last night?Yeah? okay.","width":832},{"text":"Alright so I didn't get the message, maybe I'm just not done with the mp2. Alright then I want to rest assure, I want you to be rest assured that if you get a hundred percent on tonight's run and try and make a change and you get a 0 for whatever reason some compiler error, we're taking the maximum of tonight's and tomorrow nights. So you don't have to stop tonight with your 92 you can keep trying to perfect it if you'd like. Okay are there any questions for grading for mps at this point","width":2624},{"text":"Okay so mp3 is going to come out pretty much immediately. If I had to ah assess a relative difficulty of mp3 over the whole semester, I'd say it's not conceptually the most difficult, but you are likely to spend the most time debugging on it, so prepare to spend more time on it than you might on some of the other mps","width":2112},{"text":"Okay. We were talking about well you remind me what were we talking about, whats a concise way of stating what the subject was last time last friday when we met.","width":1024},{"text":"Operator overloading and in particular we were going to overload the blank operator. What's blank? Assignment operator, very good. So for example, if I do something like declare, ugh I am just not going to be friends with technology today. Look I got nothing. Here. Okay. If I were to declare---accck. ","width":2304},{"text":"My family watched ghostbusters last night on the way home from chicago, I'm thinking I'm like set up some poor karma between me and ghosts everywhere. SO if I declare spheres a and b, and create a to be something interesting perhaps, and then make the assignment b gets the value of a, then what the things you told me last time that I need to be sure to do are to free up the space previously occupied by b, the dynamic part of the space previously occupied by b and then explicitly copy over the values of , oops, of a.","width":4032},{"text":"Okay. And that means that means, that I need to allocated new space that in the end looks just like a's space. Okay any questions about that at all","width":1152},{"text":"I'm going to seperate that out into two sort of sub tasks. There's the clear task and the copy task. Now the clear task should feel a lot to you like another function that you've written, which one is it. The destructor that's right. The clear task should feel alot like the destructor. And the copy task should feel a lot like the copy constructor. That's right. Now do you just call those functions? No you do not","width":2304},{"text":"Alright. So there are these two tasks. There's clear and there's copy. Okay. Now, there are some little teeny tiny and we're going to w","width":1024},{"text":"write the assignment operator to do these two things. But there are some additional considerations that would really only occur to you during debugging, but we're going to be explicit about. So now what I want to know, is what happens upon assignment if b and a already refer to the same memory address? Now this can happen in lots of different ways. It can happen if we've passed something by reference, or it can happen because a is a dereference of some pointer that has some other name","width":2240},{"text":"so there are several different ways where two things can be referring to the same memory address, can be names for the same memory address, so now what I want to know is what's the problem here, remind me. I think we got this far but I want you to remind me. Okay, yeah? ","width":1216}]