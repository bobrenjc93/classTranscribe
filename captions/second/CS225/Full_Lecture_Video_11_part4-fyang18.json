[{"text":"Yes?","width":201},{"text":"Yes very good.","width":96},{"text":"So err the code is identical except for type information.","width":857},{"text":"Okay what else do you notice about this code? Yeah. You.","width":664},{"text":"Very good. Yep. It actually doesn't do anything!","width":384},{"text":"Neither function actually does anything.","width":760},{"text":"Okay and how could I fix that. I will fix that one first. How could I fix that? Pass by reference. Very good. Don't say pointer to me.","width":692},{"text":"Alright, good.","width":247},{"text":"So let's talk about the first point in a little bit more detail.","width":405},{"text":"So this is fine, right, to have these two functions that do pretty much the same thing. ","width":323},{"text":"In fact if somebody were asking you to include these two functions in an mp you go 'oh yay they're about the same I can cut and paste'. ","width":489},{"text":"I can cut and paste my solution from one and I got the other one done. Yes, right?","width":299},{"text":"The problem is that then you have to go back through and kinda check and make sure that your type information is updated correctly.","width":576},{"text":"Now the compiler's gonna help you mostly with those kinds of bugs but it's still a pain in the neck.","width":384},{"text":"And in fact if somebody, if somebody came down and said 'there is new technology for swapping'.","width":629},{"text":"Okay? Unlikely to happen but it could. ","width":218},{"text":"Somebody came down and said there is new technology for swapping.","width":258},{"text":"Drawback of doing it this way is that you have to go find all of these little swap functions and change them, right, to take advantage of this new swap algorithm.","width":881},{"text":"Okay. Yes it's artificial but. Alright so code reuse is important for maintenance and incremental improvement of codes. Okay?","width":829},{"text":"And we admit here that look they are about the same.","width":165},{"text":"So how on earth are we going to unify those two functions into one thing but still allow for type information to be err recorded in the code?","width":907},{"text":"And the answer is that c++ provides syntax for passing as a parameter hah my gosh type information, type information into the function.","width":919},{"text":"Okay? Alright, so how does this work?","width":273},{"text":"I have my same main except that I'm writing a single swap function.","width":504},{"text":"The way we, the way we tell the system exactly how we want swap to work is we have this alternative syntax for, alternative syntax for parameterizing type,","width":1085},{"text":"and we put it between angle brackets.","width":108},{"text":"So first you have the type parameters and then you have the value parameters, okay?","width":377},{"text":"Similarly here we would do char.","width":264},{"text":"And I'll tell you right now that if you forget to do this, when the compiler can it will infer it for you.","width":599},{"text":"So sometimes it's not the case that you'll see those angle brackets even for a templated class.","width":453},{"text":"Okay so the system can infer it , it will.","width":181},{"text":"Okay.","width":64},{"text":"So now that's how you use these template functions, how do you define them?","width":326},{"text":"Well you prepend the function signature above the, above the first line it becomes the first line with this keyword template.","width":695},{"text":"This is a keyword.","width":237},{"text":"Class which is also a keyword but it could be typename instead.","width":742}]