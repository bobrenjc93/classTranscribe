[{"text":"(crickets)","width":512},{"text":"Ok, got it. Okay! Any questions about that? This is really all we're going to discuss in the context of return values, these two warnings!","width":1088},{"text":"Honestly, you are not going to see returning by reference very often because you can't return a local variable by reference, you can't return a parameter by reference, I could not heresay return s because it's the same issue, s is going to go out of the scope.","width":1664},{"text":"So what can you return by reference? What could you return by reference? ","width":384},{"text":"What could you return by reference? Does anybody see it, it's a little puzzle?","width":640},{"text":"Yeah?","width":128},{"text":"You could return a global variable, hmm?","width":320},{"text":"You could? Do we know how to refer to global variables at this point? Ahhh I don't know!","width":768},{"text":"Yes you could return a global variable there, because that variable, that reference, is not going to go away.","width":320},{"text":"So anything in the external scope.","width":256},{"text":"Anything else?","width":64},{"text":"Yeah?","width":64},{"text":"So if something were in the heap, you could return its memory address, sorry, you could return it by reference, right?","width":640},{"text":"Problem is often times we don't have a name for those things, often times we don't actually have a name for the values in the heap.","width":512},{"text":"So that's a little harder, okay?","width":128},{"text":"Anything else?","width":128},{"text":"Yes?","width":320},{"text":"The parameter as it is is like a local variable.","width":256},{"text":"But there's a big hint there: the parameter as it is is like a local variable, that means it gets cleared off the stack too.","width":704},{"text":"Very good. So if I pass something in by reference, if I pass something in by reference then it becomes another name for the value in the outer scope and so I can pass that one back by reference here because then that would mean we're basically referring to c.","width":2048},{"text":"Any question about it? Is it okay? Alright.","width":256},{"text":"I think reading this and becoming comfortable with references requires just a little practice and the more code you see/write, you'll become more fluent with it.","width":960},{"text":"I remember looking at C code and not being able to figure out type information, just not being able to do so.","width":576},{"text":"And now, I'm like, boy, it's not that bad!","width":192},{"text":"Yeah?","width":192},{"text":"Yes, right, so the error is basically non-existent. ","width":320},{"text":"You're only lucky if you get an error, otherwise it's just unreliable.","width":320},{"text":"So the question is, when I return w through that reference, what is left on the stack?","width":1216},{"text":"The answer is c.","width":128},{"text":"Basically the stack is keeping track of its top and anything below it is valid and when you pass control back, the top of the stack is moved down.","width":896},{"text":"Anything above is moved down below the local variables, so anything above it, any of the local variables, are basically invalid memory at that point.","width":576},{"text":"Alright, yeah?","width":64}]