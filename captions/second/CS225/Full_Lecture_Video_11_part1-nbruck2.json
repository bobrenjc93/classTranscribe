[{"text":"OK, so last time we were talking about inheritance and we really truly left things hanging because we basically had. We basically had.","width":768},{"text":"Talked about the existence of abstract base functions, I'm sorry, abstract base classes, ABC, and we said abstract base classes are classes in which some of the functions are not defined. That feels to me like, you know, we left it on a cliffhanger. Well, if they're not defined, where are they?","width":1536},{"text":"Where are they? Well, we did talk about the fact, I guess, that they are implemented in derived classes.","width":640},{"text":"That is the only place. OK? So here's the example, we have this abstract base class, you can tell because it has these pure virtual functions. Just reminding you of the vocabulary.","width":960},{"text":"Here, there it is, pure virtual fun-ction. I better put it there, that's just too, too weird. OK. Pure virtual function","width":704},{"text":"Um, there's the example, and here is a a derived class. Here is a derived class. Now, the point is, and you can see that the implementation is done here. The point is that I could not declare a class rose that neglected to implement any one of those things.Â This serves as","width":1664},{"text":"a prescription for implementation. Any question about that? Is that clear? So the base class serves","width":448},{"text":"as a prescription for the functionality and implementation of a derived class. Should I write that down? OK. ","width":448},{"text":"Alright, I will. Alright, so the abstract base class serves as a prescription for the functionality of any derived class. ","width":1856},{"text":"OK, so in our previous example, where, you know, that we talked about the fact that, uh, we talked about polymorphism. Like a ball could have a display function, but a planet could have a display function as well.","width":1152},{"text":"um, this is a way of saying that every derived class must have a display function and we'll see in a minute, um, an example where that is pretty cool.","width":704},{"text":"Alright, any questions about what you see here neglecting this blue box, the next thing we're gonna talk about is this blue box, so anything, yes?","width":576},{"text":"Uh-huh. Uh-huh. Yes. No, you do not have to use any kind of keyword to overwrite it, you're already saying. Keyword overwrites? No. No.","width":1472},{"text":"No, no, no, no. I do not have to. This is a straightforward simple, nothing else is necessary, OK. Alright, anything else about this?","width":704},{"text":"Yes? Right, yeah we don't have to here. That's right, right. That's right.","width":512},{"text":"OK. Uhh, let's see. So lets talk about how we use this then. You can imagine, well, let's talk about how we use this. Can we use this? Can we declare a flower? No we cant. There shall be no more flowers and the reason for that is simply that","width":1216},{"text":"flower is not a complete class name. Flower is not a finished class. Can we do this?","width":512},{"text":"Sure, of course, right. This is. Now we have all the functionality we need, so this is fine.","width":448},{"text":"How about this one, can we do this. OK? We can still do this one so that might be a little counter intuitive. We can't have a flower, but we can have a flower pointer and the reason for that is we already said that a declaration like this OK.fptr equals new flower.","width":1536},{"text":"And it looks like I only have a default constructor there. OK? Any question about it? Yes?","width":832}]