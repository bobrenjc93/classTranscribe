[{"text":"Yes, right because it those go off the stack, those are free for you. Yes? Uhm yeah because its an array. Okay, you need the brackets because its an array. If it were just a pointer, if we had instantiated this, as just a string pointer, right a pointer to a word, then you wouldn't need the brackets, you would just delete it. So in general, your delete should match your news. Whatever kind of new statement you use to create the thing, usually in the constructor, you're going to use a similar thing in your destructor","width":3008},{"text":"Any questions about that? Yeah? It's called right after the return. It's as this execution completes and control is passed back to calling function. Alright. Any questions, you good? Yeah? Oh my gosh there is so much bookkeeping for you, we are so lucky right, like your grandfathers, my parents look at me do that, your grandparents, in computing, my parents in computing, they think that life is way too easy for us. Actually it's probably my grandparents, your great grandparents. They think computing is way too easy for us, and in fact you know, the fact that we don't actually have to keep track of what variables we're using ourselves is just ah, you know we're not authentic programmers. So the early days of C were pretty harrowing I think.","width":5056},{"text":"There's a ton of bookkeeping going on and part of what they keep track of is what amount of memory is associated with each variable. And you'll learn about it with future classes because that's what generations do right, they inflict the pain of previous generations on the current. Alright any questions about it?","width":1408},{"text":"Okay I have another story to tell you here. I'm going to take you through another little piece of code. Here's how this piece of code goes. This time I'm going to declare a sphere pointer b, so here's b. And I'm going to ask for a new sphere. Now we've made a constructor for a sphere, we made a constructor for a sphere that sets up a default sphere to look like this. So when I say new sphere, that constructor is called for us. So at the end of this statement, its perfectly reasonable for me to draw this picture, making note of that fact that the sphere constructor was invoked for us, not the copy constructor, the no argument constructor.","width":3904},{"text":"Okay. So any question about that? Okay. Now, let's look at what happens when we say delete b.","width":1088},{"text":"What do you hope happens when you delete b. When you say delete b what do you hope happens by default. What do you hope happens. ","width":704},{"text":"Allllll of this memory. Alllllllll of this memory is given back to the system right? By default, without the destructor, only this part is given back. No dynamically allocated memory, no memory allocated with a new is given back","width":1280},{"text":"So again, we're responsible for writing a destructor that makes that happen, this is the same destructor it just happens again","width":1152},{"text":"So if you remember that code looked like this ","width":64}]