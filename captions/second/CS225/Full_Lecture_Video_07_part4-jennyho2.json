[{"text":"","width":640},{"text":"Ok, got it, ok, any questions about that? ","width":320},{"text":"This is really all we're going to discuss int he context of return value, these two warnings.","width":512},{"text":"Um, on honestly you are not going to see returning by reference very often.","width":512},{"text":"Because you can't return a local variable by referece, you can't return a parameter by reference, because that's kind of the same, I cannot say return s because it's the same issue s is going to go out of scope","width":1024},{"text":"So what can you return by reference? ","width":320},{"text":"What could you return by reference.","width":128},{"text":"","width":347},{"text":"What could you return by reference, does anybody see it? it's a little puzzle","width":256},{"text":"","width":256},{"text":"Yeah? You could return a global variable, hmm","width":320},{"text":"You COULD. Do we know how to refer to global variables at this point? ehhh I don't know!","width":512},{"text":"yes, you could return a global variable there because that memory address, that reference is not, that memory that it represents is not going to go away, so anything in the xternal scope you could. ","width":768},{"text":"y","width":259},{"text":"So if something in the heap you could return it' by reference, the problem is that often times we don't have a name for those things, we don't actually have a name for the values in the heap","width":1088},{"text":"So it's a little harder ok?","width":220},{"text":"","width":448},{"text":"The parameter as it is is like a local variable, ok? But there's a big hint there","width":435},{"text":"The parameter as it is is like a local variable, that means it gets cleared off the stack too","width":448},{"text":"","width":256},{"text":"Very good! So if I pass something in by reference, if I pass ","width":448},{"text":"If i pass something in by reference, then it becomes another name for the value in the outer scope, and so I can pass that one back","width":896},{"text":"By reference, here, because then that would mean we're basically referring to c","width":384},{"text":"ok? any questions about it? is it ok?","width":320},{"text":"Alright.","width":128},{"text":"I think reading this and becoming comfortable with references requires just a little practice and the more code you see and the more code you write, you'll become more fluent with it. I remember looking at c code","width":960},{"text":"And not being able to figure out type information. Just not being able to do so, and now I'm like boy!","width":448},{"text":"It's not that bad!","width":256},{"text":"Yes! right, so the error is basically non existent","width":320},{"text":"you're only lucky if you get an error, otherwise it's just unreliable","width":384},{"text":"yeah","width":320},{"text":"","width":512},{"text":"So the question is, when I return w though that reference, what's left on the stack? and the answer is c","width":576},{"text":"Basically, the stack is keeping track of it's top and anything below it is valid and when you pass control back ","width":640},{"text":"the top of the stack is moved down. Anything above it is moved down below the local variable, so anything above it, any of the local variables are basically invalid memory","width":704},{"text":"alright yeah?","width":256},{"text":"","width":192}]