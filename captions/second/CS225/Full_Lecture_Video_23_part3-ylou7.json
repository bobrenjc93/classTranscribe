[{"text":"Because this works, because we. ","width":238},{"text":"This that right? Yes, we didn't do a dereference there, yeah, yeah, sorry. ","width":747},{"text":"Yes we do, yes we do. Oh, no we don't. ","width":222},{"text":"No, cause it is not empty, we didn't change...Oh, yes we do, absolutely we do. ","width":374},{"text":"I'm confusing my empties with my NULLs.","width":169},{"text":"We absolutely do need it, because what you are thinking what I was thinking is that by putting a NULL there, the tree is still empty. ","width":486},{"text":"But it is not. ","width":79},{"text":"So, on that, oh...on that first iteration, on that first iteration here, the queue is not empty, right? ","width":826},{"text":"It's not, it has a NULL on it, cause we put it there.","width":501},{"text":"Croot, yeah that's true. ","width":374},{"text":"Right, right, right, right, right, that's the right correction. ","width":304},{"text":"You still need to do it, it's just the wrong test case, sorry.","width":241},{"text":"Okey, have I completely wrong with it? ","width":255},{"text":"You can save for like first 10 minutes of the next hour and then it will be like all smooth, but there will be no jokes, because when I like accidentally make a joke in here and try to tell it in the second hour, total flat. ","width":852},{"text":"Like the whole algorithm's track thing, I thought that was kind of cute, right? ","width":301},{"text":"Second hour? Totally fell flat, totally. ","width":374},{"text":"Alright, I'm done. ","width":319},{"text":"So the question is about how quickly these things evaluate? ","width":385},{"text":"How do you know that enqueue and dequeue doesn't happen super quickly? ","width":244},{"text":"Right? So we are talking about the difference between constant factors here, and asymptotic analysis. ","width":435},{"text":"Eh, the actual difference between running time on these thing depends on you know, whether you are running this in a cloud, whether you have implemented your queue as an array or linkedlist, it depends on lots of different things. ","width":1037},{"text":"But what we are arguing over is constant factors. ","width":271},{"text":"So I'm saying that the inherit value of the algorithm which we measure ignoring constant factors is not different one way or the other. ","width":714},{"text":"It's always reasonable when you have two asymptotically equivalent algorithms, it's always reasonable to gave them a head-to-head run, simulated run in your context if it real matters how fast, how concretely fast they are. ","width":1252},{"text":"Okey, if you are, em... yes, right. ","width":270},{"text":"But here, we are mostly talking about asymptotic performance. ","width":229},{"text":"Okey, does that, is that good? Okey. ","width":127},{"text":"Alright, any questions about this? ","width":143},{"text":"Did I clarify that first thing, so you do have to have a conditional, and the conditional should be around whatever you put in the queue, and I just","width":800},{"text":"leave an auto pilot, sorry. ","width":179},{"text":"Alright, any question about it? Okey, em... I don't remember what comes next, let's see. ","width":357},{"text":"Oh! The conversation we just had about binary trees and about traversals, was really more one of implementing an algorithm. ","width":767},{"text":"We are going step back for a second and talk about an abstract data type. ","width":275},{"text":"I think I am coming to believe, or coming to feel perhaps, that this abstract data type is the most important one that we use as sort of day-to-day programmers. ","width":921},{"text":"And the genesis of my feeling about this dictionary comes from my affection for python in getting things done, okey? ","width":622},{"text":"So I can not say necessarily that it will be apparent how powerful these things are in the context to be applications we do, but there is classic understanding that we will play into it that when you are programming in other languages, you will go \"oh, I'm so glad I know this staff\", okey? ","width":1429},{"text":"Alright, so the abstract data type that we are going to be interested in is a dictionary, okey? ","width":350},{"text":"The interface to a dictionary is at the bottom, we are gonna insert, remove and find by a unique identifier called that we commonly refer to as a key, okey? ","width":910},{"text":"So, the abstract data type itself is consists of these, the data looks like key value pairs, and the interface, the functionality of the ADT is insert, remove and find by the unique identifier, okey? ","width":1362},{"text":"So, I want to speculate for a second just cause it's kind of fun to do so on if I have the following data, how would be, how would seem reasonable to implement a dictionary? ","width":1199},{"text":"Okey, so my data here is a locker number, this is my ops, you don't have to be afraid of it anymore. ","width":621},{"text":"This is my key, and the values that I'm going to put into the dictionary or attach to each identifier, I'm gonna refer to here as my data though it's commonly refer to it's value. ","width":1152}]