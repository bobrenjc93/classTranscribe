[{"text":"What do you think?","width":64},{"text":"Blake.","width":254},{"text":"You like it or no?","width":128},{"text":"This one's a little harder to articulate why you don't like it, right? So these are memory addresses. Do you wanna say something? Right. Very good. Very good. Good point. So he says well how do you know the memory address of x and that's exactly the right point. Remember we said the system gives you memory addresses in stack memory, right? It says here it is. We're gonna put this right here.","width":1974},{"text":"At the programatic level, at the client code level, we don't know where that is. We have no idea where that is.","width":384},{"text":"In fact, those memory addresses are designed for the system to use.","width":448},{"text":"And you know what? Their representation reflects that.","width":320},{"text":"The representation of the memory addresses themselves are in hexadecimal. They're almost unreadable and I for one don't ever want to know where x really is.","width":896},{"text":"Now, I understand that if you are concerned with the low level behaviors of the machine, you  care. But we will not care.","width":576},{"text":"We are gonna let the system handle its memory address representation.","width":345},{"text":"So, what we need this so we're not gonna do that either. Hold on, so we're not gonna do that either. And the reason is that we don't know where x is nor even how to represent a memory address.","width":1408},{"text":"[no audio]","width":640},{"text":"Okay, so the solution to this problem involves an operator called the address operator.","width":448},{"text":"[no audio]","width":384},{"text":"And here's how it works.","width":128},{"text":"I can assign to p the memory address of x.","width":704},{"text":"So that ampersand when it modifies a variable pulls off the memory address and returns it.","width":457},{"text":"So that they can be assigned to the value of p","width":320},{"text":"Any question about that at all?","width":128},{"text":"So the result and notice at the programatic level you never actually need to know what this value is. You're effectively just referring to it through that ampersand sign.","width":896},{"text":"Any question about it? So what happens in the backside is again what happens to be represented by a20 here is returned.","width":635},{"text":"And then assigned to p","width":192},{"text":"So, in the end it looks like this. Now, I happened to like a different mechanism for drawing this. A different way for sketching what this looks like. I like to do it like this.","width":817},{"text":"When a pointer is declared, I like to make a little box with a dot in it. When other variables are declared, I like to make rectangles because they're kind of bigger somehow. And then, when an assignment like this one is made, what I'm saying is that p points to x.","width":1680},{"text":"I believe x had a 5 in it.","width":256},{"text":"Alright, now, here's the thing.","width":256},{"text":"Right now, these pointer variables are not particularly useful to us.","width":576},{"text":"So let's pretend for a second that we had this memory setup but we happened to not have x labeling that space and we'll see many more examples of this later but let's think about this now. So suppose we didn't have x labeling that space.","width":1472},{"text":"Is the setup completely worthless to us?","width":384},{"text":"No, so if we have a pointer variable, probably we are interested in the value of thing we're pointing to. The value of the thing we're pointing to. We can get at that value using yet another operator called a dereference operator.","width":1383}]