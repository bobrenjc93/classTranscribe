[{"text":"The address of w. okay? The address of w and then, so, this right here, this eventually becomes the address of w.  This function call is sort of replaced by return value. Right? In the flow of the program. Then we assign it the value of d. Is this syntactically in type wise correct?","width":726},{"text":"Is work okay type wise? Yes, it does. 'd' is a student pointer 'w', this is the address of the student, those are the same thing. So type wise this works fine.  But let me ask you this.  What happens to 'w,' the second we leave the function? What happens to 'w'? Yeah? That's right!  The system does you a favor.  It clears the right off the stack.  Boom boom done.  Right? So 's' and 'w' are effectively gone because they were local to the function.  So what about the address of 'w'?  How do you feel about the address of 'w' out here in the calling code? Daaah!  Right? It's no longer valid!  Now will it work? Will this code work?  Most of the time, maybe? It's probabilistic thing.  You are rolling your die here.  So, the point of which this assignment is made, the point of which this assignment is made relies on the 'w' that is no longer in scope.  So, but, 'w' is not in scope.  So this is a horrific bug.  Why is it horrific?  It's worse than insidious.  Why is it horrific?  Because it might work a lot of the time you probably won't get a seg fault.  Another parts of, other times, you might get a seg fault, other times you would just get a value that you don't understand because that stack has been reassigned to be something else by some other process. Okay?  Alright.  So what was the error here?  What did we do wrong?  What did we do wrong here?  Yes?  We used stack and we returned what from the stack?  A memory address of something on the stack.  That's right.  We returned the memory address of stack variable.  Now returning that thing by value would have been fine.  Returning 'w' by value would have been perfectly fine.  So if 'd' were instead just a student and we had just returned 'w' here, then things would have worked fine.  That's returning by value, yes?  So the address is memory address.  It's the location in memory.  And, we returned it because there's nothing that says we can't return something of pointer type.  Right? We returned it pointer type.  So that types match up across this assignment statement.  This is pointer, this is pointer.  No problem.  Right?  Except that the thing that we instantiated that pointer with that, is, ephemeral, kind of.  Alright, any question about it?  Is it okay?  Alright.  That's the, that's the warning.  Don't return a local variable memory address, local variable's memory address.  Okay fine.  Uh, let's do something else.  Return by value would've worked fine here.  Returning a student would have worked fine.  Let's do something else.  Uh, let's talk here about... How would you describe that?  What have we done here in this function?  Are we returning a student?","width":1826}]