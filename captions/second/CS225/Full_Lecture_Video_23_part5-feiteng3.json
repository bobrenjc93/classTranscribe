[{"text":"Do you like it?","width":64},{"text":"No. right?","width":192},{"text":"Why not if we are gonna do this. Why not store our data?","width":384},{"text":"Linearly right? Its possible that we are traversing the entire structure","width":384},{"text":"If we have the potential for traversing the whole structure","width":256},{"text":"we might as well be storing our data linearly","width":192},{"text":"Any question on all about that?","width":128},{"text":"Alright fine. So this is a bad ides. We'll put a sad face here. OK","width":512},{"text":"Let's do this instead","width":128},{"text":"Take a look at this tree and tell me everything as you can that's interesting about it","width":256},{"text":"I heard you kinda muddling the word sorted. Thats good.","width":896},{"text":"That's good observation and what sense is it sorted?","width":512},{"text":"Somebody raise their hands and explain to me how it is sorted","width":64},{"text":"Ye Howdy?","width":192},{"text":"Ye. The smaller value are on the left and larger value on the right.","width":448},{"text":"You can almost do a vertical line text here right?","width":192},{"text":"Like left to right. If there are no ties. If things are you know things are set up approriately","width":576},{"text":"You can kinda move left to right and you are essentially over or essentially moving in a increasing value over the nodes in the structure.","width":320},{"text":"","width":64},{"text":"Ok Given a careful drawing of these things that'll always be true. ","width":448},{"text":"Alright. Any question about the observation?","width":256},{"text":"The order of the structure? ","width":128},{"text":"Ok. This thing is called a binary search tree.","width":384},{"text":"And we are going to use it as the implementation of our next implementation of dictionary.","width":704},{"text":"We are gonna use it as our next implementation of dictionary.","width":192},{"text":"Oh look at me not translate between powerpoint and powerpoint very well","width":448},{"text":"Ok so a binary search tree aka BST","width":320},{"text":"Is a binary tree and T is either empty T is not empty","width":512},{"text":"These are almost always are cases for definition of particular binary trees are specifications of binary trees","width":512},{"text":"And the additional criteria. The constraint is that x is an element of TL","width":768},{"text":"So if x is in the left subtree then","width":320},{"text":"implies every elements in left subtree has value","width":640},{"text":"less than the key of R","width":512},{"text":"Ok any question about that?","width":512},{"text":"Gonna make sure I said everything I need","width":128},{"text":"Alright so you can complete the other line","width":128},{"text":"A node in the right subtree has be greater than key R","width":448},{"text":"For any x in the right subtree","width":256},{"text":"The key of x is greater than the key in the root","width":384},{"text":"Ok Any question?","width":320},{"text":"Where is the equal two case go?","width":192},{"text":"Where is the equal two case?","width":192},{"text":"It has to be R right? Cause these are unique values.","width":384},{"text":"OK. So the only values are. ","width":256},{"text":"So if x is equal to R it is the root. ","width":448},{"text":"Because they are unique values","width":128},{"text":"You can choose arbitrarily otherwise as long as you do consistently and then you have to be careful about some of the other algorithm we use this for.","width":512},{"text":"Ok Furthermore Furthermore","width":256},{"text":"Here's an example. We're not done","width":192},{"text":"Because here is an example of something that satisfy that condition but is not a binary search tree.","width":640},{"text":"So here is an example","width":192},{"text":"37 32 15 53","width":576},{"text":"This satisfies that definition.","width":320},{"text":"But it is not a binary search tree.So how do we finish the definition? ","width":512}]