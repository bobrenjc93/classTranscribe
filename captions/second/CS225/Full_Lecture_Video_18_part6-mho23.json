[{"text":"It does this and it does this. so what are you thinking, it kinda looks like? it's got. yes? yes! exactly those operators are overloaded inside the iterator class. that's what the iterator class does, it overloads those operators so that you can do, can work this magic. now the question was, why don't you do this instead and the answer is that that would require that to be overloaded and i'm not sure if it actually is for this standard template library list class. i just don't know ok. um iterators promise that the plus plus will be overloaded and that the asterisk will be overloaded so you can both move this thing and look inside your structure. that is a promise from an iterator k? this is a good time to say uhh where that promise came from like it's a promise but who said, who said thats a promise? So an iterator is a notion that was added onto the language later because it was so frequently deployed, it's called the design pattern.","width":5824},{"text":"It's not fundamentally part of the language but it is a part of the cultural experience of the language to know what it is. So what is an iterator, anybody you talk to about c++ will know what an iterator is. And it is formally described but only functionally not as an inherent part of the language it self. so there is this conventional agreement that iterators will always implement something that increments and something that gives you its value. Nathan? Yeah? right. So how do you know you're overloading dereference, or multiplication and the answer is in the number of arguments, so when you dereference, so remember that a function is in part declared by its parameters, i can have two functions of the same name but if they are parameterized differently, then they are different functions, and the same thing is true for dereference operators. it has one and in fact in this case, effectively there are no arguments, it is just the thing. K. and instead of the binary operator. Yeah? could i accomplish this same thing with primitive types? not nearly so elegantly right? So i could do this if i implemented my own list class with a dynamic array and made it but so i could do this in C is sort of what you're asking me basically right? but i wouldn't want to. i wouldn't want to, this is one of the elegances,  elegancies from having C++ ok? Alright any other questions about this right now? ok alright. so uhh, my question is for you, is what is printed out? this is cout, this is the contents of our list, what is printed out? k so the names so we get giraffe, and leaves, and then the next time through we get penguin, and fish and then... do you? ","width":10560}]