[{"text":"Uhh, so the question is how come the ball class can access the radius. How do you know it can? Did you say can or can not?","width":576},{"text":"The ball class, the ball class member function can not access the radius.","width":576},{"text":"ball(double r string n). Where? There is just a comma missing there.","width":896},{"text":"OHOHOH, very good! We have to invoke the sphere class constructor in order to do that and it has to be explicit.","width":448},{"text":"So we can not, the constructor, that's really a good point actually, so what he detected and is really germane is that that ball class constructor has a problem.","width":896},{"text":"Right? It can not take a radius and set the radius because it doesn't have access to this.","width":384},{"text":"But what it will do and you'll see is it going to call the, explicitly call even, the sphere class constructor, OK? Does that make sense? Is that answer it? Sorry, I didn't...I don't think anybody ever pick that up before. Good job! Yeah?","width":1216},{"text":"Yep! Yep! The base class of , the base class member can certainly access the protected values, they are just like they're sitting in here.","width":576},{"text":"OK? Alright! Anything else about this? There is, there is a hint. Bye! See you later! (Laugh in the background). Mean mean mean.","width":1024},{"text":"OK, anything else about this? Yes? Yep! That's right! Yes, but it does exist, we are going to talk about that in just a second. So the question is kind of: \"OK, what's happening in memory?\" and I think that the following will clarify some of that. I can draw you some picture that will clarify some of that.","width":1664},{"text":"First of all, let's trace some code, OK? So, start with main here, start with main. We are just gonna declare a sphere, and it gonna has a radius and nothing is surprising about that, right? We can still, of course, use that base class to declare an object, there's nothing that says we can not, OK?","width":1536},{"text":"Similarly, we can declare a ball, now, subject to the constrain, that the ball class can construct a sphere, it does so and the way to think about it is in fact it builds a sphere first with all of it staff whenever it has, and then adds to it, it adds to it the string corresponding to the name in memory.","width":2176},{"text":"OK, so build the sphere class thing first and then it adds to it what it means to. OK so ball is a sphere with a little bit more added on to it to make it more specific.","width":896},{"text":"OK. Can I say b.getVolume()? Would you expect... first of all, what class member function is getVolume()? Sphere class, that's right. Its volume kind of thing, so its member functions are in the sphere class. Would you expect me to be able to do that?","width":1408},{"text":"YES, yes, yes, yes. That's what most of this is about, is access to the member function of the base class through the derived class, OK? No problem. What do you think happens here? Anything surprising about calling printVolume?","width":1280},{"text":"Is it OK?","width":192},{"text":"Anything surprising about PrintVolume there?","width":256},{"text":"Yeah? Yeah, you do. Right there. Yeah, yeah, yeah, good. I love the easy ones. (Laugh).","width":1024},{"text":"OK. Nothing surprising about it right? It all just talking about spheres. Yeah?","width":295}]