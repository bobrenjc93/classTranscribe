[{"text":"Okay, I want to pull you back together. This one is just information.","width":384},{"text":"This is a type mismatch. You can't delete a non pointer type","width":297},{"text":"This one is a memory leak","width":102},{"text":"It was just like the very first memory leak picture that we did","width":256},{"text":"This one is insidious because everything here works fine but it's probably not what you intended.","width":512},{"text":"Any time you refer to memory that has been deleted you have a problem","width":512},{"text":"And then this is the last one I wanted to ask everybody to think about very quickly.","width":512},{"text":"Let me ask you a question: is there a type mismatch anywhere? Do you see a type mismatch?","width":503},{"text":"Is everything okay type wise?","width":154},{"text":"Yes","width":64},{"text":"Because, if you dereference p, the result is an integer, so across this assignment statement you have an integer on the right and an integer on the leftt","width":784},{"text":"So is this box fine?","width":134},{"text":"No it's not fine, why not?","width":262},{"text":"P doesn't have any memory associated with it and you dereferenced it","width":375},{"text":"That's going to give you a seg fault","width":220},{"text":"Any questions about any of that?","width":192},{"text":"Is a type mismatch a compile time or runtime error?","width":360},{"text":"That is, am I gonna get that error when I invoke clang on my system or am I gonna get that error when I invoke a.out?","width":689},{"text":"Clang, this is a compiler error","width":192},{"text":"Those are the easy ones","width":399},{"text":"How about the bottom right box? Compiler error or runtime error?","width":587},{"text":"Am I gonna see that when I invoke clang or when I invoke the output file a.out?","width":414},{"text":"Yeah, this is a runtime error.","width":290},{"text":"That's infortunate, right? You don't even know about it until somebody's using your software, using your application.","width":538},{"text":"The problem with the first two is that they are both runtime errors with no notification. You have to be using debugging tools in order to even find them.","width":928},{"text":"So these are runtime errors but I'm gonna put errors in quotes.","width":532},{"text":"Because there is no error message.","width":547},{"text":"Let's move on.","width":95},{"text":"So somebody asked what happens to the pointer variable p and we talked about the fact that it can be reassigned.","width":466},{"text":"What I'd like you to do for a minute is to tell me, look at these two pieces of code, and tell me what's the difference functionally?","width":718},{"text":"What do they do differently?","width":168},{"text":"Take a couple minutes and look at the code and tell me how are they different functionally, what do they do differently","width":1344},{"text":"Main functions are identical","width":745},{"text":"You can assume that string is a standard type so we can actually do that. If we pound include string we can actually do this.","width":776},{"text":"So what's the difference functionally between these two lines or code or two pieces of code? Yes?","width":576},{"text":"[nothing]","width":576}]