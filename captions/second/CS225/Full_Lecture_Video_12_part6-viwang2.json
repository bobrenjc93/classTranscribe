[{"text":"I'll write it, so listNode pointer again, template's missing, you would have to put it there","width":797},{"text":"listNode pointer n = new listNode, what should we put in it?","width":492},{"text":"e, good! And so now, we've got this box called n, that looks like this, and there's a cow inside, alright? For our little example, now what?","width":1088},{"text":"n's next equals curr, good, and then curr equals n, right, isn't that what we wrote on the previous page?","width":1472},{"text":"This code is broken, is that what you're going to tell me?","width":320},{"text":"Oh, very good. Yeah this code is broken. Here's why: I slid one by you, okay?","width":768},{"text":"And we're going to see this lots of times, so I want to kind of go over it carefully.","width":320},{"text":"Alright, here's the deal. This code, as it's currently written, takes a pointer by value","width":576},{"text":"That means a copy is made of head, okay? Like this, we happen to call it curr.","width":576},{"text":"Okay? Through our manipulations, we assign curr to point to here, and this one points here, and then when execution stops,","width":960},{"text":"curr goes out of scope. So what happens?","width":384},{"text":"Curr goes out of scope and n goes out of scope, so we no longer have a hole on the front of this list anymore, right? On the front of this chain.","width":768},{"text":"Okay? We no longer have a hold of this chain from the front anymore.","width":320},{"text":"Okay. So how can we fix it? ","width":512},{"text":"What we want is for curr to be a different name for head. Then, when we change curr we also change head, the way to do that is by passing by reference","width":768},{"text":"Any question about it? Now, do I like this code? No, I don't, there's actually a better way of doing this, but I wanted to bring this potential for error up to you ","width":640},{"text":"If I were really writing this code, I would return a pointer that is the result of this thing being inserted at the front, rather than doing it by side effect, ok?","width":960},{"text":"Ok, alright, any other questions about this? How long does this take?","width":64},{"text":"How long does this take, what's the running time of this, ooh it's our first running time question!","width":640},{"text":"Okay, let's take a look at what the code does. The cycliant point here is that there is no iteration and there is no exploration, recursive exploration, okay?","width":960},{"text":"It is an assignment statement followed by another assignment statement followed by another assignment statement, okay? ","width":512},{"text":"Each of those will take, effectively, a fixed amount of time. Choose the slowest of them, probably the new listNode's going to take the slowest, I don't care.","width":576},{"text":"Choose the slowest of them, think of that as your constant amount of time and understand, then, that you can bound the running time of that entire function by 3 times that largest amount","width":960},{"text":"Now, the way we write this, is to say that it is constant even if we don't know what it is and even if it changes across machines","width":768},{"text":"Or, we write it as big O of one.","width":256},{"text":"Okay, so and the observation, the sort of back of the envelope observation, says that there's no iteration, no exploration.","width":960}]