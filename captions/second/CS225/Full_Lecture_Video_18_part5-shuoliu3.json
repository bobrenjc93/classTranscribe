[{"text":"Because of the assignment statement. That's right.","width":448},{"text":"So, zoo is a list class thing. It must have.. oh is begin public or private?","width":256},{"text":"Public.That's right! This is a client code where we are using that function.","width":256},{"text":"So, begin is a public function in the list class","width":448},{"text":"returns something of type iterator. Where the heck did that come from?","width":320},{"text":"Where did iterator come from?","width":192},{"text":"It's a type. Where does it live? Also in the list class, that's right, it's a new type of thing, lives in a list class.","width":768},{"text":"Is it public or private? Public. Has to be. We are using it, right? ","width":320},{"text":"So the standard template library's list class is actually much*4 more sophisticated than ours.","width":320},{"text":"because it's got all these sexual stuff. It has this iterator class that we get to use if we want,","width":704},{"text":"and these other functions that help us set up our iterators, OK? Alright. Fine","width":384},{"text":"Just as if IT were an integer, will allow ourselves within the for loop to increment our iterator, ","width":832},{"text":"so we can increment the iterator just like we would if it were a integer.","width":512},{"text":"But there are other things we can do within an iterator.","width":448},{"text":"Take a look the next row.","width":256},{"text":"What on earth is going on here.","width":320},{"text":"what on earth is going on here.","width":320},{"text":"We dereferenced an iterator. What do you expect that to get you?","width":448},{"text":"If we are asking for a name, what do you expect to come out of here.","width":192},{"text":"An animal, right? An animal. ","width":512},{"text":"Who's animal? Where was it?","width":64},{"text":"It's in the list class. It's in the list, right? OK.","width":448},{"text":"So what is an iterator","width":192},{"text":"It's something that is stepping through the list. It allows us to move it, and allows us to deference it.","width":512},{"text":"It allows us to ask for its value.","width":256},{"text":"OK. That's cool. Yeah?","width":448},{"text":"So is an iterator an address or something?","width":448},{"text":"Any other...Raise your hands if you agree with that question, if you are like what the heck.","width":64},{"text":"about this. OK.","width":128},{"text":"So here is the thing, you don't get to ask. You don't get to ask how it is implemented","width":646},{"text":"You are asking me","width":64},{"text":"You're asking me....","width":448},{"text":"Think about this for a second.","width":512},{"text":"He is asking for on behalf of all of you, it's not just him, he's asking about the implementation","width":128},{"text":"And I'm saying: you don't get to know how it is implemented. Why? What principle allows me to do that","width":448},{"text":"Encapsulation. That's right.","width":320},{"text":"The implementation of that iterator is encapsulated away.","width":192},{"text":"All we know is how to use it, OK? ","width":448},{"text":"So swallow that pill. Swallow it. Go ahead and ask.","width":320},{"text":"Yes, Yes","width":192},{"text":"There is this notion of next. Now in the list class you have this adjacency but, and you kind of  have this notion of first and second and third.","width":832},{"text":"But, you know, we will see structures where the ideal of next  is a little more ambiguous.","width":448},{"text":"I don't know. Should I go left to right? I don't know. which one is the next one?","width":64},{"text":"And an iterator promises it will give you your stuff back out of your structure in some order.","width":448},{"text":"OK. For list, it promises to step through from beginning to end in a predictable order.","width":448},{"text":"Alright. Yes.","width":128},{"text":"OK! So let's talk  implementation for just a second.","width":288},{"text":"How do you think this happens? What do you think this implementation kind of looks like?","width":320}]