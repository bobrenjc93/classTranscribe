[{"text":"And allocates dynamic memory. Heap memory is equivalent there. Okay any question?","width":613},{"text":"And then as we saw, a destructor typically consists of the sequence of delete statements, which means, and the way you handle that is basically to go through your private members and go \"Hey! Do I need to delete that?\" No. The answer is no. \"Do I need to delete that?\" No. \"Do I need to delete that?\" Yes.","width":1361},{"text":"So you go through each of the data members and ask yourself whether or not you have used dynamic memory. It's just a checklist.","width":392},{"text":"Okay, questions? Is it good? Okay.","width":323},{"text":"One more problem. Let's trace a little bit of code. I'm going to declare a sphere a and sphere b. ","width":647},{"text":"Okay so here's a, and here's b. And I'm gonna give 'a' value. That is, I'm gonna instantiate 'a' to be something.","width":753},{"text":"4.8, 3, and \"black and white\", \"bouncy\", and how would you characterize a soccer ball? Yeah all spheres are round, but okay fine.","width":1418},{"text":"Whatever, not worth the time. Alright, so now the question is \"What happens when we do that statement?\"","width":716},{"text":"What do you think happens when we do that statement?","width":536},{"text":"A member-wise copy. That's right. The assignment operator is by default member-wise. So again we have this groaner of a situation where 4.8 is copied appropriately, 3 is copied appropriately, and the pointer value is copied appropriately.","width":1674},{"text":"Okay so the problem is assignment.","width":384},{"text":"Okay so the problem is, assignment is member-wise by default.","width":516},{"text":"Okay, so how do we fix it? We redefine what assignment means. We solve by redefining what assignment that.","width":1056},{"text":"That symbol. Okay if haven't ever seen operator overloading before, I assert that this is not new to you.","width":744},{"text":"Even if you have not heard the phrase operator overloading, I assert that you will not be surprised by it because here is what I think.","width":900},{"text":"I think that if I write code that looks like this. If I say int a, b, c, like this and then I initialize a and b so a equals 37, b equals 63.","width":1402},{"text":"If I say that then that code at the bottom is fine, right?","width":532},{"text":"Yes?","width":133},{"text":"Good.","width":219},{"text":"And moreover, I think you will take an alternative. I think if I say double a equals 37 point something, double b equals 63 point something, you're okay with that too. Right?","width":1417},{"text":"So now, you know that what goes on behind the scenes when that operator is invoked is different in each of these cases. Right? It's a little bit different because doubles are implemented differently than integers, so this plus has to behave differently.","width":1337},{"text":"And it didn't freak you out at all. Right? You're like \"Why is she even talking about this?\"","width":326},{"text":"Well here's another thing that I think won't freak you out. I think it's true that I can say string a equals cat, and string b equals dog.","width":1380}]