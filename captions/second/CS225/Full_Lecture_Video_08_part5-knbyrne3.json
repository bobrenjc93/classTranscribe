[{"text":"And it is responsible for clearing up the dynamic array. The rest of it is taken care of. Alright, so I at least, found this a little bit confusing at first, because all of this is the result of a delete statement on a sphere pointer, right? But that delete statement invokes a function that also uses a delete statement. So there are kind of two levels of abstraction going on here. Alright, here's the secret, here's the secret, it's probably the case, so each of these things is a string. How do you think a string is implemented? What do you think the string class looks like? It's a type it has a class, it's just standard. Yeah? Yes, a character array, that's right. Is it a static array or dynamic array? Is it on the stack or the heap? It's a heap, it's a dynamic array. So inside this string class is a dynamic array, or we don't really know, it's encapsulated away from us, but we have every reason to believe it is a dynamic array. So how come I don't have to worry about that dynamic memory? Well I write this, why don't I have to say, \"Oh wait I have to clean out my strings?\" Why? Who's they? So the people who implemented string, that's right. Exactly. So strings clean up after themselves. And look what we have done, we have written it so that spheres clean up after themselves. Right? Now, if you have a class that wants to make a dynamic array of spheres, they never need to worry about it, because when spheres go out of scope, they're just gone. When you call delete on a sphere, it's all gone. No big deal. Okay? So there's multiple layers here of things that work. Alright any other questions about this? Alright, fine. Here are some sort of summery information about destructors. We don't call the destructor, we provide it for the system to use in two situations, when a variable goes out of scope, and when delete is called on a pointer to an object of type \"x\".","width":12544},{"text":"And so it's when a variable of type \"x\" goes out of scope. And it's x's destructor is never called. ","width":1152},{"text":"Okay any question about that? So, it's referring to a class, some class. Alright so now, how do we know if we need a destructor? And the answer is, if your constructor allocates dynamic memory, or if any other member function allocates dynamic memory associated with the object. So it's not just the constructor, but if any, if your object has dynamic memory associated with it, you need a destructor. ","width":1984}]