[{"text":"Where our data is going to exist in sequential positions somehow.","width":64},{"text":"That is there is a notion of what is the next piece of data or piece of candy. There is this notion of next. But we're only going to allow access to the data through one end of the structure much like a pez dispensor.","width":1792},{"text":"So this is the next kind of structure we're going to study next. It's called a stack","width":320},{"text":"And I'm going to show you really quickly a couple applications that are different than the pez dispensor application.","width":1088},{"text":"First of all, I'm going to use this as the source of my diagram for how our stack is going to work","width":832},{"text":"In these contexts, and as such im going to say the entrance to this structure is at the top and I'm going to be placing data inside of it. I guess the other analogy we hear all the time is the trays in the dinning halls","width":1280},{"text":"And I think the one I'm going to do is this sequence of function calls because I find it kinda interesting","width":1024},{"text":"I'm gonna start with this one","width":320},{"text":"so this is intended to be a sequence of functions inside a main.","width":512},{"text":"Inside main you study hard and you do good work but the process of studying hard means that you execute functions mps and exams","width":576},{"text":"etc. So this is a sequence of function calls. Main calls study hard and do go good work and do good work calls these for functions in sequence.","width":960},{"text":"Is it clear how this pseudocode is diagramed here?","width":256},{"text":"We refered to the stack as stack memory earlier on and this is what was really meant by that","width":1024},{"text":"This is why that region of memory is called the stack. When function main executes all of it's variables and parameters are set up on the stack and as they are entered in the stack, we say that they are in scope and execution passes then to study hard.","width":2816},{"text":"the second that study hard is executed, its variables and parameters are set up un the stack on top of main's.","width":1152},{"text":"in the process of execution study hard, mps are set up","width":320},{"text":"in the process of setting up mps, we have plan and then right here, the second that function plan completes execution,","width":1024},{"text":"all of plan's variables and parameters are removed from the stack, or we say they popped from the stack","width":768},{"text":"So we finished out first function here.","width":512},{"text":"and then execution proceeds to the code function and all of code's variables and parameters are put on the stack - or pushed onto the stack. Then code finishes execution and it's cleaned off, then mps finish execution and they are popped form the stack","width":1984},{"text":"And then we hit in the course of execution, exams. Exams function together with all it's variables and parameters are pushed on the stack.","width":1088},{"text":"Winging it - always good advice - pushed on the stack. Winging it completes execution so its removed from the stack, we finished exams oh and look we finished study hard, and now we proceed to do good work.","width":1472},{"text":"So you can see that memory is being reused as execution transfers from one function to another and it's kinda easy to see how the interpretation of memory can kinda get convoluted if you're not very careful to keep track of what you're doing.","width":1600}]