[{"text":"everything else has a child, so 18 has one child, 20 has two children","width":512},{"text":"20 is called the root node","width":64},{"text":"it is the only node in the tree that has no parent","width":192},{"text":"so everything has one... every node has exactly one parent","width":256},{"text":"now, a little bit trivia","width":128},{"text":"there will be, if there are","width":192},{"text":"4 pieces of data in the tree","width":128},{"text":"there will be 5 null pointers","width":192},{"text":"if you think that through like you have one piece of data you have two null pointers","width":448},{"text":"you have two pieces of data you'll have 3 null pointers because one of the","width":256},{"text":"one of the null pointers gets used up to point to the other thing, the new thing you add adds two, right","width":448},{"text":"so you're always leaving one null and adding two new ones every time you add","width":192},{"text":"so here we have 1, 2, 3, 4 , 5 for the 4 pieces of data","width":192},{"text":"the other thing that's really interesting","width":128},{"text":"all the leaf nodes","width":64},{"text":"you take them all together that's called the fronteir of the tree","width":320},{"text":"in a binary tree, half of your data is gonna be in there","width":192},{"text":"so","width":256},{"text":"you can imagine if you wanna do something to this tree","width":384},{"text":"you have a pointer to this","width":64},{"text":"you're gonna have to descend down, go looking around to find your data","width":192},{"text":"half of it is gonna be as far away as possible as it can get from the orot","width":256},{"text":"which is not very far, usually","width":128},{"text":"but that's something to think about","width":192},{"text":"now","width":64},{"text":"try to imagine in your mind how you're gonna implement this thing","width":448},{"text":"you're at the console, you've opened up vim, cursor's blinking at you, what are you gonna type?","width":512},{"text":"try to imagine that, you can look at your handouts i printed something there","width":384},{"text":"i shouldn't have done that, okay a little typo","width":192},{"text":"that should be class <T> but the slides are very forgiving compilers","width":128},{"text":"in that they don't complain if there's an error","width":320},{"text":"so this is just a standard","width":64},{"text":"we have a wrapper class","width":128},{"text":"i'm gonna call binaryTree today","width":192},{"text":"and then inside that wrapper class is gonna be the node which actually contains the data so the wrapper class handles things like maybe keeping track of the size, it needs to keep the root pointer so it knows where to enter the data structure","width":768},{"text":"and then the node class is where all these","width":192},{"text":"all these pretty diagrams come from","width":128},{"text":"so","width":192},{"text":"how's this looking for you guys? do you like this?","width":320},{"text":"it's making sense?","width":64},{"text":"alright","width":192},{"text":"now","width":64},{"text":"this is a recursive data structure, so almost every function you write on these things is going to be recursive","width":448},{"text":"you could use a for loop or a while loop","width":128},{"text":"but it's actually not as natural","width":192},{"text":"uh, how do you guys feel about recursion?","width":192},{"text":"how many of you think \"you know it'd be nice if you reviewed that just a little bit before moving on?\"","width":512},{"text":"yeah?","width":64},{"text":"alright","width":128},{"text":"i mean like \"no way man i'm sick of recursion\"","width":192},{"text":"well really, the only thing you have to do to know recursion is to understand recursion","width":256},{"text":"alright","width":128},{"text":"well let's talk about it","width":128},{"text":"i actually want to draw a recursion","width":256},{"text":"i know cinda's talked about it","width":64},{"text":"i wanna talk about it again because recursion is the second most powerful concept in all of computer science","width":384},{"text":"abstraction","width":128},{"text":"if you know abstraction, you know recursion, you are a computer scientist","width":512},{"text":"so","width":64},{"text":"you don't even need a computer","width":128},{"text":"hahahahaha","width":192},{"text":"it helps","width":64},{"text":"but you don't really need one","width":128},{"text":"alright, so i wanna talk about proof by induction","width":192},{"text":"how many of you are familiar with proof by induction, how many of you feel like \"yeah i got proof by induction and i'm okay with it\"?","width":384},{"text":"how many of you feel like \"ehh\"","width":192},{"text":"i hope it's not on the test","width":128},{"text":"alright","width":64},{"text":"so","width":128},{"text":"proof by induction, this is the wonderful thing about computer science","width":320},{"text":"we have turned being lazy into an art form","width":64},{"text":"and we've tricked people into paying us dearly for it","width":256},{"text":"so here's how it works, proof by induction","width":128},{"text":"we have a property, i'm going to call it P(n)","width":64},{"text":"so some property P","width":192},{"text":"we just give it a name cause","width":64},{"text":"i don't wanna think about a specific one right now","width":256},{"text":"n is some thing, maybe it's integers, maybe it's trees, doesnt matter","width":320},{"text":"uh, as long as you have some idea that there can be... if you have n you have some concept of what a smaller version of that n might look like, so for an integer, it's easy to make a smaller one, just subtract one right?","width":832},{"text":"for a tree","width":128},{"text":"you have this tree, how can you make a smaller tree?","width":256},{"text":"you go to the left or right side","width":128},{"text":"now you've got a smaller tree","width":64},{"text":"now this gonna turn out to be very important that you can do this","width":256},{"text":"the other thing you need is the idea that you have the smallest","width":256},{"text":"version of a tree, the smallest","width":128},{"text":"tree is a leaf","width":64},{"text":"or maybe null","width":128},{"text":"depending on how you're thinking about it, so what you do with induction","width":320},{"text":"is you say that for n=1 or whatever the smallest thing is, you prove that your property is true for that","width":576},{"text":"and that's usually really really easy, almost trivial, right?","width":192},{"text":"and the induction case, what you do is you want to prove p(n)","width":256},{"text":"now some places they'll say you wanna prove p(n+1), doesn't matter","width":192},{"text":"it turns out to be the same","width":128},{"text":"now you just assume that p(n-1) is true, you pretend that you have some grad student go off and do all the work for you, you come back with it and you take all their credit, okay?","width":640},{"text":"so","width":64},{"text":"uh, don't tell the grad student union i said that","width":320},{"text":"the uhh","width":64},{"text":"so what do you do with this?","width":64},{"text":"you use this fact to prove this fact","width":128},{"text":"you say if this is true","width":192},{"text":"then with a little bit more work, then you can prove that this is true also","width":256},{"text":"now here's the beauty of it, you did not pick a specific n","width":256}]