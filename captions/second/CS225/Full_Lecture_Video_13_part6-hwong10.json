[{"text":"...to two four, yea. So in the end it looks like four, three, eleven, five, nine. And then there's room for my heart. Okay. What do you think about this? Say it stinks. Thank you. Why does it stink? Oh my gosh. All we're doing is inserting into this puppy, and you have to open up a space?! That shifting is incredibly expensive. So this incurs an order n because it's a loop...potentially all of your data to shift. Okay. And so, this is bad. This is not a heart. It's rather a sad face. I guess you can do it like this. Oops. Yea you can do it like this. Why is that funny? If that's all it takes man, woooo haha okay. Here. There. All right. Any question about that? How else can we use a list for, um, I'm sorry, an array to implement a list? Well, you can put the front of the list out here, right? ","width":6464},{"text":"But you can kinda... But you incur the same problem so if I say insert one three. Put it here. And then one four. Then I can put four here and here's the front of the list, right? That makes sense? So here's the first item of the list. Here's the second item of the list. And then if I say one five. I can put five here and move the front of the list to there. Do you like that? Yea? How would I keep track where the front of the list is? Right? I can put it there. I can put an index there. Fine. Um, but then I'm going to say, eh, I-I'mma add a bunch of things to it: nine, eleven, twelve. And now I'm going to say insert into position, uh, I don't know. Where do you want to put it? How about six, value, um, frowny face. Okay? Where's frowny face supposed to go? Right between these guys, right? So it means I got to scoot all of these over. Okay, so there's a shift. So this one's here, this one's here, nine, five, four, and then the frowny face goes here. Okay? And again, that's big O of n. Okay. So we can't keep the front at the start of the list. We can't keep the back at, I'm sorry, at the start of the array. We can't keep the back at the start of the array. There's no good place to keep at the start of the array and honestly, you know what? We can always do insertions right, like, between sort of halfway in the middle. Right? Because those openings must occur or can occur anywhere in the list, and we can't predict it, we will always have this shifting problem. So we can't avoid the shifting problem if we allow insert into the middle of the list, so given the list interface we defined or the list ADT. Okay? All right! Any question about that?","width":10752},{"text":"So here's a better way of implementing a list.","width":576}]