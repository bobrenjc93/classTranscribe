[{"text":"and it is responsible for clearing it up.","width":64},{"text":"a dynamic array","width":384},{"text":"the rest is taken care of","width":128},{"text":"alright, so","width":192},{"text":"I at least, find this a little bit confusing,","width":320},{"text":"at first","width":64},{"text":"because, you know, all of these, the result of a delete statement on a sphere pointer","width":448},{"text":"right? but that delete statement invokes a function that also uses delete statement.","width":448},{"text":"so, there are kind of two levels of abstraction","width":192},{"text":"going on here","width":128},{"text":"Alright, here is the secret. ","width":128},{"text":"Here is  the secret, it is probably the case, so each of these things is a string","width":448},{"text":"Each of these things is a string. ","width":320},{"text":"How do you think a string is implemented?","width":192},{"text":"what do you think  the string class look like?","width":192},{"text":"it is a type that has a class","width":128},{"text":"just standard, yeah?","width":128},{"text":"Yes, a character array. That's right.","width":256},{"text":"Is it a static array or dynamic array?","width":192},{"text":"is it on the stack or on the heap?","width":256},{"text":"It is a heap, it is a dynamic array!","width":256},{"text":"So, inside the string class, is a dynamic array. ","width":384},{"text":"We do really know. It is encapsulated away from us. ","width":192},{"text":"But we have every reason to believe it is a dynamic array.","width":256},{"text":"So, how come I do not have to worry about that dynamic memory?","width":384},{"text":"Well I write this. Why don't I have to say I gotta clean up my string?","width":448},{"text":"Why? Whose they? The people who implemented string. That's right. ","width":704},{"text":"Exactly. Strings, clean up after themselves. and OK? look at what we have done","width":384},{"text":"We have written it so that spheres clean up themselves. ","width":448},{"text":"Right? Spheres clean up after themselves.","width":128},{"text":"Now, if you have a class that wants to make a dynamic array of spheres,","width":448},{"text":"you never need to worry about it because when sphere go out of scope, they just gone.","width":256},{"text":"when you call delete on spheres, it is all gone. ","width":192},{"text":"no big deal.","width":64},{"text":"OK? so there are multiple layers, of things that work","width":256},{"text":"Alright. Any other questions about this? ","width":192},{"text":"Alright, fine. ","width":192},{"text":"Ugh, Here are some sort of summary informations, about destructors. ","width":384},{"text":"We do not call the destructors.","width":128},{"text":"We provide the system to use. ","width":256},{"text":"in two situations. ","width":128},{"text":"when a variable goes out of scope","width":704},{"text":"and when delete is called. ","width":192},{"text":"on a pointer. ","width":448},{"text":"to object of type x.","width":640},{"text":"In so, in a variable of type x goes out of scope, and X's destructor is never called.","width":832},{"text":"OK, any question about that?","width":128},{"text":"So, it is refering to some class.","width":384},{"text":"Alright, so now, how do we know that we need a destructor?","width":384},{"text":"and the answer is ","width":64},{"text":"if the constructor allocate dynamic memory, or if any other member function allocates dynamic memory, associated with the object","width":576},{"text":"So, it is not just the constructor, if any, if your object has dynamic memory, ","width":384},{"text":"associated with it, you need a destructor. ","width":256}]