[{"text":"Ok, so orig is effectively constant. Ok, um, last time we saw the, um, we saw that parameter used here. What's the difference?","width":832},{"text":"What's, I mean it's not a parameter, that keyword used there instead. What's the difference between using it at the end and using it in the parameter list?","width":576},{"text":"Do you remember what it meant when we used it at the end?","width":256},{"text":"I'll put a little question mark, here. Do you remember what it meant? Yeah, Nathan?","width":576},{"text":"Right, so this time, this time, if you put it here it means that the function will not change those guys, the data members associated with the class.","width":640},{"text":"So, it's still a promise that something will be held constant and it's just an issue of which thing will be held constant. Ok?","width":576},{"text":"Now, i wanted to spend a second and just tell you how I Â happen to read that parameter list in, um, in, uh, English.","width":640},{"text":"I read it like if you asked me, \"What is orig? What type is orig?\" I would say it's a reference to a constant sphere. A reference to a constant sphere. Ok?","width":896},{"text":"So, orig is a reference to a constant sphere. You will also see in your programming journey, you will see that keyword const here, and in that case, the English makes more sense. We just read it backwards.","width":1024},{"text":"Reference to a constant sphere. They're just different syntaxes. Uh oh. What's the plural of syntax? Syntaccc . . . I don't know the plural of syntax. They're just syntactically different ways of expressing the same, uh, the same functionality. Syntactically different ways of expressing the same functionality. Alright.","width":1856},{"text":"That's kind of a meta thing, right? I found a syntactically different way of saying syntaxes. Alright, any questions about it? Alright, so, const will come up. You'll see it in code that you maintain and read. Um, we will also kind of gradually ask you to use what we call const correctness.","width":1472},{"text":"Now, as, as we ask you to write code. Now, what does that mean?","width":256},{"text":"It means that you, as a software designer, should be aware of what you expect to allo-allow to be changed.","width":640},{"text":"So, for example, as I define a copy constructor, I'm pretty sure, that making a copy of something shouldn't do something crazy to it like change it to 42 or something, right?","width":896},{"text":"And, so, this is a way of promising inside the code, no matter how you implement the copy constructor, that the original value will not be changed. Ok, that's called const correctness. Yes?","width":1472},{"text":"Though, right, so the, so functionally you could eliminate the const and then just, you know, be a good steward of the code, right? Well, I'm not gonna write any code to change that. But, here's the thing. ","width":896},{"text":"This construct allows for, um, delegation of code construction responsibilities, right? So, I can now give it to you to write the code and you are not allowed to write bad code that will change that, that, um, the value on the left hand side. So it's a matter of security, actually. Ok?","width":1600},{"text":"Now, it sorta fails in some context. This is purely an aside, so, if this does not interest you then it's ok to kind of turn down the volume a little bit. Um, but, it's not a pure, um, it's not a pure security measure, because, you know what? Sometimes, we want to use the copy constructor to count how many times a copy has been made, say.","width":1728},{"text":"So in that case, and we might want to store that with the object. And, so, that level of, but, but if you make it const you can't allow for it because you can't, you can't record the state change within the object.","width":960},{"text":"So, you know, in effect, it ends up being functionally limiting, but it's ok. For our purposes, const for the input parameter. ","width":704},{"text":"Um, and in fact, there are many style guides, software engineering style guides, that will tell you that all reference parameters should be const.","width":704},{"text":"Ok, so, if you go work for Google, they're gonna tell you that, and you're gonna go, \"*Gasp* What?\"","width":384},{"text":"But, but, um, uh, we don't make that constraint here. But, there are principles involved in the use of const. Ok, any questions about that? That was too much for a bridge on my part. I apologize.","width":896},{"text":"Alright, here's the big kicker though. We spent all this energy talking about this, um, copy constructor. Whereas, the first thing I said to you was, you know, the system provides one.","width":768},{"text":"What was wrong, in this case, what was wrong with the system provided copy constructor, and in general, how would you be able to diagnose for a class whether a custom copy constructor was necessary?","width":960},{"text":"So, what about this particular class demanded that we had to define a copy constructor? Yes?","width":832}]