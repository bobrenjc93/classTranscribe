[{"text":"Right, so when we try to copy this string array, we try to copy this string array in just copy the pointer value that atts helds, and adding it up, tingling our memory. ","width":1024},{"text":". Right? Ok, so one way of describing our use of the heap for this string array is that we used dynamic memory.","width":832},{"text":". So that heap memory is dynamic memory and that’s what makes it so that you have to declare and to define a custom copy constructor. ","width":640},{"text":"So why do we need one, the object uses heap or dynamic memory. And at any time you have an object that uses dynamic memory that is, if there is a new in the constructor, is a good clue that you need your custom copy constructor. ","width":1728},{"text":"Ok, you happy? Good? Any questions about this? Ok? Alright. So, uh, we are not done.","width":704},{"text":". Because we got this complex object, we got this complex object now, that may or may not be declared in the heap, if this is a Sphere. ","width":960},{"text":". I am gonna change this color… If this is a sphere, ah, say “a”, then this part of it lives in the stack, and the other part is instantiated be a new command that lives in the heap. ","width":1088},{"text":"That’s right. Ok so we got this object that kind of has pointers all over the place. I wanna trace a little bit of a piece of code, and show you where a problem occurs","width":768},{"text":"Or let you see where a problem occurs. Ok, so my int main here declares a sphere name is “a”, and we are gonna pass “a” in as a parameter, to this function. ","width":832},{"text":"OK? Now, you know at this point that a copy is made of “a” cause look, we got a good copy constructor here. ","width":640},{"text":"We got a copy is made of “a” on the stack. Points to 3, and we got this stuff pointing off into heap memory. ","width":832},{"text":"OK, the copy constructor knows how to do that. And I am going to ignore this one for a minute cause it doesn’t help my point any, at this point.","width":768},{"text":"Now, we are gonna do some computation and maybe ask it change, or maybe you know, maybe we just use it as an input variable whatever. ","width":704},{"text":"And then the function stops execution and control is passed back to, you know, just after myFun(). ","width":704},{"text":"So control is passed back to main(). Now the question is, what happens to S? when control is passed back, what happens to S? ","width":1024},{"text":" It goes out of scope as one way to describe it, and what happens behind the scene when something goes out of scope? ","width":512},{"text":"Yes? That’s right, it is removed from the stack. Like this. Hey what do you think? Yeah there is a memory leak. That’s right.","width":1088},{"text":"That memory that we asked for from the heap right here, this memory is leaked. Ok? By default. ","width":768},{"text":"So, we are gonna help out the system, we are gonna provide what’s called a destructor for the system to use when we are moving variables from the stack. ","width":768},{"text":"Now, suppose that I have just asked for this memory via a new statement, actually that one up there. ","width":512},{"text":"If I have just asked for that memory via a new statement, how would I give it back? How would I let the system know that I am done with it?","width":576},{"text":"Delete. That’s right. So my destructor, or the code that I am going to write for the system to use when variables goes out of stack, is just delete [] atts. ","width":1152},{"text":"Ok? Any questions about that? So in the MP2, hold on just second, I will get you. Don’t let me forget. ","width":576},{"text":". In MP2, you are asked to write a destructor, Um, but it’s for a more complex type. ","width":512},{"text":"In MP2, I will put this thing in green… In MP2, instead of objects in the array, you have pointers in the array, and memory has been allocated for each of them. ","width":832},{"text":"So that’s what differentiates what I just did here from MP2, so be aware of that. ","width":512},{"text":"In mp2, I just deleted this array, then all of that memory would be leaked. Ok so that should be some sort of insight into what your destructor should look like for MP2. Ok there was a question. Yes? ","width":1728}]