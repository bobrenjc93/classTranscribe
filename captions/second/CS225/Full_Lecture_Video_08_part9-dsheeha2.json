[{"text":"No, it means it's a reference to a constant sphere. Okay, it's a constant sphere by reference.","width":512},{"text":"So you cannot change the sphere, so b cannot be changed, and if we didn't want to change a we'd put a const right here.","width":512},{"text":"So you can never change the reference, reference can never be changed, once it's associated you can never change it.","width":704},{"text":"Okay, let's see, I want to keep going, it turns out addition and assignment are not the only things you can overload.","width":576},{"text":"That as of C++ 03 was the list of operators that could be overloaded. I, in my experience, in my programming lifetime, which is, you know, not all that extensive have only overloaded a very few of these.","width":1152},{"text":"This, certainly, assignment we're going to do, these are pretty common, these IO operators are very commonly overloaded.","width":768},{"text":"But generally, you know, you really have to know what you're doing when you overload many of these things. We'll talk about overloading this one also.","width":640},{"text":"I don't know, other than that. Okay, but you may see code that overloads all of those things.","width":704},{"text":"Okay, what time is it? Oh we have plenty of time.","width":384},{"text":"Okay, so we're going to go back now, now that you're comfortable with operator overloading, we're going to go back and revisit the issue of the assignment operator in the context of dynamic memory, okay?","width":768},{"text":"The assignment operator in the context of dynamic memory. Alright, let's see, so just to remind you this is the code that we were trying to implement and it is this assignment operator that we want to fix.","width":960},{"text":"The way you declare, the way you declare the function that we're going to overwrite is to say sphere.","width":640},{"text":"It turns out that in this context it's okay to return it by reference but we won't here because that will freak you out, freak me out, freak us all out, so we won't.","width":832},{"text":"And now the question is, what does the parameter list have to look like? Well we want to promise that we won't change this thing on the right hand side..","width":960},{"text":"So we're going to pass back a constant, I mean, sorry, we're going to accept a constant sphere reference and we're going to call it right hand side. And that's it.","width":896},{"text":"We'll talk about what goes here in quite a lot of detail, eventually. Okay, any questions?","width":576},{"text":"So that's what the function signature looks like, here's what the implementation needs to be.","width":384},{"text":"Okay, so what we're trying to do, what we're trying to do is implement b gets the value of a.","width":512},{"text":"So here's a, and here's b, and in the end we want b to look like it's own copy of a.","width":541},{"text":"Okay, so how can we prepare to do that, sorry, how can we prepare to do that?","width":384},{"text":"What do we need to do to make b look just like a if this is b and this is a? We don't get to call the copy constructor, that would be nice, but we don't get to.","width":768},{"text":"What do we need to do at a lower level, what commands do we need to run? Yeah?","width":832},{"text":"Very good, very good, so in the end we're going to want b to look just like this, right? Which means that I better get rid of this one.","width":918},{"text":"Alright, so let's clear up b, we're going to clear up b and then things can feel a lot like the copy constructor.","width":960},{"text":"Okay, we, you know, copy a's value over, copy a's number of attributes over, okay now I need an array that is that long.","width":896},{"text":"And then copy these values over, okay. So at that point, at that point it looks like a lot like the copy constructor. Okay, perfectly fine.","width":704},{"text":"What would be the consequence of not giving back this memory, before we make that copy?","width":512},{"text":"A memory leak, that's right. Because the minute we reassign that pointer to point to this space, this memory would just be sitting there, it would have nothing pointing to it.","width":896},{"text":"Okay, fine, here's another question for you. Given that, what we have said, is clear the left hand side, clear the left hand side and copy","width":1216}]