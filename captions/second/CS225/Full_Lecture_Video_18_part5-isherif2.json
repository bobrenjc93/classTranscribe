[{"text":"because of the assignment statement. That's right. So. Zoo is a list class thing. It must have - oh is begin public or private? Public. That's right. This is client code and we're using that function. So begin is a public function in the list class. Returns something of type iterator. Where the heck did that come from? Where did iterator come from? It's a type. Where does it live? Also in the list class. That's right. It's a new type of thing. Lives in the list class. Is it public or private? Public. Has to be. We're using it. Right? Sooo. The standard template library's list class is actually much much much much more sophisticated than ours because it's got all this extra stuff. It has this iterator class that we get to use if we want. Ummm. And these other functions that help us set up our iterators. Kay? Alright. Fine. Aaaah. Just as if \"it\" were an integer, we allow ourselves within the for loop to increment our iterator so we can increment the iterator just like we would if it were a an integer. Kay? But, there are other things we can do with an iterator. Take a look at the next row. What on Earth is going on here? What on Earth is going on here? We dereferenced an iterator. What do you expect that to get you? If we are asking for a name, what do you expect to come out of here? An animal. Right? An animal. Who's animal? Where was it? It's in the list class. It's in the list right? Okay, so what is an iterator? It's something that is stepping through the list. It allows us to move it and it allows us to dereference it. It allows us to ask for its value. Kay? That's cool! Yeah! So is an iterator an address or something? And another. Raise your hand if you agree with that question. If you're like \"what the heck\" about this. Okay.So here's the thing. You don't get to ask. You don't get to ask how it's implemented. You are asking me. You are asking me -laughter-. Think about this for a second. He's asking, for on behalf of all of you, it's not just him. He's asking about the implementation. And I'm saying uh-uh. You don't get to know how it's implement. Why? What principle allows me to do that? Encapsulation. That's right. The implementation of that iterator is encapsulated away. All we know is how to use it. Kay. So swallow that pill. Swallow it. Go ahead and ask. Yes. Yes. So there is this notion of next. There is this notion of next. Now in the list class, you have this adjacency but and you can kinda you know you can have this notion of first and second and third but you know we will see structures where the idea of next is a little more ambiguous. Well I don't know. Should I go left or right? I don't know. Which one is the next one? And an iterator promises it will give your stuff back out of your structure in some order. Kay. For list, it promises to step from beginning to end in a predictable order. Alright. Yes. Aaaah. Okay! So let's talk implementation for just a second. How do you think this happens? How do you, what do you think this implementation kinda looks like?","width":17600}]