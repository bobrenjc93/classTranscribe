[{"text":"Linux. Linux workshop at DCL 1320 tonight at 7pm. Did anybody go last night? The room screw up was totally my fault. It was not the organizers fault. There is no room screw up for tonight. Did you learn things last night. That is all we wanted to know.","width":2560},{"text":"Okay, so here is what I think you should be good with. You should be good with the idea of class definitions, class function implementation with the scope resolution operator, constructors and when they are used, and client code, and what it means to use a user defined type and class. Especially after spending all day today on it. But there is some vocabulary that we have not yet seen.","width":2240},{"text":"One way of characterizing object-oriented programming languages is by 3 words you might have heard before but never thought about deeply. Those 3 words are inheritance, encapsulation and polymorphism .... Okay, this is interview prep. They are going to try and trip you up. they are going to see if you have seen this moment. How are object oriented programming languages typically characterized? Now what you will know is that there a lot of different ways of characterizing object oriented programming languages. But what they are looking for is those 3 words. And if you can reel off inheritance, encapsulation and polymorphism, they will go 'Oh wow, this person knows what they are talking about.'","width":3584},{"text":"But, in case they dig a little more deeply into your understanding of C++. Despite the fact that this is not a C++ class, I want to tell you specifically how we describe the ways in which C++ supports the idea of encapsulation. Now what is encapsulation besides an E-word?","width":1600},{"text":"It is a separation of the interface of the class from its implementation. Now there are 2 ways that C++ does this. One is that the private region of the class definition protects the data associated with the object. ","width":2240},{"text":"And so you as the designer, because you believe in this idea, this is what you do in C++.","width":1024},{"text":"Secondly, this is purely by convention, you already saw today that you don't have to do this, but by convention we separate the .cpp file, the function implementation, from the header file.","width":1408},{"text":"We separate the function implementations.","width":1088}]