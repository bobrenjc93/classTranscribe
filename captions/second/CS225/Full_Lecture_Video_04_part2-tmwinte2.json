[{"text":"Yes. That's right, that's right. That invokes the no argument constructor.","width":383.666666},{"text":"That line invokes the no argument constructor.","width":284.666666},{"text":"Ok?","width":45.666666},{"text":"Either the default one that's provided to you or the one that you have written.","width":299.666666},{"text":"Now the default one that's provided to you will still set up theRadius and what other variables, but those values will be garbage.","width":831.666666},{"text":"Unless theRadius is the kind of thing that has a constructor.","width":319.666666},{"text":"Ok, but that's not what we're talking about today.","width":211.666666},{"text":"So, suffice to say the system will still take care of setting up and administering the use of memory. ","width":538.666666},{"text":"That is, it will detect when you're done with the variable and give the memory back to the system for somebody else to use.","width":447.666666},{"text":"So nice that way.","width":148.666666},{"text":"All right, now there is another kind of variable, so this is primitive-type user-defined types and there's another kind of variable that you may not have seen before.","width":767.666666},{"text":"That kind of variable is a memory location.","width":361.666666},{"text":"Explicitly a memory location and here's how we declare one.","width":319.666666},{"text":"I would say \"int pointer p\"","width":477.666666},{"text":"Ok, now what happens is the system says \"Oh I see what you want here, you need a memory address,\"","width":511.666666},{"text":"Oh, I don't know a52, p, its value is not known here, its type is the memory address of an integer.","width":805.666666},{"text":"Now, I said the words memory address of an integer.","width":299.666666},{"text":"But what I'm going to write is this.","width":191.666666},{"text":"So these things are equivalent","width":255.666666},{"text":"memory address of an int is equivalent to int pointer type.","width":1087.666666},{"text":"Ok?","width":37.666666},{"text":"Any question about that?","width":75.666666},{"text":"So just symbolic substitution there.","width":157.666666},{"text":"All right, fine.","width":123.666666},{"text":"So among these, from everything you see here, what's a valid value to go here? What could go here?","width":631.666666},{"text":"What's the only thing given this diagram, yeah?","width":263.666666},{"text":"","width":127.666666},{"text":"Yeah, so the memory location associated with x","width":319.666666},{"text":"Because x is an integer is the only valid thing that you can put in this spot.","width":419.666666},{"text":"Now, hmm, how do we make that happen is the next question.","width":227.666666},{"text":"Any questions before I go on? Yes?","width":191.666666},{"text":"Oh boy, we're gonna spend about the next 2 weeks seeing uses of this ok?","width":511.666666},{"text":"Excuse me?","width":63.666666},{"text":"Bit shifting?","width":345.666666},{"text":"Maybe","width":62.666666},{"text":"In some contexts.","width":75.666666},{"text":"But there are others that come immediately to mind and I'll give you a heads up.","width":365.666666},{"text":"Here's the heads up: ","width":107.666666},{"text":"Data itself is huge.","width":255.666666},{"text":"Pointers or memory addresses are small.","width":255.666666},{"text":"So when you have a big chunk of data like a photograph or a movie or something and you don't wanna be passing it around, passing all that data around, you can use its memory address to refer to it from all kinds of different places.","width":1078.666666},{"text":"Ok, so that's kinda the biggest thing to keep in mind as we go forward and talk about these things.","width":417.666666},{"text":"Ok?","width":17.666666},{"text":"Does that help at all?","width":61.666666},{"text":"But that's way foreshadowing, that's like Wednesday's lecture, ok?","width":511.666666},{"text":"The question is, the question is how do we give p value?","width":365.666666},{"text":"We all agree that our intention here is for p to point to, to contain you know a20 here.","width":852.666666},{"text":"I should connect the dots, but I'm not going to because that's the mystery.","width":328.666666},{"text":"The question is how do we assign to p?","width":175.666666},{"text":"Well, what do you think of this?","width":191.666666},{"text":"What do you think of that?","width":127.666666},{"text":"Maybe I can give p x's memory address simply by having x on the right-hand-side and the system's smart enough to go \"Oh, I know what you mean.\"","width":675.666666},{"text":"Is it?","width":63.666666},{"text":"No.","width":85.666666},{"text":"Ok, how do you describe what's wrong here?","width":164.666666},{"text":"What gives you heebie jeebies about this assignment statement?","width":304.666666},{"text":"Type mismatch, that's right, the thing on the left is an integer pointer, the thing on the right is an integer.","width":374.666666},{"text":"That should be coursing through your veins as you read code.","width":255.666666},{"text":"So this is a type mismatch.","width":285.666666},{"text":"Can't do this, it's a type mismatch.","width":255.666666},{"text":"","width":217.666666},{"text":"Ok, fine.","width":127.666666},{"text":"Maybe what you do then is simply explicitly assign like 0xa20 there.","width":575.666666},{"text":"What do you think of that?","width":127.666666}]