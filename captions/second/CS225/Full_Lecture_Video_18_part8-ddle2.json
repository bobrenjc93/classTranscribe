[{"text":"And then, uhh, the standard template library container classes usually will have a forward iterator, a backward iterator, a bidirectional iterator...","width":832},{"text":"...so you can go forward and backward... and const versions of each.","width":448},{"text":"Which means, you can look at your data but you cannot change your data, okay?","width":640},{"text":"Any questions about all of that?","width":135},{"text":"Your world changed today, huh?","width":128},{"text":"You did know these existed. Okay.","width":128},{"text":"How do you think we achieve this reverse iterator?","width":384},{"text":"Going backward through the list...","width":320},{"text":"minus minus","width":256},{"text":"It overloads minus minus","width":256},{"text":"Alright, any questions about it?","width":64},{"text":"You doing good?","width":192},{"text":"Okay? Alright. So let's talk... oh... lets go... lets move... so, here's the thing. Here's what I want from you. I want you to leave this room and feel confident using iterators.","width":886},{"text":"Like, ughh, I need an iterator for this, and get the right google search and find the appropriate iterator to write code that traverses any kind of container class. That's what I want from you.","width":704},{"text":"But I also... if your employer or your advisor ever says, \"I need somebody to implement a new iterator,\" I want you to be the one to go \"Oh! I'll do that!\"","width":932},{"text":"So we are going to pull back the hood a little bit and look and speculate about how exactly these things are implemented, okay, so that you see what kind of decisions you would have to make if you were actually to do an implementation.","width":1152},{"text":"Am I in the way? I'm not in the way, right? Okay.","width":128},{"text":"Alright, so, ummm, we agree... we agree, I think, that we're going to need, for... if say a linked list was the thing being encapsulated... we would need some private member to keep track of where we were. To save the state inside the object of the class.","width":1664},{"text":" To keep track of the fact that your iterator is pointing to you know that one instead of any other one. Okay.","width":512},{"text":"And we are going to do that via some private member, that's what this PM... PM does not meet message me... it means private member.","width":896},{"text":"Okay, it doesn't mean afternoon either. It doesn't mean nap-time. No yawning.","width":448},{"text":"Alright, so if you're a linked list and you wanted to say keep track of where you were, what kind of thing would you do?","width":704},{"text":"What kind of thing would you keep track of if you were trying to keep track of where you were in a linked list?","width":384},{"text":"Curr pointer, good. So in a linked list, you'd have a listnode pointer. You might call it curr. And it would just sit there until somebody did this plus plus. Now, if somebody said plus plus to an iterator, what would happen to that curr?","width":1408},{"text":"Yeah? Yeah, good. So plus plus is implemented like curr = curr->next.","width":704},{"text":"Okay.","width":235},{"text":"And how would you look at the value inside? How would you dereference? How would you look at the value inside that pointer?","width":512},{"text":"You'd look at curr's... what did we call it? Data. We called it curr's data. So you would return curr->data.","width":640},{"text":"And look, you have just implemented... you have almost implemented an iterator for a linked list class.","width":512},{"text":"Okay, what would a reverse iterator... what would a reverse iterator for a singly linked list look like?","width":576}]