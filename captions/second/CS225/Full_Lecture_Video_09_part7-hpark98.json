[{"text":"Alright.","width":192},{"text":"Any question about that?","width":64},{"text":"The rule of the big three *dum dum dummmm*","width":192},{"text":"Okay, so uh, we're gonna return for a bit to object oriented programming","width":448},{"text":"Um, because C++ has some idiosyncrasies and some distinctions from Java in particular that you should know about","width":576},{"text":"And then many of you will have come here without a lot of experience in OOP at all","width":320},{"text":"Historically, the objective for even creating object oriented languages","width":576},{"text":"...was two-fold.","width":192},{"text":"One was to create code that is smaller, that is to increase code re-use.","width":448},{"text":"And two, what follows from that, is to...","width":448},{"text":"...decrease the cost of maintaining such code.","width":192},{"text":"So...","width":128},{"text":"The idea that an object-oriented language should exist really arose out of the need to structure your code more efficiently","width":640},{"text":"From a programmer's perspective, not necessarily from a code execution perspective.","width":448},{"text":"Alright","width":128},{"text":"So, from that understanding, from the understanding that we're trying to write less code, and thereby make it more maintainable,","width":576},{"text":"these characteristics arose.","width":192},{"text":"So, encapsulation, we already talked about. If you wanted a little quiz, you should sorta go back and make sure that you know of two ways that C++ implements encapsulation, or makes encapsulation easy to implement","width":1024},{"text":"Polymorphism, we're actually gonna talk about today. ","width":320},{"text":"Suffice to say, its definition follows its name. Basically, a function can behave differently depending on the type of the calling object.","width":512},{"text":"We'll talk about that a little bit today.","width":128},{"text":"So the biggest thing we're gonna talk about today is inheritance.","width":384},{"text":"And so, without further ado, let's begin.","width":192},{"text":"Okay, so we have been talking about the sphere class.","width":448},{"text":"And now we have decided from a design perspective, that spheres are not specific to us. ","width":640},{"text":"In fact what we want is a named sphere class, a named...","width":512},{"text":"And when I say name here I mean labeled...","width":256},{"text":"And named sphere class, but otherwise this thing should behave a lot like a sphere.","width":320},{"text":"I'm gonna decide that I call this thing ball, but of course I can call this thing anything that I wanted to call it","width":640},{"text":"Usually, it's the case that the name that you happen to choose is a specification, is more specific, than the original thing.","width":448},{"text":"The original functionality","width":192},{"text":"And, we're going to set it up, we're going to define class \"ball\" so that it is a ","width":576},{"text":"we use language \"is a\"","width":192},{"text":"public sphere.","width":64},{"text":"Okay, so this indicates inheritance. That colon is inheritance.","width":960},{"text":"Inherits from sphere.","width":192},{"text":"Now we have specfiic language in C++ to denote these things. We refer to sphere in this context as the base class","width":704},{"text":"We refer to ball as the derived class.","width":256},{"text":"And this corresponds to super class and sub class.","width":576},{"text":"in java.","width":192},{"text":"Okay, any questions so far?","width":192},{"text":"Alright","width":192},{"text":"So now, there's sort of an interesting little parallel between these two things that you might find kind of interesting","width":576},{"text":"I have no English today, apparently,","width":192},{"text":"This word corresponds with this word, right?","width":384},{"text":"Is it just a happenstance that we chose public in each of these cases, and the answer is no","width":576},{"text":"In fact, that the inheritance type","width":256},{"text":"The word can be the same as the access types","width":320},{"text":"So we could have private inheritance as well","width":320},{"text":"And in a minute we'll talk about protected inheritance.","width":256},{"text":"But, for this class we're only ever going to have public.","width":320},{"text":"Ok, so here's your first key fact.","width":192},{"text":"Here's your first key fact.","width":192},{"text":"The access type in the base class ","width":384},{"text":"Access type in the base class, that is these public and private,","width":384},{"text":"together with the inheritance type","width":256},{"text":"Imply the access in the derived class","width":384},{"text":"So I'm gonna write that down in just a minute and talk about what it means","width":384},{"text":"So the base access","width":128}]