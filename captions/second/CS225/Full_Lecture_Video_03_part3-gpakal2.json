[{"text":"And then I'm gonna do this thing too.","width":320},{"text":"And I'll explain it a little bit more because I want to look at what happens.","width":390},{"text":"Okay, any questions about any of this code?","width":1024},{"text":"Oh probably. Where? Oh, in my implementation. You're my compiler, yay!","width":576},{"text":"Thank you.","width":64},{"text":"What's your real name?","width":256},{"text":"I don't think you go by clang, right?","width":128},{"text":"It would be a good name though right?","width":73},{"text":"Well, who are you?","width":64},{"text":"Kevin, nice to meet you.","width":128},{"text":"Okay, alright. Yeah, so make a correction you run the risk of like public. And now we're friends because we have a shared experience. Okay, alright. Any question about any of this code? Yes.","width":1024},{"text":"[no audio]","width":384},{"text":"Isn't that the question on the board?","width":192},{"text":"Let's go back to our discussion on constructors.","width":230},{"text":"Let's sort of think ahead in time here. Go back to our discussion on constructors.","width":256},{"text":"If we don't give a constructor, the system provides us one.","width":320},{"text":"But, we didn't control how the object was constructed.","width":256},{"text":"I actually don't know standing here what clang will do.","width":320},{"text":"It's a compiler specific thing.","width":192},{"text":"I think its virtual c++ does always really nice things which means that people who program that in their first language tend not to program very defensively. It's like training wheels for your life, right?","width":884},{"text":"So, not to disparage it but it's nice to have a controlled environment","width":256},{"text":"And so, I'm sitting here. I haven't messed with this particular compiler. I don't know which version of clang it is.","width":384},{"text":"And so, I'm gonna go check just with you to see what clang does upon that initialization that I have had no control overflow","width":640},{"text":"Let's go see.","width":128},{"text":"!c","width":128},{"text":"Okay, it liked it. We had no syntax errors. No type errors.","width":354},{"text":"a.out","width":80},{"text":"Oh, and it gave us zero so it happened to have initialized that particular double to be zero.","width":512},{"text":"I don't know what would happen if we try to do math on it.","width":192},{"text":"Alright, but I don't want zero to be the default value.","width":384},{"text":"So, any question about that? So clang kind of played nice there but you cannot count on it doing so. Yes?","width":768},{"text":"Yes, it's supposed to be. It's supposed to be. So the virtual machines we give you for this class that is part of the download for the laptop lab should contain the same environment that the engineering workstation machines use so clang should be there. I don't think we upgraded to 3.6 so I think it's 3.5 but maybe 4. I don't remember. ","width":2054},{"text":"For which? For main?","width":154},{"text":"So here's what happens. So if you don't specify a return value, one is inferred unless you try to use it.","width":640},{"text":"For example, if I didn't try to assign from getDiameter, I think this is true, it wouldn't have mattered if I put it there. In any case, those kinds of errors are compiler errors so the compiler will say, \"Yo, you forgot your return type and I needed it\".","width":1152},{"text":"So that's an easy one. I fixed all my bugs now, right?","width":384},{"text":"So, that's a case where and I don't necessarily know, I count on the compiler to tell me what it needs. Okay, let's see. So, let's implement a constructor. Where can I define the constructor? Where can I implement the constructor?","width":1344},{"text":"Where can I implement it?","width":135},{"text":"Could I implement it down here?","width":128},{"text":"Let's try it.","width":128}]