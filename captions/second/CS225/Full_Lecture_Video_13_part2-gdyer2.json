[{"text":"asymptotic.","width":320},{"text":"asymptotic. that's not a p there.","width":256},{"text":"running time. that's in terms of big-O","width":256},{"text":"on a structure of size","width":512},{"text":"and now again I could write anything I want here. I could write k. I'm going to write n to differneitate it from k","width":832},{"text":"so I want. not asymptomatic but asymptotic running time. asymptotic here means big-O. ok","width":768},{"text":"uh","width":64},{"text":"running time, we'll write a function for that","width":256},{"text":"on input of structure of size n. ok","width":320},{"text":"alright","width":351},{"text":"so","width":64},{"text":"that means in this case, I'm asking if my linkedlist has size that we parameterize by n. my chained together structure has n elements.","width":640},{"text":"","width":64},{"text":"my chained-together structure has n elements","width":69},{"text":"what's the very worst case for the running time of this thing could be?","width":256},{"text":"big-O of the worst case is","width":320},{"text":"we might have to look every element, right.","width":384},{"text":"we might have to look at every element and so the analysis","width":384},{"text":"the running time is big-O n. ok","width":192},{"text":"O(n). you want to talk about that more or is it ok?","width":128},{"text":"the way to think about it is \"how much work do you do at every node?\" at every node, how much work do you do? well","width":556},{"text":"well, I look at it. and I evaluate whether or not I'm done and k is equal to 0. look at it and evaluate whether k is 0. look at it and evaluate whether k is 0. ","width":1152},{"text":"that's the same every time. there's no iteration or exploration at each node","width":320},{"text":"so each node is just a constant amount of work for all the elements is c times n","width":576},{"text":"ok. too much talking... it's too much talking","width":384},{"text":"raise your hand if you're kind of worried about k in this. you're a little bit worried about k. you're not worried about k at all?","width":320},{"text":"ok. alright. so k is. k is a particular input to the problem","width":704},{"text":"the very worst k that somebody could give you is no worse than n","width":320},{"text":"because this thing is going to bottom out at when uhhhhhhh current is equal to null","width":576},{"text":"it's going to stop at the end of the list","width":128},{"text":"so even though k could be 593,000,000 or a two element list, this thing is not going to run that far","width":640},{"text":"so it's bounded by n. n is the worst thing we need to consider","width":384},{"text":"ok. alright. uhhhh","width":128},{"text":"let's see. how long does it take to find the kth thing in an array?","width":384},{"text":"constant time","width":64},{"text":"we say it's constant time.","width":192},{"text":"and that's was random-access memory gets us","width":256},{"text":"that's what letting the computer figure out the memory address for our data does for us","width":512},{"text":"alright. I'm tired of this slide. let's move on","width":256},{"text":"it's a big moment. it's a big moment because we're going to look at our first abstract date type. ok","width":640},{"text":"now, the rest of this class is going to be the rest of this course is going to be an exploration of a sequence of abstract data types","width":768},{"text":"now, what is an adt? it's simply a description of the functionality of a data structure","width":6},{"text":"a description of the functionality","width":448}]