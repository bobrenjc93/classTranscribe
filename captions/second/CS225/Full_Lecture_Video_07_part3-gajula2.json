[{"text":"Sort of.. what does that ampersand mean in that case? By reference, that's right. So our intention is to return a student by reference. Okay? Now we'll trace what that means here. Okay, so the setup in this case, oh brother, um here's C: cat, squigly, false. Um here's D: ok? its not initialized, we haven’t taken great pains to initialize it. When we call the function, C goes in as the parameter, S becomes a copy of it on the stack. We create a new one, W, it becomes of that, also on the stack. Okay any questions so far? We mess around with W, we mess around with W, and then we return it by reference. First of all--first question: is there a type mismatch? Oh, it looks like there is, doesn’t it? Is there a type mismatch? The answer is no. It looks like there is, but that ampersand in that context does not mean memory address, mostly. It doesn’t really refer to memory address, it doesn’t mean pointer. It means a reference. What’s the difference? The difference is..the difference is that behind the scenes, pointers are being passed around. But here, in the code, you can refer to everything by its student, by its student value. The dereferencing that happens is all done automatically for you. And in fact, you probably shouldn’t even think about it as a pointer, just think about it as a student. Now, what happens in this case? W is passed back by reference and this thing right here, the return value of this, the right hand side of this assignment statement becomes essentially another name for W. So this is now the right hand side token, whatever the system decides to use for the return value of that token. Right here, this is another name for W. Kay.. and then we do an assignment statement. We assign that to D. Do you like it? Do you like it? Raise your hand if you like it or you see no reason not to. Raise your hand if you can’t-if you can't stand it. If you detest it. Raise your hand if you’re somewhere in the middle. Okay. Good. Why do you detest it? Okay, so you think we’re wasting time there, right? Okay so I hate it too but not for that reason. Okay. I hate it too but not for that reason. Here’s why-you wanna say why you hate it? Exactly! That’s exactly right. So the comment was: it seems like it goes away and yet we’re relying on it. But look, the assignment statement relies on something for its right hand side. But the minute control is passed back so that the assignment statement is the next thing, this is gone. So that right hand side gets obliterated effectively, effectively is gone the minute the return statement is made. Which means that the right hand side has nothing on it to use. Right hand side is nothing but certainly invalid. Kay any question about that? So what have we done wrong here? Can you describe what we have done wrong? I’ll give you a hint. I don’t know, i don’t know what that dance move is. Kay so the error here is that we’ve returned a local variable by reference and that’s forbidden. Okay? Because it's invalid - it creates an invalid right hand side in this case. okay. so our error um.. oh no.. ","width":20992}]