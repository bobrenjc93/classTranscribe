[{"text":"What this is gonna do, is, it's gonna visit every single node in the tree but in a certain order. ","width":576},{"text":"It will look at the current node, it will print out it's data, and then it will visit everything on the left side, and visit everything on the right side.","width":320},{"text":"This is called a pre-order traversal, and it has an interesting property. ","width":128},{"text":"So, this particular node, how many times is this function going to be active, while this node...while it's thinking about this node.","width":640},{"text":"It actually will happen three times. ","width":320},{"text":"You'll come, you'll call this function on a node, and you'll say \"okay, print out this data\", so it's one visit. ","width":512},{"text":"Then you’ll go down here, go down the left side, and do whatever, and then you’re going to return. ","width":64},{"text":"So that’s the second time this function has control over the node. ","width":576},{"text":"After that the function is going to call the right side, do all that recursion, that’s gonna return, and so then the third time, this function has control over the node.","width":512},{"text":"So this kind of traversal pattern you have three opportunities to do something with the tree, the data of the tree at that particular location.","width":512},{"text":"So, I made an animation for you. So, here’s a tree, and I want to traverse it. ","width":512},{"text":"So, I call pre-order on the root, which is a 12 here, and I’m gonna put one dot for every time, the function has examined the node. ","width":512},{"text":" And down here, I’m gonna print out, the nodes in the order that I visit them. ","width":448},{"text":"Okay, because, in the order that they’re printed. So, I do twelve, then eighty one, then seventy three, so, because it keeps calling, and it calls print, then it calls on the left side. ","width":704},{"text":"Now when it hits the seventy three it’s going to go down the left side, and that’s a null","width":512},{"text":" And it’s gonna come back and go down the right side, that’s also a null. So now it’s gonna return back to the eighty one. ","width":704},{"text":"So what’s gonna happen now? It’s gonna go the eighty four, right? ","width":512},{"text":"So it goes there, left is null, right is null, it’s gonna go back to eighty one, and it’s gonna go back to twelve. ","width":448},{"text":" And then it’s gonna go to seventy three. Is this pattern working working for you? ","width":384},{"text":"So, to speed things up... then finally we return all the way back to the root. ","width":384},{"text":"So, this is called preorder traversal. There are languages which use this exclusively. ","width":704},{"text":"All the Lisp dialogue languages, so Clojure, Lisp, Scheme, Bracket, they all use preorder notation for everything. ","width":448},{"text":"So if you take the honors section, you get tons of preorder goodness. ","width":384},{"text":"Uhh, so…we can also take…what happened here? ","width":1216},{"text":"Yes, this is what I want. So I call the preorder yet, it’s actually post order.","width":512},{"text":"Right, because now, I’m printing at the very end. So on my third visit of a node, I do the printing out. ","width":512},{"text":"So, here, twelve…because after I visit all the children, then I come back, that’s when I print the thing out. ","width":320},{"text":"Fifty three, then twenty nine, then seventy three, and twelve. This is post order. ","width":1024},{"text":"Now, when I was a student, everyone in engineering had an HP calculator that used reverse polish notation, is that still true?","width":576},{"text":"Or have they gone soft and switched algebraic? They’ve gone soft? ","width":512},{"text":"Oh, that’s disappointing. Alright, so this reverse polish notation, its called. ","width":1152},{"text":" It’s because you type in the roots first, then you type in the parent. And there are languages which use this, so if you ever get the chance to learn a language called Fourth, pick it up and play with it. ","width":64},{"text":" Spend an hour with it, it’s kinda cool, because to add something, you have two numbers, you’ll type the first number, so ten plus twelve, you type ten hit enter, you type twelve hit enter, then type plus. ","width":896},{"text":"So basically, it’s using a stack. You push the two numbers on the stack, and plus pops two numbers off, adds them, pushes it back on.","width":512},{"text":"So it has this kind of traversal pattern.","width":384},{"text":"Alright. Why did it double all of these traversals?","width":384},{"text":"This is weird.","width":384},{"text":"Part three. ","width":320}]