[{"text":"All right any question about it yeah","width":256},{"text":"oh yeah this only implies to a singly linked list I know I just want you to think","width":384},{"text":"Plus to one simple keep trackable all those extra pointers when we don't have to","width":384},{"text":"Just gonna mean you are gonna have bugs","width":128},{"text":"All right let's see so what's the running time of enqueue then","width":320},{"text":"constant time if we set it up wisely","width":384},{"text":"oh no it's dequeue","width":128},{"text":" Either way so constant time either way so what's the running time of dequeue","width":320},{"text":"constant time","width":192},{"text":"if we are careful","width":256},{"text":"All right and that's all I'm going to say about the linked list implementation of a queue is that okay","width":512},{"text":"I'm assuming at this point that you could write that code because it's just about like insert at front right","width":512},{"text":"So this is the queue so the entry point is gonna be the opposite of what you choose for exit.","width":896},{"text":"So we have to be careful with the exit and then entry is the other one","width":320},{"text":"Now what you might be asking about or what is a relevant question is that what if you have some structure that allows entry and exit at either end","width":768},{"text":"And that's called a deck or double ended queue and it's a real thing","width":448},{"text":"I mean it's like I think of it as kind of a perfect test question because it's something we don't spend a lot of time on but it's perfectly with in you grasp in terms of reasoning about how you should implement it","width":896},{"text":"So that issue that you bring up even though you didn't intended is actually germane","width":448},{"text":"All right any other questions about it ","width":448},{"text":"Yes","width":64},{"text":"I'm gonna throw that to the crowd cause it's a great question","width":640},{"text":"so the question is if we augment our structure and the choice of ink color here is the clue","width":704},{"text":"if we augment of our structure with a tail before tail ","width":512},{"text":"If we augment it with that do we eliminate the problem of having to reset the tail pointer","width":1216},{"text":"Well we do but then we have a problem because we have to reset the throwback Thursday pointers","width":768},{"text":"So it solves one problem but it creates another","width":320},{"text":"All right any question about it","width":448},{"text":"Let's see so the array based implementation of a queue","width":448},{"text":"I don't know what else can say about this just absorb it meditate for a second give a touch with the array based implementation of a queue","width":1344},{"text":"I do know what I was gonna say about it any questions about the set up here","width":576},{"text":"You can look at it and go oh she must have copied and then pasted it","width":320},{"text":"This slide looks a lot like the stack inner face it has all the same data associated with it ","width":512},{"text":"the question is what might we be talking about here","width":320},{"text":"so let's spend a few minutes kind of speculating on how we might use an array for the queue","width":768},{"text":"Now just like we did for the linked list implementation","width":320},{"text":"We need to decide where is going to be the entry and where is going to be the exit for our data","width":448}]