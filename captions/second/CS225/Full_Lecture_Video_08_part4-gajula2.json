[{"text":"Yes. Right. Because those go off the stack, those are freed for you. Yes? Um yeah because its an array. Okay? You need the brackets because its an array. If it were just a pointer, if we had instantiated this as just a string pointer, a pointer to a word, then you wouldn't need the brackets. You’d just delete it. So in general, in general you’re \"deletes\" should match your \"news\". Whatever kind of new statement you use to create the thing, usually in your constructor, you’re going to use a similar thing in your destructor. Kay? Any questions about that? Is it good? Yeah? It’s called right after the return. It’s as, it’s as this um execution completes and control is passed back to the calling function. Alright. Any questions? You good? Kay I’m gonna sh- yeah? Oh my gosh, there is so much bookkeeping going on for you. We are so lucky. Right? Like our-your grandfathers, my- my- my parents—I shouldn’t have said fathers there, look at that, look at me do that. Your grandparents in computing, my parents in computing um they think that life is way too easy for us. Actually its probably my grandparents, your great grandparents but um they think computing is way too easy for us. And in fact, you know the fact that we don’t actually have to keep track of what variables we’re using ourselves is just ugh! You know, we’re not authentic programmers. So the early days of c were pretty uh pretty harrowing I think. So there’s a ton of bookkeeping that goes on and part of what they keep track of is what amount of memory is associated with each variable. Kay? Alright and you’ll learn about it in future classes because of course that’s what generations do right? You have to inflict the pain of previous generations on the current. Alright. Um any questions about it? Any other questions? You good? Okay, I have another story to tell you here. I’m gonna take you through another little piece of code. Um here’s how this piece of code goes: this time, I’m going to declare a sphere pointer, B. So here’s B and I’m going to ask for a new Sphere. Now we’ve made a constructor for a sphere, we made a constructor for a sphere that sets up a— uh — a default sphere to look like this. So when I say new Sphere, that constructor is called for us. So at the end of this statement it’s perfectly reasonable for me to draw this picture making note of the fact that the— that the sphere constructor was invoked for us, not the copy constructor, the no argument constructor. Kay? Any question about that? Okay. Now, let’s look at what happens when we say: delete B. What do you hope happens when you delete B? When you say delete B, what do you hope happens by default? What do you hope happens? All of this memory, all of this memory is given back to the system, right? By default, without the destructor, only this part is given back. No dynamically allocated memory, no memory allocated with a 'new' is given back. So again, we’re responsible for writing a destructor that makes that happen. This is the same destructor, it’s just used again. So if you remember, that code looked like this. ","width":17664}]