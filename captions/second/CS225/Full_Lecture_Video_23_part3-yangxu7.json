[{"text":"Because this works. Because, is that right? Yes, we didn't do a dereference there. Sorry. ","width":832},{"text":"Yes, we do. Yes, we do. Oh no we don't.","width":448},{"text":"No cause it's while it's not empty we didn't change, Oh yes we do, and absolutely do.  I'm confusing my empties with my NULLs","width":448},{"text":"We absolutely do need it. Because, what you are thinking what I was thinking is it by putting in NULL there, the trees still empty but it's not ","width":576},{"text":"So, on that first iteration here the Q is not empty, right? It's not. It has a NULL on it. Cause we put it there.","width":1344},{"text":"croot, yeah that's true.","width":384},{"text":"Right, that's the right correction. ","width":256},{"text":"You still need to do it. It just wrong test case. Sorry. Okay.","width":384},{"text":"Have I completely wrong wrote it? You can stay for like first ten minutes of the next hour and then there will be like all smooth. But there will be no jokes.","width":563},{"text":"Because when I, like accidentally make a joke here and try to tell it in the second hour, total flat","width":448},{"text":"The whole algorithm truck thing, I thought that was kind of cute, right? Second hour, totally fall flat","width":512},{"text":"Totally. All right,  So the question is about how quickly this things evaluated. How do you know it that enqueuing and dequeuing doesn't happen super quickly","width":1102},{"text":"Right? So we are talking about the difference between constant factors here and the asymptotic analysis  ","width":448},{"text":"Um, the actual difference between empirical running time on this thing, depends on, you know, whether you run this in the cloud, whether you've implement your clue, Q,    ","width":704},{"text":"your clue, as an array or a link list. It depends on lots of difference things","width":320},{"text":"But what are we arguing over is constant factors and so, I'm saying","width":384},{"text":"that the inhering value of the algorithm, which we measure, ignoring constant factors, is not different oneway or the other  ","width":603},{"text":"It's always reasonable. When you have two equivalent asymptoticly equivalent algorithms  ","width":472},{"text":"It's always reasonable to give them a head to head run, simulated run in your context","width":438},{"text":"If it really matters. How fast, how concretely fast they are. Okay?","width":368},{"text":"If your, um, yes, right. But here we are mostly talking about asymptotic performance. Okay, it that good? ","width":576},{"text":"All right, any questions about this?","width":192},{"text":"Did I clarify that the first thing, so, you do have to have a conditional and the conditional should be around whatever you put in the Q","width":727},{"text":"and I just, was on autopilot. Sorry","width":241},{"text":"All right, any questions about it?","width":135},{"text":"Okay, I don't remember what comes next. Let's see. Oh, uh, the conversation we just had about binary trees and about traversals   ","width":754},{"text":"was really more one of implementing in algorithm. We are gonna step back for a second and talk about an abstract data type ","width":491},{"text":"I think, I'm coming to believe, or coming to feel perhaps, that this abstract data type is the most important one ","width":614},{"text":"that we use as sort of day to day programmers. And the genesis of my feeling about these dictionaries comes from my affection for Python and getting things done  ","width":896},{"text":"Okay? So I cannot say necessarily that it will be readily apparent how powerful these things are","width":637},{"text":"and contacts to be applications, we do. But there is classic understanding it will play into it ","width":384},{"text":"that, when you are programming in other languages, you will go, Oh I'm so glad I know this stuff. Okay?","width":448},{"text":"All right, so the abstract data type we are going to be interested in, is a dictionary.","width":357},{"text":"The interface to a dictionary is the bottom. We are gonna insert, remove and find by a unique identifier.","width":609},{"text":"Call that we commonly refer to as a key. Okay? So the abstract data type itself is consist of these.   ","width":679},{"text":"The data looks like, key/value pairs and the interface, the functionality of the ADT is insert, remove and find.","width":768},{"text":"By the unique identifier. Okay?  So","width":320},{"text":"I want to speculate for a second, just because it's kind of fun to do so. ","width":338},{"text":"On, if I have the following data, how would it be, how would it seem reasonable to implement a dictionary.","width":740},{"text":"So, uh, my data here, is a locker number. This is my, oops, this is my key. ","width":789},{"text":"And the values I'm going to put into the dictionary, or attach to each identifier","width":519},{"text":"I'm gonna refer to here as my data, though it's commonly refer to as value","width":512}]