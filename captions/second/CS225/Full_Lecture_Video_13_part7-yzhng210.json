[{"text":"How is this one implemented?","width":64.4},{"text":"If you have to describe this implementation, how would you describe it?","width":320.4},{"text":"Somebody raise your hand and speak for the crowd, yes?","width":455.4},{"text":"It's a linked list, very good.","width":128.4},{"text":"Chained memory put together we are using it now to implement my List class.","width":320.4},{"text":"Is there anything special about it?","width":192.4},{"text":"Yes?","width":64.4},{"text":"Yeah, it's not like MP3. We do not have previous pointers here.","width":320.4},{"text":"A typical way of describing this you might have seen in your earlier class is a singly linked list.","width":576.4},{"text":" Okay, we will refer to this as a singly linked list implementation of a ADT List.","width":640.4},{"text":"Ok? Alright. Let's see what we have then.","width":192.4},{"text":"We have a way of holding on to the front of it.","width":256.4},{"text":"A number of element that it includes.","width":192.4},{"text":"This little Find function that we are going to find helpful; that will be helpful to us.","width":576.4},{"text":"Okay, and here is the implementation.","width":192.4},{"text":"Guess I changed the variable name but otherwise, lol, Ohhhhhh..","width":384.4},{"text":"Wow.. Okay, do you all see my little bug?","width":256.4},{"text":"The compiler will help me so I don't even feel guilty about it. But you see my little bug here?","width":320.4},{"text":"These things are... in the wrong order, you can handle that one.","width":512.4},{"text":"And then we have this class defined...","width":320.4},{"text":"I was thinking about this last night and I think I should've been explicit.","width":256.4},{"text":"When I demanded that our base cases been NULL, I should have actually assure you that we intended to have a no-argument constructor for the listNode class.","width":1024.4},{"text":"Okay? I should've assured you of that.","width":128.4},{"text":" Alright! So this is an implementation of the List class together with one helpful helper function.","width":768.4},{"text":"Now, I have a question for you that I don't know if you can answer yet.","width":320.4},{"text":"But I want you to think about it.","width":64.4},{"text":"OK?","width":64.4},{"text":"We put this helper function in the private section of the List class definition.","width":576.4},{"text":"The question is why?","width":256.4},{"text":"Why is Find in the private section of the List class definition.","width":448.4},{"text":"Find is in private, why?","width":512.4},{"text":"I am gonna point to something that might help you.","width":896.4},{"text":"Yeah?","width":448.4},{"text":"Right, so we don't want the user to know the implementation and look, this Find function completely betrays..","width":704.4},{"text":"Well, actually it only halfway betrays our implementation, right?","width":320.4},{"text":"It shows them, oh bud, you got a pointer-based structure.","width":320.4},{"text":"And you know, built of nodes, and furthermore, the way we have this set up, they can't access it.","width":832.4},{"text":"Why? Because look, listNode is also private.","width":192.4},{"text":"So this listNode class right here that is so important to navigating our implementation of List.","width":768.4},{"text":"It isn't even useful to client. ","width":256.4},{"text":"Right? but that's OK, they don't need it.","width":192.4},{"text":"They only need to know positions inside the list.","width":192.4},{"text":"Alright? any question about that ?","width":192.4},{"text":"So why is Find private? The answer is because it relies on the details of the implementation for its functionality.","width":768.4},{"text":"And that implementation is hidden away.","width":128.4},{"text":"from client.","width":64.4},{"text":"Alright. Anything else? Any questions about this?","width":192.4},{"text":"Ok, let's see if there is anything else I want to say on this page. Hold on...","width":448.4}]