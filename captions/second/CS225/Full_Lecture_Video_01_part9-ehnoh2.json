[{"text":"The members are the collection of both variables and functions.","width":929},{"text":"And in the class definition itself, we declare our intent to define.","width":722},{"text":"Now, what that means is that we won't actually see any function definitions inside the class definition.","width":610},{"text":"So this is already different from Java, because in Java your class definitions are that long sometimes, right?","width":465},{"text":"In C++ not so much because we just make a list of the things we intend to define, rather than explicitly defining all of them.","width":691},{"text":"So now, in this class definition, we allow for our little control freakiness stuff to come out.","width":628},{"text":"There are two regions inside the class definitions that we use to control access to the members.","width":583},{"text":"And those regions are specified by a public keyword and a private keyword.","width":768},{"text":"Public keyword and a private keyword.","width":227},{"text":"And public is anything you want the user of the class to see.","width":1071},{"text":"Now who's the user of the class, it's whoever did this, it's whoever made the declaration.","width":635},{"text":"Private, though, is what you want to control.","width":242},{"text":"Two purposes to private.","width":113},{"text":"One, you want to control access because you don't want a calling function, you want to control the calling function changes your data associated with the thing. ","width":743},{"text":"That's one reason.","width":81},{"text":"And two, actually, I can think of another reason, two, you don't want to expose to the calling function the way you have implemented something.","width":704},{"text":"And three, you want some special place that you can put your utility code that nobody can mess with, that nobody needs to see.","width":832},{"text":"So these are usually the following things: the data of associated with the class object, and those are the variables that I referred to on the other page.","width":1487},{"text":"But also, functionality that only the class itself needs.","width":492},{"text":"And we won't worry about that for a while.","width":640},{"text":"Okay, so I made a big stink out of the fact that the class definition includes only declarations for all of the members.","width":1024},{"text":"And then the question is, well where does the actual implementation go, where does the code go?","width":363},{"text":"And the answer is, in a separate file.","width":283},{"text":"We actually implement all the functions in a separate place.","width":298},{"text":"That allows us to kinda keep the value of our implementations, to not show the world how clever we are, because we're going to bank on it. We're going to make bank on it.","width":800},{"text":"So, often times, we would define a class like this.","width":546},{"text":"We will put the declarations in a file called sphere.h and we will refer to it as the header file.","width":787},{"text":"And we'll actually put the member function definitions in another file called sphere.cpp.","width":576},{"text":"And I'll show you later how to compile those together. Actually the lab might show you how to compile them together.","width":390},{"text":"Alright, next time we will start exactly right here. That is, wait, stop, freeze. Everybody freeze. Freeze. You're just not doing it, are you? ","width":1156},{"text":"We're going to start with the design component of the class definition.","width":406},{"text":"We're going to start talking about: What is a sphere? What kinds of things should it be able to do? What data do we need to keep about it?","width":560},{"text":"At the very start of next time. Alright, bye.","width":448}]