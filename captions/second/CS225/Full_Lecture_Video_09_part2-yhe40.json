[{"text":"Very good.  So remember that our two tasks are clear and copy.Ok? So let’s do that.  b gets the value of a.  So we clear…..","width":1039},{"text":"And there is nothing to be copied anymore. ","width":184},{"text":"So we basically invalidate our algorithm here, invalidate our data here. We are gonna solve that in the code we write  for the assignment operator by protecting against self assignment.","width":1277},{"text":"Ok? And then the other thing that we need to do is to implement this behavior. ","width":765},{"text":"So C-based languages tend to let you chain together assignment operators.","width":416},{"text":"ok?  And all we are doing by creating the , writing the assignment operator is a single chain right here. ","width":744},{"text":"I am gonna draw a pair of parentheses and see if that helps you come up with a suggestion that we might use to create a chain assignment operator. ","width":934},{"text":"How could we implement that. How could we make it so it is ok to return values. ","width":486},{"text":"I am sorry. To assign chain values. I just said the whole thing. I have no brain. ","width":313},{"text":"Ok, so I said the answer that I was hoping you would say. So sorry...","width":301},{"text":"Alright. So notice this is a function call. Right? This is just like b.operator=(a). ","width":675},{"text":"If it were to return a value and then that value could be the right hand side of c's assignment statement. Right?","width":826},{"text":"So effectively, what we want is c.operator=(b.operator=(a)).","width":768},{"text":"How do we achieve that? Well we have a return value out of the assignment operator.","width":491},{"text":"And I am just gonna describe that as return a helpful value.","width":587},{"text":"Ok? Any questions about it ? Alright. So let's make some plans. ","width":567},{"text":"Here is what the function signature looks like. We are gonna just sort of make a list of things that we are gonna need to do when we actually write the code.","width":704},{"text":"Ok. Make a list of things we need to do. First things is:","width":300},{"text":"We need to protect against self assignment. ","width":641},{"text":"And that's a conditional. That says if the things already don't refer to the memory address then we are going to clear out the left hand side.","width":981},{"text":"Then we are gonna make a copy of the right hand side. ","width":388},{"text":"And then in the end we are going to return a helpful value. ","width":878},{"text":"Ok? We will talk about that in a minute when we write code. ","width":266},{"text":"And any questions about it? Ok? ","width":175},{"text":"So this is our list right? This is a list of what code needs to look like. ","width":300},{"text":"Writing  code this way is really common. You know. Do your comments first and then fill in the blanks. Because no one of these is going to be  particularly complex.","width":830},{"text":"And here we go. Alright. So how do we protect against self assignment? ","width":707},{"text":"How could we ask the question of whether or not being \"A\" refers to the same spot in memory.","width":593},{"text":"Yes?","width":256},{"text":"So if this is no the same as right hand side it's almost correct.","width":780},{"text":"Help me debug it.","width":256},{"text":"What is the right hand side? ","width":256},{"text":"What kind of thing is right hand side?It's a sphere. ","width":279},{"text":"What kind of thing is this? I think I have only mentioned this very quickly once. ","width":256},{"text":"So I will write it again here. \"this\" is a pointer  to the current object. ","width":768},{"text":"Ok? And in this case that's the left hand side. ","width":768}]