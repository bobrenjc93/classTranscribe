[{"text":"Yes, new is a keyword that we use","width":192},{"text":"It's followed by a type. Its argument is a type.","width":256},{"text":"Okay? it returns a poitner","width":256},{"text":"a keyword that returns a pointer","width":192},{"text":"Alright, any questions about picture so far?","width":320},{"text":"Let me tell you about null.","width":192},{"text":"Null is a canonically zero memory address","width":640},{"text":"Ok? So null is a canonically zero memory address","width":576},{"text":"Not garbage, it's not garbage, and the main thing that differentiates it from garbage is that you can test against it.","width":832},{"text":"You can say \"if p is not equal to null\"","width":256},{"text":"or \"if p is null\"","width":192},{"text":"So the key point is that it is testable.","width":320},{"text":"Whereas garbage, not so much","width":256},{"text":"Alright, so now all we're saying is","width":192},{"text":"Nevermind","width":64},{"text":"I don't want p to point to that old memory anymore.","width":320},{"text":"I want to set it to this canonically zero memory address","width":576},{"text":"Now, do you like this? Why not? Yeah? *student speaks*","width":576},{"text":"What about p's pointee? We went to the effort of asking","width":512},{"text":"\"Yo heap, give me some memory. It did so, and then all of the ways of referring to it were removed. All of the variables essentially turned their backs","width":704},{"text":"You can tell because you can look around it and there's nothing existing coming into it anymore","width":512},{"text":"This makes me very sadddd :(((","width":256},{"text":"And in fact, so sad *drip drip drip*","width":448},{"text":"we call it a memory leak","width":192},{"text":"Ok?","width":384},{"text":"So a memory leak occurs when all references to heap memory are removed","width":448},{"text":"","width":1216},{"text":"Ok?","width":128},{"text":"Well this is a pain. How do we fix it?","width":192},{"text":"And the answer is, we fix it by ","width":192},{"text":"using keyword \"delete\"","width":192},{"text":"So delete is the keyword that we use to say, ok, I'm all done with this memory now. The system can re-use it if it wants to.","width":640},{"text":"So in this scenario what we're going to do is say delete q","width":320},{"text":"Delete q, that frees the memory and now we can say that q is equal to NULL.","width":704},{"text":"And we have not created a memory leak","width":192},{"text":"So how could we have fixed the p leak?","width":448},{"text":"That will be funnier to you when you have children.","width":512},{"text":"How could we fix the leak around variable p?","width":256},{"text":"How could we have fixed it?","width":448},{"text":"Yeah?","width":64},{"text":"*student talks*","width":64},{"text":"","width":384},{"text":"Right. Exactly.","width":128},{"text":"So he said not have set it to null before deleting it","width":256},{"text":"so I could have said delete p right there.","width":192},{"text":"Free the memory, then set it to null","width":256},{"text":"so it's testable. Yes?","width":128},{"text":"*question from student*","width":128},{"text":"If you say star p equl null","width":192},{"text":"you'll get a type mismatch because star P is an integer.","width":448},{"text":"Star p means what you're pointing to","width":64},{"text":"And that thing that it's pointing to is an integer","width":320},{"text":"So you have a type mismatch across the assignment statement. ","width":384},{"text":"Yes?","width":64},{"text":"That's right, if you set it to null before deleting it, you cannot fix it.","width":384},{"text":"We have tools to help us, but we should still play __ here.","width":256},{"text":"Alright, anything else?","width":128},{"text":"Anything else interesting? Yes?","width":192},{"text":"*student *","width":192},{"text":"Oh, gosh, you guys are amazing. it's my next slide.","width":448},{"text":"So everybody looks. Wait a minute, we're not quite done with this yet.","width":192},{"text":"So deleting a null pointer. So saying delete on Q is a no-op.","width":576},{"text":"That's a no-op, but dereferencing a null pointer, think about what that says","width":448},{"text":"It says, follow the pointer coming out of this thing that's null","width":256},{"text":"There's no place to go. There's no place to go out of a null pointer","width":448},{"text":"It's just testably nowhere","width":192},{"text":"This is called a segfault","width":192},{"text":"And it happens at run time","width":256},{"text":"So actually, dereferencing a null pointer is kind of a bad bug","width":384}]