[{"text":"And then the standard template library container classes usually will have have a forward iterator, a backward iterator, a bidirectional iterator, so you can go forward and backward, and const versions of each.","width":1216},{"text":"[Video playing]","width":320},{"text":"Which means you can look at your data but you cannot change your data.","width":256},{"text":"Ok, any questions about all that?","width":128},{"text":"Your world changed today, huh? You didn't know these existed.","width":384},{"text":"Ok, how do you think we achieve this reverse iterator?","width":320},{"text":"Going backward through the list.","width":448},{"text":"Minus minus. It overloads minus minus.","width":384},{"text":"Okay, alright any questions about it? You're doing good?","width":256},{"text":"Okay, alright, so let's talk, oh. Let's go, let's move, so here's the thing, here's what I want for you: I want you to be able to leave this room and feel confident using iterators, like \"Oh I need an iterator for this\" and get the right Google search and find the appropriate iterator to write code that traverses any kind of container class, thatâ€™s what I want for you.","width":1664},{"text":"But I also, if your employer or your advisor ever says I need somebody to implement a new iterator, I want you to be the one that goes, \"Oh, I'll do that!\"","width":896},{"text":"So we are going to pull back the hood a little bit and look and speculate about exactly how these things are implemented, okay? So that you see what kind of decisions you would have to make if you were actually to do an implementation.","width":1088},{"text":"Am I in the way? I'm not in the way, right? Okay.","width":192},{"text":"Alright, so we agree, we agree, I think, that we're going to need for, if say a linked list were the thing that was encapsulated, we would need some private member to keep track of where we were.","width":1408},{"text":"To save the state inside the object of the class, to keep track of the fact that your iterator is, you know, pointing to, you know, that one, instead of to any other one, okay?","width":832},{"text":"And we're going to do that via some private member; that's what this PM, PM does not mean \"message me!\" It means private member.","width":896},{"text":"Okay? It doesn't mean afternoon either. Doesn't mean nap time; no yawning.","width":384},{"text":"Alright, so if you were a linked list and you wanted to, say, keep track of where you were. What kind of thing would you do?","width":640},{"text":"What kind of thing would you keep track of if you were trying to keep track of where you were in a linked list?","width":448},{"text":"Curr pointer, good! So in a linked list, you'd have a listNode pointer, you might call it \"curr,\" and it would just sit there until somebody did this plus plus.","width":1024},{"text":"Now, if somebody said \"plus plus\" to the iterator, what would happen to that curr? Yeah?","width":512},{"text":"Good! So, plus plus is implemented like curr = curr->next. ","width":512},{"text":"Okay?","width":320},{"text":"And how would you look at the value inside, how would you dereference, how would you look at the value inside of that pointer?","width":512},{"text":"You'd look at curr's, what did we call it? Data, we called it curr's data, so you'd return curr->data.","width":640},{"text":"And look, you have just, you have almost implemented an iterator for a linked list class. Okay?","width":576},{"text":"What would a reverse iterator, what would a reverse iterator for a singly linked list look like?","width":640}]