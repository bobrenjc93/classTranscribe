[{"text":"Alright.","width":64},{"text":"So, uh, I've didn't look at my slides, and you're not gonna look at yours, but what do you think is the next thing we're gonna do?","width":704},{"text":"We've talked about the abstract data type, what's the next thing we're gonna do?","width":256},{"text":"We're gonna talk about the implementation, that's right.","width":256},{"text":"So what do you think our choices are for implementing a queue?","width":320},{"text":"We're gonna implement it using an array or a linked list. This is deja vu, right? Okay.","width":576},{"text":"We're gonna use an array or a linked list. Let's see how that plays out.","width":256},{"text":"It's a surprise for me which one is the first one we talk about.","width":320},{"text":"Okay, so we're going to set up a linked memory based implementation, and I'm gonna play a little game with you. I'll assert that we only need a singly linked list to do this because after all, you know people only move one way through a queue.","width":1408},{"text":"Data will only move one way through a queue.","width":192},{"text":"My question for you is, if I give you-- oh, in addition to the head holding onto the singly linked list, I'm gonna give you another pointer at the tail.","width":1024},{"text":"And that tail is going to point directly to the last element. We're not gonna mess with sentinels in this context.","width":512},{"text":"So the tail is going to point directly to the last element.","width":384},{"text":"Now, what I want to know from you is, which of these pointers is entry to the queue, and which one of them is exit from the queue?","width":768},{"text":"And which one of them is entry to the queue, and which one of them is exit?","width":384},{"text":"Uh, so, I'm gonna have you vote, I'm gonna have you vote on this. I'm gonna ask you which one is the head.","width":640},{"text":"Okay, so I'm gonna be asking you a question about whether this is the entry or exit from the queue.","width":448},{"text":"When you're ready with your answer put your hand on your head.","width":384},{"text":"Alright, that's quorum I think. Alright, so raise your hand if you think that is the entry to the queue.","width":768},{"text":"If the head is the entry to the queue.","width":128},{"text":"Okay, everybody see? And raise your hand if you think the head is the exit from the queue.","width":320},{"text":"Okay good.","width":192},{"text":"So there's a little bit of disagreement here, right?","width":384},{"text":"And the disagreement arises because of the way the arrows make you think.","width":384},{"text":"It's because you think, \"oh look, those arrows tell the person where to go through this process\". But think about it.","width":512},{"text":"Let's think about what we would have to do if this is the exit.","width":320},{"text":"If that last element is the exit, what are we-- how are we gonna do it? What does that code look like?","width":704},{"text":"What does the code look like?","width":256},{"text":"You gotta get a hold of this guy, right?","width":320},{"text":"You need a pointer to that node right before.","width":256},{"text":"How much does that cost you?","width":128},{"text":"Okay, so that's too expensive. We can do better.","width":448},{"text":"Alright, so let me summarize that first.","width":256},{"text":"So a tail exit induces I think is the right word, a linear time big O(n) reset of the tail pointer.","width":1344},{"text":"Now, can we do better? Removing this one? Taking that eight off the front?","width":640},{"text":"Sure.","width":192},{"text":"So, the exit needs to be the head.","width":256},{"text":"All of this means head is exit.","width":384},{"text":"Now, but wait a minute, can we add new data at the tail efficiently?","width":384},{"text":"Sure, watch.","width":192},{"text":"We've got tail, right? We're gonna make a new node, put a 12 in it, I don't know, make a new node put a 12 in it.","width":640},{"text":"We can get this pointer easy enough because it's just tail->next, and then we walk tail forward one.","width":384},{"text":"So, tail entry is easy.","width":384}]