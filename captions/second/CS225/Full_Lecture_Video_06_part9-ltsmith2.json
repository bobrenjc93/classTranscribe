[{"text":"of pointers slash and there's one other teeny teeny teeny teeny tiny issue here. It's subtle. And it is a potential bug here when we pass around pointers. I'm gonna write a little piece of code and you're gonna respond. Yes? Yeah. Right. If you pass null pointers to that function, what happens? Yeah it's a segfault right? So how would fix that if you were writing that function? You'd have to put a conditional there and you'd have to handle the issue if it is a pointer. So another advantage here is that as fast pointer passing without the complexity of dealing with pointers but also it can also never be null. It always will have a value. So this is like a pointer that cannot be null. So we love it. K. I'm writing in red. Alright any questions about that? No. No. Nope. So the question is all about the heap. None of this involves the heap. All of these parameters are set up in local memory. In stack memory. All of the parameters are like local variables. They're like stack variables. So nothing happens with the heap as you pass the parameter. Now this could have been oh yeah uh this could have been, let's see, how does this go? This could have been *c and then we pass the address of c, in which case that memory location would be renamed s right. The memory location would be named s so we could to it directly. Alright any questions about it? But then that's just tangling things up. OH look at us it's two more minutes. No sit back down. Alright. So there's one more little piece and we are going to spend most of next time talking about it but there's one more little tiny piece that I think it's now is a good time to talk about because the issues are analgous. When you return control back to the calling function, that is when you say return something all the same issues exist. You can return by value or you can return a pointer by value or you can return by reference. So mechanics are effectively the same and next time, wel","width":14400},{"text":"And next time we'll talk about the consequences of that fact","width":512}]