[{"text":"Um, so we already, we yes. There's a jump here. You didn't know when I first talked about inheritance why I was telling you that it was ok to have a pointer type on the left. A base class pointer on the left and a derived class pointer on the right. You didn't know where I was going with that, but we did talk about the fact that that was ok. So this assignment is ok because the thing that we're making is a flower. We're building a flower at this point. Right here, I'm sorry, this is wrong. This is wrong, that's why. I almost broke your brains. I am so glad you asked that question! What could I have said that would have not been confusing here? Daisy, very good. Oh my gosh. the whole point of the whole slide was the word that I wrote here, and I screwed it up. Great. Come back next hour, that mistake will not be made, or maybe it should be! maybe I should do that on purpose. Just to see if people are as awake as you. Alright. So, everything I just said is true still, it's still ok to declare a flower pointer, cuz there is no flower constructed there. It would not be ok to say new flow, because we can't build a flower, but we CAN build a daisy. Alright, any questions about this? You should have a question I think. There's no slicing, so we make a daisy, right? Right, so the thing is though, the problem is that once we do this daisy, we don't have access to the daisy specific functionality, but you do have access to any polymorphic function, so when you prescribe what functionality it should have, they're all going to have it anyways because it's virtual, so we can reach it through the flower pointer. Because the functions are declared in the flower. Let's talk about it later, and i encourage you to go experiment. So here's the thing about inheritance, you see it about twice in this class, well maybe three times. We're doing it mostly because you're going to see it in your life, not because you'll see it a lot in data structures in this concert. We're trying to increase your curiosity about it, a little bit of functionality, but not a while lot. I have a question for you, what if i had done this? No, the presence of that = 0 does the same thing. If there's one of the =0, then it is an abstract class. Can I add an equal 0? can I do that? Yes, I can, but the I have no daisy. What this says is that I derive from the daisy class, well is it a Gerber daisy or a freeway daisy?This demands that we be specific about the kind of stem that we draw, apparently. Any questions about it? There may be some sort of reduncy there, in fact I don't think the compiler will let you say =0 without putting virtual  f","width":17258}]