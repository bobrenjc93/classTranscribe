[{"text":"65 okay let's try it and count. Okay we're going to go off","width":413},{"text":"on search node that's going to require more.","width":68},{"text":"But we'll try. We'll prove him wrong. I think he can handle it. Can you handle being wrong","width":309},{"text":"about 3? Okay, alright, thank you.","width":106},{"text":"Okay, so we're going to go on a search for 65.","width":320},{"text":"Okay?","width":64},{"text":"Now is 38 65? That's one comparison. Is 38 65?","width":320},{"text":"This one's easy. You can all say no.","width":256},{"text":"Okay? Alright so finally we haven't found it yet but we know where it must be. Where must it be?","width":384},{"text":"To the right, good.","width":128},{"text":"Have we found it?","width":101},{"text":"No, so that's another comparison. Where must it be? To the right, good.","width":384},{"text":"Have we found it? No, that's another comparison. Where must it be? To the left? Have we found it? No.","width":569},{"text":"That's a comparison. Where must it be? To the left, ohhhh, but there's nothing to the left.","width":640},{"text":"So","width":64},{"text":"Find 65 is gonna return. Well, i don't know what the interface looks like exactly.","width":345},{"text":"We'll say it returns NULL, cause it'll return what's there","width":427},{"text":"Okay, alright because it's not there.","width":120},{"text":"Alright, any questions about that?","width":128},{"text":"Okay so the same kind of reasoning that we apply to insert can be applied to find as well.","width":384},{"text":"Now, here's a little foreshadowing for you. I'm going to spend a whole lecture on remove. ","width":320},{"text":"Yeah, okay. Did you have a question?","width":576},{"text":"Oh, good question. You are two lectures ahead of the game. Okay? So she's worried about the fact, she's worried about the fact that it might not be the case that the tree is so beautiful.","width":1182},{"text":"This tree is beautiful. Well, it's almost, it's actually isn't quite beautiful. What the heck is she talking about, right?","width":241},{"text":"Because we have approximately the same sub-structure on the right as on the elft","width":549},{"text":"Do you see that?","width":64},{"text":"We have approximately the same and we're pretty lucky","width":192},{"text":"She's already thinking about what if those are not approximately the same sub-structure. ","width":362},{"text":"Does the world get ugly, and it does.","width":138},{"text":"Okay, but we're not there yet.","width":128},{"text":"We're going to do the simple stuff first.","width":192},{"text":"Okay, what's the running time for traversal?","width":326},{"text":"Big O of n still, that's right. Good.","width":230},{"text":"That's a review question","width":65},{"text":"Okay, alright, so let's write the code.","width":128},{"text":"Okay, I want to return a treeNode pointer.","width":320},{"text":"And I'm writing a function called find for the BST class","width":465},{"text":"And it takes as a two values: the root of the tree and some key to find.","width":896},{"text":"Okay?","width":64},{"text":"So here's root and I'm going to call this version of find like this.","width":448},{"text":"Find on root and then whatever key I'm trying to find.","width":328},{"text":"Let's find for you and example","width":307},{"text":"I'm not actually going to do it.","width":149},{"text":"Okay, so, if cRoot, we're going to think about this recursively, okay?","width":320},{"text":"We're going to think about this recursively and the way to do this is to break the tree that you consider into two kinds","width":488},{"text":"The first of which is NULL, okay?","width":113},{"text":"So if your reasonable tree is NULL, what should you return?","width":357},{"text":"Okay, so return NULL","width":256},{"text":"We could actually return cRoot here. It wouldn't hurt anything, okay?","width":275},{"text":"Cause it is NULL. We just tested that it's NULL.","width":150},{"text":"Alright, fine, if so otherwise, otherwise the tree is not empty, so now we are actually in the recursive case.","width":712},{"text":"We are actually in the case where we're not NULL. We're in the general case.","width":448},{"text":"If we're in the general case, we still have some things to consider. Those three things to consider in this general case are:","width":564},{"text":"If the root is equal to the key, what should we do in that case?","width":320},{"text":"Return the root","width":128},{"text":"Otherwise if cRoot key, wait, if our key, I want to do it this way. I don't know, it's easier for me to think about it if our input key is less than cRoot's key, is that a safety reference?","width":1408},{"text":"Yes, because we know cRoot is not equal to NULL. That's the other case.","width":384},{"text":"Okay, if key is less than cRoot's key, then uhhh, what? Return, good.","width":448},{"text":"What are we going to return?","width":192},{"text":"We're going to go looking for it, right?","width":192},{"text":"We're going to going looking for it in cRoot's left.","width":126},{"text":"So we're going to return the find on cRoot's left","width":320}]