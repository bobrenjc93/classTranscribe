[{"text":"Yes! right, because those go off the stack, those are free","width":320},{"text":"for you, yes? ","width":256},{"text":"Um yeah because it's an array. ok you need the brackets because it's an array,  if it were just a pointer,","width":448},{"text":"if we had instantiated this, as just a string pointer, a pointer to a word","width":576},{"text":"then, you wouldn't need the brackets, you would just delete it, ok so in general, ","width":384},{"text":"you're delete should match your news. whatever kind of new statement you use to create the thing, usually in your constructor, you're gonna use a similar thing in your destructor","width":768},{"text":"any questions about that? is it good?","width":192},{"text":"","width":128},{"text":"it's called right after the return, it's as this um execution completes, and control is passed back to the calling function","width":832},{"text":"alright","width":128},{"text":"any questions? you good?","width":254},{"text":"","width":131},{"text":"oh my gosh, there is so much book-keeping going on for you, we are so lucky, right? like your grandfather, my parents, I shouldn't have said that. Look at me do that! your grandparents in computing my parents in computing, um, they think that life is way too easy for us","width":1728},{"text":"Actually, it's probably my grand parents, your great grandparents, but they think that computing is way too easy for us when in fact, you know, the fact that we don't actually have to keep track of what variables we're using, ","width":1024},{"text":"ourselves, is just ugh. we're not authentic programmers, so the early days of C were pretty harrowing, so there's a ton of book-keeping going on, and part of what they keep track is what amount of memory is associated with each variable","width":1195},{"text":"Alright, and you'll learn about it in future classes because of course that's what generations do, we need to inflict the pain of the pervious generations ","width":702},{"text":"alright, um, anyt questions about it? you good? ok, I have another story to tell you here. I'm gonna take you through another little piece of code, ","width":640},{"text":"Here's how this piece of code goes. ","width":256},{"text":"this time, I'm going to declare a sphere pointer b","width":448},{"text":"So here's b, and i'm going to ask for a new sphere ","width":384},{"text":"Now, we've made a constructor for a sphere, we made a constructor for a sphere, that sets up a default sphere to look like this","width":806},{"text":"so when I say new sphere, that constructor is called for us. so at the end of this statement, it's perfectly reasonable for me to draw this picture","width":896},{"text":"Making note of the fact that the sphere constructor was invoked for us. ","width":449},{"text":"not the copy constructor, the no argument constructor,","width":384},{"text":"any questions?","width":584},{"text":"Ok, now, let's look at what happens when we say delete b. ","width":491},{"text":"What do you hope happens when you delete b? When you say delete b what do you hope happens? by default. ","width":576},{"text":"what do you hope happens? All of this memory, all of this memory is given back to the system, right? by default, without the destructor, only this part is given back","width":1024},{"text":"no dynamically allocated memory, no memory allocated with a new, is given back","width":448},{"text":"so again, we're responsible for writing a destructor that makes that happen, this is the same destructor, it's just used again","width":595},{"text":"so if you rememebr that code looked like, this","width":256}]