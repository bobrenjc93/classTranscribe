[{"text":"Anybody have longer than baggage? Oh, haha. Alright, fine. Debaggaged. Ohhhhhh. Now there's no 'R'. Okay.","width":2176},{"text":"Alright, the only lesson we need is to read the questions carefully","width":320},{"text":"And make sure, you know, what's being asked at all, you know.","width":384},{"text":"Not being entirely here, so, fair, fair point","width":256},{"text":"Find an edge that is not on the longest path in the tree.","width":256},{"text":"Now we are talking about connectivity. Now we care a path is defined on edges that exists.","width":512},{"text":"So what's an edge not on the longest path in the tree. And I understand that's not unique, but the edge is unique.","width":704},{"text":"What edge? Yah. A to B, very good. How should I write that? How should I represent this edge? So I can draw very easily right? ","width":768},{"text":"Oh look, here's the edge. How should I label it? What's a good name for that edge? AB right? There's a lots of way to do this, I'm going to do this right now.","width":768},{"text":"OK? Since it's undirected. Since it's graphic is undirected, I'm going to say that that is equivalent to edge BA.","width":576},{"text":"Alright, for the rest of the exercises, assume the tree is really one of the vertices is called the root. Guess which one is this? Everybody say it?","width":576},{"text":"Good. Make an English word containing the names of vertices that have a parent but no sibling, or brother.","width":737},{"text":"Well the words are those. So B, G, H. Think of word that have those three letters.","width":1216},{"text":"Huggable. Okay. Yah, containing, here we go. ","width":960},{"text":"How many parents does each vertex have? One except for (root), okay.","width":512},{"text":"And I pointed that out because programmatically, it has implications. Right? It makes special case in that respect. ","width":576},{"text":"If you're writing code that refers to its parent. It makes a special case of the root only in this structure. Right?","width":640},{"text":"Alright, which vertex has the fewest children it's a tie between E, F, I, J. So I'm going to make a little set of them.","width":640},{"text":"Which vertex has the most ancestors? I and J, it's tie. Good. ","width":448},{"text":"Which vertex has the most descendants? That will always be the root of the rooted structure.","width":448},{"text":"List all the vertices in b's left subtree. So there's a lot of vocabulary there, and when we talk about left, we referring to the conventional notion of left, okay?","width":960},{"text":"It means, this, it's not as b adds a standing on b's left, okay. Very confusing. It's b's left as you're looking at B.","width":896},{"text":"So all vertices in b's left subtree, E, C, F, in no particular order.","width":512},{"text":"All the leaves we're asking about that set again, E, F, I, J. Okay. any questions about it? Good? No surprises? Yah","width":768},{"text":"What's the longest path? It's the path with the most edges on it.","width":448},{"text":"Path link? Okay I'm not going to say this now. I'll so more formally later. Path link is determine by how far you walk, if you're walking on a graph.","width":768},{"text":"Which means the number of steps you take, or the number of edges that you traverse.","width":384},{"text":"So path link is the number of edges, not the number of vertices. Okay? Alright, any questions about any of this?","width":640},{"text":"Alright, let's keep going here. Oh good we got time. This is my favorite tree. It's my favorite tree.","width":576},{"text":"No it's not Pokemon. Pokemon would be a good one too. Can you tell what it is?","width":384},{"text":"Mario","width":384}]