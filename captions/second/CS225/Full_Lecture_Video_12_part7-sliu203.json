[{"text":"Just a sequence of assignment statements that are going to be the same every time we execute this code. Alright, any questions about it? Okay, fine. Here's another one. 8 4 2 6 3. So suppose we built up this list; suppose we built up this chain of linked memory and this one is we'll call it head and we'll pass it in. We want to printReverse(head). So what we expect out of this is the sequence of printed numbers. We want this to return 3 6 2 4 8. Any questions about it? About what we expect this hting to do? Alright, here's what we want to exploit in this code. We want to exploit the fact that this chain of memory all linked together is a listNode pointer instantiated with the listNode together with another chain that looks just the same, that is just a smaller instance of the original problem. This situation begs for recursion, that's right. Any time you can break a structure down into something that is smaller than the original but has the same characteristics of the original, you're talking about a recursively defined structure. Alright, so that's what we have here and that's what we're going to exploit. So suppose I can print the reverse of this, the rest of the list. Suppose I know how to print the reverse of the rest of the list. How do I assemble that into a print the reverse of the whole list?","width":9390},{"text":"Yeah? Very good, very good. So you print the reverse of... print, reverse of the rest of the list and then print the first node. Node's data, should be careful about that. Any questions about that? What's the base case here? Oh, we're in the world of recursion. No, that's right. What's the reverse of the empty list? Nothing right? There's nothing to be done. Alright, I think you just suggested all of our code here. So my code is going to look like this. If (curr != NULL) then I'm going to printReverse(curr->next) and then I'm going to cout <<  curr->data << endl.  ","width":6776}]