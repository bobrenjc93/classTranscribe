[{"text":"find one two three, oh there it is yep it was there. right?","width":512},{"text":"ok so three, so notice this is pretty cool, it didnt have to examine the entire tree in order to determine whether or not 40 was in the tree. Alright, any questions about it?","width":768},{"text":"ok so whisper to your neighbor, a value that could be 48s right child. ","width":768},{"text":"whisper to your neighbor","width":384},{"text":"ok","width":192},{"text":"alright fine","width":448},{"text":"done","width":64},{"text":"good","width":64},{"text":"alright","width":64},{"text":"any questions about this?","width":128},{"text":"im going to come back to this applet in a minute","width":256},{"text":"ok ok ok","width":128},{"text":"present, please, what if I say please","width":576},{"text":"alright","width":128},{"text":"ok","width":64},{"text":"so the only one of the major functions associated with the dictionary class and with binary search tree implementation of the dictionary class we havent talked about is removal, and I want to spend the entire day talking about removal","width":1472},{"text":"who knew it was so hard","width":128},{"text":"because actually insert and find are a piece of cake. ok i wanna go ahead and write the code for remove","width":896},{"text":"and I did so by cutting and pasting the code from insert","width":64},{"text":"and what did I take from it? well only the recursive sub structure of the problem itself","width":640},{"text":"I only took the piece of the cod, I essentially took, the piece of the code that arises as an artifact of the definition of a binary search tree","width":1088},{"text":"and that is a base case, and we could argue about what that could be","width":384},{"text":"what to do if the thing were looking for is less than the key in the current node","width":576},{"text":"or what to do if it is greater than the key in the current node","width":256},{"text":"any question about that?","width":128},{"text":"so we have equal to, less than, or greater than","width":576},{"text":"that cant be right right?","width":192},{"text":"I dont know what I meant","width":128},{"text":"I think this is supposed to be, lets see which way should I fix it","width":384},{"text":"now fixed","width":64},{"text":"[silence]","width":1024},{"text":"I just called the key d instead of k, bad variable naming but at least now its consistent. This is what you want, k, k ,k, k. Does that make you happier?","width":1152},{"text":"Cause k-k-k-key starts with k-k-k-kay","width":512},{"text":"do I have it right now?","width":192},{"text":"alright, so what is so hard about this? its just a few lines of code and weve seen those lines of code","width":640},{"text":"the issue is, what the heck do we do when we do the removal?","width":704},{"text":"So I dont wanna think about exactly how to make the remove, right now, how to make it happen, right now","width":448},{"text":"and so im gonna push it off into some other function to be thought about later","width":384},{"text":"ok now, notice what this does from a software development perspective. If I write a skeleton for this function for removal","width":704},{"text":"that is if I have a stub and just have it return whatever I want ","width":320},{"text":"then I can then I can test this function without yet ever even having to implement this one","width":704},{"text":"so this idea of decomposing our seemingly difficult task into these separate functions is something thats gonna actually improve our quality of life, our debugging processes, which are intricately related to our quality of life","width":1344},{"text":"ok so why is this so hard, why isnt this a one liner, kind of like find is?","width":448},{"text":"uh well","width":128}]