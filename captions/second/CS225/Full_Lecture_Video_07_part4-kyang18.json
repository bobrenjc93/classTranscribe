[{"text":"hmm","width":64},{"text":"oaky got it. Any question about that?","width":960},{"text":"this is really all we are going to discuss in the context of return values","width":256},{"text":"these two warnings","width":192},{"text":"these warnings ummmm honestly you are not going to see returning by reference very often","width":576},{"text":"because you can return a local variable by reference","width":192},{"text":"you can't return a parameter by reference cuz that's kind of the same","width":256},{"text":"right? I could not hear return S because it's the same issue","width":448},{"text":"S is going to go out of scope","width":192},{"text":"so what can you return by reference?","width":192},{"text":"what could you return by reference?","width":256},{"text":"what could you return by reference? does anybody see it? it's like a puzzle","width":512},{"text":"yeah?","width":384},{"text":"you return a global variable hmmm","width":256},{"text":"you could do we know how to refer to global variable at this point?","width":320},{"text":"ahhhh I dont know","width":128},{"text":"yes you could return a global variable there because that memory address that reference is not that memory that it represent is not gonna go away","width":576},{"text":"so anything in the external scope you could anything else?","width":256},{"text":"yeah?","width":128},{"text":"so if something were","width":256},{"text":"in the heap you could return it by reference","width":384},{"text":"problem is often time we don't have name for those things","width":192},{"text":"often time we don't actually name for the values in the heap so it's little harder okay?","width":448},{"text":"anything else?","width":128},{"text":"anything else?","width":256},{"text":"yes?","width":128},{"text":"the parameter as it is is like a local variable","width":320},{"text":"okay?","width":64},{"text":"but there's a big hint there","width":128},{"text":"the parameter as it is a like a local variable that means it get cleared of the stack too yea?","width":384},{"text":"","width":320},{"text":"very good so if I pass something in by reference","width":320},{"text":"if I pass huh if pass something in by reference, then I becomes another name for the value in the outer scope","width":832},{"text":"and so I can pass that one back by reference here","width":256},{"text":"because then that would be we're basically referring to C okay?","width":448},{"text":"any question about it? is it okay? alright","width":256},{"text":"I think reading this and becoming comfortable with reference requires just a little practice","width":512},{"text":"and more code you see and more code you write you will become more fluent with this","width":320},{"text":"I remember looking at C code and not being able to figure out type information","width":384},{"text":"just not being able to do so and now I'm like boy it's not that bad yea?","width":448},{"text":"yes","width":192},{"text":"right","width":64},{"text":"so the error is basically non-existent","width":128},{"text":"you are only lucky if you get an error otherwise it's just unreliable yea?","width":384},{"text":"","width":256},{"text":"","width":64},{"text":"yea?","width":64},{"text":"","width":320},{"text":"um","width":128},{"text":"","width":64},{"text":"so the question is when I return W through that reference what's left on the stack","width":384},{"text":"and the answer is the C","width":64},{"text":"the basically the um the stack is keeping track of its top and anything below that is valid","width":512},{"text":"and when you pass control back","width":192},{"text":"the top of the stack is moved down anything above is moved down below the local variable","width":384},{"text":"so anything above it any of the local variables are basically invalid memory at that point","width":384},{"text":"alright yeah?","width":192}]