[{"text":"p = q? Um yeah, cause q currently has garbage, right? Yeah. He asked about the inverse assignment.","width":576},{"text":"Okay fine. This first page is warmup. I think we should be able to kind of crank through this based on what we've already seen.","width":512},{"text":"Ok, so what type is q? Raise your hand if you think it's a pointer type, q is a pointer type. You know, you would hope, right? But it turns out the asterisk actually modifies the variable.  ","width":832},{"text":"So in this example, q is an integer. If you want it to be a pointer, you have to say \"int pointer p, pointer q.\" And this chaining is fine, it's just, sort of, this is a little idiosyncratic thing that you need to know about. .","width":1280},{"text":"Ok, so let's do this next one really quickly. I'm gonna draw the pictures, uh, it's very similar to what we saw.","width":512},{"text":"Integer pointer p, it's declared. Integer x, it's declared. p gets the, oops, p gets the address of x, makes p points to that space.. ","width":960},{"text":"The value of p? Okay, so we follow the pointer of p. We get 6. Now, what happens when we output x?","width":576},{"text":"It is a 6. Right? We have changed the memory associated with x underneath it.","width":640},{"text":"Uh oh.","width":320},{"text":"All right, what if we output p? What do I get? I'm outputting p, the next line. Oh man, I don't even want to know what I get, ok?","width":1280},{"text":"This is a horrific hex number which represents the memory address of p.","width":640},{"text":"All right, now write a statement whose output is the value of x using variable p. I'm gonna do this one really quickly. You can race me if you like, asterisk p.","width":960},{"text":"That end line is just a new line, yes?","width":384},{"text":"Um, did I say memory address? I meant dereference of. Sorry, cout the value of p.","width":640},{"text":"Write a statement whose output is the value of x.","width":832},{"text":"Oh yeah, sorry. Um, hmm..","width":320},{"text":"Good catch. I'd like to say I did that on purpose, giving you a chance to, like, engage. But that would be a lie. All right, good. Good, good, good.","width":768},{"text":"How would I, uh, how would I output that memory address of p? How could I make that correct? Aw, I should have thought of this. ","width":384},{"text":"\"I don't know what you're talking about.\" And then I would have done what?","width":384},{"text":"Yeah, the ampersand p. cout &p gives you... address of p.","width":832},{"text":"All right, any surprises? Anything on this page surprsing?","width":384},{"text":"Ok, now let's get to some nitty-gritty, ok?","width":256},{"text":"All right, so I have these two pointer variables.","width":256},{"text":"You can probably go all the way down to here. Let's, let's meet here. I'll do it and I'll talk aloud, but you can tune me out if you would like to think separately from me, okay? ","width":960},{"text":"So this code says: make me a pointer p and a pointer q. Give, uh oh, give p an integer, uh, and point to it","width":896},{"text":"Make q point to the same space, use q to give value 8 there, and now output the value p. What do we get?","width":768},{"text":"8? Yeah? Okay. I strongly encourage you to sort of trace these on your own. Ok, now let's do down to... Hmmm... ","width":832},{"text":"Here. Go ahead and, ugh, go ahead and trace down to here, add on.","width":704},{"text":"Ok? So now q gets a new integer and is assigned to it. And the value of q is 9. Ok, so you should have the same picture. P and q each have their own memory available to them. They are not shared at p's, uh, new - yes? ","width":1600}]