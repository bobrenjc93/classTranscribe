[{"text":"Now, if you know everything there is to know about pointers, I'd still suggest that you use that as a springboard to learn, perhaps a little bit new, how C++ deals with memory a little differently, at least syntactically, from C. So you will still not want to disengage, you will still want to be disengaged with the idiosyncratic differences between C and C++.  And now, in the previous sentences replace pointers with objects and the same is true for those of you who came from 125.  Even if you already know about objects, you will find new idiosyncratic things in C++ that you should learn about. So, these two things even though parts of them are familiar, as a whole they will be slightly different.  My take will be, my emphasis will be to differentiate C++ from your previous experiences.  So I'm going to assume that you know for loops, variable assignment, function calling, I really am going to assume that you have had the introductory course, cruise right on past that basic stuff (conditionals, what) cruise right on past that basic stuff and into the ways that it differs, and the ways that it will serve us in learning about data structures.  Any questions?  Alright.  Let's work.  So, the first c++ - and I have 15 minutes - can we find - 13 minutes - we're going to get a ton of stuff done. Because you already know a lot of what I'm about to tell you.  You already know it.  You already know that when you declare and define a variable in your prerequisite language that it has the following characteristics.  You might not have thought about it explicitly before.  But I'm pretty sure it won't surprise you when I tell you every variable has a name, and a value, and in our languages of choice, it has a type, and they have memory locations.  That is the value of this variable is stored someplace.  Okay?  Any of that surprise you?  Alright.  So, uh, like these other languages C++ has some primitive types.  These are things that you can look up.  We make a declaration in c++- for completeness you can look them up.  We make a declaration in c++ in a way that won't surprise you.  If I want a boolean I'm gonna call it a bool.  Cat.  Like this.  Okay?  So I declare the variable - what's the variable name?  Cat.  What's it's type?  Boolean.  What's its value?  This is tricky.  What's its value?  Okay.  Anytime you ask what's its value and there isn't an automatic known everybody answers the same thing we're all sure we're all on the same page, then what you have to think is it is garbage.  It absolutely has no value.  Now, it's true, that some c++ compilers will stick in, you know, a default value for you.  But, we're never going to rely on that.  We're always going to assume it is garbage until we give it, until we explicitly give it the value that we want it to have. so, oftentimes, these primitive types will be accompanied by an assignment statement much like this.  So that statement is equivalent char rating; rating = 'E';.  We can do them both in one go.  Any question about it?  Okay, fine.","width":5120}]