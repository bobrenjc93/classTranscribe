[{"text":"Where's temp next? It's this one right? Where do I want it to be pointing?","width":501},{"text":"To my new node, Good. Good Good Good","width":384},{"text":"Alright. You happy with it? Yes? Very Good! Exactly! This code's a mess!","width":384},{"text":"It doesn't even work if we want to insert in the first position, but we have a function that inserts in the first position.","width":512},{"text":"So, if location is one ( if loc == 1) insert at front(e)","width":832},{"text":"else do all of this.","width":320},{"text":"okay, and then... then we know that thing will never be 1, we already know it won't be 0 because 0 has no meaning.","width":448},{"text":"We know it won't be 1 because that's a different case, and so in the worst case it will be 2, right?","width":768},{"text":"This code will go if we're inserting into position 2 and the number of steps we walk forward will be 0 and this code is fine.","width":448},{"text":"Okay, do you like it? I don't like this code. Okay?","width":384},{"text":"I don't like this code because it makes a special case out of something that's the same as everything else? Right?","width":768},{"text":"It made a special case out of inserting in the front of the list, and I think we can write code that avoids that.","width":448},{"text":"So, let's work on that.","width":256},{"text":"Here's what we're going to do... we're going to redefine our implementation of an empty list, okay?","width":640},{"text":"So we're going to redefine... geez","width":256},{"text":"*Pause*","width":1088},{"text":"What we're gonna do is we're gonna say an empty list is a single node.","width":384},{"text":"Followed by the rest of our list. Okay? This single node and then yes...","width":704},{"text":"empty list is a single node, all other lists are this single node followed by our data.","width":512},{"text":"This node, this auxiliary node, that we place in the structure is called a sentinel node.","width":448},{"text":"This is a sentinel node.","width":320},{"text":"*Pause*","width":320},{"text":"This is a sentinel node...","width":448},{"text":"Thank you","width":128},{"text":"And, look what it does for us. So the empty list has a sentinel node; all lists have this sentinel node in front of this. Look what it does for us.","width":640},{"text":"No matter where we insert into the structure, we're always going to be after a list node, right?","width":640},{"text":"If we insert into the first place in the list, it's going to be after the sentinel node. ","width":448},{"text":"If we insert into the second place, the third place, etc. and so we remove this special case of not being able to grab the pointer before because every node that we insert will have a pointer before. Okay?","width":1088},{"text":"Any questions about that? That means that the code we write to actually insert this thing looks more like this.","width":576},{"text":"This is no special case because we've created an invariant situation where we're always inserting between two nodes even though at the front of the list that node is kinda meaningless.","width":768},{"text":"Okay, any question about it? Yeah?","width":384},{"text":"*Pause*","width":192},{"text":"So that would have to be handled via error handling.","width":512},{"text":"Right? We're not talking about that, we're assuming the user is going to honor our abstract data type which says it starts at 1.","width":448},{"text":"Okay, so how do we make this happen? How do we create an empty list with a sentinel node in it?","width":384},{"text":"In the constructor! That's right. Your opportunity to shape memory upon declaration is in the constructor. So this is where we'll start next time.","width":704},{"text":"Oh my gosh...","width":576},{"text":"*End of recording*","width":704},{"text":"*very end*","width":3200}]