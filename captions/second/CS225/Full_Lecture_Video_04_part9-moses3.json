[{"text":"Yes","width":64},{"text":"New is a keyword that we use.","width":107},{"text":"Its modified, its followed by a type","width":163},{"text":"Its arguement is a type","width":154},{"text":"It returns a pointer.","width":103},{"text":"It's a keyboard that returns a pointer.","width":128},{"text":"Okay","width":103},{"text":"Alright, so p equals.","width":128},{"text":"Alright, any questions about the picture so far?","width":192},{"text":"","width":14},{"text":"Let me tell you about NULL","width":256},{"text":"Let me tell you about NULL","width":128},{"text":"NULL is a canonically zero memory address.","width":448},{"text":"K, so NULL is a canonically zero","width":320},{"text":"memory address","width":384},{"text":"Not garbage, its not garbage and the main thing that differentiates it from garabge, is that you can test against it.","width":768},{"text":"You can say if p is not equal to NULL, or if p equals NULL","width":384},{"text":"K, so the key point is that is that it is testable.","width":320},{"text":"Whereas garbage, not so much.","width":256},{"text":"Alright, so now all we are saying is","width":219},{"text":"Never mind, I don't want p to point to that old memory anymore.","width":384},{"text":"I want to set it to this canonically zero memory address.","width":448},{"text":"Okay, now.","width":64},{"text":"You like this?","width":192},{"text":"Why, not?","width":192},{"text":"Yeah","width":64},{"text":"What about p's pointee, look at this.","width":245},{"text":"We went to the effort of asking for that memory.","width":192},{"text":"We said, \"Yo heap please give me some memory.","width":256},{"text":"It did so, and then all of the ways of referring to it were removed.","width":384},{"text":"All of the variables essentially turned their backs.","width":128},{"text":"Okay.","width":64},{"text":"You can tell, because you can look around 8 and there's nothing existing coming into it anymore.","width":576},{"text":"This makes me very sad.","width":320},{"text":"And, in fact, so sad...","width":353},{"text":"Drip. Drip. Drip.","width":64},{"text":"We call it a memory leak.","width":128},{"text":"Okay, so a memory leak occurs when all reference to heap memory are removed.","width":832},{"text":"Okay.","width":1344},{"text":"Well, this is a pain.","width":192},{"text":"How do we fix it?","width":64},{"text":"The answer is we fix it by using keyword delete.","width":448},{"text":"So delete is the keyword that we use to say, okay, I'm all done with this memory now.","width":320},{"text":"The system can reuse it if it wants to.","width":192},{"text":"So in this scenario what we're going to do is say delete q.","width":256},{"text":"We're going to say delete q.","width":335},{"text":"That frees this memory ","width":142},{"text":"And now we can say q is equal to NULL and we have not created a memory leak.","width":537},{"text":"So how could we have fixed, how could we have fixed the p leak.","width":448},{"text":"That will be funnier to you when you have children.","width":384},{"text":"How could we have fixed the leak around variable p.","width":320},{"text":"How could we have fixed it?","width":320},{"text":"Yeah.","width":128},{"text":"Right.","width":622},{"text":"Exactly.","width":49},{"text":"So he said we could have not set it to NULL before deleting it.","width":185},{"text":"So I could have said delete p right there.","width":164},{"text":"Free the memory then set it to NULL so that its testable.","width":320},{"text":"Yes.","width":64},{"text":"If you say star *p equal NULL you'll get a type mismatch, because *p is an integer.","width":637},{"text":"*p means the value of p","width":204},{"text":"What you are pointing to, and that thing that it is pointing to is an integer.","width":448},{"text":"So you'd have a type mismatch across the assignment statement.","width":192},{"text":"That's right if you set it to NULL before deleting it you cannot fix it.","width":519},{"text":"Its a memory leak","width":64},{"text":"We have tools to help us, but we should still play defense here.","width":192},{"text":"Alright, anything else, anything else about this that's interesting?","width":286},{"text":"Yes.","width":64},{"text":"Oh, oh, that gosh.","width":346},{"text":"You guys are amazing, its my next slide.","width":179},{"text":"Alright.","width":64},{"text":"Okay so everybody looks, wait a minute we're not quite done with this one yet.","width":262},{"text":"So deleting a NULL pointer, so saying delete on q.","width":320},{"text":"Is what we call a no op, that won't hurt anything.","width":192},{"text":"That's a no op.","width":128},{"text":"But, dereferencing a NULL pointer, think about what that says.","width":384},{"text":"It says follow the pointer coming out of this thing that is NULL.","width":256},{"text":"There's no place to go.","width":128},{"text":"There's no place to go out of a NULL pointer.","width":192},{"text":"It points nowhere.","width":128},{"text":"Its just test-ably nowhere.","width":128},{"text":"This is called a segfault.","width":192},{"text":"And it happens at run time.","width":320},{"text":"So actually dereferencing a NULL pointer is kind of a bad bug.","width":320}]