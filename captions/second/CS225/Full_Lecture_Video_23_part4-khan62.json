[{"text":"Um, is going to be the people whose stuff is in the locker, okay. Now I have a question for you","width":576},{"text":"given data that looks like this what would be kind of a reasonable implementation of a dictionary?","width":256},{"text":"What would be a reasonable implementation for a dictionary, and i'll give you a hint that the uh, particular example suggests an implementation, the particular example suggests an implementation","width":1344},{"text":"what did you say? no, the suggestion was string and I said no","width":384},{"text":"yea, a list of pairs, yea an array why?","width":512},{"text":"Because say it louder nathan, yea very good, we are indexing by an integer value, more over this values are pretty small and do no even tell me that you did not walk through your high school locker room and go ","width":1088},{"text":"oh look I'm inside an array!","width":192},{"text":"You didn't? Ohhh","width":256},{"text":"You will now, next time you're in a locker room","width":384},{"text":"ok so, perfectly reasonable, perfectly reasonable implementation of the data structure of the dictionary","width":448},{"text":"think how easy it would be to implement insert, if we had a private member called A, you could say a[k] = the name d here","width":704},{"text":"for example, whoohoo thats cook","width":256},{"text":"the problem is we're not always so lucky, we're not always so lucky that our keys are smallish integers, so that thing that makes this possible","width":640},{"text":"is that these are smallish integers","width":320},{"text":"K, rather we're gonna be faces situations where our keys come in arbitrary types, like ohh camera models or colors or flight numbers or URLS for heavens sake","width":1152},{"text":"these are not numerical values, now we could convert them probably to integers but thats a different question","width":704},{"text":"because then converting them to an integers that is small enough to use an array for is a whole nother puzzle K","width":448},{"text":"So, here is what we are going to do, we're going to use a binary tree as a dictionary K","width":576},{"text":"So I want to, Oh here is how to interpret this binary tree, the contents in the nodes are the keys, so this eight right here is the key and behind every vertex there is like a bubble K","width":1152},{"text":"See, its space in memory, we can think of it as a bubble where the data dwells, or the value dwells","width":640},{"text":"So the data associated with every key is accessible if you find the key","width":448},{"text":"Moreover we are going to assume that keys are unique","width":320},{"text":"K, alright and the datas are associated, the data is associated, datas are oof, data is available","width":1152},{"text":"given the key, we don't care how K","width":512},{"text":"We don't care how, the data in the array for example","width":384},{"text":"OK we're going to implement these things using a binary tree maybe its that the node contains the node class contains the data field, there thats what you need to here","width":832},{"text":"ok so heres what I want, I want you to do a find of four returning the node associated with the key value four, whats your algorithm look like","width":960},{"text":"traversal very good","width":128},{"text":"I heard someone say traversal, so we're gonna go looking for a four, I don't see any fours, OH there it is!","width":576},{"text":"Here it is, ","width":320}]