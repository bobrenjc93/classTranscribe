[{"text":"Three lines of code. Yeah?","width":832},{"text":"OH maybe. It might..","width":320},{"text":"I don't know. Do you want me to go back and actually pursue that?","width":320},{"text":"I don't know if I believe that. I will look at it.","width":576},{"text":"Alright, fine","width":128},{"text":"So what's going on here?","width":192},{"text":"I'll give you a hint -- this code has a big bug.","width":192},{"text":"But it's not one of algorithm. It's one of implementation","width":448},{"text":"The algorithm does exactly what we said","width":192},{"text":"We are going to call the right-most tile of cRoot's left","width":576},{"text":"We are going to call it the IOP","width":128},{"text":"We are going to grab hold of it, as the IOP","width":320},{"text":"Then, we're going to swap the key from there up into the root","width":512},{"text":"So that seems okay.","width":192},{"text":"And then we are going to snip off the IOP","width":448},{"text":"And I know how to snip things off","width":192},{"text":"You just call doRemoval","width":256},{"text":"doRemoval will figure out whether it is a one child or a no child, and will do the right thing","width":384},{"text":"I already have a function to take care of that part","width":192},{"text":"Any questions about this?","width":192},{"text":"Yeah?","width":128},{"text":"No, doRemoval doesn't.","width":536},{"text":"doRemoval only looks to see how many children there are","width":256},{"text":"It just looks at the pointers - the left and right pointers. Ok?","width":256},{"text":"If you look, you have it on there","width":128},{"text":"Or I could go back. It's three slides ago","width":256},{"text":"Yeah?","width":64},{"text":"Where do I move the data. Oh yeah, so that was my initial thing","width":448},{"text":"We were talking about dictionarys, we're now talking about dictionaries","width":256},{"text":"We're focusing on the keys. We would move the data at the same time","width":192},{"text":"Hopefully we have a reasonable way of referring to the data so it doesn't incur a huge cost.","width":320},{"text":"It's a valid concern, but not a bug","width":192},{"text":"Ok, what's the bug here?","width":256},{"text":"Ready? Yeah?","width":128},{"text":"Good","width":448},{"text":"So what he said was, since you're passing by reference","width":512},{"text":"Since doRemoval takes something by reference","width":320},{"text":"It's gonna change exactly the pointer IOP","width":384},{"text":"But that's a local variable. Who the heck cares what IOP is","width":320},{"text":"It's a local variable, It's gonna go out of scope","width":192},{"text":"So I am going to change IOP, but then the effect of that change is really just going to break my tree","width":448},{"text":"So I'm gonna trace through that with you carefully in just a minute","width":256},{"text":"But I want to ask you one question first","width":128},{"text":"How do I know that this isn't going to incur an infinite loop?","width":448},{"text":"With the doRemoval.. Look how did I get to this function","width":448},{"text":"It was via doRemoval. How do I know I will not get into an infinite loop with twoChildRemove, doRemoval,","width":512},{"text":"Yeah?","width":128},{"text":"It doesn't have to be a leaf node -- That's not quite true","width":384},{"text":"It's almost true, and in the right ballpark","width":256},{"text":"Yeah","width":64},{"text":"You know IOP doesn't have a right child. It might have a left child","width":384},{"text":"Because those values are less. But it can not have a right child, because a right child would be","width":320},{"text":"bigger. And we're getting the biggest key in the left subtree","width":320},{"text":"Alright, so we don't have to worry about infinite loops","width":256},{"text":"doRemoval is going to end up taking us into no-child or one-child remove","width":256},{"text":"And I'm letting it diagnose which one, because I don't want to think about it","width":314},{"text":"I don't want to write anymore code to do it","width":96},{"text":"So now, let's trace this through and track down the bug","width":320},{"text":"Ok, sooooo I'll put ","width":495},{"text":"We're going to remove 13 and I'm going to put node 11 off here","width":192},{"text":"Just so that you believe me that the IOP isn't necessarily a leaf","width":384},{"text":"And, I'm going to do a removal of 13","width":384},{"text":"TwoChildRemove of 13","width":284},{"text":"So what does this code do? It goes and it assigns to variable IOP","width":512},{"text":"The rightmost child of cRoot's left. I don't know what that does","width":384},{"text":"But, it better give me IOP pointing here","width":384},{"text":"Do you see the problem? IOP is just a variable and I'm assigning to it a value","width":640},{"text":"It's not another name for something in the tree","width":256},{"text":"Now, when I do doRemoval of the IOP","width":448},{"text":"This thing right here is going to point to 11","width":576}]