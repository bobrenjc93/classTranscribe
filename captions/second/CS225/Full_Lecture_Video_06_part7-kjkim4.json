[{"text":"Okay, somebody raise their hand and talk to me. I'm feeling kind of lonely. Yes, what goes there? Yeah, good, splat. It's splat. I'm gonna use splat on the exam. Yeah. And I'm gonna do this just to be explicit. Probably, don't need to but I'm gonna do that just to be explicit. So, derefer","width":1536},{"text":"Probably, don't need to but I'm gonna do that just to be explicit. So, dereference s and then I can get at its value.","width":256},{"text":"As you might have noticed here, you could have equivalently used \"s\" printed to accomplish the same thing. It's exactly the same just different syntax. Okay? What else do we need to do? How do I print out the name? Dereference. Good. I just needed to hear somebody say \"d\" and I was good. Okay, fine. ","width":1920},{"text":"And then? Yeah, guess what I can do. I can do \"s\" printed is true here. ","width":1024},{"text":"And this changes to true. ","width":384},{"text":"Yeah. And am I done? I should probably return just to let people know that I know I'm finished.","width":832},{"text":"Ok. Any question about that?","width":64},{"text":"So the question is: why don't I have to return true and the answer is because this function has a different signature","width":704},{"text":"Here it returns void. My purpose for returning true last time was passing back the result of the computation","width":448},{"text":"Here, I didn't have to","width":192},{"text":"They are fused parenthesis correctly and there's a complexity in the mp because of the overloaded parenthesis","width":1600},{"text":"So, for the PNG class, it's a little weird.","width":192},{"text":"And we kinda leave that there on purpose just to have you have to untangle it. Sorry","width":512},{"text":"Okay. So, are we done here? Are we done? Yes? ","width":576},{"text":"Very good. Okay. So, notice that we cannot forget that what we're dealing with here is a pointer. What we're dealing with here is a pointer","width":832},{"text":"So, this needs to be dereferenced here as well","width":320},{"text":"Okay? Now, let's contrast the previous slide and this slide. So, this is a popularity contest. Who's speed do you like better? Who's speed do you like better? Which is faster?","width":1216},{"text":"Previous slide by value or pointer by value? Sorry, this is pointer, still by value, it's just pointer by value.","width":704},{"text":"Which one do you like better, speed-wise?","width":320},{"text":"Pointer by value, that's right. Passing a pointer, no big deal. This is a little tiny representation of a memory location, whereas in the previous case, copying that picture around, bad idea","width":768},{"text":"Even if it's super fast. So, this is fast. ","width":576},{"text":"All right. Who's syntax do you like better? Who's syntax do you like better?","width":640},{"text":"This one or this one? It's like an eye test. Left or right?","width":512},{"text":"Yeah, left (hahaha). Right. Left. OK, so the syntax here is better. This is cleaner code but... so this is a comment on syntax but here's the thing, it's also safer to be dealing with.. you're less likely to make memory mistakes if you can refer to things that live on the stack. So, actually, the stack variables make your code less likely to be buggy. So it's much much much more than a pretty dress. It's the substance of the quality of what you... of the code that you create. So that code that uses fewer pointers is less likely to have memory errors.","width":3584},{"text":"Okay? Any question about that? So, I'm going to say it as safer here. Especially, for us.","width":448},{"text":" All right. Any question about that? Is that good? So, which one is better? Probably the second","width":704},{"text":"Well, somebody is paying you according to how fast your code works. Well, here's the thing. In C++, you don't have to make a compromise between the two","width":960},{"text":"So, let's look at the third way that parameters can be passed. This is called pass by reference. ","width":768}]