[{"text":"sixty five okay lets try it and count okay we're gonna go off and search.. and nope that is going to require more. but we will try we'll prove him wrong i think he can handle it. can you handle being wrong about 3? alright okay thank you okay so we are going to go on a search for sixty five okay now is 38 sixty five? is 38 sixty five? say no. alright so fine so we havent found it yet but we know where it must be. where must it be? to the right, good. have we found it? no. so that is another comparison. so where must it be? to the right. good. have we found it ? no. no, that is another comparison. where must it be? to the left? have we found it ? no that is a comparison. where must it be? to the left of ... but there is nothing to the left. ","width":4032},{"text":"find at sixty five is going to return ... well i dont know what the interface is exactly","width":576},{"text":"lets say it returns null","width":128},{"text":"because it will return what is there","width":128},{"text":"okay","width":64},{"text":"alright","width":64},{"text":"because its not there","width":64},{"text":"any question about that?","width":128},{"text":"so the same kind of reasoning that we applied to insert can be applied to find as well","width":448},{"text":"now, heres a little foreshading for you","width":128},{"text":"im gonna spend a full lecture on remove. ","width":192},{"text":"yeah","width":64},{"text":"okay","width":64},{"text":"did you have a question?","width":128},{"text":"ohhhh oh","width":448},{"text":"good question","width":64},{"text":"you are 2 lectures ahead of the game","width":256},{"text":"so shes worried about the fact","width":128},{"text":"shes worried about the fact that it might not be the case that the tree is so beautiful","width":384},{"text":"this tree is beautiful","width":128},{"text":"it actually isnt quite beautiful","width":256},{"text":"what the heck is she talking about ?","width":128},{"text":"because we have approximately the same sub structure on the left;.. on the right as on the left","width":448},{"text":"can you see that","width":64},{"text":"we have approximately the same and we are pretty lucky","width":320},{"text":"she is already thinking about if they are not approximately the same subs tructure","width":320},{"text":"does the world get ugly... and it does","width":128},{"text":"okay but... but we're not there yet","width":128},{"text":"we're going to do the simple stuff first","width":192},{"text":"okay","width":64},{"text":"whats the running time for traversal","width":192},{"text":"big o of n still","width":256},{"text":"thats a review question","width":256},{"text":"so hey... lets write some code","width":128},{"text":"alright","width":64},{"text":"i want to return a tree node pointer","width":128},{"text":"am writing a function called find","width":320},{"text":"for the bst class","width":128},{"text":"and it takes as two values","width":448},{"text":"the root of the tree and some ","width":448},{"text":"ok","width":64},{"text":"so heres root and im going to call this version and im going to call this version of find like this","width":512},{"text":"find on root and then ... whatever i am trying to find","width":448},{"text":"ok","width":384},{"text":"so if c root is equal to... we're going to think about this recursively","width":448},{"text":"and the way to do that is to break down the trees that you consider into two kinds","width":384},{"text":"first of which is null","width":64},{"text":"so if you're original tree is null what should you return","width":384},{"text":"so ","width":64},{"text":"return null","width":192},{"text":"we could actually return c root... it wouldn't hurt anything","width":320},{"text":"cause it is null","width":64},{"text":"we just tested it is null","width":128},{"text":"alright.. fine","width":64},{"text":"so otherwise otherwise the tree is not empty","width":448},{"text":"so now we are actually in the recursive case","width":256},{"text":"we are actually in the case where we are not null","width":256},{"text":"the general case","width":64},{"text":"ok","width":64},{"text":"if we are in the general case we still have some things to consider","width":256},{"text":"those three things to consider in this general case are if the root is equal to the key... what should we do in that case?","width":640},{"text":"return the root","width":128},{"text":"otherwise","width":256},{"text":"if c root's key is ... wait if our key is.... i want to do it this way","width":448},{"text":"its easier for me to think abotu it","width":128},{"text":"out input key is less than c roots key ","width":384},{"text":"is that a safetys reference","width":256},{"text":"yes","width":64},{"text":"because we know c root is not equal to null","width":256},{"text":"if key is less than c root's key","width":256},{"text":"then","width":64},{"text":"uhhh","width":64},{"text":"what?","width":64},{"text":"return... good","width":192},{"text":"what are we going to return?","width":128},{"text":"we're going to go looking for it","width":192},{"text":"we're going to go looking for it","width":128},{"text":"in c roots left","width":128},{"text":"we are going to return the find on c roots left","width":256}]