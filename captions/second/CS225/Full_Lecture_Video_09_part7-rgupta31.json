[{"text":"Alright, any question about that?","width":256},{"text":"The rule of the Big Three.","width":294},{"text":"Okay so, we're going to return for a bit to a object oriented programming.","width":352},{"text":"Because C++ has some idiosyncrasies and some distinctions from Java, in particular that you should know about. ","width":530},{"text":"And then many of you will have come here without a lot of experience in object oriented programming.","width":384},{"text":"So, historically, the objective for even creating objected oriented languages was two-fold.","width":704},{"text":"One was to create code that is smaller, that is to increase code reuse.","width":512},{"text":"And two, which sort of follows from that is to decrease the cost of maintaining such code.","width":640},{"text":"So, the idea that in objected oriented language should exist really arose out of the need to structure your code more efficiently.","width":704},{"text":"From a programmer's perspective, not necessarily from a code execution perspective.","width":512},{"text":"So from that understanding, from the understanding that we are trying to write less code and thereby make it more maintainable, these characteristics arose.","width":819},{"text":"So, encapsulation we already talked about.","width":233},{"text":"If you wanted a little quiz, you should sort of go back and make sure you know of two ways that C++ implements encapsulation.","width":611},{"text":"Or makes encapsulation easy to implement.","width":192},{"text":"Polymorphism we are actually going to talk about today. Suffice to say its definition follows its name.","width":576},{"text":"Basically, a function can behave differently depending on the type of the calling object. We will talk about that a little bit today.","width":384},{"text":"But the biggest thing we're going to talk about today is inheritance.","width":256},{"text":"And, without further ado, let's begin.","width":384},{"text":"So we have been talking about the sphere class.","width":448},{"text":"And now we have decided from a design perspective, that spheres are not specific to us.","width":448},{"text":"In fact, what we want is a named sphere class.","width":384},{"text":"A named, when I say named I mean sort of labeled, named sphere class but otherwise this thing should behave a lot like a sphere.","width":768},{"text":"I'm going to decide that I'm going to call this thing ball but of course I could call it anything I wanted to call it.","width":525},{"text":"Usually, it's the case that the name you happen to choose is a specification - is more specific - than the original thing.","width":640},{"text":"The original functionality, and we're going to set it up, we're going to define class ball,","width":512},{"text":"So that it is a - use language is a - public sphere.","width":576},{"text":"So this indicates inheritance.","width":320},{"text":"That colon is inheritance.","width":256},{"text":"Inherits from sphere.","width":384},{"text":"Now we have specific language in C++ to denote these things.","width":448},{"text":"We refer to sphere in this context as the base class.","width":320},{"text":"We refer to ball as the derived class.","width":320},{"text":"And this corresponds to superclass and subclass in Java.","width":704},{"text":"Any questions so far?","width":256},{"text":"So now, there's sort of an interesting little parallel between these two things that you might find kind of interesting.","width":704},{"text":"I have no english today, apparently.","width":256},{"text":"This word corresponds with this word.","width":320},{"text":"Is it just a happenstance that we chose the word public in each of those cases?","width":320},{"text":"And the answer is no.","width":128},{"text":"In fact, the inheritance type keyword can be the same as the access types.","width":790},{"text":"So we could have private inheritance as well, and in a minute we'll talk about protected inheritance.","width":427},{"text":"But, for this class, we're only ever going to have public.","width":320},{"text":"Okay so here's some - here's your first key fact.","width":384},{"text":"The access type - the access type - in the base class that is these public and private together with the inheritance type,","width":1099},{"text":"imply the access in the derived class.","width":434},{"text":"So I'm going to write that down in just a minute we'll talk about what it means.","width":226},{"text":"So the base access,","width":256}]