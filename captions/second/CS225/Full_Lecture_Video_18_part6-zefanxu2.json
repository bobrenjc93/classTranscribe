[{"text":"It does this and it does this","width":191.857142},{"text":"so what you think it kinds look like","width":191.857142},{"text":"it got ","width":63.857142},{"text":"yes","width":127.857142},{"text":"yes","width":191.857142},{"text":"exactly","width":127.857142},{"text":"those operator are overloaded inside the iterator class","width":255.857142},{"text":"that is what iterator class does","width":127.857142},{"text":"it overloads those operators so that you can do you can work this magic","width":383.857142},{"text":" now question was why dont you do this instead","width":319.857142},{"text":"the answer is that would require to be overloaded","width":319.857142},{"text":"I am not sure it actually is for standard template library list class","width":447.857142},{"text":"I just dont know","width":63.857142},{"text":"iterators promised that the ++ will be overloaded and that the * will be overloaded","width":703.857142},{"text":"so you can move this thing and look inside the structure","width":319.857142},{"text":"that is a promise","width":63.857142},{"text":"promise of any iterator","width":127.857142},{"text":"this is a good time to say","width":319.857142},{"text":"where that promise came from","width":127.857142},{"text":"it is promise but who said?","width":127.857142},{"text":"who said that it is a promise?","width":255.857142},{"text":"so an iterator is a notion that was added on the language latter","width":511.857142},{"text":"because it is so frequently deployed","width":191.857142},{"text":"it is  called design pattern","width":255.857142},{"text":"it is not fundamentally part of a language","width":255.857142},{"text":"it is a part of culture experience of the language to know what it is","width":319.857142},{"text":"what is an iterator","width":63.857142},{"text":"anybody you talk to about C++ will know what iterator is ","width":255.857142},{"text":"and it is formally described but only functionally ","width":447.857142},{"text":"not as an inherent part of language","width":191.857142},{"text":"so there is this sort of conventional agreement ","width":255.857142},{"text":"the iterators will always implement something increments and something gives you value","width":511.857142},{"text":"right","width":511.857142},{"text":"how do you know whether you are overloading dereference or multiplication and the answer is ","width":255.857142},{"text":"the number of arguments","width":63.857142},{"text":"so when you dereference the function is partly declared by its parameters","width":383.857142},{"text":"I can two functions of the same name and they are parameterized differently","width":255.857142},{"text":"they are different functions","width":191.857142},{"text":"and the same thing is true for this dereference character","width":191.857142},{"text":"it has one and in fact in this case effectively there is no argument","width":511.857142},{"text":"instead of a binary operator","width":127.857142},{"text":"could I accomplish with primitive types?","width":447.857142},{"text":"not nearly so elegantly right?","width":127.857142},{"text":"so I could do this if I implement my own class with dynamic array","width":447.857142},{"text":"and make it you know and i can do this in C","width":191.857142},{"text":"this is kind of you asking me basically right","width":127.857142},{"text":"but I wouldn't want to","width":191.857142},{"text":"this is the one of elegance comes from having C++","width":447.857142},{"text":"ok alright any other questions about this right now?","width":319.857142},{"text":"..","width":255.857142},{"text":"my question is ","width":191.857142},{"text":"for you is what is printed out","width":319.857142},{"text":"this is COUT","width":127.857142},{"text":"this is the content of our list","width":127.857142},{"text":"what is printed out ","width":255.857142},{"text":"...","width":255.857142},{"text":"so the name we get giraffe and leaves","width":447.857142},{"text":"and then the next time through","width":319.857142},{"text":"we get","width":63.857142},{"text":"penguin ","width":255.857142},{"text":"g-u-i-n fish and then","width":319.857142},{"text":"do you?","width":319.857142},{"text":"..","width":255.857142}]