[{"text":"Just a sequence of assignment statements that are gonna be the same everytime we execute this code.","width":384.77778},{"text":"Alright, any question about it?","width":63.77778},{"text":"Okay, fine, here's another one.","width":384.77778},{"text":"'8' '4' '2' '3'.","width":255.77778},{"text":"Suppose we built up this chain of linked memory, and this one is we'll call it the 'head'.","width":959.77778},{"text":"And we pass it in. We want to printReverse on 'head'.","width":384.77778},{"text":"So what we expect out of this is this sequence of printed numbers, we want this to return '3' '6' '2' '4' '8'.","width":895.77778},{"text":"Any question about it? About what we expect this thing to do.","width":384.77778},{"text":"Here's what we want to exploit in this code.","width":383.77778},{"text":"We want to exploit the fact that this chain of memory all linked together is a lintNode pointer instantiated with the listNode, together with another chain that looks just the same - that is just a smaller instance of the original problem.","width":1728.77778},{"text":"This situation begs for recursion.","width":383.77778},{"text":"Any time you can break  a structure down into something that is smaller than the original, but has the same characteristics of the original, you're talking about a recursively defined structure.","width":896.77778},{"text":"That's what we have here, and that's what we're going to exploit.","width":255.77778},{"text":"Suppose I can print the reverse of this -  of the rest of the list.","width":319.77778},{"text":"Suppose I know how to print the reverse of the rest of the list.","width":319.77778},{"text":"How do I assemble that into a printReverse of the whole list?","width":384.77778},{"text":"How do I assemble it? Assume inductively that I know how to print the reverse of the rest of the list.","width":703.77778},{"text":"How do I use that information to print the reverse of the whole list?","width":511.77778},{"text":"Yeah?","width":191.77778},{"text":"Very good, so you print the reverse of the rest of the list.","width":1150.77778},{"text":"And then print the first node.","width":511.77778},{"text":"Node's data, should becareful about that.","width":511.77778},{"text":"Any question about that?","width":127.77778},{"text":"What's a base case here? Oh we're in the world of recursion.","width":384.77778},{"text":"That's right. What's the reverse of an empty list?","width":255.77778},{"text":"What's the reverse of an empty list?","width":447.77778},{"text":"Nothing, right?","width":128.77778},{"text":"There's nothing to be done.","width":127.77778},{"text":"Alright. So I think you suggested all of our code here.","width":255.77778},{"text":"Alright, so my code is going to look like this.","width":384.77778},{"text":"If curr is not equal to NULL, then I'm going to printReverse on curr next.","width":1151.77778},{"text":"And then I'm going to cout curr's data.","width":575.77778},{"text":"Probably I want a couple spaces.","width":575.77778}]