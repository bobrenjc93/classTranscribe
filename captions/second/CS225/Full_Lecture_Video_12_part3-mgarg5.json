[{"text":"Yes, if you don't have a template, then yes, So more efficient isn't really the point.","width":230},{"text":"The point is in practice. If you do it the first way, and then someone came to you and said, I need a sphere class, Do you have one I could use?","width":1152},{"text":"In the first case he can say yes, and you can give that person a compiled sphere class that they could use.","width":880},{"text":"As long as he also gave them the header file","width":295},{"text":"And not have to expose the implementation","width":256},{"text":"In the second case, you lose that and in fact, in my mind, from a software engineering perspective, that is kind of the cost of the template instantiation.","width":581},{"text":"You kind of lose a little bit of your elegance.","width":192},{"text":"Alright","width":64},{"text":"No, so the pound include thing is a string substitution, so","width":704},{"text":"You could do that, you can say #include sphere auto, but you would get code that you don't ever want to look at","width":576},{"text":"That would'nt be interpreted correctly","width":128},{"text":"That can't be parsed or processed.","width":192},{"text":"Um, so the question is can you use the same make file, um and the answer is that you would have to get rid of the sphere target, because you can't compile this sphere seperately, but that you could","width":1546},{"text":"Yes?","width":128},{"text":"You cant change it","width":326},{"text":"In the client code, yes anything that is private is still private, its just that you do expose it, you still show it","width":576},{"text":"I mean it is just code, so they could actually change it","width":320},{"text":"But, not in the client code, it would have to be using an editor or something","width":320},{"text":"Its a differerent thing, yes you have to expose your code","width":384},{"text":"Good question, ok so his question is very astute, he said how bout if we have the behavior in the class be the same, and then just make this #include sphere.cpp","width":1152},{"text":"The answer to that is we want the client to not have to change what they do because of our implementation choice","width":448},{"text":"What do clients typically do? They make a list of all of the classes that they are going to use and look for their class definitions in .h files, so we dont want to impose that burden on them to go huh, I wonder if that's a .h or .cpp","width":1730},{"text":"We just let them go to the .h file, you could yes, but functionally you shouldnt","width":512},{"text":"Any other questions? Yes","width":128},{"text":"Um, oh do you need to, Im gonna throw that back at you, do you think you do? Because then you will have the circular include","width":660},{"text":"Alright anything else?","width":128},{"text":"And I didn't, right? I did it right","width":256},{"text":"Alright anything else about this?","width":141},{"text":"Beating a dead horse, I've got something new","width":193},{"text":"Yayayayayay, we are doing something new today","width":192},{"text":"Um, i wanna move us to something new very slowly, ok because there are lots of points i want to bring up, take a look at my new struct here","width":576},{"text":"Um, and what I wanna know about it","width":256},{"text":"What I wanna know about it is what is this line","width":256},{"text":"What is that line","width":320},{"text":"Somebody raise their hand and tell me what that line is, there is a good way to describe it","width":576},{"text":"Good succint way of describing what that line is","width":320},{"text":"It's a constructor, thats right, its a listNode constructor","width":448},{"text":"very good, now when I actually declare a listNode, for example","width":569},{"text":"If i say, well look at this, listNode<int> nln(5) new listNode 5","width":676},{"text":"What happens effectively is that this constructor is called, this data is oh look, put in the data field, and this next becomes what?","width":896},{"text":"Null, that's right, so upon this declaration, the result is this","width":448},{"text":"In general, what we have is this sort of rectangle that has two fields","width":569},{"text":"The way im gonna describe it, and always draw it, is a rectangle","width":448},{"text":"These two fields are going to exist here, and here","width":384},{"text":"Just the way I'm always going to draw these","width":320},{"text":"This one is a pointer, the other one is just, oh what is the other one?","width":384},{"text":"What is the other one?","width":192}]