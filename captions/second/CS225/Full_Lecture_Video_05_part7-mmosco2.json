[{"text":"Ok. I want to pull you back together. This one is just information. This is a type mismatch you cant delete a non pointer type. This one is a memory leak it was just like the very first memory leak picture we did. This one is incidious because everything here works fine but its probably not what you intended. Anytime you refer to memory that has been deleted you have a problem. And then this is the last one I wanted to ask everyone to think about very quickly. Let me ask you a question. Is there a type mismatch anywhere? Do you see a type mismatch? Is everything ok type wise? Yes because if you dereference p the result is an integer. So across this assignment statement you have an integer on the right and an integer on the left. So is this box fine? No its not fine, why not? Yea p doesnt have any memory associated with it and you dereferenced it. So that's going to give you a seg fault. Alright any questions about any of that? Alright is a type mismatch a compile time or runtime error, that is am I going to get that error when I invoke clang on my system or am i going to get that error when I invoke a.out. Clang, this is a compiler error, those are the easy ones. Ok how about the bottom right box, compiler error or runtime error am i going to see that when i invoke clang or when i invoke the output file a.out. Yea this is a runtime error. That's unfortunate, you don't even know about it until someone is using your software. using your application. OK the problem with the first two is that they are both runtime errors with no notification. You need to be using debugging tools to even find them. So these are runtime errors but I'm going to put errors in quotes because there is no error message. Alright lets move on . Ok so somebody asked. What happens to the pointer p and we talked about the fact that it can be reassigned. What I'd like for you to do for a minute is to tell me, look at these two pieces of code and tell me whats the difference functionally. What do they do differently? Take a couple minutes and look at the code and tell me how are they different functionally what do they do differently. Main functions are identical. You can assume that string is a standard type. So we can actually do that if we are using, if we pound include string we can actually do this. ok so what is the difference functionally between these two lines of code or two pieces of code. Yes, ","width":16192}]