[{"text":"Very good. Two key points. We need the clients to be available to use this function. ","width":896},{"text":"To be available to insert data into the structure. And if you look at the parameters, they are all publicly available. ","width":768},{"text":"None of them are private to list Class.","width":64},{"text":"Ok, now lets talk about elegance. Last time when we talked about our first implementation of our inserting into this linked list implementation of a list. We have a complexity with inserting at the front of the list. ","width":1280},{"text":"So every place else inserting every place else other than the front was a matter of positioning a pointer before the node that we wanted to insert and uhh creating a new node readjusting pointers ect.","width":1280},{"text":"But there was a special case in the case of inserting in front. So I'm going to write that down for a second. So our old technique for inserting created a special case out of inserting at the front. ","width":1920},{"text":"Now the way we diagnose that special case if putting in a conditional. The whole code of IF THIS. Now that is a problem. Later on in our software engineering experience, we will learn about a concept of cyclomatic complexity and It basically has to do with the conditional branching, the amount of conditional branching in our code. ","width":2688},{"text":"Everytime we can reduce an if statement, or a condition, we reduce the cyclomatic complexity or the branching of the program execution of our code. ","width":896},{"text":"Now you might not care about this, until I tell you when you are writing code, you have to write a test case for every possible conditional branch for our code.","width":1024},{"text":"Now I don't know about you but I hate writing test cases. I hate test cases. It is tedious and I don't wanna think about it. Now if you don't have to write this many, then you relieve yourself of that responsiblity. ","width":1536},{"text":"We don't have to writing a test case for inserting a list in the front then anywhere else in the list because anyway we insert is the same. ","width":576},{"text":"Now how do we do this. How do we make it happen. The answer is we put a node, a dummy node, a sentinal node, at the start of our list. ","width":896},{"text":"Now what is this node. Its nothing. Its data its still a list node but its data is garbage, there is nothing meaningful in it. ","width":832},{"text":"In fact there is nothing we can do about it. It is just a list Node. It is a list node and we don't and we don't know what it holds. We don't care what its data is. ","width":1088},{"text":"Alright, so we call the sentinal node and we put it in the front of the list. It gains us a invariance in the insertions. That means it gains us the fact that inserting is the same no matter where we do it. ","width":1152},{"text":"Any question about that? Is it better? Ok alright, so what is the process for inserting? If I say inserting into the position one, element eight, maybe five just to make sure its different. Then what is this code do? It takes that many steps forward from the start. ","width":2368}]