[{"text":"Right, so when we try to copy this string array","width":601},{"text":"it just copy the pointer value that \"atts\" held, and that ends up tingling our memory, right? ","width":535},{"text":"OK, so one way of describing our use of the heap for this string array is that we use dynamic memory.","width":792},{"text":"So that heap memory is dynamic memory, and that's makes so that you have to declare","width":406},{"text":"and define a custom copy constructor. So, why do we need one, the object uses","width":664},{"text":" heap or dynamic memory.","width":568},{"text":"At any time, you have an object that uses dynamic memory, there's a new in the constructor is a good clue","width":842},{"text":"","width":2},{"text":"Then you need your custom copy constructor. Ok, you happy? Good? Any questions about this?","width":195},{"text":"OK. Alright. So we're not done, because we've got these complex objects","width":643},{"text":"We've got these complex objects now that may or may not be declared in the heap, if this is a sphere","width":784},{"text":"If this is a sphere, say 'a', then this part of it lives in the stack, and the other part is instantiated to be a new command that lives in the heap","width":921},{"text":"OK, so we got this object that has pointers all over the place. ","width":324},{"text":"I want to trace a little bit piece of code, and show you where a problem occurs.","width":431},{"text":"Or let you see where problem occurs. ","width":229},{"text":"So \"my Int Main\"  here declares a sphere, its name is 'a', and we are going to pass 'a' in as a parameter to this function. ","width":710},{"text":"Now you know at this point that a copy is made of 'a', cause look we got a good copy construct here. ","width":564},{"text":"A copy is made of 'a' on the stack, we got this stoop pointing off into heap memory. ","width":832},{"text":"The copy constructor knows how to do that. And I am going to ignore this one for a minute, because it doesn't help with my point at this point. ","width":722},{"text":"Now, we are going to do some computation, and maybe ask it to change, maybe use it as an input variable. ","width":850},{"text":"Then the function stops execution and control is passed back to just after 'myFun'.","width":650},{"text":"So control is passed back to 'main'. Now the question is: what happens to 's'? ","width":516},{"text":"When control is passed back, what happens to 's'? ","width":451},{"text":"It goes out of scope, it's one way to describe it, and what happens behind the scene when something goes out of scoop?","width":760},{"text":"Yes? That's right, it's removed from the stack like this. ","width":716},{"text":"OK, what do you think? Yeah there's a memory leak, that's right. ","width":415},{"text":"That memory that we asked for from the heap, this memory is leaked, by default. ","width":741},{"text":"So we're going to help out the system, we're gonna provide what's called a destructor, for the system to use when removing variables from the stack. ","width":628},{"text":"Now, suppose that we have just asked for this memory via a new statement, actually that one up there","width":421},{"text":"If I just ask for that memory via a new statement, how would I give it back, and let the system know that I'm done with it? ","width":576},{"text":"So my destructor, or the code that I am going to write for the system to use when a variable goes out of stack is just 'delete[] atts;\". ","width":960},{"text":"Ok, any question about that? ","width":432},{"text":"So in MP2, you are asked to write a destructor, but it's for a more complex type. ","width":690},{"text":"In MP2, instead of objects in the array, you have pointers in the array, and memory has been allocated for each of them. ","width":784},{"text":"So that's what differentiates what I just did here from MP2. ","width":360},{"text":"So be aware of that, and that if in MP2 I just deleted this array, then all of that memory will be leaked.","width":768},{"text":"That should be some insight for what your destructor should look like for MP2. OK, there's a question. Yes?","width":576}]