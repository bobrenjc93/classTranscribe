[{"text":"We'll see...You can let me know afterwards it did work for you.","width":256},{"text":"Let us know because it's our class.","width":128},{"text":"All right. So ..um.. I don't know. I don't know what's gonna happen with the MIC.","width":320},{"text":"All right !Oh..not that.","width":192},{"text":"I have no packets.It's not funny.I'm not...I really...","width":768},{"text":"OK.Here's what I need.","width":256},{"text":"I'm gonna send really close . What I want you to try to do is take this class out of here and put it on that one, okay?","width":448},{"text":"Oh but wait a second.","width":256},{"text":"If this makes you uncomfortable you can pass the test to.....","width":640},{"text":"Okay. All right so we're gonna talk about binary trees. I'll catch up later if you want. ","width":640},{"text":"Remember we're not talking about binary trees, we're talking about rooted, directed, ordered binary trees.","width":832},{"text":"And I'm never gonna say that again I'm just gonna say binary tree.","width":448},{"text":"Because most of the, actually it's the equivalent facts that most of the function we're going to write are on this structure because this structure is recursively defined.","width":704},{"text":"So I want to give you some of the symbolism that typically used with recursively defined structure. Thank you.","width":512},{"text":"And that can be turned off.","width":128},{"text":"All right. So the question is how is this thing recursively described? Okay, now I'm not writing code. But the way I described this thing is going to inform the way that I write code about it.","width":1792},{"text":"OK. So binary tree T is either empty ...... please things work....Oh no.... I cannot believe this. Okay.","width":1280},{"text":"It's either empty and the way we're gonna represent the symbolically is to say T equal empty dragon brackets.","width":704},{"text":"Or, it is a root together with two subtrees. Or T is a root together with subtrees and I'm call this root r subtrees Tl and Tr. What's the L and R stand for?","width":1856},{"text":"Very good. And the way that I'm gonna write it symbolically is T is equal to R with Tl and Tr. So I'm gonna make a tuple out of this.","width":960},{"text":"And write it like that. Okay. Any question about that? While the first thing means a root, the first thing has type root, and the second two things are binary trees.","width":832},{"text":"And that's the recursive part of this definition. So we say and Tl and Tr are also binary trees.","width":896},{"text":"Okay. Any questions about that at all. Now notice how this shapes the code that we write for any function on binary trees. What is the base case? What's the base case of any recursive function we write on binary trees?","width":1152},{"text":"It's empty! right? Or however we represent that empty tree. We think it might be NULL. Good idea.","width":832},{"text":"Then we're gonna do some action on the root and then call the function itself on Tl and Tr.","width":192},{"text":"So this definition informs how we write code for this structure. Any question about it ? Now I have a question for you that is does this definition work?","width":832},{"text":"Think about the right subtree here. Think about the right subtree. It kind of unroll the recursive definition in your mind. Does it work? Yeah, okay. How that right subtree... is it empty? ","width":1472},{"text":"No. So we say root together with..","width":320}]