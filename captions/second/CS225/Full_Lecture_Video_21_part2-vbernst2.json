[{"text":"The trees, TL and TR, and are they binary trees? Yes! Because they are empty, right? Look. It's there's like an empty tree there and an empty tree there. So this recursion sorta feel sane to us. What if I erased um..This leg. If I erased 5, and asked you to consider this binary tree. Do you like it? Is it ok? Does it feel like a binary tree? Sure, it's a root together with left and right subtrees. The left subtree has some substance and the right subtree is...is empty. So we're OK. Alright, any questions about that recursive definition? OK, well...Uh...Let's see. So we're going to write functions on these structures and these functions can come in lots of different forms and in fact the data contained in this...The data contained in this particular example tells you about one of the functions you can write on binary trees. What does that data look like? What does that data remind you of? Can you imagine? Computation, right. Evaluation of an expression, that's right. So, in fact, you can imagine that every subtree is like a parenthesized phrase, right. So this triangle has parenthesis around it, this one has parenthesis around it. The whole thing has parenthesis. So this is an example of an expression tree and if we know how to get around on this structure, using say...Traversal. Then we may have a good way of evaluating such a structure. But we're not doing that right now. Okay. Alright, so let's write some functions on this structure. The first one we're going to write is height. Now, you guys talked about height last time, right? What's wrong? We didn't...Mattox and I didn't get a chance to talk beforehand and so the definition that he used is a different one then we're going to use. Okay? So, the definition of height that we're going to use in our class is the length of the longest path from the root to a leaf. Okay? So what does that mean about the height of that tree? What's the height of that tree? Height here is 3, good. 1, 2, 3. Okay? Path length is number of steps or number of edges. Okay, that's all good and fine. Uh, what is the height of here's this example. What is the height of this tree? What's the height of that tree? Zero, very good. And what's the height of five's left subtree? This is where there's a problem. We should all be going gulp I don't know. gulp I don't know. Alright, let's talk about it a minute. Alright, so given a height, given a tree T a recursive definition of the height of T. Alright, so this is what I think is true. The height of T is one plus the maximum height. This is what you did last time. H E I G H T of TL and height of TR. Right? Nothing's different than last time. The problem is...The problem is what's the height of an empty tree? So if I draw you a picture of an empty tree, what's it's height? I drew you a picture of an empty tree, see it? It's lovely isn't it, it is both the most beautiful and the ugliest tree you've ever seen. Right? It's an empty tree. So what's the height of the longest path from the root to a leaf? Uh...uhh...What path? What path? OK. So there is no root, there is no leaf, there is no path. It's completely indetermenant. So we can choose any height we want. Now. Because we can have empty trees it makes sense to choose a height for that empty-ness, the absence, to be something that makes sense. Okay? Does something that helps us out mathematically. Well, you were already whispering what helps us out mathematically. It is the solution that gives us a zero for a single node tree. And it is, what is it? Negative one, that's right. So the height of an empty tree is negative one.Â tree? What's the height of that tree? Height here is 3, good. 1, 2, 3. Okay? Path length is number of steps or number of edges. Okay, that's all good and fine. Uh, what is the height of her","width":11712}]