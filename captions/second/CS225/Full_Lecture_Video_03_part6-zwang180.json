[{"text":"OK, so, effectively what happens very early in the process in that compilation process is that, the compiler sees that this pound include and it goes: OK, you want me to include in this file sphere.h, I will do that for you. OK, now, what should sphere.h looks like, oh let's go look.","width":1472},{"text":"Uhh, vi sphere.h. And it should contain only the class definition.","width":704},{"text":"And in this case we are gonna leave the implementation in there for just a minute. OK? You good? Alright, so now, I can still just compile this thing...I think... Yeah? The part of the compiler that's saw the code saw exactly the same code that I saw before. OK?","width":1600},{"text":"The pre-processer took the file and put it in here. Alright, and yet I had decouple the two. Any question about it? Yeah? Uh-huh? (Student asking question).","width":1216},{"text":"So, things are not happening top-to-bottom , exactly, they are happening inside out from main. OK? So, Um... when sphere is seen, when the sphere is seen as a type, the system goes and check: \"OK, do I have a class definition.\". And the class definition is Uh... is only complete. You can only use the thing in the class definition when all of the Uh...when all the implementation are seen, but they are all written into the memory at the same time.","width":2048},{"text":"So it's already there even if we happen to put it beneath in a linear order. Does that make sense? Does that...so the file is written at the same time. OK? It's just, and there is no linear dependency top-to-bottom. It's when sphere type is used, the class definition that will be there. OK? And it's when getdiameter(), for example, is used, the getdiameter() implementation that will be there. OK? Same for the constructor, just the system always provides you a constructor if it doesn't yet see it. OK? Alright, yes? (Student asking question).","width":2368},{"text":"Yeah, but don't. I did that just to make the point. It works if you do that but you can't do what I just did here. Right? I separate it out, the class from the client. So then...yeah. Yes, right.","width":1024},{"text":"OK, oh the class decoration. Yes, that's right. Yeah, you're right. OK, Uh, let's see, Umm...where are we here? Oh, we are not quite done. Oh my gosh! I have some new staff for you. Umm, but we are not quite done, because, sphere.h is intended to be, it's intended to be just a communicate, effectively communication device. It's intended to be just a picture of what the class looks like, not an exposing of the implementation details. So I'm gonna do the same thing again, I'm going to copy, Umm...sphere.h into sphere.cpp.","width":3328},{"text":"Think this will work, and I'm going to edit sphere.h, oh, abort for ground, OK.","width":704},{"text":"Get rid of the implementations. There are couple of different things I can do here, Hmm...","width":640},{"text":"Get rid of the...get rid of this. I'm gonna do this kind of hacky for the moment, I'm gonna do this in kind of hacky way for the moment.","width":768},{"text":"The non-hacky way is what Umm...your makefiles give you, OK? Then inside the...yeah, I think I will do it really bad. Actually, Hmm...","width":1152}]