[{"text":"okay, private is correct. Okay, private is correct and the reason for that is... It's only used by other sphere class member functions right","width":1152},{"text":"It's only created so as to simplify our internal implementation of the class","width":512},{"text":"So, clear here is a private member function. Any question about it?","width":704},{"text":"Alright, of course I have this feeling while i was doing this part as well. This one needs a member function","width":576},{"text":"It's not gonna return anything. It's going to be void copy this time it does have a parameter. I'm going to go ahead and pass through the right hand side","width":960},{"text":"As a constant sphere reference ","width":256},{"text":"Uh, right hand side. ","width":384},{"text":"It's implementation is going to be exactly that . And again it's going to be private","width":512},{"text":"Any question about that all all? Yes?","width":256},{"text":"That's a good thing to notice. ","width":640},{"text":"Yeah, no . You can not. His question is, Why are we doing this?","width":704},{"text":"We already have the destructor and the copy constructor. We have those ? Why aren't we just calling those here.","width":576},{"text":"The reason is because in principle. You are writing those functions for the system to use. They aren't yours","width":640},{"text":"You can't just call them willy-nilly","width":192},{"text":"The indication that is this true. There is no return type. The compiler is expecting you to be calling a function that yields a return type. There is no return type for the destructor and the copy constructor. So you as the coder have no business calling them. On the other hand, you are going to back and change your code for the destructor. The new shiny code for the destructor is simply going to be a call to clear","width":2368},{"text":"The new shiny code for the copy constructor is going to be a call to copy. Okay so, i agree that we shouldn't have the same code in multiple places. I disagree where we should stash it. Yes?","width":1536},{"text":"Um, so the question is.. Whether or not we should. How we should. Wait whether or not we could check for equality instead of inequality. If they are the same then do what. Nothing. So you want the other side. Or whether it wold be single or double assignment operator. If it is a logical question then it is double. I assert that you really don't want to do that. Then you are being explicit about the else. And then there wouldn't be anthing to do otherwise. We will run into this later in the class such that if something is true then we will do nothing","width":3904},{"text":"Alright, let's return a helpfull value ","width":448}]