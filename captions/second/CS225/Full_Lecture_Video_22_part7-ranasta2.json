[{"text":"T's data should become what? Croot's data, good. And if I'm building that root node I have to do the data, I have to do the left subtree and the right subtree and then the node is built. What is the left subtree? T left is what? Copy of croot's left. Okay I'","width":2560},{"text":"Okay I'll race you for the last line. ","width":128},{"text":"And then what I'm gonna do is return T.","width":1088},{"text":"You like it?","width":256},{"text":"Seems okay, right?","width":384},{"text":"What's the running time?","width":192},{"text":"Waitwhat?","width":192},{"text":"What's the running time of that algorithm?","width":128},{"text":"Big O of N","width":192},{"text":"You did that fast!","width":192},{"text":"How did you do that?","width":128},{"text":"Okay so I'm going to write running time right here.","width":832},{"text":"How do you know it's big o of n","width":640},{"text":"anything else would make you mad anything else would be like ridiculous or ridiulous","width":256},{"text":"Either way","width":192},{"text":"Alright if you squint your eyes","width":180},{"text":"It looks a lot like what?","width":139},{"text":"Pre order traversal","width":256},{"text":"That's right","width":123},{"text":"It's an if statement it's a fat if statement there's a constant amount of decoration around it","width":448},{"text":"but it's an if statement with a constant amount of work and 2 recursive calls","width":512},{"text":"so it's just like preorder so I'm gonna say that the running time is big o of n teh same as preorder by analogu","width":960},{"text":"Can yo ualwayus just make a guess like that?","width":256},{"text":"Big o of n by analogy to traversal","width":606},{"text":"The same amount of work this is just a traversal where instead of yellling out your data you do something else you make a new node and copy some data","width":768},{"text":"okay any questions about that/","width":143},{"text":"okay fine","width":64},{"text":"so it probably doesn't suprise yuou taht the next application of traversal that we are gonna see is the clear function","width":984},{"text":"I","width":192},{"text":"I've got a tree and want to clear out its memeory","width":179},{"text":"so take a look and see if the code does this","width":418},{"text":"What i think the code should do is clear out the left, clear out the right, and free the memory associated with the root","width":867},{"text":"so i think it should do this then this and then this","width":320},{"text":"okay does the code dod taht?","width":341},{"text":"oh, yeah i forgot this is the buggy slide","width":787},{"text":"I could fix it the other wayu the other way would be a little bit better in terms of you know in my binary tree class the root is called really this is the root something","width":734},{"text":"okay so now does the code dodthat?","width":256},{"text":"sorta","width":64},{"text":"this code has a big bug waht is it?","width":594},{"text":"Nope","width":202},{"text":"Here's the root r","width":195},{"text":"this one uses root as r","width":253},{"text":"What's the bug?","width":318}]