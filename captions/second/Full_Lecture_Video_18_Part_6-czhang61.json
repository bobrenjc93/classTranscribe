[{"text":"Okay. ","width":448},{"text":"So here's a data structure.","width":176},{"text":"Oh, yep?","width":665},{"text":"So the heap is an implementation of a priority queue, and the priority queue says nothing that it has to be numbers.","width":334},{"text":"It just has to be elements that have some priority.","width":170},{"text":"So as long as you have some way of going from a string to what its priority is, you can do something.","width":477},{"text":"So that the key is being able to go from any arbitrary string to some specific priority value, and have that be what you need it to be. ","width":402},{"text":"But you could certainly do this over any kind of data.","width":460},{"text":"So, here's something.","width":266},{"text":"I want you to think about an algorithm to find a specific element in this structure.","width":431},{"text":"So, let's say I want you to find me the node containing four.","width":704},{"text":"How would you do that?","width":300},{"text":"So first of all what is this?","width":269},{"text":"What is this data structure?","width":284},{"text":"Binary tree, right?","width":121},{"text":"It's not a heap. ","width":128},{"text":"It clearly violates multiple things about the heap property. ","width":192},{"text":"It's not complete, so it's certainly not a heap.","width":230},{"text":"So this is just a straight old standard binary tree. ","width":276},{"text":"So, again we're thinking of a node struct that's got a pointer left, pointer right.","width":214},{"text":"And some data element inside of it.","width":101},{"text":"And I'm asking you to find me the node that contains four.","width":320},{"text":"What is your algorithm going to look like?","width":332},{"text":"Some kind of traversal.","width":207},{"text":"It could be your favorite traversal. ","width":246},{"text":"Probably the most effective one would be like, pre?","width":261},{"text":"Because you want to look before you traverse the children, you can check and see if you're the node, and then don't bother traversing the children.","width":462},{"text":"So if I ask you to find three, you can just look at the root and say, oh that's three I'm done.","width":338},{"text":"But in general this is going to be some kind of traversal algorithm.","width":245},{"text":"Because you've got to locate that element and you don't know where it's going to be, it could be on any side.","width":256},{"text":"You'll have to walk the whole tree and kind of look for this guy.","width":128},{"text":"So what's the running time of that algorithm?","width":217},{"text":"In the worst case?","width":128},{"text":"O of n.","width":234},{"text":"If you want to think of a horrible pathological case it could be find me negative fifteen.  ","width":384},{"text":"Well it doesn't exist, but you don't know it doesn't exist until you've seen everything in the tree.","width":256},{"text":"So trivially finding me something that doesn't exist it going to be linear time.","width":788},{"text":"Moving on to our next ADT.","width":112},{"text":"So, definitely this is not on the exam.","width":296},{"text":"Here's our cutoff point.","width":192},{"text":"So, a dictionary ADT is an abstract data type that supports the following functions.","width":565},{"text":"Insert, k v. ","width":128},{"text":"So you insert a key value pair into the data structure. ","width":373},{"text":"At of a key.","width":64},{"text":"So you can find the value associated with a specific key. ","width":243},{"text":"In the data structure.","width":127},{"text":"And remove of k, remove a key.","width":164},{"text":"So you find the key and you remove that associated key value pair from the structure. ","width":489},{"text":"Data structure I've got pairs of data now.","width":192},{"text":"I've got keys, and I've got values, and I've got values that associated with keys and I'm looking things up by looking up the key and then getting the value. ","width":704},{"text":"So, what are three usage cases for a dictionary?","width":256},{"text":"i.e. what are three examples of where I might use such a data structure. ","width":491},{"text":"It could be real world examples, it could be coding examples.","width":128},{"text":"Yeah?","width":107},{"text":"Phone book!","width":128},{"text":"What's the key?","width":232},{"text":"Probably a name or something, or you know, whether it's a person's name or business name it doesn't really matter.","width":256},{"text":"Some kind of name. ","width":76},{"text":"And the value would be, well, maybe the address and the phone number. ","width":320},{"text":"So, one example would be a phone book.","width":672},{"text":"Yeah?","width":111},{"text":"A database. ","width":64},{"text":"That's a very generic database.","width":256},{"text":"So, saying what the key and the value is for that might be hard because it kind of depends on what the database is.","width":640},{"text":"But, certainly that's true.","width":117},{"text":"Yeah?","width":128},{"text":"So login informations.","width":128},{"text":"So you can take a login database.","width":128},{"text":"So what's the key there?","width":223},{"text":"Like the username, or the email, or whatever you're using to login.","width":256},{"text":"So, user logins. ","width":384},{"text":"And what should the value be?","width":164},{"text":"A hash of the password!","width":128},{"text":"Not the password.","width":155},{"text":"There's my web development side coming through. ","width":192},{"text":"So, when you're doing stuff like this, if you're storing sensitive information like passwords, you should never actually store the password text because that means if somebody breaks into your system they can just print out everybody's password, and then go try and login to a bunch of other stuff, and that's bad.","width":960},{"text":"So what you'll do is you'll actually run some kind of function over the passwords so it's all jumbled and scrambled in some undecipherable string. ","width":560},{"text":"You can then run that same function on when the user provides their password and see if the output of this function is correct.","width":412},{"text":"We'll talk about hashing more later, but yes, effectively the value here would be something that you can use to check that the password they put in was correct.","width":640},{"text":"So technically this would typically be some kind of hash of the password. ","width":192},{"text":"Yeah?","width":212},{"text":"You have to be careful to avoid that.","width":169},{"text":"Two people can have the same password though, so it's not really a huge problem here.","width":291},{"text":"The key is ought to be unique, but the values don't have to be.","width":476},{"text":"Multiple people might reside in the same location so you can have multiple names that has got the same phone number.","width":448},{"text":"Multiple users might happen to have the same password, bad but they might.","width":303},{"text":"Might happen to have same password, password, and that's fine.","width":266},{"text":"But the keys have got to be unique, because they use the key to look up some information.","width":328},{"text":"So, if I've got two duplicate keys, I have no way of distinguishing the two. ","width":256},{"text":"So, the keys will be unique, but the values do not have to be. ","width":192},{"text":"What's a third one?","width":192}]