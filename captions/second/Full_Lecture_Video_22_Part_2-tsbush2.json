[{"text":"Now the assumption that we're operating under is that this function is that this function is being used to fix what used to be an AVL tree before an insertion or a removal occured.","width":832},{"text":"Our balance is going to be off by at most 1 we don't have to worry about the case where the balance factor is like 5.","width":512},{"text":"Never going to happend.","width":128},{"text":"Balance factor could be any of -1, 1, 0, -2 or 2.","width":384},{"text":"Because we start with an AVL tree, which has balance factors between -1 and 1.","width":320},{"text":"And then we added a node, which at worst could've made either the left side too heavy so we get -2 or made the right side heavy so we get plus two.","width":512},{"text":"That's the only case, we don't have to worry about balance factor being outside of this range, by virtue of this all being done on an AVL tree where we're always starting with something that's balanced.","width":576},{"text":"So if the balance factor is two, positive two, then I know which side is heavy.","width":640},{"text":"The left side, so I'm going to call my rebalance left function because that's going to take care of fixing imbalances that occur on the left.","width":512},{"text":"So I'm going to rebalance left still on the same tree, this is still the tree I want to fix, but I know that the imbalance occurs on the left.","width":1344},{"text":"And then if the balance factor is minus two then it's the same story it's just that the imbalance occurs on the right side so I'm going to do a rebalance right.","width":640},{"text":"So all this is doing is sort of diagnosing which side the imbalance occurs on.","width":1152},{"text":"So once we've done that, looked at our balance factor and we checked if we need to do a rebalance at all because you notice that this function is not guaranteed to always call a rebalance left or right.","width":1024},{"text":"It only happens if it's two or minus two it's not like an else it's an else if.","width":384},{"text":"So if the balance factor was say -1 we'd fall right through both of those IF statements and not do anything at all.","width":384},{"text":"We'd look at the balance factor and say \"Oh the balance factor's fine don't do anything\" okay?","width":256},{"text":"So this function is sort of looking at the balance factor and figuring if you actually need to do one or not and then if you need to do one, i.e. the absolute value of the balance factor is greater than one, which side is it heavy on that's all that it's doing.","width":1024},{"text":"So in the case where you don't need to do any rebalancing no rebalancing is done at all.","width":320},{"text":"So after we've done these rebalances, for now we're just doing to exist and they do the rotations and stuff that we need.","width":768},{"text":"So now the tree has been balanced at subroot is balanced and we need to update the height of this tree.","width":512},{"text":"So what am I going to set the height to?","width":320},{"text":"Max of left, max of height left, height right quantity plus one.","width":512},{"text":"The one is for the path to the child so if we're dealing with a case that's like this, we don't know what those two subtrees are but we know that our height must be one plus either the height of this or one plus the height of that.","width":1152},{"text":"Depending on which one's taller okay?","width":192},{"text":"And if they're both empty they're both negative one so our height would be zero so it works out.","width":320},{"text":"Notice that if the height of those subtrees didn't change at all then this assignment is just going to set the height to what it already was.","width":576},{"text":"So it's fine, it's not as though if the heights don't change we're messing up the heights somehow.","width":320},{"text":"This way of calculating the height will always be correct if you can assume the subtrees heights are correct which we were fixing inside those rotation functions.","width":704},{"text":"If we assume that the heights of everything below me are fine then I can compute the height of myself easily.","width":320},{"text":"So this is just a max or a std::max of height of subroot left.","width":1088},{"text":"right plus one.","width":1088},{"text":"So the observation was a good one and that is, so this is going to sort of recursively sort of go up the tree and invoke this height setting function.","width":1472},{"text":"For all of the nodes above it and the reason for that is here.","width":384},{"text":"So after we're coming out of the insertion function at every stack frame that we had going down we're invoking this rebalance function.","width":768},{"text":"So every node on the way back up from where we put the new node all the way back to the root is having it's balance factor checked and it's height updated if it needs to be.","width":704},{"text":"You go down to find where the node should go you put it there and then as you're coming back up you're checking balance factors and resetting height and stuff.","width":768},{"text":"In other words the rebalance is occurring post recursion.","width":832},{"text":"If you want to think about it that way it's not a post order traversal because we're not traversing but the rebalance is occurring after the insertion's happened on the way back out.","width":704}]