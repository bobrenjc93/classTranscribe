[{"text":"I'm not calling pop_back. I'm doing the swap and I'm decrementing a size index","width":896},{"text":"Swapping with the element at the size index","width":448},{"text":"At the back of the heap","width":128},{"text":"I reduce the size of the heap, I do not reduce the size of teh array","width":384},{"text":"This is KEY","width":192},{"text":"I reduce the size of the heap, I do not reduce the size of the array","width":384},{"text":"I decrement that size index","width":128},{"text":"The array itself is not shrinking","width":512},{"text":"This woudlnt be a member function of the heap class","width":1536},{"text":"As long as you are allocating any additional memory, your sort is in-place","width":1280},{"text":"Most implementations of mergesort are not in place","width":256},{"text":"You CAN write an in-place mergesort, its WAAAAAAY harder than you would think it is","width":320},{"text":"Uhhhh, look back at your canonical implementations of mergesort, they're allocating arrays","width":704},{"text":"It's VERY difficult to write an in-place mergesort","width":384},{"text":"So most ppl don't teach it","width":256},{"text":"Last heap brain-teaser","width":1024},{"text":"Quick point. These kinds of questions test whether you know how to use a data structure, I like questions like this","width":896},{"text":"So, design an algorithm that finds the top k elements in an array of size n (where k is MUUUUCH  smaller than n). So you can thiknk of k as effectively being constant, like 10.","width":1152},{"text":"And its a realllllllly big erleasirylaseryaewlsryasleyrlaesyrlaseyrlase big array","width":384},{"text":"So we wanna do this faster than n log n","width":320},{"text":"So obviously a solution coudl be sort the whole array, and look at the index 0 through 9","width":384},{"text":"So this array is REALSKDHFALLLLY HUGE, we do not want to an n log n sort of this array","width":384},{"text":"Design an algorithm that can go faster than n log n","width":384},{"text":"I'm gonna give u a littel bit of time","width":128},{"text":"So we'll come back at...... 10:28","width":384},{"text":"4 minnnnnnn","width":64},{"text":"There's two different algorithms you could write here, both of them are faster than n log n.","width":832},{"text":"Hint: You're gonna use a heap","width":192},{"text":"............................................","width":14464}]