[{"text":"Just for explanation sake, I'm showing you that it could be null. Alright. ","width":384},{"text":"Ok.So that's how the first member variable looks.Ok.","width":256},{"text":"Let's look at the second member variable.","width":192},{"text":"This is the one that I didn't look at.I just completely blanked and didn't even see this one. Ok.","width":320},{"text":"So what is this one? Length of i gives us the length of the ith chapter.","width":320},{"text":"So what is that type actually meaning?","width":192},{"text":"Is it a pointer to just one uint64_t or is it a pointer to many uint64_ts?","width":448},{"text":"Many. It's an array.Right?","width":64},{"text":"So when I subscript that to ith position,it's gonna tell me how long the ith chapter is. ","width":448},{"text":"In other word,this will tell me the length of that array at that position in the lines of array.","width":256},{"text":"Right? So I will have another variable here which will be a again a pointer to heap memory.","width":576},{"text":"So it will be pointer to the start of some block of memory,which will have length 1,2,3,4,5 .I guess?","width":512},{"text":"And the values in here will be the length of the arrays in the lines.","width":704},{"text":"Right? How many lines are there in the ith chapters.","width":128},{"text":"So here. It will be okay.","width":64},{"text":"0 will have 1,2,3,4. ","width":384},{"text":"This will have 1,2,3,4,5,6,7.","width":192},{"text":"This has 1,2,3,4,5,6,7.","width":384},{"text":"That one has nothing ,because that's empty.This one has 1,2,3,4,5,6. ","width":448},{"text":"Right.","width":128},{"text":"Why do I need that array?","width":320},{"text":"Yeah.","width":320},{"text":"Yes ,I need that so that I can know how long each of my array is.","width":256},{"text":"If I don't have these sizes anywhere, I don't really know where my array ends.","width":512},{"text":"So how do I...Like if I want to print put a chapter, I don't know when to end.","width":320},{"text":"I need to know how big that array is.","width":64},{"text":"So I need to store a size ,right? For each one of those array.Right?","width":192},{"text":"Likewise, i also need to store size for this array ,right?","width":256},{"text":"I need to know how many chapters there are .","width":256},{"text":"So that's what this guy is.This guy is just a number.So it will be 1,2,3,4,5.","width":448},{"text":"That's just tells]ing me how big that first array is.","width":192},{"text":"Okay.","width":64},{"text":"There is a lot going on here. Does that all make sense though?","width":192},{"text":"Alright.","width":128},{"text":"Size tells me the number of chapters that tells me the length of the lines.","width":384},{"text":"Okay.","width":64},{"text":"And then that lengths_ array tells me for every chapter, how many lines there are in that chapter.i.e how long is the array at that position.","width":640},{"text":"So that array 4,7,7,0,6 tells me that the ,for example the chapter at position 1 in the array has 7 lines in it.","width":576},{"text":"Alright.","width":128},{"text":"size_ being 5 tells me that I have 5 chapters.","width":256},{"text":"So my valid array indices for the chapters are 0 through 4. Right?","width":192},{"text":"My valid indices for the first chapter,the 0th chapter, will be 0,1,2,3 right?","width":512},{"text":"That's what this is telling us.","width":128},{"text":"Okay.","width":64},{"text":"Now I actually have everything. Because I've gone through , I've looked at all of the private member variables.","width":192},{"text":"So this is the kind of structure that we thinking about.","width":192},{"text":"Okay?","width":128},{"text":"Yeah.","width":256},{"text":"How do I know this is all in the heap?","width":64},{"text":"So just from the pointer type I can't .","width":448},{"text":"However, intuitively you can sort of know that these will be in the heap because you know that they will be runtime sized.","width":576},{"text":"Right?","width":64},{"text":"I'm not saying that every book can have a maximum like ten chapters.And it will always have ten chapters and that's it.Right?","width":384},{"text":"Books can have arbitrarily many chapters. They have a constructor that I can give it that says okay make a book that has so many chapters in it.","width":448},{"text":"So I don't know ahead of time how big those arrays are.","width":192},{"text":"So I know that they are pretty much will have to be in the heap.Right?","width":128},{"text":"Whenever I've got an array whose size I can't tell at compile time. It will have to be in the heap.","width":320},{"text":"Right?","width":64},{"text":"That's one of the reasons that we have use heap memories when we don't know ahead of time how big stuff is. ","width":448},{"text":"Right?","width":64},{"text":"Whenever the compilers are compiling a function , it has know sort of how much stack space to make for that function call. ","width":576},{"text":"RIght?","width":64},{"text":"So similarly, if we will try not to use heap memory inside the book class, the compiler will need some way of knowing how big the book class is .  ","width":512},{"text":"Right?","width":64},{"text":"And so if we don't know ahead of time how big that array inside of the book will be, we can't really put it on the stack.","width":256},{"text":"Because the the compilers can't know.","width":128},{"text":"Right?","width":128},{"text":"If you use compiler extensions and we will not use compiler extension.","width":256},{"text":"Because that's not important.","width":320},{"text":"Okay","width":64},{"text":"So this is the diagram that we should have that reminds us more thinking about this particular class.Okay,","width":384},{"text":"Okay,now I mean we could have done this before.","width":192},{"text":"But now that we have this pictures in mind we know two things.Right?","width":384},{"text":"One since it's using dynamic memory,we will need a... I guess... What two functions do I need because it's using dynamic memory?","width":576},{"text":"I need a copy constructor. And I need a destructor.Right?","width":384},{"text":"Why do I need a copy constructor?","width":192},{"text":"Remember the systems, if I don't provide one,the system will give me one.","width":320},{"text":"So the system will be helpful like okay fine if you don't want to tell me how to copy,I can figure it out.","width":256},{"text":"I just do member-wise copy.","width":192},{"text":"Alright?","width":64},{"text":"which works for a lot of causes. But why does it not work for a structure like this? Why will that default behavior not be satisfactory?","width":768},{"text":"Right. Member-wise copy means literally just copy over the values.","width":192},{"text":"So if I copy over the values into another structure that means just copy the pointer value .","width":256},{"text":"which just a memory location. So I will have two object that both refer to same stuff.","width":320},{"text":"Right?","width":64},{"text":"And so if I change one , I can change the other. That's not what a copy means.Right?","width":256},{"text":"If I give you a copy of a textbook. And you have dogs in your pages. My book doesn't suddenly have dogs in it.","width":448},{"text":"If you accidentally tear a page, the page is till in my book.","width":320},{"text":"And it's not damaged right?","width":64},{"text":"It 's not what a copy means.Right?","width":128},{"text":"So we have to redefine what does it mean to copy our class because the default-provided mechanism for copying is no longer sufficient. ","width":576},{"text":"Okay?","width":128},{"text":"If we thought about our rectangle class. We talked about I think last time right?","width":320},{"text":"I didn't define a copy constructor for that.","width":128},{"text":"Right?","width":64},{"text":"I didn't need to .The default behavior's just copying over the values of my member variables.","width":256},{"text":"It's perfectly fine if I don't have any dynamic memory.","width":128},{"text":"If I just have integers and stuff inside of the object, doing assignment on those in the copy constructor is fine.","width":576},{"text":"Right?","width":64},{"text":"There is no...the default behavior is satisfactory.","width":128},{"text":"So I don't need to overloaded.","width":64},{"text":"I could but I will just define it to do exactly what it would do anyway. So why bother.","width":256},{"text":"Right?","width":192},{"text":"Here however, I do need to change what it means to copy my class.","width":192},{"text":"I do need to provided a copy constructor.","width":192},{"text":"Okay.","width":64},{"text":"Alright, and then the destructor. Why do I need a destructor?","width":320}]