[{"text":"th ediffernece is where u do your work, reletive to other node, you would have to but tipically when we talk about the name","width":640},{"text":"of these its always left or right. that leades into this question","width":448},{"text":"so, weve got htis binary tree class, its got a root pointer, which is the owning pointer to a node, and then every pointer has got an owning pointer","width":640},{"text":"left and right","width":192},{"text":"the question is, lets assume we've got a binary tree t class and oits going out of sccope, os its destrotor is invloked, we didnt have to write our own custom destroctor, but its important to know what going on ","width":896},{"text":"when the destructor is invloked, so what s happening when that destroctor is involked, we know that it recursively gets rid of the nodes","width":576},{"text":"we never really talked in what oreder, so if we got this picture here, ","width":640},{"text":"","width":64},{"text":"and lets assime that tree is going out of scope, so some root pointer into a and that tree class is going out of scope, ","width":1088},{"text":"we didnt provid a custom destroctor so it does nothing, and then what happens before we go back out of the destroctor calls","width":384},{"text":"","width":128},{"text":"","width":320},{"text":"so, if you in a class and you have a default destroctor, or a non default destroctor, it doesn't matter, when your destroctor is done running its custom code","width":640},{"text":"member variavbrels have their destructos invloked in revese order of their allocation,","width":384},{"text":"so when your object is toast, it then goes in reverse order of data members and invlokes destructor that way","width":768},{"text":"if we're in the tree class and our destructor is involked, we only have one data member, the root, os the destructor is involked for tha root","width":576},{"text":"which is the unique pointer to A","width":448},{"text":"","width":64},{"text":"that means we are gointo destry the Anode, if we imagin that the node destructor prints out its data","width":640},{"text":"we would print A first","width":320},{"text":"the root not is what we would have delete called on","width":64},{"text":"that node has no custom destroctor, wht happens on that node","width":704},{"text":"what destructors run first ","width":192},{"text":"left or right","width":64},{"text":"in reverse order of allocation","width":320},{"text":"right","width":64},{"text":"its just like stack frame","width":320},{"text":"the left was put on then the right","width":256},{"text":"was put on","width":192},{"text":"","width":704},{"text":"","width":576},{"text":"","width":192},{"text":"","width":192},{"text":"so its in reverse order of their allocation, so you could sortof think of these nodes","width":320},{"text":"struct as a having the left is put in sack, the right is put on stack, so the right is gonna be destroyed","width":384},{"text":"first and then the left, so now we're going  to do a traversal that snot left to right","width":256},{"text":"whats the second node that would be printed as we're destroying this tree","width":192},{"text":"M we are goin right first","width":320},{"text":"this would be first , this would be second","width":128},{"text":"we run the destroctor for m right first but its null, nothing happens","width":576},{"text":"we then destroy M left","width":192},{"text":"nothing happens we go back out, so now A has ha dits right child destroyed","width":576},{"text":"so now the destuctors involked are done with the left child","width":64},{"text":"we would destroy B","width":256},{"text":", Bs destructor is involked which would involke the right member variable of the B","width":448},{"text":"so that mans the fourth this is H","width":384},{"text":"","width":384},{"text":"so were at H so now H's right is going to bedestroyed, so we print out the J","width":384},{"text":"now the J is destroyed,m right of J so L is destroyed","width":640},{"text":"no right no left, nothing happens we go back out, we finish destroying the right nodes","width":576},{"text":"so we're gonna destroy the left nodeds","width":64},{"text":"so tis K is destroyed","width":256},{"text":"noting happend, we go back out  J is being destroyed,  we go back out","width":384},{"text":"H is destroyed, its right, so H is destroy its left, I is 8","width":704},{"text":"so every subtree is gonna destroy its right side first, and then its left side, and then return backout","width":576},{"text":"sowe are acctually goind to see the tree disappearits right side first , and then up until left","width":384},{"text":"this is neither a preorder, post order, or in order traversal, it weiredpost order","width":1024},{"text":"we went right first instead of left","width":128},{"text":"when the destructor is involked it would be like pre order traverasl, where we go right first then go left","width":640},{"text":"when the node itself is acctually released its like a post order","width":448},{"text":"because the node is releasedafter the destructor is involked for both of its member variables","width":256},{"text":"if we print out the values in the destructor,  we see this right first preorder traversal","width":576},{"text":"memory is going away, ts this right first post order","width":576},{"text":"the desrtuctor for member variable are invloked in reverse order of allocation, so right trees aregoing away first","width":704},{"text":"","width":576},{"text":"","width":128},{"text":"if i think about the order in which the nodes would be printed A would be printed first, but the accutually A would be the last thing released","width":576},{"text":"because it has to destroy the whole left subtree first","width":320}]