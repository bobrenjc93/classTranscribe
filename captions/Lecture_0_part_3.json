[{"text":"alright so, is our code any good?","width":185},{"text":"yes, question?","width":629},{"text":"okay, so, this was discussed on piazza. it makes the code a bit more cluttered. if you do too many casts, you're forcing your way, you're saying: \"hey compiler, trust me I know what I'm doing\"","width":1076},{"text":"which is fine until the day you don't know what you're doing","width":166},{"text":"and you've just casted something which is incorrect","width":159},{"text":"maybe you're casting a pointer to a pointer to a pointer.","width":271},{"text":"and you would've potentially gotten a compiler error but by explicitly casting, you won't get any error","width":551},{"text":"so that's probably the biggest issue","width":76},{"text":"yes","width":411},{"text":"oh, I'm so, yes, you're right. I forgot that it's a character pointer. it would not have returned 1. it would've returned say 4 or 8 or however big your pointers were on your platform","width":958},{"text":"so, if its a 32 bit platform","width":323},{"text":"then how many typical bytes do you need?","width":406},{"text":"well, 4 bytes to hold 32 bits","width":134},{"text":"if its a 64 bit machine, then you'd need 8 bytes","width":594},{"text":"right, so, our code looks pretty good except one little issue. if you read the manpage of malloc, you can discover that malloc() can fail. and when it fails, it returns","width":686},{"text":"quick! read the man page!","width":77},{"text":"right, when it fails to give you any memory, it returns NULL","width":322},{"text":"so, we should check for that","width":100},{"text":"because right now our code would attempt to write into that 0 location","width":358},{"text":"if malloc fails","width":48},{"text":"so what we should do is, here is, we should, if p or not p which is another way of saying \"hey, is p zero\"","width":1196},{"text":"I didn't give any memory so no new string duplication for you","width":285},{"text":"and hopefully the code that calls my code actually bothers to check to see whether it got a valid pointer or not","width":517},{"text":"alright, okay, any other questions?","width":288},{"text":"alright, what's a double free?","width":438},{"text":"okay, so, let's say we free pointer, and then for some reason later, we free the same pointer","width":703},{"text":"in other words, we called free twice on the same memory block","width":241},{"text":"is that a bad thing?","width":148},{"text":"yes, that's a bad thing","width":144},{"text":"okay, here's why","width":118},{"text":"when you call free, the memory allocator says \"oh, look!\" he or she is finished with that memory so I can put it back into my free pile","width":717},{"text":"and I might allocate it again when someone asks for more memory but I'm going to update my linked list structures and whatever internal structures I have to keep a count of what memory is free","width":871},{"text":"so if you call free again, bad things may happen to those linked list structures","width":403},{"text":"bad things may happen to other code that's already actually using that memory space","width":467},{"text":"alright because between you freeing it and freeing it again later, it could be that another malloc has come in and been given that memory","width":589},{"text":"so when you double free, really exciting things can happen","width":217},{"text":"you have no idea what's gonna happen next. you have broken the universe at this point","width":369},{"text":"because, artibrary things can happen to your heap memory and who knows what the rest of your program is doing to your heap","width":538},{"text":"so, how can you avoid it? well, there's a couple of ways. first of all, don't write this code","width":368},{"text":"secondly, it's a good practice in production code to set your pointer to zero","width":393},{"text":"in other words, don't have, what are these pointers called now?","width":497},{"text":"the dangling pointer!","width":67},{"text":"it's a pointer to some memory address that is no longer yours to play with","width":308},{"text":"because say you free'd it","width":128},{"text":"and you don't want another piece of your code to accidentally use that pointer","width":461},{"text":"so, when you free memory or decided to use memory for some other purpose, it's good practice to set pointers to that memory to zero","width":901},{"text":"this of course looks very easy and trivial to avoid. in practice, these two frees could be somewhere arbitrary in your program. maybe someone kind of tries to free your data structure twice","width":833},{"text":"and then you end up calling free on some memory twice","width":453},{"text":"right, okay, let's have an example of a buffer overflow","width":466},{"text":"well a buffer in C can be anything. for example, it could be just a simple array","width":298},{"text":"so, let's make an array myData","width":722},{"text":"and this says, \"okay, I need space for 8 bytes or 8 characters\" and","width":1022},{"text":"let's set one of those entries to p. is that allowed in C?","width":681},{"text":"okay, so that's a trick question. yes, the compiler will compile that for you, it might give you a warning, it might get an error if you've racked up enough options","width":772},{"text":"but remember, what are we doing here is we're just simply saying \"okay, take whatever data's pointing to, add 8, times whatever the size of each entry is, and then use that to change some memory\"","width":737},{"text":"we actually want a bit representation in our p","width":360},{"text":"but, when we did this, we only asked for enough space for 8 entries. and we're trying to write a 9th entry. oops!","width":723},{"text":"we could also have run into the same problem if we had string copy","width":555},{"text":"one two three four five six seven eight","width":386},{"text":"ahh, I did it the wrong way around","width":409},{"text":"okay, so there's two things wrong with this code. first of all, the arguments is the wrong way around","width":534},{"text":"second of all, how many bytes is this going to write?","width":272},{"text":"into memory?","width":98},{"text":"nine!","width":51},{"text":"I've got the digits 12345678, and the NULL byte at the end to say \"hey! my string is finished\"","width":457},{"text":"but we only made space for 8","width":230},{"text":"so that ninth byte. what's that ninth byte being used for? maybe it's being used for another variable in which case we've just overwritten the value of another variable","width":636},{"text":"and that is how many C programs are vulnerable to buffer overflow","width":407},{"text":"that is how you could hack into say, a web application which didn't put enough space on a buffer","width":735},{"text":"and you could then overwrite nearby variables","width":290}]