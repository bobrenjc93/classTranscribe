[{"text":"now if we were to run our code by the way","width":1152},{"text":"I didn't talk about this little guy in here","width":256},{"text":"what did you think he's there for?","width":192},{"text":"right? this little tiny question mark is the ultimate april fools in the sense that this will get you every day of the year","width":832},{"text":"this is C going oh you mean you didn't set all of the parameters in a field?","width":576},{"text":"don't worry, I'll make your code work today","width":192},{"text":"but, if we don't set all the fields inside a struct, then who's to know what the values are of the ones that we didn't set","width":512},{"text":"now maybe you made it in global memory","width":320},{"text":"and you know that there's going to be zero but if we didn't","width":320},{"text":"if we just made it on the stack","width":128},{"text":"then who knows what those global fields are going to be","width":256},{"text":"and we're just giving them to the operating system","width":192},{"text":"so who knows how getaddressinfo is going to interpret those unset fields","width":320},{"text":"so I'm talking about these in terms of setting up network code but this is actually a common common gotcha with C","width":384},{"text":"is you hey I've got a struct, I'll set a few things and I forget to set the other fields","width":448},{"text":"so right how can I fix that? well I showed you before","width":192},{"text":"one way is to call memset","width":64},{"text":"okay so how about we do this? memset on the hints","width":320},{"text":"sizzeof(hiints)","width":768},{"text":"zero","width":192},{"text":"and I can relax that I've now got job security","width":320},{"text":"my code will work!","width":128},{"text":"haha april fools","width":704},{"text":"so what have I just done?","width":512},{"text":"I've just managed to set zero number of bytes","width":320},{"text":"to a small integer value","width":128},{"text":"in other words the memset call I just made had no effect whatsoever","width":320},{"text":"because I accidentally swapped these two values around","width":320},{"text":"I suggest that you ideally just don't make this mistake","width":1024},{"text":"or don't make this mistake in production code","width":192},{"text":"because the worst thing about it is that you probably won't realize it, you probably won't notice it right?","width":384},{"text":"the memory half the time is zero","width":128},{"text":"and it's only when say you are reusing old stack memory that you might not get nonzero values","width":448},{"text":"so watch out, watch out anytime you work directly with memory","width":256},{"text":"that's the most likely time that you'll get some very subtle bugs","width":192},{"text":"right so we've got our thing set up","width":384},{"text":"getaddressinfo is returning zero, it's working, right so...","width":384},{"text":"here's what we can do now","width":192},{"text":"remember how I said...","width":256},{"text":"in a client we make a socket and then we call connect","width":320},{"text":"and we connect to a remote end","width":192},{"text":"in a server, we go socket and bind","width":512},{"text":"we're not trying to connect to a remote end at all","width":320},{"text":"we're just saying ha I just want to set up a local socket here","width":192},{"text":"that doesn't connect to anything, it's just going to sit there and listen","width":192},{"text":"and all the parameters that we pass to connect to the same ones as bind","width":320},{"text":"so we're going to be passing in...","width":64},{"text":"these two again, this address and that length of that struct","width":384},{"text":"we'll see the real code in a moment","width":128},{"text":"but basically we've swapped our connect for a bind","width":128},{"text":"because we want to talk about not a remote endpoint but a local endpoint","width":320},{"text":"right... so at this point we'll just take a little bit of a break to","width":704},{"text":"mention these guys","width":128},{"text":"and also to kind of show you what the code might look like if you didn't have getaddressinfo","width":704},{"text":"so when setting up a socket","width":640},{"text":"one of the things we want to talk about then is the port address and the IP address","width":576},{"text":"and you'll notice if you do a lot of google searching on code, you'll quickly come across these functions here","width":512},{"text":"this htonl and htons","width":192},{"text":"here's what they do, they swap bytes around","width":512},{"text":"sometimes","width":192},{"text":"they swap bytes if you run this on an x86 intel machine","width":384},{"text":"why?","width":256},{"text":"why do you think we might want to swap the ordering of bytes?","width":320},{"text":"security?","width":512},{"text":"good idea but not the answer I was looking for","width":384},{"text":"endianness yes!","width":192},{"text":"so endianness why do we care about endianness well the point is we're sending information over the wire right?","width":512},{"text":"we're sending stuff out to the network, we don't want it to depend on the order with which we represent integers","width":384},{"text":"so if we're talking about a particular port unmber","width":192},{"text":"that's sixteen bits","width":128},{"text":"we better agree when we send the packet out on the network as to whether we want to put the low byte first or the upper byte firs","width":448},{"text":"so network order is big endian","width":384},{"text":"and that should be independent of our machine","width":192},{"text":"so if the kernel says by the way, this remote host is connected to you on this particular port","width":448},{"text":"or here's this ip addresses","width":192},{"text":"we better be careful, these integers may not actually be the integers that we normally understand","width":384},{"text":"we may actually have to deliberately read that value with the bytes swapped","width":320},{"text":"so that's where these functions come in","width":320},{"text":"if you happen to compiling this code on a little endian machine","width":256},{"text":"big endian machine, they don't do anything, they are a no op they don't need to swap any bytes","width":320},{"text":"if you call them on an intel machine however, they give you the result with the bytes correctly swapped from big endian order to little endian order","width":576}]