[{"text":"So, it turns out that this, uh, circular wait is not sufficient for, uh, determining whether there's deadlock. It is necessary. If there's no circular wait, there's no deadlock.","width":1088},{"text":"I mean, if there's a circle in the graph, it doesn't mean there's deadlock. So there are four conditions. They are Kaufmann's conditions.","width":704},{"text":"The first one is mutual exclusion. It means that only one process can use a resource at a time.","width":576},{"text":"The process claims exclusive control of the resource they require.","width":384},{"text":"So if we're only dealing with writers, writers require exclusive access to that critical section.","width":576},{"text":"If we're only looking at readers, there's no exclusive access. They can all look at the same time. So we have to have exclusive access. A lock impies exclusive access.","width":896},{"text":"There is also something called hold-and-wait. Hold-and-wait says that the prcoess that the process holding the resources allocated to them is waiting for additional resources. ","width":896},{"text":"If we go back to our last two examples here, ","width":512},{"text":"IN this case, the first one, P1 is holding B","width":448},{"text":"And waiting for C","width":128},{"text":"In this case, P1 gave up B","width":256},{"text":"And then was waiting for C, and so in this case doesn't have any hold and wait","width":512},{"text":"So, in a sense a hold and wait","width":512},{"text":"a process has a resource","width":256},{"text":"it has an arrow coming in, and .is waiting for another resource so it has an arrow coming out","width":640},{"text":"The third thing is that there are no preemptive conditions","width":384},{"text":"this means nothing can be taken out","width":256},{"text":"so this instead of A releasing B2, I'm going to force A to release B2","width":704},{"text":"Once you have it, it's never given away","width":256},{"text":"So the north and south goings ","width":320},{"text":"There is no pre-emption.","width":256},{"text":"A circular chain of prcoesses exists. ","width":384},{"text":"So, there is actually a law on the books","width":256},{"text":"that said in Kansas, when two trains approach each other at a crossing, both shall come to a full stop ad neither shall start up again until the other has gone","width":1280},{"text":"Yeah, not so good","width":128},{"text":"Total deadlock. They both can't make any progress.","width":448},{"text":"This is a train, I'm not using a stack.","width":1472},{"text":"Ok I'm not sure I understand your solution.","width":832},{"text":"Ok, so give the north going train the priority and the south always has to give up.","width":640},{"text":"So that would break it.","width":128},{"text":"What","width":192},{"text":"condition would that break?","width":320},{"text":"Yeah, there's no pre-emption here, and in doing so you've gotten rid of the cycles too.","width":896},{"text":"Any other ways of fixing it?","width":192},{"text":"Let's see...did I have any others?","width":320},{"text":"Priority, uh...","width":128},{"text":"You could make one back up.","width":128},{"text":"But all of them have to be able to break one of the conditions.","width":576},{"text":"So let's go with one more simple example.","width":256},{"text":"Two students need a pen and paper.","width":192},{"text":"I need to know if there's deadlock here.","width":320},{"text":"Two students share pen and paper.","width":192},{"text":"Is there deadlock there?","width":128},{"text":"It breaks mutual exclusion.","width":192},{"text":"Both students agree to grab pen before paper.","width":448},{"text":"Which one does that break?","width":256},{"text":"I always grab pen before paper. This is no circular wait.","width":1216},{"text":"Because I'm always waiting for the pen","width":320},{"text":"and then I'm waiting for the paper.","width":192},{"text":"If they randomly did it, then we would have the cycle","width":448},{"text":"and they both get one or none","width":192},{"text":"Hold and wait","width":192},{"text":"Last one, students I have the pen and you give up the paper","width":768},{"text":"There's your preemption","width":192},{"text":"This leads us to the dining philosophers problem","width":384},{"text":"How many people have heard of this problem before?","width":512},{"text":"This is the canonical computer science problem.","width":256},{"text":"We have N philosophers and N forks","width":320},{"text":"BUT you need two forks to eat","width":192},{"text":"You can do this with chopsticks too","width":512},{"text":"But you only pick up one at a time","width":192}]