[{"text":"Yes","width":128},{"text":"Yeah","width":384},{"text":"Ok right. So what happens if you put static inside a function?","width":384},{"text":"So the variable itself lives forever, but static makes it a secret variable.","width":576},{"text":"yes the scope of it, the name start, is only available inside that funciton","width":256},{"text":"but the actual storage of that variable is for the lifetime of the process","width":448},{"text":"thats like one of those awful interview questions","width":64},{"text":"hey whats on page 37of the C standard?","width":384},{"text":"i dont know. I didn't write it","width":192},{"text":"Knowing precisely how static works is an exercise left for the advanced C programmer","width":640},{"text":"But by defining static, the life time of the memory is for the duration of the process","width":384},{"text":"To cast an int to a void pointer, if you're sure that a void pointer has enough bits to represent the parameter you're trying to pass in","width":1472},{"text":"You can also just say, look void","width":256},{"text":"LEt me choose a different value like 71","width":256},{"text":"That means, I gotta type as a pointer to some memory","width":320},{"text":"nto going to say what kind of pointer yet","width":256},{"text":"Im going to pass in this value 71","width":64},{"text":"you can do that providing you write the code to the other end to simply cast it","width":448},{"text":"if you attempt ot read at memory 71","width":192},{"text":"oops, you'll get a segfault","width":256},{"text":"I will not talk about that right now","width":512},{"text":"How about this one?","width":448},{"text":"So what I want to do here is that I want to send","width":384},{"text":"my value of i from 0 to 9 to some new threads","width":448},{"text":"So each one can get a value","width":320},{"text":"Why does this code not work?","width":256},{"text":"So take a moment with your neighbor to review it","width":576},{"text":"Ok so here's a version of that code","width":5888},{"text":"The first thing we might comment is what might this code print out?","width":640},{"text":"It might jsut print out hello world and nothing else","width":256},{"text":"it could be that we return from our main before those other threads ahave  a chance to start up","width":512},{"text":"Before those chefs can be employed and waltz into our kitchens, the process itself is exited because we've returned from main","width":448},{"text":"How do we stop that","width":64},{"text":"Well we could just call pthread_join on every one of those tids","width":448},{"text":"But you and I know we can call pthread_exit here and leave it up to the system to finish a process when all the other threads have exited","width":704},{"text":"And this is the output we get","width":576},{"text":"Im printing out the value that's actually sent to each new thread and also the actual pointer we've got as well","width":704},{"text":"the first commment is look at all these numbers! They're all the same","width":448},{"text":"ANd it seems to work.","width":128},{"text":"If we only tested this with 6 threads, we think our code is fantastic!","width":448},{"text":"But instead I get 0,1,2,3,4,5 and four 10's","width":64},{"text":"So the for loop finished","width":1216},{"text":"So, for the early threads, what happened?","width":384},{"text":"We ran our loop, we start a thread","width":192},{"text":"For the remaining threads, we went around the loop and those threads did not start. ","width":704},{"text":"They weren't scheduled on the CPU","width":64},{"text":"They're going to be. It's just they didn't start straight away","width":576},{"text":"Eventually they do start","width":128},{"text":"ANd theyre all given the same address","width":192},{"text":"the address of i","width":128},{"text":"it just happens to be a stack variable in my main thread","width":256},{"text":"by the time they started, we've already incremented the value","width":320},{"text":"it had already been incremented up to 10","width":320},{"text":"and we saw that they really are looking at the same variable because we've printed out the variable that was given to us","width":768},{"text":"and that address, 7fe blah","width":192},{"text":"is just part of the stack of the main thread","width":256},{"text":"So to fix it","width":320},{"text":"We coudl make a struct for each of our threads using malloc","width":384},{"text":"Or we can make an array in global","width":192},{"text":"but let's do the trick that you suggested","width":192},{"text":"lets just cast this","width":128},{"text":"to a void pointer","width":128},{"text":"because we're C programmers and we know what we're doing","width":448},{"text":"Absolute garbage, yes","width":832}]