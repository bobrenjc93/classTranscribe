[{"text":"so how can I determine which blocks to put together","width":512},{"text":"okay let's have a look at this one, this is still zero and block four but this time the size is size 4","width":512},{"text":"so if I gave you block 4 of size 4, you would say oh you should be merging with block 0","width":320},{"text":"if I gave you block 0 with size 4, you'd say oh that should be merged with block 4","width":384},{"text":"okay have I given you enough examples yet to see how we can determine which two blocks should be merged together","width":512},{"text":"I'm using exclusive or","width":448},{"text":"I'm xoring with the block number, the size","width":384},{"text":"so for example, here's block 8 of size 4","width":512},{"text":"8 xored with 4 is 12","width":384},{"text":"I'm flipping the lowest bit","width":320},{"text":"in the block number","width":256},{"text":"and eventually in my little example here","width":640},{"text":"I merge 8 with size 8, with 0 with size 8","width":768},{"text":"one of these will come in last","width":192},{"text":"and I'll do the final merge and say oh look here's all the data I needed to merge, I'm done, I can start writing out the data","width":576},{"text":"if that is too complicated to turn into code","width":320},{"text":"I have two advices","width":128},{"text":"that's okay!","width":256},{"text":"take CS 373 473 then your brain will explode ","width":704},{"text":"learn about things like topological sort which I can't spell this morning","width":448},{"text":"and that's okay you'll remember this lecture with fondness, oh that was so easy compared to this","width":448},{"text":"topological sort is when you start to think about dependencies between actions and it has some relevance to this task in hand","width":448},{"text":"but you don't need, the other piece of advice is don't panic, you don't need to go this far to beat the naive TA's solution","width":704},{"text":"okay so let's turn ourselves back to some of these questions","width":448},{"text":"right some of these I will not address today, I'll talk about them on Friday, remember you are getting points for learning and not simply printing out the right answer","width":704},{"text":"let's do which scheduling algorithm describes the smallest average wait time?","width":640},{"text":"results in the smallest average wait time, the answer here is going to be preemptive shortest job first","width":448},{"text":"why? well you can construct examples where we might have a very long job","width":576},{"text":"and a whole sequence of small jobs and if you did that, the long job you want to put at the very end","width":576},{"text":"otherwise it holds up everybody else, it holds up all of the other processes waiting to run","width":448},{"text":"so how do we assure that the longest job is put at the very end? answer: shortest job first, yes!","width":448},{"text":"preemptive priority you would have to make sure the priorities are based on the length of the job which is not necessarily true","width":896},{"text":"the longest average response time, what's response time? well think about a webserver, a webserver might start giving you some packets, some results pretty early on","width":768},{"text":"but it might take several more milliseconds before you get the full response, we care about how early can we get the beginning, how long do we have to wait before we start to see some output? just the early output","width":896},{"text":"right so what's the longest average response time? first come first serve could give us a long average response time","width":832},{"text":"because the very last job submitted is not going to give us a response until finally all of the other processes have completed","width":768},{"text":"if we wanted a fast response time, what we should do is give each process access to the CPU as early as possible","width":640},{"text":"so what's an example of doing that? round robin yes!","width":192},{"text":"so round robin with a nice short preemptive, nice short quanta so that each gets to do some meaningful amount of work and start generating output","width":704},{"text":"okay minimizes response time round robin, waiting time shortest job first, total response time so this is response time of course all processes again round robin would be useful here","width":896},{"text":"how am i doing for time? right","width":320},{"text":"the other questions I will address on Friday","width":384},{"text":"I will mention I'll just finish with one important idea","width":512},{"text":"right psychological research has shown that if you want to learn stuff, if you want to remember stuff, the most important thing you can do is remember stuff","width":576},{"text":"what do we mean by that? is use your long term memory? how do i do that? easy start with a blank piece of paper, write down everything you know about every topic inside CS241","width":704},{"text":"tomorrow, come back to the same piece of paper and write down more, do not use your notes, just write down more","width":448},{"text":"if you vaguely remember something put some question marks and some helpful hints","width":192},{"text":"the third day, do the same again","width":192},{"text":"the fourth day give up and yeah use your notes","width":192},{"text":"but you will discover that in trying to remember things, in actually exercising your brain","width":384},{"text":"stuff we start to come out of it in drips and drabs at first but it will actually ensure that you have a long term understanding of this material","width":576},{"text":"and with that have a wonderful week I'll see you on Friday!","width":256}]