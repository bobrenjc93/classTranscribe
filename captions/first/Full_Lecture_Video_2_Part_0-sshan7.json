[{"text":"okay, hi. I'm gonna ask you to volunteer (student: oh okay) alright.","width":1664},{"text":"I'm going to ask you to volunteer for something in a moment","width":64},{"text":"Okay! Good morning class! how are you?","width":832},{"text":"great! so, here we go, uh today we're going to talk mostly about fork() and exec()","width":384},{"text":"then we'll have time to talk about signals as well","width":256},{"text":"yes there will be an in-class exam/quiz coming up next week","width":320},{"text":"we'll see when it happens","width":128},{"text":"I guarantee it won't be Monday","width":256},{"text":"Or tuesday or thursday","width":320},{"text":"alright, more details next week.","width":192},{"text":"so first of all let's just start off with a little demonstration of how fork() works","width":256},{"text":"for that, I need a volunteer, yes! thank you! please come on down","width":320},{"text":"alright, so, um, here's my process and of course [something] today you're gonna be my process, right?","width":384},{"text":"so, a process to run of course needs some instructions to execute","width":384},{"text":"here we go, stand here, you're my process, right.","width":128},{"text":"okay thank you. and, here's the code that I've already compiled right into something the CPU can execute","width":640},{"text":"okay, we've got inside the process memory you've got a pointer called neurons and an int called capacity right and we run this function called init brain","width":640},{"text":"it's kind of complicated","width":64},{"text":"the [something] stuff","width":128},{"text":"when we pass in the address of neurons and the address of capacity, so there's init brain when it returns will set where the neurons being held and the number of neurons that we have","width":704},{"text":"so, it looks a little like readline, yes?","width":320},{"text":"and, manage to actually return a void pointer so we can actually use that perhaps","width":256},{"text":"so we're running this code, okay, and the next thing to do is think of a number, right?","width":384},{"text":"so, think of a number between 1 and 10","width":128},{"text":"don't tell me! don't tell me...","width":192},{"text":"and then you're gonna print the number to standard out","width":256},{"text":"alright, so, this is my standard out here","width":192},{"text":"you can write a number...okay","width":256},{"text":"accept!","width":128},{"text":"oh you need a pen","width":64},{"text":"accept","width":64},{"text":"here's what we're gonna do, right. you thought of a number, yes? it's in your head. inside the process","width":256},{"text":"before you print it out, I'm going to change the program now","width":256},{"text":"in just here, I'm gonna call fork()","width":448},{"text":"okay? between thinking a number and printing it out","width":128},{"text":"I'm calling fork()","width":128},{"text":"so, what does fork() do? it doesn't not restart the process.","width":256},{"text":"no. here's what fork does: it says take a process that you've got and clone it","width":448},{"text":"yes? make an almost-exact copy of you!","width":256},{"text":"now I've scanned the audience and I've found the person who looks exactly like you","width":384},{"text":"I need my second volunteer. thank you, come on down","width":192},{"text":"[laughter]","width":192},{"text":"alright, so, at this point if you'd like to write down your number.","width":576},{"text":"so we've got two processes. don't show me your number","width":384},{"text":"and of course, thank you. so, we've got two processes and because we've cloned it, inside their memory, it should be exactly the same","width":832},{"text":"so if we now were to say to both of them, okay, continue executing, remember these are two completely different processes","width":384},{"text":"their own memory happen to be following the same assembly instructions here.","width":320},{"text":"the same code","width":64},{"text":"so if we asked them to print out their number, let's find out what they would say!","width":192},{"text":"here, hold them up and show the audience please","width":192},{"text":"look at that!","width":192},{"text":"alright, they're both printing out seven","width":192},{"text":"which is also what you wrote","width":192},{"text":"okay, that's a miracle. [laughter] alright so, well, a 1 in 10 miracle, not a big miracle, but we'll just leave it","width":512},{"text":"so this is how fork() works","width":192},{"text":"remember that this is what happens. it doesn't restart the process. it splits it","width":192},{"text":"so give our volunteers a round of applause, thank you very much [clapping]","width":192},{"text":"we're going to use that now in C and remember anything you write in C could, in principle, be done in any other program as well. in any other script language like python","width":640},{"text":"python, for example, has the fork()","width":64},{"text":"but underneath, python's written in C, and underneath that, it just calls the fork() command","width":512},{"text":"okay so, I've got a little example of that in terms of code. here it is","width":320},{"text":"here we go, can we read that? okay, so here's my little example","width":640},{"text":"this srand() here thing, this says \"okay, system, tell me what time it is?\" and I'll use that to initialize my random number generator","width":640},{"text":"so remember to actually generate random numbers, we cheat. we just do some mathematical bit shifting tricks so it appears to us to be a random number","width":704},{"text":"and it appears to satisfy some basic statistical tests","width":320},{"text":"there's not really a random source here","width":128},{"text":"it's just a mathematical stream of numbers that appears to run all over the place","width":320},{"text":"so later when we call rand() we get back a random number","width":128},{"text":"but look at this for a moment! I've called fork() this time beforehand","width":320},{"text":"so the question is, what do you think will happen here?","width":256},{"text":"will my two processes. so, I have a new job process created. will they both print out the same thing? let's run this and find out.","width":640},{"text":"okay so what do we get? well each process is told to print out its id number","width":576},{"text":"so we get two different id numbers of course","width":192},{"text":"and look, my random number is 6!","width":192},{"text":"they both printed out the same thing! was it an accident? no. they actually both print out the same number","width":640},{"text":"so, why do you think that is?","width":64},{"text":"yes! in the back. thank you, yes, they both have the same random seed and the random state is part of the process","width":832},{"text":"so we've just cloned the whole thing","width":192},{"text":"so actually, you can use one process to guess what random number generators the child process is going to create as well","width":832},{"text":"because they are indentical","width":128},{"text":"it's like your cloned brother or sister or whatever your genetic clone knows exactly what you're thinking","width":640},{"text":"so this actually is potentially a vulnerability if you know, if you completely understand the state of a process, you can predict what it actually might do","width":704},{"text":"alright, so that's a silly example but I'm trying to show the idea that you start a process, you call fork() and suddenly, you have two processes continuing on past that fork() call","width":704}]