[{"text":"so if our count is zero, go into a restful, peaceful state, but you say \"how can I wake my monk up if its meditating?\"","width":1152},{"text":"okay, when should I wake it up? do I need to wake it up in the delete()?","width":192},{"text":"no! because there's no way it could've fallen asleep then. it's going to fall asleep if the count was zero","width":576},{"text":"so, when should I wake it up?","width":192},{"text":"after I've incremented the count","width":320},{"text":"there's no point kicking the monk before that point, yes?","width":192},{"text":"because if I do, the monk will wake up, come out, eventually it'll be able to lock the mutex, it'll check the count again and say \"oh!\"","width":576},{"text":"so I'm going to write the code like this. I'm going to after here, after we're kind of ready, kick the monk","width":832},{"text":"of course, if you're not feeling so violent, you can have one of those little bells. ding!","width":512},{"text":"and signal the monk to wake up","width":192},{"text":"alright so, we kick the monk! they wake up out of their meditation! they attempt to lock the mutex, but they can't because guess what our other thread has currently got it locked, so they're stuck in the lock call but in a moment's time, we will unlock the mutex.","width":1024},{"text":"when we do that, the monk on this side is able to lock the mutex and continue. the go around, back to their while loop. hey look at that! count is no longer zero!","width":512},{"text":"great! I can continue! quick, get the array! get the last entry of the array! fantastic and return it","width":448},{"text":"alright, is my code complete?","width":128},{"text":"no, I've forgotten to do one last thing which is at the end, unlock()","width":320},{"text":"the mutex","width":128},{"text":"notice I put this after reading the array","width":512},{"text":"why? because I want my life to be simple. if I'm going to look at the array, if I'm going to look at the count, I want to make sure that I'm the only thread that can do so","width":768},{"text":"how do I do that? by owning the lock","width":256},{"text":"any other thread that attempts to say \"push more data in\" or \"delete stuff\" has to wait because they have to get the lock first. yes?","width":576},{"text":"you could do the kick after the unlock() almost, but there's actually a subtle race condition that I don't want to talk about today.","width":1024},{"text":"so for now, just put it inside","width":128},{"text":"okay?","width":64},{"text":"alright, now, some comments on here. so this is how I want you to think of a condition variable. look, there's always three steps","width":704},{"text":"we better unlock stuff, because if we don't then I'm going to be meditating forever","width":192},{"text":"the rest of my code can't continue. it can't do its stuff to the array structure, it will never kick the monk because it will never get the lock","width":704},{"text":"so we must unlock it","width":64},{"text":"then we meditate","width":64},{"text":"and then, because we want to check our variables, we better relock the mutex","width":384},{"text":"alright?","width":64},{"text":"now I have some wonderful news for you","width":256},{"text":"all three of these things that we do here, happen inside cond_wait","width":1088},{"text":"actually, it's just one call","width":128},{"text":"so the most important thing in this lecture is to remember that cond_wait actually does three things. before meditating, it's going to unlock the mutex that you give it","width":960},{"text":"why? so that other things can actually access the data structure and do things","width":448},{"text":"and the POSIX call is not called \"kick the monk\" or \"ring a little symbol\"","width":576},{"text":"it's just signal or cond_signal, to be precise","width":576},{"text":"and you pass in a pointer to the condition variable","width":128},{"text":"so here's what happens. when you call cond_signal, you're saying to the operating system \"please, at some point in the future, find a monk that's meditating and walk up and do the little symbol. ding!\"","width":1152},{"text":"wake up the monk","width":64},{"text":"if you call cond_signal, the operating system's only going to do that to one monk if it can find it. if there's no monk's meditating, it won't bother","width":960},{"text":"it is also possible to bash the gong and wake up all monks which are meditating","width":576},{"text":"but we don't need to. well, we don't need that today. we know that from the problem specification, there's only going to be one thread inside getLast()","width":768},{"text":"later on, we'll see examples that do taht","width":128}]