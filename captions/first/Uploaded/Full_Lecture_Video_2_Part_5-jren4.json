[{"text":"okay so if this works, then what we should see is the child will sleep for two seconds and our parent will then be paused also for two seconds","width":768},{"text":"because it had to wait for the child","width":320},{"text":"okay, so one, two, bye and then our parent can continue right?","width":448},{"text":"so we've made the parent wait for the child","width":256},{"text":"now there's a little bit more to using waitpid","width":320},{"text":"that actually there are some macros down here ","width":384},{"text":"here they are, that actually to put useful information out of this, I should use these macros","width":576},{"text":"so for example, we can find out the exit value of the child but only the lowest seven or eight bits","width":512},{"text":"sorry, eight bits, so if your child return a value 42, great we can see that","width":576},{"text":"if it returns a value 304, I'm sorry you won't see that as a value, you only get the lowest eight bits","width":512},{"text":"we can also check to see if it was terminated by a signal","width":192},{"text":"right, how can you generate a signal?","width":192},{"text":"pull our a whistle from your pocket, yeah but you could also press control c on your keyboard to interrupt a process","width":640},{"text":"and when you interrupt a process, you are sending that process a signal","width":256},{"text":"there's other signals that can happen as well","width":192},{"text":"so if your process tries to write into read only memory, your process dies","width":448},{"text":"how does it die? it gets sent a signal that in cannot ignore","width":320},{"text":"so as you can see, we can actually find out some things about our child","width":320},{"text":"and you'll be using that in this week's little assignment before section","width":256},{"text":"alright so let's make it print something out, right so in this case what we'll do is we will say","width":1024},{"text":"if it exited, so let's check the value of status","width":192},{"text":"then we'll print out the exit value","width":320},{"text":"WEXITSTATUS we'll get those lowest bits and we'll make the child return 42","width":896},{"text":"did it run? one error, what's my error?","width":1472},{"text":"oh, okay so I have not included something..","width":640},{"text":"one two yay, okay great","width":832},{"text":"so this time you can see our waitpid got some arbitrary value","width":256},{"text":"if you actually want to pull out the exit value then you should use those macros","width":384},{"text":"alright so if exited, then we know that we can actually pull out an exit status as well","width":384},{"text":"right, so how do I wait for my child to finish? waitpid!","width":384},{"text":"and on here how do I find the exit value? you should use the if exited then we can use the WEXITSTATUS macro","width":1152},{"text":"and all these macros do is just pull out the relevant bits and do some bit shifting from that original integer","width":512},{"text":"okay, right so are you ready? page 2","width":512},{"text":"how do I start a background process? well a background process is something that we want to run in the background","width":576},{"text":"right we don't care about interacting with it","width":320},{"text":"maybe I want to actually say compile a program in the background","width":256},{"text":"let's do it from the command line here so","width":320},{"text":"for example if I want to look at the contents of /usr/include/stdlib.h","width":512},{"text":"right, I could say that actually I just want to send that to a file","width":448},{"text":"but I don't want to wait for this to finish well I can just put an ampersand at the very end","width":640},{"text":"that means run it in the background","width":128},{"text":"and I can continue doing this whilst that copying happens","width":256},{"text":"we could do the same thing in C by not bothering to wait","width":704},{"text":"so I've got my fork here and I could do other stuff in the background ","width":512},{"text":"sorry I could do other stuff inside the parent and not wait for the child to finish","width":320},{"text":"so this is why fork is very powerful right? now I can fork and start a process to compile something. I could fork and start another child process to connect to the internet","width":704},{"text":"and I don't have to wait for these things to complete","width":64},{"text":"I can do things in parallel yay","width":128},{"text":"right, so now if you've got 4 CPUs you can use all four at the same time to compile different parts of your program for example","width":576},{"text":"there is a problem though","width":128},{"text":"good parents don't let their children become zombies","width":512},{"text":"suppose you created a child process and off it goes and it starts compiling stuff","width":640},{"text":"and then you the parent process finish, you quit","width":256},{"text":"what happens to the child process?","width":128},{"text":"it's still alive! ha ha ha compiling alive, it's still going right!","width":448},{"text":"but it has no parent","width":128},{"text":"uh oh, right, so, uhm, so here's what happens, if nobody is around to wait for the child when it finally finishes","width":1216},{"text":"if you don't call wait on a finished process, you get a zombie","width":320},{"text":"so a zombie is a dead process","width":64},{"text":"that no one cares about","width":128},{"text":"so waitpid is like going to the gravestone and saying yeah I remember you let's do a postmortem ","width":576},{"text":"if you don't do that to a process, the system says well actually somebody might want to know about that process","width":320},{"text":"they might want to know its exit value for example","width":64},{"text":"so it's going to take up some system resources, not a lot, but a little bit to remember what happened to that child","width":448},{"text":"so that's what a zombie is, it's a dead process that nobody cares about","width":384}]