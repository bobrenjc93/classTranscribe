[{"text":"right so there's one other thing to be aware of with errorno is","width":512},{"text":"remember signal handlers?","width":128},{"text":"where we could write some code to cope with a signal like hey hey we've got a closed pipe condition","width":448},{"text":"so in your signal handler","width":576},{"text":"if we're going to be calling things which might set error number","width":704},{"text":"say we want to remove a file","width":256},{"text":"or we want to make a system call that we're allowed to call","width":192},{"text":"from a signal handler","width":128},{"text":"then it would be really really impolite to change error number for the other part of the code","width":704},{"text":"remember how does a signal handler work? we steal the current thread of execution","width":320},{"text":"we don't make a new thread. we just actually say to the CPU hey stop executing the current piece of code","width":448},{"text":"I want you to run this other little piece of code over here please","width":192},{"text":"and when you finish yeah you go back to what you were doing","width":128},{"text":"I'm not going to give you a new stack, I'm not going to... right we literally just steal it to run it","width":320},{"text":"so that means our signal handler might do bad things to error number","width":256},{"text":"so a good handler, a polite signal handler will remember the old value","width":384},{"text":"and just before returning","width":320},{"text":"we set it","width":256},{"text":"so it might go, if you want to write robust code...","width":768},{"text":"be careful with your signal handlers","width":320},{"text":"and two, if you're going to check the value of errno, it's probably a good idea to reset it to zero beforehand","width":640},{"text":"so you know that if you're discovering an error, that it actually came from the code that you were looking at","width":384},{"text":"I've got a cute example here","width":448},{"text":"the other thing to be careful about is in your error handlings","width":1472},{"text":"be careful that you're not looking at errorno values from your actual error handling","width":256},{"text":"so for example here it is where we're trying to discover why does semwait fail","width":320},{"text":"and so we printed out the problem with this code is that the very first fprintf itself may set errno","width":512},{"text":"and that could then lead us down a rabbit hole right?","width":384},{"text":"why am I getting a bad file descriptor? well it turns out standard error was closed or something like that","width":384},{"text":"we had out of memory and it was actually coming out of the fprintf call","width":256},{"text":"so it's better to if you're going to make more system calls, more function calls, grab it and stick it inside your own variable so you know that the value you're looking at actually arose from the original call","width":832},{"text":"okay right so do you remember how do we print out a particular string message","width":1216},{"text":"yeah, easy, just call strerror and that gives you back a pointer to a string","width":448},{"text":"so typically you'd pass in errno here","width":448},{"text":"and you'd get the string","width":128},{"text":"that string might mean something to you and another system programmer but not much to anybody else","width":512},{"text":"I've got some bad news for you though","width":192},{"text":"it's not thread safe","width":576},{"text":"brought to you by homer simpson, yes that's correct your code in trying to handle errors might run into difficulties because in calling strerror in calling two different threads at the same time can contend with each other","width":1152},{"text":"and overwrite each other's value","width":128},{"text":"so we've got two ways to fix this","width":320},{"text":"one is that you call mutex lock","width":320},{"text":"and unlock between getting back the pointer and using it","width":512},{"text":"so you would get the pointer perhaps copy it into your own memory that is being used solely by your own thread","width":1536},{"text":"and if you do this everywhere","width":128},{"text":"in your code that's going to call strerror then you can be confident that only one thread at a time will be calling strerror","width":576},{"text":"you've made it into a critical section","width":128},{"text":"just remember to do that everywhere inside your code","width":128},{"text":"including all of the library calls that wait you control? you don't control. you don't have the source code of all the library functions that might call strerror","width":512},{"text":"so this is actually pretty hard to do well and consistently","width":320},{"text":"but I have seen people do it","width":192},{"text":"the other way is that actually there is an alternative called strerror with an underscore r strerror_r which is thread saf","width":576},{"text":"and the reason why it's thread safe is because you pass in a pointer to some memory that you would like to use","width":448},{"text":"[silence]","width":960},{"text":"so the next thing we're going to talk about is this EINTR","width":384},{"text":"hey this is the hey I've gotten interrupted, do you want to retry?","width":320},{"text":"so there's quite a lot to say about this interrupt idea and we're not going to talk about all of it inside 241","width":768},{"text":"suppose you make a system call that's going to go on for a long time","width":384},{"text":"for example, you want to write some bytes down to a pipe that's going to connect to the internet","width":384},{"text":"you want to call semwait which is going to wait until someone calls sempost","width":320},{"text":"these calls can sometimes be interrupted and immediately returned","width":640},{"text":"so basically, they fail","width":256},{"text":"they fail to actually do what you ask them to do","width":256},{"text":"now in the simple kind of lecture code and in the MPs we just say hey don't bother about this, it's fine","width":448},{"text":"but in robust code, we actually have to check for this","width":256},{"text":"when you are writing robust code, you have to say ok what was the return value of this system call, did you really do what I asked you","width":320},{"text":"it's a bit like talking to a toddler, did you really flush?","width":192},{"text":"[gibberish] I'm pretty sure","width":384},{"text":"so that's what we have to do, we actually have to say oh look, it returned negative one to say it didn't work","width":320},{"text":"and now we have to say but why","width":128},{"text":"was it something bad like I gave it a bad file descriptor?","width":384},{"text":"or was is it just being annoying","width":128},{"text":"and if it's being annoying I say hey I've been interrupted, I'm sorry do you want to play again? just call it again","width":384}]