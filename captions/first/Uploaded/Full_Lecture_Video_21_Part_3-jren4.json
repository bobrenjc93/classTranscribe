[{"text":"now we're only going to see this for slow running potentially blocking calls","width":576},{"text":"so things like semwait reading and writing to the network","width":256},{"text":"but it's important to handle this stuff well, otherwise","width":384},{"text":"your code will [something] to what we tested but in real situations it will then fail","width":384},{"text":"and imagine playing kind of russian roulette with your code","width":256},{"text":"I tell you what, just for fun we'll make sure one of the calls you make today is not going to work","width":256},{"text":"do you still feel lucky punk?","width":128},{"text":"so that's the purpose of this EINTR, it's to say oh look these thing were interrupted, we better call them again","width":576},{"text":"so let's see what the kind of code would look like in this case","width":320},{"text":"we'll make a call like semwait","width":256},{"text":"and we need to check to see if it failed","width":640},{"text":"okay how do I do that?","width":128},{"text":"you could say was its return value equal to negative one","width":704},{"text":"right so if that's true, we know there was an error","width":384},{"text":"so let's find out if the error was hey I've got interrupted","width":704},{"text":"if that's true, hey we'll go again","width":768},{"text":"right so here's our plan","width":128},{"text":"while this is true...","width":384},{"text":"go again!","width":256},{"text":"alright so perhaps you and your neighbor can tell me what's wrong with that code","width":256},{"text":"[silence]","width":1216},{"text":"so I'll give you a clue, what's an equals sign between friends?","width":448},{"text":"the worse thing about this error is that you get to see this kind of pattern right?","width":832},{"text":"you see this kind of code and you immediately say oh that's just calling sem_wait inside a while loop","width":256},{"text":"it's trying to be robust code, and you don't bother of course to actually read it","width":320},{"text":"so what are we doing here? well errno is settable, it behaves just like an integer and so we're just setting it","width":448},{"text":"so what's the result of this expression?","width":256},{"text":"a non-zero value so therefore it's true","width":192},{"text":"so what our code does then is say rather than check to see if it's equal to EINTR we just set the value to EINTR","width":768},{"text":"and so we go around again","width":128},{"text":"right so what effect would this have on the code?","width":256},{"text":"would you spot this error?","width":192},{"text":"when would it do bad things for you?","width":192},{"text":"thank you yes, if sem_wait failed for other reasons","width":640},{"text":"so for example, suppose you forgot to initialize the semaphore or you're running this on a system that doesn't support semaphores","width":576},{"text":"sem_wait might return a different message","width":256},{"text":"so what do you do? you call it again!","width":256},{"text":"it behaves exactly like a semaphore, it doesn't proceed, it just keeps on going around this loop forever","width":448},{"text":"and then you say ahhhhh why is this not working? right so be careful about that, watch out for your equal vs that","width":576},{"text":"so that is kind of a typical pattern","width":256},{"text":"sometimes you see a little bit more to this as well","width":192},{"text":"sometimes you see that actually we want to know say the number of bytes read","width":256},{"text":"so we might write something like this","width":128},{"text":"while negative one equals okay let's store the value of our return call so let's say we want to know the result of calling read","width":640},{"text":"blah blah blah blah blah alright","width":320},{"text":"and errno equals EINTR","width":512},{"text":"so now I'm assigning the value of read to my result so I can use that later inside the code","width":1024},{"text":"perhaps I want to know for example if this is zero","width":320},{"text":"or the number of bytes that read managed to perform","width":192},{"text":"so if you were to drill down into the C library you would discover this kind of implementation","width":448},{"text":"that every time we make a system call, we potentially have to check to see if it was interrupted or not","width":448},{"text":"for CS241 exams, unless I specifically ask you to write code that does this checking, I'm not going to expect anybody to have to write this full length out","width":640},{"text":"but put this in the back of your mind for the day that you're actually writing real system code outside a class","width":512},{"text":"questions? yes?","width":256},{"text":"aha, right","width":512},{"text":"so this normally happens when a signal comes in and your process has to process the signal","width":448},{"text":"but that could be anything, that could be a child finishing for example","width":448},{"text":"you might have noticed in some of the earlier programs we wrote that if you had a sleep and a SIGCHILD happened, the sleep itself could be interrupted","width":768},{"text":"so why is this? the short answer is that it makes operating system programming easier","width":640},{"text":"remember how I said that when we have to process a signal interrupt, we steal the CPU and we actually run some code for a moment","width":640},{"text":"and then we give the CPU back as if nothing happened","width":192},{"text":"well as you can see, it's not quite true","width":192},{"text":"actually as part of giving the CPU back, we just give up","width":256},{"text":"we say hey you know that system call I was trying to do, ha, I just gave up","width":320},{"text":"it's a nice day, I don't have a problem with that. do you?","width":320},{"text":"it's kind of like the californian hello, hello yes let's do lunch and not really","width":448},{"text":"so in making the design of the operating system easier, we've actually put the onus on systems programmers on our user code","width":768},{"text":"to actually deal with handling these interrupts, with failing system calls","width":384},{"text":"so fantastic, you actually now know a lot about how to actually write much more robust code by checking errno ","width":960},{"text":"by knowing that you have to potentially check this EINTR thing","width":256},{"text":"there's a bit more to say I'll let you read it on the wiki book as you usual","width":256},{"text":"but I'm not going to be writing this code all the time in future examples","width":384},{"text":"are you ready? page 2!","width":384}]