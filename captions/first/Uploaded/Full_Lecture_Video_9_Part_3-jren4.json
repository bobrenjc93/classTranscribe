[{"text":"okay so that's a little of loose definition","width":320},{"text":"other definitions talk about the number of other waiting processes or number of waiting threads","width":448},{"text":"that I don't want a little four year old running between my legs running into the bathroom and getting there before me","width":384},{"text":"that's going to be really annoying right?","width":128},{"text":"they should stand in line as well. There should be some kind of principle of fairness behind htis","width":320},{"text":"that it shouldn't be the case that I'm just stuck there waiting for an infinite number of other processes to finish","width":448},{"text":"and they always get in front of me, they manage to somehow jump the queue, that's just no fair","width":192},{"text":"so we have this idea of bounded wait. yes?","width":64},{"text":"why does candidate three not have progress? because suppose you want to update it faster than the other thread wants to enter this critical section","width":1024},{"text":"so we're stuck there waiting for the turn, waiting for the golden chalice to be given to you","width":448},{"text":"maybe the other thread may eventually call their code","width":448},{"text":"and update the critical section, do something inside the critical section","width":320},{"text":"but until they do so, you're just stuck there waiting","width":192},{"text":"so you could imagine I've got a thread that's writing into a an associative map ","width":640},{"text":"you've got a thread that's reading from it","width":192},{"text":"why should your reads have to wait for a write to come in?","width":256},{"text":"if no one's modifying the data structure, you should be able to immediately get in there and use it","width":448},{"text":"so this is the fact that you might want to say come in here twice as fast as this other thread is going to run","width":832},{"text":"yes, it's not efficient, but worse you don't know when that other thread is going to make that call","width":1024},{"text":"so imagine you had one thread that it wants to walk through a linkedlist structure and another thread that might be changing that linkedlist structure","width":768},{"text":"you don't want to modify it whilst one is walking through the links okay?","width":448},{"text":"you want to get in there eventually, you don't mind waiting but it shouldn't be an infinite amount of time","width":896},{"text":"right, it's not fair if another thread continually just jumps in front of you and you never get a chance to use the resource for example","width":576},{"text":"right, so I've littered this lecture with trying to make concrete examples of why we care about the critical section in terms of accessing data structures","width":704},{"text":"but these are the three formal thing that we care about for solving the critical section problem. So if you care about reading the literature about this..","width":704},{"text":"these are the properties in which we judge our success or not of our proposed algorithms","width":384},{"text":"so let's take a look at another one","width":320},{"text":"here we go","width":64},{"text":"so mind you that we're not going to be executing this code all the time","width":640},{"text":"but the threads are going to execute this code more than once","width":192},{"text":"so we do other stuff and then repeat sometime in the future","width":320},{"text":"so now it's your turn","width":256},{"text":"take a look at this code and decide how could it possibly go wrong? This is tricky","width":576},{"text":"[silence]","width":14400}]