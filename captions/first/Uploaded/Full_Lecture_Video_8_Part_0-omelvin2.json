[{"text":"[background noise]","width":4352},{"text":"good morning [gibberish] and lads and welcome to the bountiful C","width":256},{"text":"the wonderful c, the giver of live, the platform that allows us to compile our codes on new hardware","width":576},{"text":"you wanna take a program, you wanna put it on your new hardware, don't worry you just need to make a C compiler","width":320},{"text":"the wonderful C","width":128},{"text":"perhaps you've written it in python, doesn't matter, python itself is written in C","width":320},{"text":"perhaps you've written Minecraft","width":320},{"text":"ahhh,well don't worry about that, that's written in Java, well Java of course is written in, well c++, but nevermind, it's almost C","width":448},{"text":"perhaps you've written a ruby program, well guess what? ruby the interpretter is written in C","width":320},{"text":"yes, so C is underneath it all","width":256},{"text":"and that is partly why C is such a powerful and potent language","width":256},{"text":"it is also a fantastic langauge for working directly with hardware because we can create memory structure that map directly to bytes and bits","width":704},{"text":"of our hardware","width":64},{"text":"so C gives you tremendous power because it's so close to assembler","width":320},{"text":"but a lot easier to write than assembly code","width":320},{"text":"alright, so, we","width":128},{"text":"'ve been talking about making our c programs run with say two processes or doing two things at the same time","width":256},{"text":"well this is where things start to get interesting","width":256},{"text":"for example, let's count our gold ","width":256},{"text":"I've got a little function here called countgold() and you can see this is going to effect ","width":320},{"text":"so let me run this, i'll make a separate thread to do it","width":384},{"text":"alright, how do I do that? ","width":192},{"text":"well I need to pass in some sort of identifier and then I've got some options I don't care about","width":320},{"text":"what next?","width":192},{"text":"a function countgold and finally I want to give countgold a paramter of nothing, so I can just pass in null here","width":512},{"text":"and of course we want to wait for this to finish","width":256},{"text":"this time I'll call pthread_join() because I don't want to just finish at this point, I want myself to print out the value of the sum","width":512},{"text":"great, so, let's wait on this","width":384},{"text":"and I can, I'll have to put my little pthread_t type in here tid1","width":512},{"text":"and I can actually have an exit value as well","width":256},{"text":"so what did it say?","width":128},{"text":"that can just be a, whoops, void pointer and I'd better give it the address of that thing","width":448},{"text":"so let's compile this and see what we get","width":384},{"text":"arlight, argh, sum is zero","width":320},{"text":"now why was that?","width":256},{"text":"that's a good question, why was that? ","width":320},{"text":"we should've waited on this so let's first of all check that I'm using this correctly","width":512},{"text":"so we'll check the value of tid and see what it is","width":384},{"text":"and we should have ","width":512},{"text":"ok we've got a valid value","width":192},{"text":"so why did pthread_join() not ","width":256},{"text":"join terminate","width":320},{"text":"OK, alright, so at this point","width":512},{"text":"OH, yes, hahaha","width":256},{"text":"what did I pass to pthread_join()? the address of tid1","width":384},{"text":"not the value of tid1","width":256},{"text":"so, we needed the address up here because we wanted pthread_create to push the id into that variable","width":512},{"text":"but pthread_join() we just said here's your address and pthread_join() says thank you very much for that address, I'll take that as your thread identifier","width":576},{"text":"no, we wanted the value","width":128},{"text":"ok, so normally because that would take us about four or five days to discover","width":320},{"text":"good, so this time now it's waiting","width":320},{"text":"and finally it prints out the sum is a million","width":192},{"text":"fantastic","width":64},{"text":"now let's not just have one part that's going to count the gold, we want two","width":320},{"text":"so we'll have two threads going ","width":384},{"text":"they're both going to run the same function, but you and I know they both have their own threads","width":192},{"text":"so they both have their own stacks","width":192},{"text":"so each thread has it's own value of i","width":256},{"text":"OK, so, we'll, so if we didn't do any waiting","width":640},{"text":"ah, thank you","width":128},{"text":"we didn't do any waiting, then our value is just some other value","width":448},{"text":"it happens to be 56,000","width":192},{"text":"in other words we had two of these other threads runnign at the same time","width":128},{"text":"and our main program just decided to carry on and by the time we actually read the values ","width":448},{"text":"those other threads had already incremented it","width":256},{"text":"so we'll change this now to actually wait and any time that we copy paste code be very very careful to make sure you change everything you need to change","width":704},{"text":"I don't need two exit values, I don't care that obth of them are going to bite from the same thing","width":384},{"text":"so, now my program says OK,wait until the first thread is joined and then our main thread says now wait for the second thread to join","width":448},{"text":"and there we go","width":192},{"text":"my sum is about one and a half milliion","width":256},{"text":"whoops, I did not get two million even though both threads were just adding one to the sum","width":384},{"text":"perhaps you can see why","width":192},{"text":"we'll surely then we can fix this by saying rather the sum plus equal one, sum plus plus","width":704}]