[{"text":"pthread_exit that just means no more for this thread","width":512},{"text":"that particular chef has walked out of the kitchen","width":384},{"text":"and will never come back","width":128},{"text":"so before you call pthread_exit make sure your thread has cleaned up any resources that it might have acquired","width":576},{"text":"questions?","width":128},{"text":"yes","width":64},{"text":"okay so when thread finishes it can finish in two different ways","width":832},{"text":"it can call pthread_exit","width":192},{"text":"or it can return","width":192},{"text":"a value theyre actually equivalent","width":192},{"text":"so this is a way to send some information back to the rest of the process","width":704},{"text":"and we had an example down here of calling pthread_join and saying okay what did that thread say at the end","width":320},{"text":"and you dont have to use this mechanism","width":192},{"text":"its actually kind of common to make a struct and pass that to pthread_create","width":576},{"text":"but thats the purpose of pthread_exit and this return is that you can get the exit value","width":384},{"text":"okay?","width":128},{"text":"so let's see how","width":256},{"text":"let's say you want to more than just avoid pointer","width":192},{"text":"what we could do here is define some sort of struct","width":512},{"text":"i won't bother with the struct definiton","width":192},{"text":"ill say hey lets have some memory","width":64},{"text":"ill call it my todo struct","width":704},{"text":"calloc sizeof() todo","width":256},{"text":"and i just need one of them and i would set","width":320},{"text":"woop","width":64},{"text":"set things up on this","width":256},{"text":"hey like a start blah blah blah","width":320},{"text":"please stop","width":64},{"text":"0","width":64},{"text":"exit value in here etc","width":256},{"text":"so i could use this struct because both my main program and thread then knows about this struct becuase i can","width":384},{"text":"pass it in","width":64},{"text":"so that allows me to assemble a whole body of information i want to pass to the other thread","width":576},{"text":"okay so lets keep goign through our little questions here","width":384},{"text":"so when would you call pthread_exit in your main method","width":256},{"text":"well this is typically done in sort of simple or small programs where we say most of the work is going to happen by most of my other threads, and then my program can finish after all of those other threads have finished","width":768},{"text":"so we would do this if theres no cleanup in the main thread","width":448},{"text":"and i would be happy just to wait until all threads are done","width":896},{"text":"so this is the equivalent of saying last person out of the kitchen turn out the lights and the process will finish","width":640},{"text":"okay so i gave you two ways that a thread can be terminated just now","width":448},{"text":"i said it can return from its function so we could return a value and i gave you like that 12345 thing","width":576},{"text":"so if you return from the function that is orgiinally started with the thread","width":448},{"text":"i also showed you that you could call pthread_exit","width":256},{"text":"but there's 4 ways","width":256},{"text":"what are the 2 other ways might a thread exit","width":192},{"text":"yes!","width":704},{"text":"yes!","width":128},{"text":"if someone calls pthread_cancel on that chef","width":192},{"text":"they're done","width":64},{"text":"so if a thread is in the cancel state it may exit","width":320},{"text":"and how else might a pthread","width":320},{"text":"yes the whole process dies","width":128},{"text":"so if another thread for example segfaults, that it's for all of your processes","width":384},{"text":"segfault is like blowing up the entire chemistry lab or the entire kitchen","width":384},{"text":"the entire thing is gone. the whole process is gone","width":64},{"text":"we need a valid process in order for our threads to finish","width":256},{"text":"well so talk about pthread_join its actually got 2 purposes","width":448},{"text":"we can wait for the thread to finish","width":192},{"text":"and get its exit value","width":384},{"text":"the other thing it does is free up resources","width":640},{"text":"okay what resources might that be","width":640},{"text":"every thread has some space inside a process memory for its stack","width":448},{"text":"and any thread has an exit status, an exit value","width":384},{"text":"the lab is going to keep those around because who knows, maybe in the future someone is going to call pthread join on a thread","width":640},{"text":"so we can only release those resources after pthread_join has been called","width":320},{"text":"if you're writing a short simple program and you don't care about these things then fine","width":256},{"text":"but when you want to write longer running programs that don't have resource leaks you should call pthread_join on every thread","width":384},{"text":"so pthread_cancel youre giving a chef a little thread marching orders to say hey leave","width":1088},{"text":"okay im cancelling you i dont want anymore of your work","width":320},{"text":"that stuff i told you to do? don't do it anymore","width":256},{"text":"pthread_exit says \"I'm done\"","width":384},{"text":"and btw here's my result","width":128},{"text":"so its an act by the thread to say i don't want to do anymore work","width":320},{"text":"the point i was making was that you know that when you return from mian the process is done","width":1472},{"text":"you know that when you call exit, the process is done","width":384},{"text":"pthread_exit has a supple part of the specification that says the main thread is finished","width":832},{"text":"well the process continues until all threads are finsihed","width":576},{"text":"correct yes","width":704},{"text":"so if i called pthread_exit after printing hi","width":576},{"text":"now the process is done","width":64},{"text":"so its the last chef out turns out the light to the whole process","width":320}]