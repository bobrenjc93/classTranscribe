[{"text":"it was good enough at the beginning for the first four minutes but here's the problem with select","width":384},{"text":"you have to do an order N scan after it returns to find out which file descriptor you should be talking to","width":512},{"text":"you should be calling","width":128},{"text":"well that means an order N like up to say 1000 system calls","width":320},{"text":"and that in itself takes time, it's going to take milliseconds of time to say or should i be talking to this one, should i check...","width":512},{"text":"so select was a first pass, the great thing about select is that you'll find it everywhere","width":512},{"text":"if you want to write code on say simple embedded devices","width":320},{"text":"on windows, on mac, hey! just use select and don't worry about performance, it's good enough","width":320},{"text":"and it's easy to write code which times out so you can say okay I'd like to wait for say a second to see if the client sends me anything","width":576},{"text":"so select is a reasonable choice at that point","width":256},{"text":"so what happened next...","width":256},{"text":"is a system call called poll is defined","width":448},{"text":"that solved some problems, but today what we played with and what you've seen in lab is epoll","width":384},{"text":"the only downside of epoll or the main downside of epoll is that it's on linux","width":512},{"text":"but not mac","width":256},{"text":"not BSD","width":128},{"text":"so now you're stuck right? what should I use? select? poll? eopll? etc","width":384},{"text":"so epoll is performant, it's great for if you have a thousand long lived connections","width":448},{"text":"so it's ideal if you've got thousands of long lived connections","width":384},{"text":"so this is your yik yak server","width":192},{"text":"now a single machine can support thousands if not more connections, epoll would be a very good choice","width":704},{"text":"and as you saw, the way we used epoll is we set up a set and we just add file descriptors to that set","width":384},{"text":"and then we say okay now I'm prepared to wait, I'm prepared to block until I'm able to read from at least one of these","width":384},{"text":"and then when it returns it tells me which file descriptor I should use","width":256},{"text":"so for CS241, yeah we can play with epoll in the MPs","width":704},{"text":"and should you ever find yourself in a startup or fortune 500 company","width":384},{"text":"that wants to write a server, let's see that's probably every single fortune 500 company these days","width":448},{"text":"or just about most startups have some sort of client server architecture","width":256},{"text":"you might come down to which one of these should I use?","width":320},{"text":"just remember that there's actually three different versions","width":320},{"text":"here's some other thoughts on your server though which is.. sorry of you startup... is that why don't you do what chromium does, the browser that you found inside your android phone","width":832},{"text":"or chrome if you've downloaded as an app","width":192},{"text":"it uses the library called libevent","width":192},{"text":"and libevent basically wraps these three things","width":256},{"text":"so it provides an abstraction on top of the system calls","width":256},{"text":"now we're not going to use libevent in any exams, this is just an FYI","width":448},{"text":"it's that next time you want to do your startup, check out libevent because then you can write code that runs anywhere","width":448},{"text":"and it just provides implementation underneath that talks to select, poll or epoll to get the best possible performance on each platform","width":576},{"text":"so I've been throwing a lot of information at you very quickly today, any questions at this point?","width":896},{"text":"okay I've got a bit of news for you","width":192},{"text":"I understand its passover this weekend so I'm going to ask the TAs to push the deadline for the MP back to Monday night","width":640},{"text":"11:59 pm","width":192},{"text":"okay so one minute before midnight on Monday","width":256},{"text":"is there not an MP that's due.. somebody sent me an email saying hey I need an extension so I'm going to ask the TAs to make sure there's no deadlines on this weekend","width":768},{"text":"okay if there are two deadlines this weekend","width":384},{"text":"ok well I push the one on Sunday onto Monday","width":256},{"text":"if you do not observe passover, you may still take advantage of this","width":320},{"text":"if you feel it's unfair to have two deadlines the same evening","width":192},{"text":"feel free to submit the first one just on Sunday night","width":192},{"text":"and then pretend that the extension hasn't been given","width":448},{"text":"I'm also asking the TAs to try to provide more verbose information about the MP merge","width":768},{"text":"by the way, the MP merge tester runs on a VM just like yours","width":384},{"text":"so it's probably a good idea to check your VM code on you personal virtual machine","width":448},{"text":"okay right so any quick questions?","width":320},{"text":"okay right let's jump into some other kind of little bits of know how then","width":320},{"text":"so we've been making servers that listen on a particular port","width":448},{"text":"if you're just doing development, you may not care which port your server listens on","width":576},{"text":"you'll just say hey give me any port that's currently unused","width":256},{"text":"here's how we can do this","width":64},{"text":"first of all when you call getaddressinfo if we're setting up a server, obviously we want to talk about localhost, that's NULL","width":384},{"text":"and just say I want port zero which is another way to say hey I'll be happy with any port","width":384},{"text":"well now we've got a problem though, we need to find out which port number we're actually listening on","width":576},{"text":"here's how we do this, there's something called getsockname","width":256},{"text":"sock of course stands for socket","width":192},{"text":"as opposed to things you wear on your feat","width":192},{"text":"this code kind of looks a little bit like the code you might have been writing before getaddressinfo existed","width":576},{"text":"we have these different structs for example...","width":192},{"text":"there's this sockaddr in which you can think of as a version or as a subclass of this other struct","width":832},{"text":"but because C doesn't support [something] we can't say hey this extends this other struct","width":576},{"text":"we have to forcibly typecast it","width":192},{"text":"and so there's all sorts of interesting gotchas, any days that you forcibly type stuff you might forget for example to put in the ampersand here","width":576},{"text":"so there's all sorts of gotchas","width":192},{"text":"I'm not going to ask this on an exam, I'm just pointing out, if you want to develop code that listens on any port, this is the way to do it","width":640},{"text":"you call getsockname on your socket","width":256},{"text":"and now we from that struct we can figure out which port","width":384},{"text":"there's just one little gotcha here","width":128},{"text":"if we try to use this value directly.. hahaha","width":256},{"text":"oooooooh we're going to be in a world of pain","width":320},{"text":"why?","width":128}]