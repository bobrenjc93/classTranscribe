[{"text":"yes, if you had two threads using two different pthread locks that doesn't help you at all","width":384},{"text":"you're going to protect some memory use the same lock to protect that memory everywhere you access that memory","width":832},{"text":"right, are you ready for slide two?","width":192},{"text":"k, slide two","width":832},{"text":"yes, in todays lecture I'm not just giving you one synchronization primitive, but you get two synchronization primitives for just 19.95","width":704},{"text":"yes, so we're going to talk about counting semaphores","width":256},{"text":"here's an idea","width":192},{"text":"mutexs are a little constrictive, right?","width":256},{"text":"first of all I can only have a lock and unlock from the same thread","width":320},{"text":"and they don't have any internal state other than whether it just locked or not","width":448},{"text":"so sometimes we want something which is a bit more general and this is where a counting semaphore is very useful because it has the idea of a count","width":832},{"text":"and everything is happy providing that count is at least one","width":576},{"text":"but where we get down to zero or lower it stops","width":512},{"text":"it doesn't let you reduce the count ","width":256},{"text":"so it behaves like a resource counter","width":192},{"text":"the integer that we're goign to put inside this counting semaphore","width":256},{"text":"and if you try to reduce the count you can't, you have to wait","width":832},{"text":"so I have a little example ","width":1024},{"text":"so what's the code look like in terms of the counting semaphores?","width":192},{"text":"we'll what you'll see is this sempost and semwait","width":448},{"text":"and fundamentally what they do is they increment or decrement the count inside the semaphore","width":512},{"text":"you never see the count directly","width":320},{"text":"and in fact it's quite common to increment and decrement - sorry it's quite common to set the initial value as say zero or one","width":1024},{"text":"so imagine a pizza box with slices of pizza in it","width":320},{"text":"and anyone, any thread can come up and say 'yes, I'd like to eat a slice'","width":448},{"text":"unlike the counting gold code I gave you, I guarantee you that each person will get a slice","width":832},{"text":"and we'll keep track of the number of slices in each pizza box","width":320},{"text":"so you can come up and eat a slice of pizza","width":320},{"text":"if you try to eat the slice of pizza and there's no pizza left, you wait","width":448},{"text":"here's the nice thing about semaphroes that you don't twiddle your thumbs","width":320},{"text":"no, your thread is put on suspended animation, you're not going to use up any CPU time","width":320},{"text":"so if you want pizza and you ask for pizza and there's no pizza left, I get to freeze ray you and you're not even conscious of the fact that you've paused, that you're stuck","width":960},{"text":"now, is this the end of the world for you? no because here's the good news","width":192},{"text":"other threads may come along and put pizza back inside the box","width":448},{"text":"they can increment the count","width":192},{"text":"when they do that I can wake you up and say 'hey guess what? there's pizza now!'","width":320},{"text":"and you say 'oh thank you very much!' and take your pizza slice and carry on your way","width":256},{"text":"right, so this little analogy is what these sem_wait() and sem_post() calls do","width":384},{"text":"so how do we use a counting semaphore?","width":384},{"text":"here's the basic idea, we're going to say init and we want to say how many slices of pizza do we want inside of our box our what's the intial value","width":448},{"text":"so for example zero might be a common idea or we might say actually I want say three slices of pizza","width":704},{"text":"and then we might call wait","width":256},{"text":"I'm decrementing those counters, if there happens to be pizza inside the box, if there happens to be a non-zero value inside my counting semaphore these can return immediately","width":832},{"text":"OK, so I can call wait three times and they would immediately continue","width":704},{"text":"but if you call wait a fourth time","width":448},{"text":"your thread gets stuck inside the wait call","width":320},{"text":"doesn't need to use any CPU for this because your operating system is now going to take control of that thread and say 'I\"m sorry, you cannot proceed, there's no pizza left'","width":640},{"text":"ok, the good news is that on another thread we can call post","width":832},{"text":"post does not block, post will return immediately","width":256},{"text":"but post is the plus one effect, it says I want to actually increment the number of pizza slices inside this counting semaphore","width":960},{"text":"so when you do that anybody waiting to eat a slice of pizza can now continue, they will decrement the count themselves and continue","width":768},{"text":"we're going to use this counting semaphore for some more advanced examples, but one thing I want to show you or one thing you should notice is the way you post now they, they don't need to be inside the same thread. they could be, but they don't have to be","width":1344},{"text":"right, questions about counting semaphores? yes? [student question]","width":768},{"text":"ok, right, so, let's imagine you've got any empty pizza box","width":256},{"text":"two threads walk up and say I'd like to split a slice of pizza. we've put them in a state of suspended animation and then you walk up and you call post on this pizza box","width":640},{"text":"here's what's going to hapen","width":64},{"text":"first of all you get to walk away straight away, you can carry on whatever you were doing","width":320},{"text":"one of the two threads that were waiting will win, ok?","width":320},{"text":"one of them will get to return from their wait call","width":448},{"text":"now of course, what's their [gibberish] the pizza? because you posted but another thread immediately waited on that and stole that slice of pizza","width":448},{"text":"so the count is still zero, so any other threads that walk up and try to eat pizza, theres nothing left int he box","width":448},{"text":"but we've released one of those threads","width":64}]