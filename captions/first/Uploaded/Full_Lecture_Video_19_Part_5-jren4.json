[{"text":"Okay. Are we ready? Page 2!","width":384},{"text":"Let's so.. Okay here we go.","width":832},{"text":"What's a named pipe and unnamed pipe?","width":192},{"text":"So, I actually showed you in an example of an unnamed pipe.","width":320},{"text":"Where inside your c-code, you can say \"Okay, give me a pipe.\"","width":256},{"text":"And you pass it a reference to a little array and it fills [something] in with two file descriptors. That's an unnamed pipe.","width":384},{"text":"Does not exist anywhere other than inside the memory.","width":256},{"text":"There's actually another form of this, which isn't used very often. But it's called a named pipe.","width":448},{"text":"Which is something you can create apparently on the disc, and here's how you call it.","width":512},{"text":"You could say make [something] and give it a file name.","width":448},{"text":"Okay, so we'll call it a bag pipe.","width":192},{"text":"Anybody from Scotland here?","width":192},{"text":"Okay. ","width":192},{"text":"Right, so bag pipe is an instrument where you can set up a [something] and keep squeezing it, and you wear a [something]","width":960},{"text":"Stand on the great hills of Scotland.","width":128},{"text":"Alright, so that's a bag pipe. It seems to exist on the file system, and in fact the joy of using a bag pipe like this is that it's lifetime is independent of your process.","width":704},{"text":"The bag pipe will live on the processes","width":256},{"text":"And you can create it using this make fifo. ","width":320},{"text":"What do you think fifo stands for?","width":128},{"text":"First In First Out, right. So ,you first breadth into the bag pipe will be the first [something] that comes out when you try to read from this file.","width":576},{"text":"Except this is not a file. It's a pipe, so the order of the data.","width":320},{"text":"So the reading from it and the writing of it doesn't behave like a file. It's like a queue. First-in First-out queue.","width":576},{"text":"They are not often use, but they are worth knowing about","width":320},{"text":"Remember signals? I'm not talking about con-sig. I'm talking about software interrupts we can do such as sigchild, sigint, sigkill.","width":768},{"text":"Pipes themselves have a signal","width":256},{"text":"Alright. You get a signal","width":512},{"text":"If you send data down the pipe and no one is listening","width":1536},{"text":"See, if a tree falls in a forest, does anybody hear it?","width":256},{"text":"As the writer, how can you discover that your reader has died?","width":512},{"text":"There is [something] to the data","width":64},{"text":"And here's how.","width":128},{"text":"Actually, you can get a software interrupt, you can get the signal.","width":192},{"text":"Say, Oh by the way, there is no one listening anymore. All the file descriptors have disappeared, have been closed.","width":704},{"text":"Maybe deliberately, or maybe the child process itself has finished, but guess what? You can send as much data we used, because you'll like try down this pipe, but there is no one there to read it anymore.","width":768},{"text":"So you get a sigpipe, so you can choose to handle that. You can set up a signal handler to say, \"Oh look, my reader from the pipe is not getting anymore data\"","width":1024},{"text":"Now, couple of comments on this.","width":320},{"text":"First of all, this means if you fork, then make sure you close the unwanted file descriptors","width":1344},{"text":"So what do I mean by that?","width":256},{"text":"Remember that this kind of thing, we said \"Okay, give me two of these\", we call pipe. ","width":704},{"text":"Look how easy this is. Alright, so now I got my read and my write. Then I call fork","width":384},{"text":"So now, conceptually, we got four file descriptors. Yes, the child has two, the parent has two.","width":576},{"text":"But we're only going to use half of them.","width":256},{"text":"If the parent gonna do the writing, the parent does not need the read.","width":192},{"text":"If the child is gonna do the reading, it doesn't need the writing file descriptor.","width":384},{"text":"So a common pattern of this is in child, the first thing you do is that you would close the one that you're not gonna use.","width":832},{"text":"So for example, we might close the second one, and the parent, we do the same thing. ","width":768},{"text":"We close the first one, the rad.","width":576}]