[{"text":"[Om Monk Chant with Transcendental and Tibet Bells]","width":3840},{"text":"so, what do we got. overhead.","width":4992},{"text":"right so, here's our requirements that we'd like","width":512},{"text":"know that first of all, we only want one process or thread to be inside our critical section at a time","width":320},{"text":"what do we call that?","width":128},{"text":"mutual exclusion","width":512},{"text":"in other words, if you've taken cs241, I don't want to see you taking any other courses","width":448},{"text":"yes, your time is mine! said cs241","width":192},{"text":"right, what about this then? if waiting, then another process or thread (if you're talking about threads) can only enter the critical section a finite number of times","width":832},{"text":"what do we call that?","width":64},{"text":"this is a better definition of bounded wait","width":384},{"text":"if you're waiting to use the resource, if you're waiting to be inside the critical section","width":320},{"text":"it would be unfair if another thread just kept on jumping in front of you in front of the queue","width":384},{"text":"so we want a solution where eventually we get to go in","width":192},{"text":"alright and then if no other process is in the critical section then the process or thread can immediately enter the critical section","width":640},{"text":"our code should be efficient. it shouldn't have to pause. if there's no one inside the bathroom, I expect to use it straight away","width":384},{"text":"alright, so, what's that called?","width":192},{"text":"progress! yes.","width":128},{"text":"so those are our three desired properties that we're going to evaluate","width":256},{"text":"alright. now there's um, one more little thing [something","width":384},{"text":"that I should mention is that we're talking about pseudocode right now. but today, if you were to look inside say, mutex lock, and you were to drill down to find out exactly how it worked, you might discover that it uses something called the exchange instruction","width":1024},{"text":"so many processors today will implement either test&set or the exchange instruction","width":448},{"text":"what do you think the exchange instruction does?","width":256},{"text":"okay, it exchanges something, yes, very good, but what might it exchange?","width":320},{"text":"how about a value inside a register and the contents of memory","width":640},{"text":"so it swaps them","width":256},{"text":"but here's the critical part: is that it does this atomically. it does this in the guerilla fashion. it walks up and it exchanges your hats","width":704},{"text":"actually no, I'll take your cellphone, that's more valuable, right?","width":256},{"text":"for the [something] oh yeah","width":192},{"text":"and in doing so, no other CPU is allowed to interrupt that process","width":320},{"text":"it completes as one logical step. here you go, you can have your phone back","width":256},{"text":"so that way, we can actually use it to implement our mutex lock because only one thread will win","width":576},{"text":"we can make sure that only one thread gets to put a certain value inside it","width":320},{"text":"so, it's an atomic instruction, why is it useful? well, to implement locks!","width":512},{"text":"we don't have to worry about officially catered code down here and it works even if I got say more than two threads trying to compete to lock something","width":896},{"text":"okay, alright, next thing we're going to talk about is condition variables","width":384},{"text":"I'm going to introduce them now, we'll let that simmer in your brain and then the second half of the lecture we'll come back to them","width":704},{"text":"so like I said, this is the cool bit","width":128},{"text":"condition variables sound like they hold some sort of clever value","width":576},{"text":"they don't","width":64},{"text":"uh, their name actually is very good at confusing beginners","width":448},{"text":"the way to think about condition variables is that you can make your thread meditate","width":512},{"text":"what an exciting lecture isn't it? okay, right!","width":192},{"text":"so we can put a thread to sleep...","width":192},{"text":"and then....it will stay until another thread decides to take it up. now, you don't need to actually scrumple up a piece of paper and throw it at the other thread","width":1344},{"text":"the system will do that for you","width":64},{"text":"you can just make a call, you can say \"hey, signal!\"","width":192},{"text":"and, at some point, you know that the meditating thread will be woken up by the system","width":576},{"text":"so it's a communication pattern. it's a way for one thread to wake up another","width":448},{"text":"so we can use this and we can use this so that our thread can wait until something is true, but we need to write that, so that's the idea of variable comes in.","width":768},{"text":"we are actually going to write a condition. a truth that we know will be true","width":384},{"text":"but, until that truth happens, until that test happens, no magic is going to happen. we're just going to write a little loop (a little white loop) until that truth has happened we're just going to put our thread into a meditative state","width":896},{"text":"alright, that's the idea","width":192},{"text":"they're not very complicated. they're not fantastic and clever, they don't know what the condition is going to be. we're just going to write a little while loop that says \"ok, while there is no good coffee at bervandes, meditate\"","width":832},{"text":"it'll be a long time","width":192}]