[{"text":"and remember, that makes our life much easier. when we can say, oh look! i've got multiple threads happening somewhere in my program, but in the stuff that's really complicated, when I'm changing data structures or reading data structures which might be changed, I just want one thread accessing this stuff","width":1088},{"text":"so that's what my lock is for","width":64},{"text":"alright, so here's my incredibly complicated data structure, it's called an array, here it is","width":320},{"text":"and I've got the count that counts the number of things inside my array","width":320},{"text":"and as they are global variables, we know they are going to be initialized to zero","width":320},{"text":"okay, so, here's what I can do to my data. I've got something to add something into my array, to push some data in, and I've got a method to delete something!","width":768},{"text":"which all it does it just reduce the count","width":256},{"text":"and hopefully we'll assume that no one tries to delete more items than there are","width":384},{"text":"ok, I'm also going to have a geLast() method","width":320},{"text":"so getLast() we could, if we're inside cs225, say, I'll tell you what, I'll just return a bad value if nothing is actually in there already","width":960},{"text":"but no, what we're going to do is make getLast() wait","width":192},{"text":"we're going to make sure that it doesn't continue until there really is at least one value inside our datastructure","width":576},{"text":"alright so, here's the game we're playing","width":384},{"text":"there's one thread that's going to be calling push data and delete and it might do it several times.","width":384},{"text":"I've got another thread that might call getLast() several time","width":192},{"text":"right, so we're going to develop this code slowly but here we go. so, here's the plan. any time we want to deal with condition variables, we're going to write something incredibly incredibly simple. just a busy wait. just a simple while loop that keeps testing something","width":1600},{"text":"right so, this is the code that I'm scared about. right. I'm going to try and get something inside my array but what would happen, for example, if the count is oops this should be count - 1","width":960},{"text":"here we go","width":64},{"text":"what would happen for example if count was zero?","width":256},{"text":"it means my array doesn't have anything in it","width":256},{"text":"so, I need to say the following \"look, while count is zero, don't carry on.\"","width":384},{"text":"so while count is zero, just go around","width":960},{"text":"and, who cares about burning up my battery on my cellphone. alright. it's easy code to write","width":576},{"text":"this is the kind of code you might write if you didn't come to cs241","width":64},{"text":"you know just \"[something] count is zero [something] just keep going around\"","width":448},{"text":"eventually, at some point, count will change and that's fine","width":64},{"text":"of course, that code might execute a billion times and used up several milliamps of current","width":448},{"text":"or milliamperes of power","width":192},{"text":"and um, but it's the best we can do, right. I'm going to show you how we can do better","width":384},{"text":"so how can we fix this code? well first of all, we can see there's a race condition, right, that I don't want these methods to run at the same time so I'm now going to put my locks in","width":640},{"text":"alright so, here's what I wanted to do. I'm going to call my pthread and pthread's a lot to write so I'm just going to write p","width":640},{"text":"pthread_mutex is a lot to write so I'm just going to write m","width":256},{"text":"lock","width":64},{"text":"and, pass in the address of my little lock structure and at the end, we'll unlock","width":576},{"text":"and, suddenly our code is easier to read. we don't need to worry about say, two threads calling pushdata at the same time even if the problem says that never happens","width":768},{"text":"my code now says \"because of that lock, only one thread can ever be inside that little piece of code\"","width":512},{"text":"and similarly, here, if I lock on the same lock","width":896},{"text":"I'm conpletely confident that even if you tried to call pushdata and delete at the same time from two different threads, the code would still work","width":448},{"text":"one thread would have to wait","width":128},{"text":"one thread wins the lock and can continue and change the value of count. the other thread has to wait until the mutex is unlocked and then it can lock the mutex and carry on","width":768},{"text":"alright so, the lock call may take a bit of time","width":320},{"text":"if someone else if currently in the bathroom, you're going to have to just twiddle your thumbs and wait until that lock has been unlocked","width":576},{"text":"we're good, okay, we're fine so far right? this is not complicated so far. this is easy stuff, yes?","width":384},{"text":"yes?","width":64},{"text":"I know it's a monday and the weekend was great but come on, this is not too bad","width":320},{"text":"alright so, now, haha, right, now let's see what we should do over here","width":320},{"text":"um, before checking this count, I should make sure that no one else is touching it alright?","width":640},{"text":"that no one else might be, say, changing its value halfway through","width":128},{"text":"so, um, before doing anything with these shared variables, let's put a lock call in at the beginning. there we go.","width":960},{"text":"we see how our code is becoming littered with these lock() and unlock() calls, yes?","width":384},{"text":"alright, so we write this code, what happens?","width":640},{"text":"if we tried to test it at this point?","width":192},{"text":"this is the, what, [something] mercury who wants to live forever code?","width":704},{"text":"alright so my. I'm fine if I'm just calling pushdata and delete","width":384},{"text":"things can bad though, the moment I call getLast()","width":256},{"text":"because, getLast() locked the mutex, so what would happen now, to any other code that calls pushdata and delte?","width":576},{"text":"they get stuck! yeah, they get stuck inside their lock call","width":256},{"text":"waiting for that lock to get unlocked","width":128},{"text":"which as we can see from the code is never going to happen. wahahaha. alright, so we've got a problem","width":448},{"text":"we can even imagine as well that this count, if this was zero, then we can get stuck inside this loop, and because we don't unlock it, pushdata will never happen","width":1216},{"text":"so, here's how we're going to fix our code now","width":192},{"text":"we're going to unlock the mutex, meditate, me-di-tate, with our condition variable","width":1024},{"text":"after we finish meditating, lock the mutex again","width":512}]