[{"text":"So how can we find that the inode if you're the command line, you could just uh","width":512},{"text":"pass in uh on the side, ls","width":256},{"text":"or from code ","width":64},{"text":"uh we've got the following calls, we can ask for","width":320},{"text":"a stat, give the status of this file","width":192},{"text":"and uh there's two useful variations","width":256},{"text":"one is you supply a path, ","width":192},{"text":"so for example, I could say ","width":192},{"text":"stat","width":192},{"text":"on my file demo.c","width":256},{"text":"and pass in a pointer to","width":256},{"text":"my struct","width":128},{"text":"another is I pass in a file descriptor","width":512},{"text":"Now if you're going to start reading things from uh","width":640},{"text":"the buffer that's set","width":128},{"text":"make sure that you check the return value right? so you want to check the uh","width":512},{"text":"the result is 0","width":256},{"text":"otherwise its succesful","width":128},{"text":"if it's non-zero then that's ","width":256},{"text":"that uh C structure uh was never touched","width":192},{"text":"and you'll just read garbage or old values","width":256},{"text":"so it's a common programming gotcha. just assume that stat just worked ","width":256},{"text":"and then try to pull out um","width":192},{"text":"uh values and information from that stat","width":192},{"text":"where its in fact, stat says huh I don't know file or you don't have permission for that file","width":320},{"text":"or hey, it's nice day outside I don't I'll bother to do any work today","width":256},{"text":"Um that's not actually a posix error","width":128},{"text":"The uh","width":192},{"text":"Right so so check the return value of stat","width":256},{"text":"Now I mentioned before you can do fdopen","width":576},{"text":"and uh fdopen allows you to go from a file descriptor at the posix level up to uh","width":448},{"text":"uh a C file pointer complete with buffering and using printf and all that good stuff","width":384},{"text":"You can actually go the other way","width":128},{"text":"There's uh","width":128},{"text":"function called fileno which allows you to extract","width":256},{"text":"theeee","width":64},{"text":"file descriptor","width":192},{"text":"out of C as well","width":192},{"text":"Right so we can fill this in","width":256},{"text":"And there's one other call call here","width":192},{"text":"lstat","width":64},{"text":"So there's one thing we haven't talked about yet","width":576},{"text":"which is","width":192},{"text":"symbolic links","width":192},{"text":"we're gonna play with these in bit. we're just gonna mentioned them today","width":192},{"text":"was gonna say okay this exists","width":192},{"text":"and as a symbolic link","width":64},{"text":"is a file that pretends it doesn't exist","width":256},{"text":"instead it says HAH I don't exist, what you're actually looking for is","width":256},{"text":"over here somewhere and it gives you a redirection","width":256},{"text":"so just like you might move house and could set up your mail forwarding","width":320},{"text":"that's what a symbolic link can do","width":192},{"text":"so, uh you can say, Oh actually the contents that you really want uh","width":320},{"text":"read or write are not  here, they're stored in some other directory","width":192},{"text":"if you want to be evil","width":192},{"text":"you could set the symbolic link to point to another symbolic link which  can point back to the first symbolic link","width":320},{"text":"Muahahhahaah","width":128},{"text":"at which point your machine catches fire","width":128},{"text":"No you won't have been the first person to think of this","width":320},{"text":"and your program wont have been the first program to do this","width":192},{"text":"so instead","width":128},{"text":"the operating says ","width":64},{"text":"hold on a moment, I've been following these these symbolic links too many times","width":256},{"text":"i'm gonna quite trying to follow them and will give up after a preset number of times","width":320},{"text":"But anyway, uh the lstat exists if you actually want information about the symbolic link","width":448},{"text":"itself, rather than trying to follow it","width":192},{"text":"If you call lstat on a regular file that's fine","width":1152},{"text":"it'll just be the just be that equilvalent of calling um stat","width":256},{"text":"so lstat is useful if you are really interested in the symbolic link itself","width":384},{"text":"like who created the symbolic linke, who do I need to blame for this mess right?","width":192},{"text":"or when was it created?","width":128},{"text":"That's pretty unusual, most of the time we actually want to follow those links right?","width":320},{"text":"what most of the time we we just want to imagine that uh","width":256},{"text":"these aliases are automatic","width":256},{"text":"Right any questions so far?","width":384},{"text":"Okay so let's get a have a share of a look to see all the stuff we can kinda discover about the file","width":448},{"text":"First files themselves lives on a device","width":384},{"text":"yeah we know they have an id number","width":192},{"text":"and they have this ","width":128},{"text":"security access as simple protection","width":192},{"text":"where we can talk about who can do what","width":192},{"text":"so we're going to see more of this in the moment","width":256},{"text":"but this is the idea about who can read it, who can write it, and who can execute it","width":256},{"text":"they also have an owner","width":320},{"text":"and","width":64},{"text":"this we've got a user and a group","width":256},{"text":"I'm not gonna talk about groups","width":128},{"text":"much in CS241, just know that they exist","width":192},{"text":"Um if you get into linux administration, maybe it's it's useful if you have a lot of","width":384},{"text":"kind of team members working inside the same directory um","width":128},{"text":"but we're not going to play with them let's just let's just uh umm","width":192},{"text":"restrain our attention to users today","width":192},{"text":"okay","width":192},{"text":"And then the um","width":320},{"text":"total number of ","width":192},{"text":"locks, in actually uh","width":192},{"text":"these happen to be in in multiples of 512 just for historical reasons","width":320},{"text":"uhh and so that tells us, for example, whether the uh the 8th","width":320},{"text":"direct block entry is valid or not, or we should be using the indirect block as well etc etc so we","width":384},{"text":"from the number of blocks for example if that uhhh","width":256},{"text":"if that was a sufficiently small enough figure, ","width":128},{"text":"you'd know that there wouldn't be any thriple indirect blocks or double indirect blocks etc etc etc","width":320},{"text":"Right so now I can write code to say, find me all the files","width":448},{"text":"which uhhhhhh have been created today","width":192},{"text":"or have been created by a certain user","width":256},{"text":"Most uh users are actually integers","width":384},{"text":"And so the file system doesn't keep a record of user names","width":320},{"text":"if you can turn an integer back into a known user name","width":256},{"text":"you're gonna have to ask the operating system to do that","width":192},{"text":"so at the file system level, we just distinguish different users by different integer numbers","width":384}]