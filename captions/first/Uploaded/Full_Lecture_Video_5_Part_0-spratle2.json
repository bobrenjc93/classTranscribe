[{"text":"Okay, good morning class, how are you?  Fantastic, right!  So here's what we're going to start doing now, we're going to start talking about memory.","width":1536},{"text":"You could imagine if we went back into the early, early hours of computing, we had it easy, right?  Well, there's proper instructions here, and we'll use location 100 to mean this and 112 to mean that, and we won't have to worry about dynamic memory allocation; we'll just make all those decisions upfront as we actually design the program.","width":1728},{"text":"Then later, we say, \"Well actually, we want to have functions.\"  And later, we want to have functions that can call themselves and be able to recurse.  So, for that we need a stack.","width":768},{"text":"And for that, then, as we make function calls, our stack pointer needs to move.  And inside the stack we'll store our temporary variables and also our point where the CPU should go back to when it returns from the function.","width":896},{"text":"So our stack... we'll start a lot higher up in memory and as we make more recursive calls our stack will get larger and larger and larger and larger, of course - until we run out of memory.  And then we said, \"Well actually, we don't want to decide what memory we'll need upfront either, we want to be able to have dynamic memory allocation, and we don't know when we're going to free up that memory.  We don't know when we've finished with it.  We want to make that completely dynamic and it's part of our program.","width":2176},{"text":"And thus, the idea of the heap was born.","width":192},{"text":"The idea that at any point, we can say, \"Oh!  I need more memory!  And give it to me now and this is how much I want and I'm not going to tell you when I'll be finished with it.\"","width":704},{"text":"So it's very different from the stack memory.  Stack memory: you know you'll be finished with that memory when you return from the function.","width":512},{"text":"So with stack memory, you've got automatic variables.  They automatically disappear - no more work...","width":448},{"text":"With the heap, of course, now we actually have to say, \"Okay, give me the memory\" and \"I'm finished with it.\"","width":320},{"text":"So you've used the heap of course in Java and in C++ when you said 'new' and 'delete' in C++.  Typically, they go on the heap memory.","width":704},{"text":"I say 'typically' because C++ can do some amazing optimizations when you're not looking the compiler will quickly say, \"Hey!  You didn't need to write that!\"","width":576},{"text":"\"Here!  I'll optimize your code, so that actually there's no code written at all.\"","width":256},{"text":"When you write new/delete you explicitly create, well, we'll just simplify it and say \"Yes!\"  We're making things on the heap.  So we need some memory, so let's call malloc().","width":704},{"text":"So malloc() is part of the C-library.  It's part of your process.  It decides where your memory's going to be.","width":640},{"text":"If you like, it says, \"Oh look!  Table of four.  Right, I need  four seats.  You can sit over here.  This table over here is free.  You sit over here.  Oh, you've finished with that table?  Oh, great!  Get out of there because I'm going to reuse this table for something else.\"","width":832},{"text":"Alright, so malloc() has to very quickly decide where it can assign you some memory.","width":448},{"text":"It gets harder because we don't know in which order our memory is going to be allocated, and in which order memory is going to be freed.","width":960},{"text":"And even if you knew that order, it's an NP hard problem to do it well.","width":576},{"text":"Called the Knapsack Problem.","width":256},{"text":"So even if you knew exactly which order the malloc()s and free()s were going to come in, how would you do it efficiently is a non-trivial problem.","width":576},{"text":"That sounds computationally expensive, right?  If we made our malloc() perfect, it's going to take a long time.  \"Yeah, I could put this table of two here, but you know what there's a big order coming in in a moment and so I don't actually want to put them there I want to put them over there.\"  There's an infinite number of possible ways that we could arrange things in memory.","width":1280},{"text":"So malloc() has to be efficient but fast.","width":320},{"text":"So this is the basic game we have to play.","width":320},{"text":"*picture problems*","width":1280},{"text":"Don't write this down, this is just a visual.  You don't need to copy this down.","width":384},{"text":"Here's how it works: let's suppose our process has some memory to play with.","width":512},{"text":"You promise me you're not writing this down?  Good.","width":256},{"text":"So my little blocks here indicate 1 kilobyte blocks.","width":320},{"text":"And during the execution of my program it says, \"Well, I'm gonna make a linked list or I'm gonna make an image, and I need some memory.\"  So part of your code says, \"I need say 2 KB.\"","width":1152},{"text":"So malloc() now has to look through the memory and say, \"I tell you what, I'll give you these two blocks here.\"","width":384},{"text":"If anyone else calls malloc() I promise not to return any pointers that point to this memory in here.","width":576},{"text":"So malloc() is going to return the address of the first few bytes and internally it has to do some book-keeping.  It has to make a note that these first 2 KB are being used.","width":640},{"text":"And then your program decides to malloc() some more memory.  So it says, \"Okay, I'll have 2KB now please.\"  What should malloc() do now?","width":832},{"text":"Well, it can't use this area of memory.  It has a choice: it could put it here and here.  It's not going to allocate here and here, though.","width":1280},{"text":"Why does it not say, \"I'll give you some memory there and there\"?","width":576},{"text":"We've fragmented the memory, but also when malloc() returns a pointer, your assumption is that all the bytes you've been given are contiguous.  You might want to use it as just a simple array, for example.","width":1152},{"text":"So we've got a problem here.  We have to allocate memory that is in the same area so let's say we put these little x's in here.  And then of course someone says, \"malloc(2 KB)\".  What happens now?","width":1408},{"text":"We can't!  We don't have enough spare memory.","width":320}]