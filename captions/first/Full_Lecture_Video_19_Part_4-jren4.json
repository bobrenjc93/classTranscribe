[{"text":"Other questions?","width":448},{"text":"So... Interesting problem happens is. What happens if we open these file descriptors and then we fork?","width":896},{"text":"What happens, right? Cause I've got clearly something opened, talking to a file.","width":320},{"text":"So I can now modify that. I can fseek to different places","width":384},{"text":"And I can close it.","width":320},{"text":"Okay, so. First the little problem is let's suppose your parent calls fclose.","width":1216},{"text":"What do you think will happen to the child?","width":256},{"text":"Can a child still use the file descriptor?","width":192},{"text":"Make your guess now, and you want to be sociable, tell your neighbor","width":384},{"text":"Okay, here is why I told to tell your neighbor, because psychology has shown that you'll actually remember things more if you're surprised when you are wrong.","width":1024},{"text":"Okay, so make a commitment. It doesn't matter if you get wrong. Just at least be surprise. Okay.","width":448},{"text":"Well, so the answer is that it doesn't affect the child.","width":192},{"text":"These actually appeared to be independent, so actually if the parent closes, the child can continue to use the file descriptor and vice versa.","width":960},{"text":"Alright, so, in that sense they are independent.","width":448},{"text":"Alright, now what about this one? ","width":192},{"text":"What happens if you fseek before forking?","width":320},{"text":"What do you think the child and parent see? Do they see the same position?","width":320},{"text":"Make your guess now.","width":320},{"text":"Okay, so if you seek and then fork, both the child and parent will start from that position","width":2432},{"text":"So for example, if you seek to the very end of the file, and then forked. Both the child and the parent start from that position.","width":384},{"text":"So, they will both see or use the new position.","width":896},{"text":"Okay, what about this one?","width":256},{"text":"What happens if say the parent or the child fseeks?","width":448},{"text":"Does it affect the other process?","width":256},{"text":"Make your guess now","width":256},{"text":"Right.","width":1472},{"text":"Yes, it affects the other process","width":512},{"text":"Okay, hey, that's not fair, is it?","width":640},{"text":"Alright, so here's why.","width":192},{"text":"Let's think about this from the system's perspective.","width":256},{"text":"It's got a big list of file descriptors which are opened, and if you fork, then actually it increase reference counter and says \"Oh look, I've actual got two processes using my internal file descriptor.","width":1024},{"text":"So it's a bit like showing a library book with somebody that if you want to turn the page of the library book, guess what everybody else using the same file descriptor has to look at that page of the book.","width":896},{"text":"Alright, so the analogy is like a book page.","width":448},{"text":"Okay, so the surprise is, \"Yes\", in terms of closing it, it's independent, but in terms of using it, \"No.\" It's actual one open reference. ","width":896},{"text":"So, think of it as the kernel holding a reference to a file at a particular position.","width":448},{"text":"And by forking, all you've done is double the number of, or increment it by 1 of number of processes using this same open resource.","width":512},{"text":"That means the parent could play bad news on a child.","width":448},{"text":"Here you go. Have this file descriptor. Oh ha ha. I'm going to change the position that you are looking at and you didn't know.","width":384},{"text":"Alright, so you can really mess with child's [something].","width":256},{"text":"So it's like a book. There is one particular position, so that's a common gotcha. ","width":512},{"text":"And thus. Here's something that is kind of useful. If you want it to write code to write to different parts of a file, at different positions.","width":1216},{"text":"Then, if you had multiple threads, then there is a problem, right?","width":448},{"text":"[something] would be calling fseek trying to move to a different position.","width":320},{"text":"It would be nice if you can just say, \"No, no. I want to send some bytes and this is the absolute position in the file that I want to send these bytes.","width":448},{"text":"And so, this is why high performance code these days. If you go to their HPC. HPC lends high performance computing stuff.","width":512},{"text":"They often use something call pwrite, which allows you to specifically write to a certain position in the file independently of this fseek and ftell stuff.","width":704},{"text":"I don't think we'll use it inside cs 241. I just want it to mention it. It is slightly cute thing to talk about in an interview.","width":448},{"text":"It's like, \"Oh yeah by the way, this pwrite stuff exists\"","width":192},{"text":"That came about because of changing the position of the file becomes the bottle neck.","width":448},{"text":"That all of your threads or child processes suddenly saying, \"Okay, hands off everybody. I want to change the absolute position of the file and no one else can change it once I'm using it\" So that's clearly [something] attention","width":832}]