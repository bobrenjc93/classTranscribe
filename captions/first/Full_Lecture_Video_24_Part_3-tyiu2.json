[{"text":"so what is result pointing to?","width":256},{"text":"could be anything","width":320},{"text":"right? we just made this little thing on the stack","width":192},{"text":"its just whatever happened to be at the stack memory at that moment","width":256},{"text":"so we just called free on a arbitrary block of memory","width":192},{"text":"oops","width":128},{"text":"our program is probably gonna crash","width":192},{"text":"at this point","width":64},{"text":"but its certainly probably vulnerable to other attacks at this point","width":256},{"text":"ok so how should we fix this","width":128},{"text":"well here's what i would do","width":64},{"text":"i will probably set this to null to begin with","width":128},{"text":"and let me check, I'll only called this if the result has been changed","width":448},{"text":"so if its not equal to null","width":384},{"text":"then call freeaddrinfo","width":128},{"text":"that's a more robust program","width":64},{"text":"right","width":256},{"text":"port hijacking","width":320},{"text":"so","width":192},{"text":"i love this i want to dress up as a [gibberish] as a pirate","width":320},{"text":"yes! there's a potential for port hijacking when we write our server programs","width":384},{"text":"imagine this, imagine you write a fantastic web server","width":192},{"text":"or another program that uses sockets to communicaet","width":320},{"text":"and then your program finishes, probably crashes","width":192},{"text":"at that precise moment, another process starts listening to the same port","width":448},{"text":"mua hahaha... and it gets some bytes","width":192},{"text":"that were intended for yoyu","width":192},{"text":"well this is a security risk","width":192},{"text":"we should prevent this, right","width":64},{"text":"we should prevent another process from immediately starting up","width":256},{"text":"and that actually led to a socket wall where if you claimed a particular port, another process can't immediately reuse it","width":896},{"text":"if that process belongs to another user, we have a longer time out","width":512},{"text":"let's actually see this as a little demo","width":192},{"text":"and then we'll say what we can do","width":128},{"text":"uhh ... where is it... alright... so","width":896},{"text":"ok, right, good","width":448},{"text":"i have a program here. so now let's run my little server here","width":256},{"text":"ok so gcc server1.c","width":256},{"text":"alright, so here's a little program we service for where we waiting on accept waiting for connection","width":576},{"text":"right, so let me connect to this. i'll start a new window, ","width":320},{"text":"and is today i'll use nightcat , so nc localhost 1234 ","width":448},{"text":"okay, we've connected. Yes!","width":128},{"text":"it's good! so I can send something over here","width":192},{"text":"let me at this point quit my program, i'll make a few changes, and i'll run it again. ","width":320},{"text":"oops. bind failed","width":192},{"text":"address already in use. ","width":128},{"text":"I couldn't reuse that port","width":128},{"text":"so that port for little while is still being bound to that old process","width":640},{"text":"even though the old process is quit, we couldn't immediately reuse it. ","width":128},{"text":"okay, so what can we do as developers?","width":320},{"text":"uh we like to be able to reuse our programs","width":128},{"text":"so i'll testify it quickly","width":128},{"text":"[gibberish]","width":64},{"text":"it's okay I can reuse my port 1234 again","width":192},{"text":"so what options is to use","width":256},{"text":"hey, dont develop too fast","width":64},{"text":"but no we can do a bit better than that","width":192},{"text":"we can actually disable this security feature","width":256},{"text":"by setting an option on the sockets","width":128},{"text":"so lets see how we can do that","width":192},{"text":"hello ... just trying to connect to my machine right, my machine. so","width":256},{"text":"let's see what we can do here","width":128},{"text":"and there's a little option called setsocketopt","width":256},{"text":"where, make this larger, where ... have a socket, i can say i wanna be able to reuse the port in the future","width":896},{"text":"so if you set this option on the port, that this when your process dies, or quits, another process can immediately reuse the same port","width":640},{"text":"okay. so odd syntax. we are gonna see this in a bit more examples. ","width":320},{"text":"of this. ","width":128},{"text":"is that youll see that we have to , in this case, pass in the address of the integer value, and then the size of an int","width":896},{"text":"so we are gonna see this passing a couple time today when we pass in the addresses of something and size of the thing that we are trying to pass in","width":448},{"text":"but thats just a bit kind of useful line of code that youll be using in one of the later mps","width":384},{"text":"one of the mps that we've got lined up for you is called rival's mp, where we are going to simulate having a whole load of devices talking to, say, a server, so you might have to watch, you might have a pace maker, you might have a, i dont know, hair, that .. to your server ","width":1280},{"text":"and this is the single ... connecting and constantly talking to your server which collects your data, maybe collecting your blood pressure, and a whole load of your vital signs","width":640},{"text":"so ","width":64},{"text":"we want a server when we developing these stuff we wanna be able to quickly reuse ports, so here's the option to do that","width":448},{"text":"okay, so that's making ... this","width":256},{"text":"how do i do this? if we start our programs and we use the same port, easy, we gonna use setsockopt and the magic ... is this SO_REUSEPORT thing","width":1216},{"text":"which should be in the wikibook. If not, I would add it","width":256},{"text":"and notice we do this before we call bind so we do this early on","width":448},{"text":"just after creating this socket","width":64},{"text":"set this option on on the socket","width":192},{"text":"right so we've played with very very simple kind of server, now you wanna do more. ","width":768},{"text":"right? this is uiuc, this is illinois of, university of illinois, we wanna go up to eleven. we don't wanna have just a single connection to a single client","width":640},{"text":"we actually want to write servers that can talk to thousands of clients at a time","width":384},{"text":"how can we do that","width":64},{"text":"well, a long time ago, we realized that i dont want to always block on my read call waiting for my client to send me something, it would be nice to find out which client is coming talking to me","width":896},{"text":"has sent me some bytes","width":128},{"text":"so, the idea of select was born","width":384},{"text":"okay, right, so the very first implementation to attempt to making performance servers is to use the system call, is called select","width":768},{"text":"so probably about 5 minutes after someone designed select, we discovered it wasn't any good. ","width":384},{"text":"it was good enough for the beginning of 4 minutes, but here's the problem with select","width":64},{"text":"you have to do an in order scan after returns to find which file descriptor you should be talking to ","width":448},{"text":"you should be calling","width":64},{"text":"well that means an order, lets say a thousand system calls. and that in itself takes time, its gonna take milliseconds of time","width":640},{"text":"oh shall i take this one? shall i take... so this select was the first pass. the great thing about select is that youll find it everywhere","width":768},{"text":"right, if you wanna write code on say, simple and embedded devices, on windows, on mac, hey, just use select and dont worry about performance","width":576},{"text":"this is good enough","width":64},{"text":"and this is easy to write code which times out so you can say ok i'd like to wait for say, a secnodn to see if the client sends anything. ","width":448},{"text":"so select is a reasonable choice at that point","width":576},{"text":"so what happened next was a system call called poll that was defined. and that solved some problems. but today what we play with and what use see in lab is epoll. the only down side of epoll, the main down side of epoll is that it on linux","width":1280},{"text":"but not mac","width":384},{"text":"so now ur stuck. what should i use, select, poll, epoll, etc. uh so epoll's performance is great for if you have a thousand long lived connections, so its ideally if you have thousand of long lived connections","width":1408},{"text":"so this is your yik yak server, now single machine can support thousands if not more connections, epoll would be a very good choice. ","width":832},{"text":"and as you saw, the way we use epoll, is we set up a set, and we just add file descriptors to that set. ","width":384},{"text":"and then we say ok now prepare to wait, i'm prepared to block , until im' able to read at least one of these","width":320},{"text":"and then when it returns it tells me which file descriptor i should use","width":256},{"text":"so for cs 241, ya, we can play with epoll in the mps","width":832},{"text":"and should you find yourself in a start up of fortune 500 company that wants to write a server, that probably, if for single fortune 500 companies these days, [gibberish], has some sort of client server architecture, you might come down to which one of these should i use","width":1280},{"text":"and just remember that its actually three different versions","width":320},{"text":"here some other thoughts on your server, though, whicyh is ... for your start up","width":256},{"text":"is that why dont you do what chromium does, the browser you find in your android phone, or chrome as you download as an app, it uses a library called libevent","width":1024},{"text":"and libevent basically wraps these three things, so it provides an abstraction on top of these system calls. now we are not going to use libevent in the exams, so this is just an FYI so next you want to do your start up, check out libevent cuz ur gonna like code that runs anywhere","width":1344},{"text":"underneath it provides implementations of select, poll, epoll ... best performance on each platform","width":576},{"text":"okay","width":320},{"text":"okay, i've been throwing a lot of information to you very quickly today","width":384},{"text":"questions at this time","width":64},{"text":"okay i got a bit of news for you","width":320},{"text":"i understand its pass... for this weekend, so i'm gonna ask the tas to push the deadline of the mp back to monday night. ","width":768},{"text":"11:59 om","width":64},{"text":"okay, so 1 minute before midnight","width":192},{"text":"on monday","width":64},{"text":"[gibberish],","width":256},{"text":"so somebody sent me email and say hey, i need an extension. so i'm gonna ask the tas to make sure that theres no deadlines for this weekend. ","width":576},{"text":"okay","width":64},{"text":"[gibberish],","width":256},{"text":"okay, i'll push the one on Sunday to monday","width":192},{"text":"if you do not observe passover, you may still take advantage of this ","width":384},{"text":"if you feel its unfair to have two deadlines at the same evening, feel free to submit the first one on sunday night","width":384},{"text":"okasy","width":192},{"text":"umm","width":64},{"text":"and pretend that the extension hasn't been given","width":192},{"text":"i'm also asking the TAs to try to provide more verbose information about the mp merge, by the way, the mp merge tester runs on the VM just like yours","width":1216},{"text":"so its probably a good idea to check your vm code on your personal virtual machine. ","width":320},{"text":"ok right so","width":256},{"text":"any quick questions","width":64},{"text":"okay right lets jump into some other kind of little bits of know-how then","width":384},{"text":"so we've been making servers to listen to particular ports","width":448},{"text":"if youre just doing development, you may not care which port your server listens on. you'll just say hey just give me any port that's currently unused. ","width":832},{"text":"here's how we can do this. ","width":128},{"text":"first of all, when you call getaddrinfo, if we set up a server, obviously we wanna talk about the localhost, thats null, and just say i wannt pull 0","width":448},{"text":"which is another way to say hey, i'll be happy with any port","width":256},{"text":"well now we've got problem though, we need to find out which exact, which port number we are actually listening on","width":512},{"text":"here's how we can do this. it's something called getsockname","width":256},{"text":"sock of course stands for sockets","width":256},{"text":"as opposed to things you wear on your feet","width":128},{"text":"and this code kind of look a bit of like the code you might have been writing before getaddrinfo existed","width":640},{"text":"we have this different structs , for example, sockaddr_in, which you can think of as a version of, of a subclass of this other struct ","width":1088},{"text":"but because c doesn't support oo, we cant say hey this extends this other struct , we have to forceably type cast it","width":768},{"text":"and so there's also some interesting .. ","width":192},{"text":"anyday that you forceably type stuff you might for example to put in the ampersand here. ","width":320},{"text":"so there's some ... and not im not gonna ask this on exam, just pointing out if you are gonna developing code, that listens on any port, this is the way to do it","width":896},{"text":"you call getsockname on your socket","width":256},{"text":"and now we've formed that struct, we can figure out which port ","width":448},{"text":"there's just one little gocha here","width":64},{"text":"if we try to use this value directly, we are going to be in a world of pain","width":448},{"text":"why","width":128},{"text":"one important thing we have to do to this particular value if you wanna know the port number","width":64},{"text":"okay, lets go back to the beginning of the lecture","width":320},{"text":"hello everybody welcome to friday and dont forget what do you think H2NS means","width":384},{"text":"and network to host means. remember those little functions?","width":384},{"text":"ya, thses c structures are the c structures to do with hey, the bytes we trying to send to the network card ","width":576},{"text":"the port number that is represented inside this struct is not really an integer, like we like to think of it like an integer that's on our cpu. ","width":640},{"text":"so if we actually want an value of this entry, we've got to convert it. ","width":320},{"text":"so dont forget to call, network to host (ntohs)","width":768},{"text":"and that will give us back an integer value that is actually the integer of the port","width":256},{"text":"so, next time you hate your lab partner, just walk over and delete that code, and what you are trying to connect to the wrong port for the rest of discussion section","width":704},{"text":"so that's a little .. to that","width":320},{"text":"no one will tell you that you've forgot to convert integer to the right value, other than the fact that we trying to connect to the incorrect port","width":320},{"text":"the other thing you might wanna do is who is connecting to your server. ","width":320},{"text":"here s how we can do that","width":128},{"text":"remember this accept call, the thing that blocks waiting for a client to connect, well remember how it gives a new file descriptor","width":640},{"text":"well we can now pass in a pointer of struct, very similar code here, hey i've got a c struct, please fuill it in. and if you do that, it will tell you information about the remote client. it won't tell you their log in name, but we can find out things like their ip addresses and their port number.","width":1536},{"text":"so for example, if you dont like the remote client, why not send him a thousand packets back to them and try to shut down their machine and set it to another service. ","width":448},{"text":"no dont do that for real","width":128},{"text":"unless you happen to be the US government","width":128},{"text":"ok so we've got the information, we now want to print something out","width":384},{"text":"here's how we can do it. you can say ok turn this number to an ascii value, and then that will turn it into an ip full adress like 128.0. we can see that. and also with the port number, oh look here we go again, dont forget to convert that struct entry into a real number. ","width":1408},{"text":"and then we'll print it out","width":64},{"text":"ok","width":128},{"text":" so lets see that as a demo","width":256},{"text":"so i'll go to server2, lets see if it works. ok right","width":832},{"text":"righ so ","width":256},{"text":"i got my code now, its just picks an arbitrary port number that is available, and let me try connecting to that. oh well actually why dont you see if you can connect to it. if anyone got their lap top open, you can telnet that to 172 17 248 187 and see if someone connects to it","width":1472},{"text":"port number","width":128},{"text":"so okay, fantastic","width":320},{"text":"i got your address, so i can turn it back to you, for example. ","width":448},{"text":"let's see if you are running anything on port 22","width":448},{"text":"no your not. okay so can't hack into your machine today","width":192},{"text":"nvm","width":64},{"text":"okay, so that's what you need for your next mp, and to make your next billion dollar start company of course this buff underpins web servers, it underpins company called youtube, you may have heard of it, it started by undergraduates here","width":1088},{"text":"it started, well, where are we in, siebel center","width":128},{"text":"right, netowkring, this is what it all abotu","width":192},{"text":"being able to connect multiple machines, together and we've seen the basic socket calls that do all this","width":320},{"text":"alright, so for the remaining part of the lecture, lets say good bye to netwokring and talk about a different system programming topic. ","width":960},{"text":"are you ready?right page 2","width":128},{"text":"okay so today couple of quick comments, yes we have a quiz on monday, its gonna topics we haven't talked about. ","width":704},{"text":"for a while","width":64},{"text":"remember virtual memory?","width":384},{"text":"do you remember page tables","width":128},{"text":"translation looks like buffer","width":128},{"text":"no okay well dont worry, now will be a good time to learn","width":192},{"text":"i will send out a practice quiz","width":192},{"text":"in the near future","width":192},{"text":"remember pipes, do you have to use fseek, ftell, fpause","width":320},{"text":"and finally we got the dining philosophers concurrent problem and also the ... concurrency problem","width":512},{"text":"so they will be in it too","width":256},{"text":"so expect that quiz on monday","width":192},{"text":"in lecture","width":64},{"text":"any questions","width":192},{"text":"no questions, okay","width":640},{"text":"alright then, so talk abotu a new topic","width":704},{"text":"scheduling. you already know, as a student, a lot about scheduling","width":448},{"text":"probably the scheduling algorithm you are most familiar with is called earliest deadline first","width":512},{"text":"yes?","width":320},{"text":"like, my chem homework is due, its due in ten minutes, [gibberish], right?","width":256},{"text":"ok so this is a problem of just how efficient can we be ","width":576},{"text":"can we, most users are cpu resources or other system resources to get as much work done as possible","width":640},{"text":"well it turns out of course earliest deadline first is actually not the best algorithm, because we spend a lot of time flipping from one piece of work to another piece of work","width":704},{"text":"and so we actually have additional latency  involved with these context switches and with scheduling all these work","width":640},{"text":"so for example if you find yourself constantly updating your calendar, to say oh im going to do this, and do this, youve chosen a inefficient scheduling algorithm","width":576}]