[{"text":"alright so here's what these two lines do","width":192},{"text":"they're basically saying hey operating system, I need some extra bytes","width":256},{"text":"heres how many","width":128},{"text":"talking to your operating system is very slow","width":192},{"text":"thats gonna take several microseconds to complete","width":192},{"text":"and then we're gonna say here, chosen","width":448},{"text":"im going to set this pointer to be sbrk and then call sbrk on size","width":256},{"text":"guess what that does. that also says to the operating system i need now size bytes","width":320},{"text":"they're actually calling sbrk 4 times","width":256},{"text":"to say alright give me some byte not only for the struct but give me some bytes in order for to satisfy the users request","width":448},{"text":"and what we're doing with the asterisk each time is raising the rule to mar raising the threshold for where our heap finishes","width":512},{"text":"so now we're gotten set up our little struct","width":192},{"text":"we'll set it's size","width":192},{"text":"we'll set that it's free","width":128},{"text":"and we'll set the next pointer to equal to metadata and we change the metadata chosen to the pointer","width":448},{"text":"and what've doen here is insert our new entry into the beginning of the linked list","width":320},{"text":"so the next time we call free or malloc we're gonna see this newly created entry inside our linked list","width":576},{"text":"and then finally we say back to the user here's the memory of size bytes that you needed","width":384},{"text":"questions about this code?","width":640},{"text":"yes","width":256},{"text":"if chosen is bigger than the amount of space that you need","width":832},{"text":"yes","width":64},{"text":"so","width":128},{"text":"what this code does not do","width":192},{"text":"is do anything without spare space","width":192},{"text":"it's got a very simple view of the world","width":256},{"text":"its view of the world is","width":64},{"text":"yeah i've got a block here that was previously allocated, a block here, some memory here","width":384},{"text":"and if you want to say to this first memory then it's obviously not going to give you that and it would give you say this block","width":768},{"text":"and youd say well what about this space back here","width":256},{"text":"can we use that","width":64},{"text":"should we add another entry because maybe in the moment someone will malloc and attempt to make a smaller space","width":384},{"text":"ah too bad","width":64},{"text":"okay so we've got some fragmentation inside each of these allocations","width":448},{"text":"if we dont have a perfect fit","width":64},{"text":"yes","width":512},{"text":"ah right","width":512},{"text":"okay","width":64},{"text":"so","width":64},{"text":"before this line","width":128},{"text":"we've got metadata","width":256},{"text":"pointing to our first entry","width":256},{"text":"yes this is my little struct now","width":320},{"text":"which then has a next pointer with points to another with has a next one which opints to a nother one","width":256},{"text":"and so on and so on and so on","width":128},{"text":"so what we do","width":128},{"text":"is ","width":64},{"text":"we set up our new struct","width":192},{"text":"so its next pointer ","width":256},{"text":"points to the old beginning of the linked list","width":448},{"text":"alright so when you see equals","width":128},{"text":"just remember when you see equals","width":192},{"text":"your copying bit patterns","width":64},{"text":"you're just changing one pointer to look at the same thing as aanother pointer","width":320},{"text":"and then the next line is meaningful","width":192},{"text":"that we've changed that variable metadata","width":64},{"text":"to look to our new link","width":192},{"text":"any other questions","width":832},{"text":"alright then","width":256},{"text":"so","width":64},{"text":"okay yes","width":896},{"text":"get your spectacles on","width":128},{"text":"i did this too small today and it was tiny","width":128},{"text":"when can a system use COW","width":320},{"text":"moooo","width":64},{"text":"that's a moot point","width":128},{"text":"no","width":64},{"text":"COW","width":64},{"text":"cow stands for copy on write","width":256},{"text":"here's the idea","width":256},{"text":"you now can share a resource","width":192},{"text":"providing neither of us actually tries to change it","width":256},{"text":"and we can do that very quickly","width":256},{"text":"well the day that one of that you and i actualy need to write to that resource, that's when we're asked to duplicated it","width":384},{"text":"we'll do it very quickly before the other person notices","width":384},{"text":"so you can defer the actual copying process, the duplication process, until a change or modification happens","width":512},{"text":"ah this is a common idea for performance because quite often it turns out that we don't actually need to write to something or modify something","width":896},{"text":"so if you can detect when something is about to change","width":64},{"text":"maybe you're writing an alloc class or youre the operating system","width":256},{"text":"we dont actually need to initialize stuff or copy stuff until it actually is required","width":448},{"text":"and so","width":128},{"text":"a little brain teaser i have to today","width":320},{"text":"is how can we improve calloc performace here","width":256},{"text":"so COW is just copy on write","width":128},{"text":"so its a way to have shared data structures until something mutable happens","width":704},{"text":"until a change happens, and that way, we can use our resources efficiently","width":384},{"text":"well lets just see what you remember from previous lectures","width":320},{"text":"what's realloc","width":64},{"text":"it's when you change your mind","width":384},{"text":"oh okay remember those bytes i malloc, actually i decided i need more bytes","width":384},{"text":"so we can use malloc when i say i'm creating an array","width":320},{"text":"and i keep going around an array","width":128},{"text":"and i decide to say remember that array i made","width":128},{"text":"turns out it's not large enough","width":128},{"text":"okay so realloc works but there's a big caveat","width":256},{"text":"as youve just seen how malloc actually places things","width":384},{"text":"it could be that we can't keep the user data inside the same memory address anymore","width":256},{"text":"so when you call realloc be prepared to update your pointers with the return result of realloc","width":448},{"text":"so i've got an array","width":64},{"text":"that i previously created say from realloc or malloc or calloc","width":384},{"text":"then don't just say you know what im gonna make it larger","width":448},{"text":"i'm gonna make it say 100x 100 entries larger","width":704},{"text":"infact, let me just change this code a little bit","width":448},{"text":"let's say that ","width":128},{"text":"you called calloc","width":128},{"text":"and","width":64},{"text":"i've got like a size of thing","width":256},{"text":"something","width":128},{"text":"and i've got like 50 entries here","width":192},{"text":"and then you say you know what actually 50 wasn't enough","width":448},{"text":"im going to double my space","width":128},{"text":"i've just managed to write two errors in 2 lines","width":256},{"text":"actually both of those were in the second line","width":320}]