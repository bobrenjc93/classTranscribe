[{"text":"right so yeah learning is hard I'm sorry if I knew a way to do the matrix for instance I know how to do systems programming, that would be fantastic but we can't do that just yet","width":576},{"text":"right so let's have a look at one of these problems today and this will actually help with the [something] of the homework","width":512},{"text":"which is perhaps you can do this, I'll give you the answer in a moment, perhaps you should be able to do this, this is actually based on a final exam question","width":448},{"text":"remember the bitwise operators? these are not the logical operators, these are bitwise operators so we can use ampersand & for masking for example this is or | left << and right shift >>","width":640},{"text":"or right shift and left shift","width":192},{"text":"and so we want to use these to write some pseudocode as to how the hardware works right? can we actually write some C like code that would convert a pointer","width":512},{"text":"here it is here's my little pointer to one byte","width":192},{"text":"and determine the page number and the offset","width":192},{"text":"right so this shouldn't be too hard if you know your bitwise operators","width":320},{"text":"I'll give you just 30 seconds for you and your neighbor to have ag o","width":320},{"text":"[silence]","width":4992},{"text":"okay so here's the plan, we think of our virtual memory address in terms of two halves","width":384},{"text":"the lower bits will be our offset and we're just going to ignore those for a moment","width":320},{"text":"they'll come back to play at the very end when we add them back in","width":192},{"text":"and we've got a page number as well so the upper bits are our page number","width":192},{"text":"right so we can use our bitwise operators to extract this from our single pointer","width":384},{"text":"for the offset we want to write a mask so that we only see the lowest bits","width":320},{"text":"so we're going to say pointer","width":256},{"text":"& and now I want something that represents the twelve lowest bits, in other words if I was writing in binary it'd be 1 2 3 4 1 2 3 4 1 2 3 4","width":832},{"text":"so that would be my binary representations and all the upper bits would be zero","width":256},{"text":"right can I convert that into hexadecimal","width":192},{"text":"remember hexadecimal each hexdigit corresponds to four bits right?","width":576},{"text":"so we should and it with 0xfff","width":448},{"text":"and the upper bits of this number are all zeroes","width":576},{"text":"right what about the page number?","width":448},{"text":"I want to take these bits and shift them to the right twelve times","width":384},{"text":"well I could divide by four thousand ninety six","width":320},{"text":"but instead why don't we just shift","width":128},{"text":"there we go so now I've got my page number","width":512},{"text":"if my hardware implemented a single level page table","width":320},{"text":"I could then use this to look up an entry inside that single level page table","width":192},{"text":"that would give me what?","width":128},{"text":"what's it called?","width":192},{"text":"what do we get when we look inside the page table?","width":448},{"text":"the frame! yes the physical frame","width":128},{"text":"so if I still use this, look it up inside the page table, I get a physical frame","width":448},{"text":"if I take that frame, I can now combine it with the offset to give me the actual address","width":448},{"text":"so the final address..","width":192},{"text":"would be...","width":256},{"text":"take the frame shift it...","width":256},{"text":"left by twelve, put it into the right place","width":256},{"text":"and or it or add in the offset","width":256},{"text":"and that would give me the actual RAM address, the actual piece of RAM that I want to read or write to","width":704},{"text":"of course we're writing C code, my assumption is that our hardware engineers are not writing C code, they are probably writing very [something] vhgl or some other lower level hardware language","width":768},{"text":"alright so let's see if you can play with page tables then for this little example","width":512},{"text":"here's a virtual address","width":128},{"text":"this time I've got eight bit pages, they're tiny, and the following page table","width":512},{"text":"so using this, what is the physical address associated with this virtual address?","width":320},{"text":"so we're going to have to take this address and cleave it into a page number and a offset","width":768},{"text":"[silence]","width":1024},{"text":"and the answer is...","width":128},{"text":"it's a trick question, you can't answer it yes? because...","width":384},{"text":"where's the offset going to be? the offset is going to be the lowest eight bits","width":320},{"text":"so the upper hexadecimal digits are your page numbers","width":320},{"text":"and I didn't give you...","width":128},{"text":"enough entries of this table, its somewhere off here","width":320},{"text":"so I didn't actually give you this particular entry","width":448},{"text":"right so let me stencil it in, so somewhere deep, much lower in the page table, there happens to be entry number 010203","width":512},{"text":"and if we were to look up there and we found an address like...","width":384},{"text":"BAAD","width":320},{"text":"now you can tell me the actual physical address, I've got to take this and combine it with the original offset","width":640},{"text":"so in other words, the final address will be BAAD04","width":512},{"text":"would be our physical address","width":320}]