[{"text":"Alright so let's run it let's actually see let's actually watch this deadlock","width":384},{"text":"here we go","width":64},{"text":"alright im just gonna make it a little bit faster","width":192},{"text":"im going to ","width":128},{"text":"instead of sleeping for so many seconds im gonna do microsleep","width":320},{"text":"because we want deadlock to happen right there in a few seconds","width":256},{"text":"right so here we go","width":128},{"text":"there you go see! it's working. deadlock!","width":448},{"text":"We show that theoreticlally deadlock is possible","width":896},{"text":"but it doesnt seem to be happening!","width":64},{"text":"Our test is good! We should deploy this to our google servers and run our email system based on this code.","width":704},{"text":"So hang on we showed that deadlock is possible, why didn't it happen?","width":448},{"text":"Yeah, you have to be really unlucky.","width":320},{"text":"Just how unlucky?","width":128},{"text":"Right, and it ran for 40 seconds and we've just proved that our code is great.","width":256},{"text":"No, we didn't/","width":128},{"text":"We can only prove that the stuff is good or bad by actually reasoning about it","width":320},{"text":"so let's see if we can force it to have a deadlock","width":384},{"text":"how could we try to force to have deadlock? well we need to make the chances of circular wait to be much greater","width":384},{"text":"and right now, ","width":128},{"text":"we grab one lock and we grab the other one","width":512},{"text":"so let's make it so that we'll grab our left fork, we'll wait for a little bit, and then we'll grab the right fork","width":384},{"text":"alright so im between these two locks","width":192},{"text":"im going to increase the percentage time that my system is doing hold and wait","width":320},{"text":"so im increasing the probability that we're gonna have a circular wait during this time","width":384},{"text":"so let me put in a number here like say","width":256},{"text":"10 microseconds","width":192},{"text":"right we'll run this","width":64},{"text":"still no deadlock! [jibberish] when I played with this earlier, so that's fascinating. right this is a hard demo","width":512},{"text":"so then i tried, okay well let's try making it rounder","width":320},{"text":"so i'll do say rand mod 10","width":256},{"text":"and that still didn't work","width":64},{"text":"oh okay 20, okay well that didnt work","width":192},{"text":"but when i did 60, now we're much more likely to have deadlock","width":384},{"text":"so let's, actually no, i managed to get it to work with 30, so","width":192},{"text":"okay so here's one possibility is that now by making it long enough there's a chance it might deadlock straight away","width":448},{"text":"because all five threads started and all five threads ended up doing those two tries and getting to the point where they all decided to say \"oh no, forget this. i'm gonna just not use try lock anymore, i'm gonna call lock\"","width":832},{"text":"right so if we made that time period long enough, there's a chance it might deadlock straight away. but it doesn't always happen, right?","width":512},{"text":"so it could be that... okay there we go","width":192},{"text":"this managed to break eventually ","width":128},{"text":"Okay","width":192},{"text":"so, that was kind of a deadlock and what i have shown you is real code for dining philosopher's and also this idea that just simple testing is not enough to prove that your mutex locks and your other stuff is correct","width":1088},{"text":"we gotta reason about it carefully and","width":64},{"text":"and then proving it does work is also kind of difficult. you actually have to show... you have to expand the time where hold and wait and circular wait actually might happen","width":768},{"text":"otherwise, a simple like minute test or 40 second test is not enough to prove that your code is correct","width":512},{"text":"questions about this?","width":64},{"text":"Okay, right. So, a couple of comments","width":448},{"text":"first of all, there is no prep for section this week","width":192},{"text":"because the MP is out","width":192},{"text":"Well, there will be some stuff in the section","width":256},{"text":"We'll probably give you some things to play with with dining philosopher's","width":384},{"text":"I'm gonna write section stuff today","width":192},{"text":"but there's nothing to prepare for, for section","width":192},{"text":"right,","width":256},{"text":"now i've gota  challenge for you","width":256},{"text":"time for the fat wallet challenge, okay so do I have my wallet with me? Haha, I don't have my wallet with me","width":640},{"text":"Can I borrow this?","width":128},{"text":"Right, say this is my wallet","width":128},{"text":"Alright","width":64},{"text":"Actually, I need something","width":256},{"text":"here we go right","width":64},{"text":"right, this is my wallet, okay, it's got, I don't like it to be empty","width":256},{"text":"It's also there's a constraint on the number of items I can actually put in this","width":256},{"text":"So I've got some functions where I can add and remove things from my wallet","width":576},{"text":"Here it is","width":320},{"text":"And I can define some constants like hey I never want to be less than zero or greater than 100","width":768},{"text":"I wrote about money because we like to think about money but it doesnt have to be money","width":256},{"text":"so I want to keep this variable always within those bounds","width":256},{"text":"always at least zero and always 100 or less","width":320},{"text":"But here's the exciting thing","width":256},{"text":"This is hints for the next MP! Right, for the MP that's currently out, if we can reason about this, maybe you can do well on the MP","width":576},{"text":"Right,  and here's a challenge then:","width":128},{"text":"So, I've written or sketched out how these functions should work","width":320},{"text":"If I didn't know about synchronization","width":256},{"text":"So, if you try and remove something from this wallet","width":320},{"text":"If you want to remove a certain amount","width":256},{"text":"First of all, don't do it","width":192},{"text":"While I shouldn't quit and if the money minus a certain amount is less than min, do nothing!","width":576},{"text":"spin, spin, spin","width":64},{"text":"so it's just a busy loop","width":64},{"text":"Right, busy loops are bad, they burn up CPU time","width":320},{"text":"And our CPU could be spent doing other things instead","width":256},{"text":"Well finally, okay, if we dont want to quit, so if quit is still zero, then actually subtract it","width":448},{"text":"Okay, add works the same way, if the money is greater than the amount, then spin spin spin spin spin and just wait","width":384},{"text":"And finally add it to the amount","width":320},{"text":"Right, being seasoned CS 241 students, you can immediately see \"oh we've got a potential race condition here\"","width":384},{"text":"right, if i've got two threads calling remove or a thread calling remove and a thread calling add at the same time,","width":512},{"text":"then, I've got all sorts of race conditions like this negative equals and plus equals they're not actually atomic operations","width":384},{"text":"It could be that you read a stale value of money because another thread is updating it at the same time","width":320},{"text":"There's another race condition that ","width":192},{"text":"The value I read it in here is protected so another thread could be changing the value","width":576},{"text":"before I get to subtract it","width":256}]