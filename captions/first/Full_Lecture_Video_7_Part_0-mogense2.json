[{"text":"Ok, it's 11 o'clock. Good morning class how are you?","width":704},{"text":"Alright how's your shpar looking?","width":192},{"text":"I imagine some of you are celebrating that shpar is finished.","width":256},{"text":"Except of course you know it's not,","width":128},{"text":"because what we expect you to do now is actually not just make code that appears to work, but code that you are proud of.","width":448},{"text":"Code that is probably commented, code that has nice variables, code that you give someone else and they could maintain it.","width":384},{"text":"Some of the worst things about writing sloppy code is someone has to come back to you and say,","width":256},{"text":"\"What was this going on here?\" \"I have no idea I wrote that yesterday.\"","width":192},{"text":"Now's your chance to put your coding skills to test, not just to make something that works, but to make something that works well.","width":576},{"text":"And we'll do a finally code review next week on Thursday.","width":256},{"text":"We'll have some other things for you to do before that, but we'll announce that via email. ","width":384},{"text":"Here's what we're going to talk about today. We're going to talk about using threads.","width":384},{"text":"Threads are cool because we can now make our single process do multiple things.","width":384},{"text":"And threads are cool because they allow multiple threads to share the same memory and the rest of the state of your process.","width":576},{"text":"So if you've opened a file descriptor in one thread, you can use it inside another thread.","width":384},{"text":"The exciting thing happens, though, when you have to wait for one thread to complete something.","width":256},{"text":"And for that, we need to worry about synchronization.","width":320},{"text":"And that's what sets your programming apart from things you've seen inside CS 225 and 125, earlier courses and other people that might have just picked up some programming.","width":640},{"text":"The ability to work with multiple threads correctly so that it always works when not just ten users are on your website, but a thousand users are on your website","width":512},{"text":"or you've got multiple CPUs inside your tablet, or your phone, or your watch, then that's where synchronization comes in.","width":512},{"text":"But anyway, let's get started. Little question, little memory question for you.","width":320},{"text":"My thread calls pthread twice, pthread_create twice, how many stacks does my process have?","width":896},{"text":"Ok, let's pick someone at random. Hi! What's your answer?","width":384},{"text":"If you said one, guess again.","width":384},{"text":"Any advances on one?","width":256},{"text":"If you said two, thanks for playing, but almost correct, off by one.","width":320},{"text":"It's three! Why?","width":320},{"text":"Thank you, yes! We get a thread for free at the beginning.","width":448},{"text":"One thread must be calling main, our CPU must be executing code at main","width":320},{"text":"All we did by calling pthread_create twice is we got ourselves two additional threads.","width":384},{"text":"And remember, each thread needs a stack. Why?","width":320},{"text":"Well we're calling functions. We have to put those automatic variables somewhere.","width":192},{"text":"And, when we return from a function, we have to remember where we're going to go back to. So again, that goes on the stack.","width":384},{"text":"So for each thread there is a stack and we have three threads in our process.","width":512},{"text":"So if my code called created twice, that means I could be doing three things at the same time.","width":448},{"text":"Ok, so I've been talking about processes for quite a bit, and talking about threads. What are some of the differences between them?","width":640},{"text":"Which is bigger?","width":128},{"text":"A process, yes. How much bigger?","width":384},{"text":"It's HUGE! Our process is a massive object!","width":192},{"text":"It's got file descriptors. It's got a big virtual memory space.","width":448},{"text":"Threads are tiny. they live inside a process.","width":256},{"text":"If you killed a process, that's it for all of your threads. They don't have anywhere to run anymore.","width":512},{"text":"So your process represents the sandbox. Everything that your threads can do will live inside a process.","width":448},{"text":"So our process has security.","width":448},{"text":"It's got virtual memory.","width":128},{"text":"It's got an exit status.","width":256},{"text":"Threads live inside a process, and they just represent what you want the CPU to do.","width":576},{"text":"They represent the code, the position in the code that is currently being executed.","width":512},{"text":"So that means if you kill a process, ha ha that's it. All of your threads are done.","width":256},{"text":"So if you send, say, an alarm signal to your process, all of your threads will disappear.","width":640},{"text":"If the process disappears, all of them have gone. This is an important point. They just live inside.","width":576},{"text":"So if we've created all these threads, perhaps we want to stop them.","width":320},{"text":"Guess what, you can do that and here's what you'd call. You'd call pthread_cancel.","width":448},{"text":"Let's have a look at pthread_cancel.","width":192},{"text":"How could I cancel a thread?","width":192},{"text":"Easy, just send in that id that we got from pthread_create and you can cancel a thread.","width":512},{"text":"I don't want to spend too much time on this because, in practice, no one bothers to use this.","width":448},{"text":"Here's why. Imagine you are making a fantastic meal for Friday night your potential boyfriend, girlfriend, dog is coming over,","width":832},{"text":"and your cooking like a storm here. And then suddenly, BAM! your activity is cancelled.","width":384},{"text":"The kitchen is in complete disarray. It hasn't been cleaned up. What a mess!","width":320},{"text":"It's extremely rare that we can just cancel something and not have to clean things up.","width":320},{"text":"So what examples might we have.","width":128},{"text":"Well let's say you have a thread that's kind of calculating new digits of pi, or discovering prime numbers,","width":576},{"text":"or trying to mine bitcoins like you've come up with a new currency called CS241coins or something.","width":448},{"text":"You can probably cancel that. It was just a CPU intensive job.","width":256},{"text":"But if there's any kind of resources, then maybe we shouldn't just call this cancel and leave everything in disarray.","width":448},{"text":"So in practice what we tend to do, actually make a variable to tell our threads, \"Oh by the way, you should stop at some point.\"","width":576},{"text":"And if you call this pthread_cancel, things don't even stop immediately.","width":256},{"text":"Typically they will stop when that particular thread makes a system call, like open or read.","width":384},{"text":"We can discover all of the calls just by looking at the man pages.","width":256},{"text":"So this will be like the moment that your chef opens the oven door we say, ","width":320},{"text":"\"ok, you're out of here, we've quit you, we've cancelled you, no more work for you.\"","width":320},{"text":"So what a mess. We don't tend to do that.","width":192},{"text":"So let's write something that can be cancelled.","width":320},{"text":"We want to call pthread_create. What do we pass in? A pointer to our little identifier.","width":320},{"text":"We don't need any parameters. What's next? Oh yes, the function.","width":320},{"text":"I called it my funct, and an initial value. Let's just pass in NULL to begin with.","width":448},{"text":"And this will go on forever.","width":384}]