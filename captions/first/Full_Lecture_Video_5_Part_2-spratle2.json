[{"text":"So malloc() by itself cannot do that.","width":320},{"text":"Java does a little trick here, by the way.  What Java does is its pointers are actually pointers to pointers.","width":1088},{"text":"So remember when you had a pointer to something, like an object pointer?  And next time someone says, \"But there are no pointers in Java!\"  And then you say to them, \"Well why does Java have a 'null pointer exception?\"","width":1088},{"text":"So how does this work internally?","width":384},{"text":"This pointer points to a pointer which points to the actual memory that Java's using.","width":704},{"text":"Why does Java do that?  So that it can shuffle things around.  So that it can deal with this fragmentation problem.","width":640},{"text":"So here's what we're trying to solve here is fragmentation.","width":512},{"text":"And the reason I mentioned this thing about Java is because when you are using the JNI, on the Android NDK, you are going to discover that you have to pin and release things.","width":1344},{"text":"As part of your C code.  And what you're doing is you're saying (to this intermediate pointer), \"Oh no no no, I've got a bunch of C code right now that is using this data, so you can't start moving these things around.  You can't shuffle this block of memory around right now because my C code is using it.\"","width":1600},{"text":"So Java uses a counting mechanism to note that C code is currently using these pointers and can't shuffle the memory contents.","width":832},{"text":"You'll discover this stuff when you start working on the Android NDK challenge.","width":384},{"text":"So our game then is to try to avoid this fragmentation.","width":576},{"text":"This fragmentation's bad, right?  Now we have memory that we can't use for large allocations.","width":384},{"text":"Our game is also to do this efficiently.","width":256},{"text":"Here's where we're gonna look at three little problems.","width":512},{"text":"So this is actually an exam question.  It's one of the easier exam questions.  And what we're gonna do is forget for a moment this whole stuff about sbrk() and going back to the system to get more memory.","width":1344},{"text":"We'll just say that we've got a heap initially of 13 KB.","width":320},{"text":"And we've got an order of calls.","width":640},{"text":"So as new calls come in, we can decide where to put them.  And here's three different placement strategies.","width":1088},{"text":"Best fit, worst fit, and first fit.","width":256},{"text":"And we'll see as we do this that they lead to different assignments, that our malloc() will decide to place these requests in different parts of memory and so we'll have different fragmentation so that if our program continued, we might discover that future large allocations are impossible.","width":1600},{"text":"So what do we need to know about this?","width":320},{"text":"First of all, if you've got a choice, you choose the earliest segment.","width":576},{"text":"So what that might mean is let's say with best fit, let's say I've got space here of 2 (which happens to be a perfect fit; in other words, I'm trying to find space for 2 K, then I would just choose the one with a smaller memory address.","width":1536},{"text":"Worst fit.  Oh, how contrary can you be?  The idea here is that if I've got a space which gives me the maximum amount of space after I've done the allocation, I'll use that.","width":1728},{"text":"Okay, so let's have a look at worst fit, where I've got a 2K space here and a 10K space there and I'm trying to allocate 2 KB.","width":832},{"text":"Worst fit would not put it in this spot here, it would break apart this 10 KB space and say, \"I'll tell you what: here's how we'll change.  I'll allocate my 2 KB there, giving me a remaining space of 8.\"","width":896},{"text":"What do you think first fit does?","width":512},{"text":"Pretty obvious, right, from it's name.  We're simply going to walk along our free spaces until we find the one which is sufficiently large, and use that.","width":832},{"text":"So if I'm looking for 2K, oh look!  There it is, I'll use that one.  If I'm looking for 3K, oh, it's not gonna work for me, I'll have to keep searching.","width":896},{"text":"So they're very obvious placement strategies (from their names).  Now, it's up to you to actually run them.","width":896},{"text":"So here's the actual order of calls to malloc() and free().  Where do the allocations end up?","width":320}]