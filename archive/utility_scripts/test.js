/** Copyright 2015 Board of Trustees of University of Illinois
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
[]
[ '../captions/second/Full_Lecture_Video_13_Part_0-sshan7.json',
  '../captions/second/Full_Lecture_Video_13_Part_1-sshan7.json',
  '../captions/second/Full_Lecture_Video_13_Part_2-sshan7.json',
  '../captions/second/Full_Lecture_Video_13_Part_3-sshan7.json',
  '../captions/second/Full_Lecture_Video_13_Part_4-sshan7.json',
  '../captions/second/Full_Lecture_Video_13_Part_5-sshan7.json',
  '../captions/second/Full_Lecture_Video_13_Part_6-sshan7.json',
  '../captions/second/Full_Lecture_Video_14_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_4-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_21_Part_6-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_4-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_22_Part_6-omelvin2.json',
  '../captions/second/Full_Lecture_Video_23_Part_0-sshan7.json',
  '../captions/second/Full_Lecture_Video_23_Part_1-sshan7.json',
  '../captions/second/Full_Lecture_Video_23_Part_2-sshan7.json',
  '../captions/second/Full_Lecture_Video_23_Part_3-sshan7.json',
  '../captions/second/Full_Lecture_Video_23_Part_4-sshan7.json',
  '../captions/second/Full_Lecture_Video_23_Part_5-sshan7.json',
  '../captions/second/Full_Lecture_Video_23_Part_6-sshan7.json',
  '../captions/second/Full_Lecture_Video_24_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_24_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_24_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_24_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_24_Part_4-omelvin2.json',
  '../captions/second/Full_Lecture_Video_24_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_24_Part_6-omelvin2.json',
  '../captions/second/Full_Lecture_Video_26_Part_0-sshan7.json',
  '../captions/second/Full_Lecture_Video_26_Part_1-sshan7.json',
  '../captions/second/Full_Lecture_Video_26_Part_2-sshan7.json',
  '../captions/second/Full_Lecture_Video_26_Part_3-sshan7.json',
  '../captions/second/Full_Lecture_Video_26_Part_4-sshan7.json',
  '../captions/second/Full_Lecture_Video_26_Part_5-sshan7.json',
  '../captions/second/Full_Lecture_Video_26_Part_6-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_0-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_1-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_2-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_3-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_4-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_5-sshan7.json',
  '../captions/second/Full_Lecture_Video_29_Part_6-sshan7.json',
  '../captions/second/Full_Lecture_Video_30_Part_0-omelvin2.json',
  '../captions/second/Full_Lecture_Video_30_Part_1-omelvin2.json',
  '../captions/second/Full_Lecture_Video_30_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_30_Part_4-omelvin2.json',
  '../captions/second/Full_Lecture_Video_30_Part_5-omelvin2.json',
  '../captions/second/Full_Lecture_Video_30_Part_6-omelvin2.json',
  '../captions/second/Full_Lecture_Video_6_Part_2-omelvin2.json',
  '../captions/second/Full_Lecture_Video_6_Part_3-omelvin2.json',
  '../captions/second/Full_Lecture_Video_6_Part_6-omelvin2.json' ]
// Part 0
[{"text":"...","width":10883},{"text":"Good morning! If some of you don't know who  I am, I'm Robin Kravets. I'm a professor in the CS department. I have taught CS241 many times in the past although Lawrence Angrave has taken over and I don't get to torture you guys anymore. So it's not as much fun anymore. But he is out having fun in warm sunny California for the next two classes which means you are stuck with me. For better or worse","width":2066},{"text":"Anyway, he gave me all the information to teach you guys. I didn't even have to give you the quiz that was done already. So we are going to focus today on some of the synchronization problems that he started on. ","width":924},{"text":"And get through hopefully deadlock on Wednesday. ","width":292},{"text":"So he left you talking about the reader-writer problems, producer-consumer problems, and one of the things that was assumed was that to make these entities talk to each other that there is some shared space between them. And I don't think there was any restrictions put on how he told you what this space would be. So in the best of all worlds we might just have an infinite buffer where we have somebody put some data in on one side and somebody taking it out on the other side and I could infinitely put in as much data as I want and take out as much data as was put in","width":3243},{"text":"But in reality we know that infinity is never infinity. We can't implement infinity in a system","width":598},{"text":"So what we want to talk about today is understand what kind  of data structures and what kind of resources we can use to implement these shared data applications.","width":749},{"text":"So where one application is writing into a buffer and another application is reading from a buffer.","width":340},{"text":"...","width":5088},{"text":"So if we're dealing with entities where we have a producer and a consumer ","width":990},{"text":"And they are putting data into some buffer and the consumer is taking data out of there. What kind of limitations do we have if we're going to implement in this way? What's the first thing?","width":1783},{"text":"Well at some point once I've filled up the queue I can only take things out as fast as the consumer is consuming them","width":544},{"text":"Vice versa I can only consume as fast as they're produced. But this is not an infinite buffer","width":461},{"text":"So what happens is the producer puts something in and puts a couple of things in and now the consumer is going to take them out","width":1207},{"text":"And we put some more things in","width":312},{"text":"Now I want to put something else in. What do I do?","width":227},{"text":"I've hit the end of my buffer","width":417},{"text":"We can rotate around and wrap","width":197},{"text":"So let's let the producer now say let's go all the way back there and I can put my next thing in here","width":576}],
// Part 1
[{"text":"you can think of this buffer as something that we call a ring buffer","width":720},{"text":"where it's not you've kind of taken the two ends of the buffer that we're using and connected them on the other side","width":567},{"text":"so now i need to be able to put things in and take them out and i could just chase my own tail forever and never worry about running off the end","width":691},{"text":"so conceptually theres a number of things that i have to have to make this work","width":382},{"text":"so if i'm the producer what do i need to know","width":558},{"text":"what does the producer need to know","width":309},{"text":"the producer is putting things in","width":404},{"text":"it needs to be able to hit that","width":71},{"text":"so the producer","width":167},{"text":"what i filled up my ring","width":193},{"text":"ok so lets say im starting from nothing and the producer wants to put something in","width":295},{"text":"what's the first thing it needs to know","width":204},{"text":"where to put it!","width":61},{"text":"okay so let's have a pointer in here that says okay in","width":457},{"text":"im going to put it in there","width":83},{"text":"i just started some place random","width":111},{"text":"if i was smart my underlying data structure might have started right there","width":360},{"text":"yeah i wouldve wrapped the two ends","width":140},{"text":"okay so now that the producer has put something in","width":283},{"text":"what does the producer have to do","width":395},{"text":"it can't n isn't write anymore","width":181},{"text":"right you have to increment in","width":180},{"text":"to now point here","width":165},{"text":"that's where my next one would be","width":238},{"text":"so that's my producer","width":245},{"text":"what did my consumer need to know","width":239},{"text":"ill tell you it's out","width":206},{"text":"a pointer to what","width":264},{"text":"the first one that i want to take out","width":124},{"text":"so in this case it's here","width":100},{"text":"i'll make the consumer blue","width":466},{"text":"and as the consumer puts things in here, it's gonna slowly increment in","width":514},{"text":"to be there","width":190},{"text":"and as the consumer takes things out","width":460},{"text":"it will","width":98},{"text":"delete them out of the queue, out of the ring buffer althoguh i guess it really doens't matter and that's the next one to take out","width":614},{"text":"so there are two things i have to be careful about","width":104},{"text":"whats the first thing that you said before","width":131},{"text":"that i have to make sure that i dont what?","width":287},{"text":"i want to make sure that i don't overwrite data that hasn't been read yet","width":318},{"text":"my writers write, my producer is producing","width":227},{"text":"this is a big ring buffer","width":145},{"text":"i should've a smaller one","width":105},{"text":"okay i'm putting things in","width":186},{"text":"do i have to stop yet? no","width":190},{"text":"i can stop here","width":101},{"text":"but","width":118},{"text":"can i keep going?","width":113},{"text":"no","width":43},{"text":"i have to make sure i dont whoops that's in","width":189},{"text":"i have to make sure i dont overflow my buffers","width":475},{"text":"and now for the output","width":293},{"text":"for the consumer the consumer is going to start taking things out","width":552},{"text":"let's say it gets here","width":132},{"text":"it can still take that out","width":156},{"text":"but now it takes that last one out","width":378},{"text":"and now my out is here","width":121},{"text":"can it take anything out anymore?","width":155},{"text":"no","width":42},{"text":"if i allowed, if my program allowed the consumer to take something out at this point i would call that underflow","width":449},{"text":"overflow means that the producer produces too much and overwrites good data","width":295},{"text":"underflow means that my consumer is trying to take out something that's not there","width":313},{"text":"so those are two things we wnat to make sure don't happen we we're implementing a ring buffer","width":391},{"text":"so theres no underflow, and there's no overflow","width":406},{"text":"now i know you guys have done semaphores and you guys have done condition variables","width":280},{"text":"we're going to implement a solution for a ring buffer","width":192},{"text":"and of course we have a number of properties that we want to be able to have true for this solution and","width":385},{"text":"to start with we dont want any particular busy waiting","width":258},{"text":"so we want to make sure that our semaphores and condition variables are set up correctly","width":347},{"text":"and we dont have to have any kind of deadlock","width":244},{"text":"i know you guys haven't talked specifically about what deadlock means, but at a minimum it's going to mean that someone can't move forward","width":567},{"text":"so we want to be able to look at both of these things","width":199},{"text":"we want to implement a solution that can do that","width":320},{"text":"our first solution im going to give you my basic solution","width":463},{"text":"and from there","width":212},{"text":"i've been told you guys like to sit down and come up with your own solutions","width":2167},{"text":"so i'm going to give you a basic first start","width":212},{"text":"so certainly whats the first thing that we need in our globals and initilazliation variables","width":492},{"text":"what are we trying to manage","width":296},{"text":"our buffer! right?","width":95},{"text":"so we need a buffer","width":126},{"text":"so i'm going to have a ","width":524},{"text":"and im gonna say im just going to have a 16 alright","width":391},{"text":"and then i need our two variables. what were the two variables i said we needed?","width":400},{"text":"in and out","width":82},{"text":"so since they are just pointers into my data structure","width":303},{"text":"they can just be integers","width":130},{"text":"im going to have an integer in and and integer out","width":483},{"text":"where should they both start","width":512},{"text":"they start at the same place? they start at diferent places?","width":138},{"text":"they start at 0?","width":71},{"text":"what should we do","width":169},{"text":"0","width":155},{"text":"we're going to initialize both in and out to be 0","width":578},{"text":"so i'm going to give you a basic in queue and i want you to tell me if this works","width":236},{"text":"so i'm going to say for my enqueue im goign to put something in","width":798},{"text":"im going to put my value in whatever the in value is and increment in","width":562},{"text":"and my dequeue is im going to say that i have some result","width":341},{"text":"im going to save out my result becasue i want to use it later","width":192}],
// Part 2
[{"text":"uhhh","width":489},{"text":"and that's going to equal my data","width":285},{"text":"sub out","width":31},{"text":"i gotta increment my out too","width":111},{"text":"plus plus","width":180},{"text":"++","width":3},{"text":"and then i can return","width":353},{"text":"result","width":326},{"text":"so there's my solution","width":200},{"text":"very basic solution","width":163},{"text":"you guys take one or two minutes talk to your neighbors figure out what's wrong with this and how you would fix it","width":5925},{"text":"are you ready?","width":201},{"text":"ok what's the first thing wrong with this?","width":249},{"text":"or what's something wrong with this?","width":224},{"text":"i'm not checking what?","width":157},{"text":"i'm not checking the equality of in and out","width":140},{"text":"why do in and out have to be equal?","width":265},{"text":"oh i don't want to be equal","width":66},{"text":"whats going to happen if i do that?","width":269},{"text":"yeah i'm going to try to remove data that's not there if they are equal","width":225},{"text":"what else aren't i doing?","width":497},{"text":"if not if ","width":172},{"text":"so if in equals 16 or more ","width":167},{"text":"it's not that i'm overflowing, ","width":60},{"text":"what am i doing?","width":150},{"text":"i'm overwriting what","width":232},{"text":"no what happens if in == 16?","width":517},{"text":"so what's going to happen if in == 16?","width":185},{"text":"not the answer","width":154},{"text":"how big is my buffer?","width":152},{"text":"yeah, well 16","width":85},{"text":"0 to 15","width":52},{"text":"if i write","width":107},{"text":"data[16] i am going to smash somebody's memory","width":259},{"text":"so not good","width":101},{"text":"so the solution was to what","width":203},{"text":"mod","width":74},{"text":"what else could i do?","width":160},{"text":"ok so i could mod, wait wait let me write that down","width":192},{"text":"i'm going to mod it","width":330},{"text":"so what if i do","width":53},{"text":"i'm going to change this","width":153},{"text":"to say","width":120},{"text":"uh","width":344},{"text":"data[(in++) % 16]","width":781},{"text":"","width":3},{"text":"is that going to work?","width":916},{"text":"ok don't worry about the overwriting for a second","width":124},{"text":"is this going to help with my wrapping?","width":279},{"text":"is this a good solution to fixing my wrapping?","width":313},{"text":"there's one minor problem which is not so minor about this","width":196},{"text":"it'll work","width":112},{"text":"yeah","width":555},{"text":"it's going to work for a while","width":199},{"text":"and after a while what's going to happen?","width":303},{"text":"my integer's going to overflow","width":83},{"text":"actually my integer is not going to overflow","width":108},{"text":"it's just going to go negative","width":159},{"text":"and mod , if i understand correctly, can preserve the negative value","width":454},{"text":"so you're now going to get a data sub minus something","width":235},{"text":"accessing bad data ","width":127},{"text":"or just crashing","width":112},{"text":"i don't even know what the system's going to do if you put a negative value in your array","width":398},{"text":"so not the ","width":118},{"text":"it's the right idea","width":104},{"text":"you could actually be must simpler and just say","width":932},{"text":"ok","width":96},{"text":"that works too","width":142},{"text":"when i'm done","width":103},{"text":"so don't do this","width":647},{"text":"you could also if you really wanted to say n = n mod 16","width":250},{"text":"that'll work too","width":112},{"text":"but that's not even that necesasry","width":133},{"text":"you only  have to change it if it is 16","width":439},{"text":"and i have to do the same for what?","width":154},{"text":"","width":0},{"text":"for out","width":65},{"text":"so not going to write that but i have to do the same for out","width":656},{"text":"so","width":195},{"text":"we've already hit on a bunch of problems that has to do with this. and the problem is all the overwriting and","width":511},{"text":"that uh we're not being careful about wha'ts going on","width":213},{"text":"and really the challenge here is there's no synchronization","width":303},{"text":"","width":2},{"text":"i'm not synchrnoizing my readers and writers","width":444},{"text":"reader writer producer consumer enqueue dequeue","width":205},{"text":"all of the same idea basically","width":136},{"text":"what if i call enqueue twice at the same time","width":284},{"text":"is there any safety there?","width":110},{"text":"","width":2},{"text":"no","width":34},{"text":"what if i call enqeueu and dequeue at the same time","width":183},{"text":"is there any safety there?","width":100},{"text":"no","width":43},{"text":"so let's assume that ","width":218},{"text":"we use this code","width":146},{"text":"for the actual functionality for the enqueue and dequeue","width":245},{"text":"and let's add some synchronization to it so that we can protect the data from overflow","width":417},{"text":"from underflow","width":104},{"text":"and from the synchronization problem of two nodes trying to put something in the qeueue at the same time and overwriting each other","width":575},{"text":"so we have to be careful we have to make sure that ","width":220},{"text":"only one node ony one enqueue can write into the ring buffer at the same time","width":488},{"text":"i'm teaching networking this semester so if i say node just ignore me","width":256}],
// Part 3
[{"text":"gets in your brain Ok","width":151},{"text":"Solution No2","width":270},{"text":"Get that up there","width":102},{"text":"Okay!!","width":129},{"text":"I'm gonna tell you what we've got here. we've added semphores and locks","width":729},{"text":"I have two sempahores, S1 and S2","width":256},{"text":"S1 represents my spaces","width":312},{"text":"in my ring buffer","width":164},{"text":"and S2 represents the number of items the i've put in my ring buffer","width":428},{"text":"if you think about it","width":94},{"text":"If i have space, i can put things in it","width":142},{"text":"if i have items in my queue i can take things out. so, that's good. I can go initialize them and move on. so now, you guys have done semaphores, right?","width":887},{"text":"what happens to a semaphore when you do sem_wait?","width":304},{"text":"","width":2},{"text":"What does it do to the value of the sempahore","width":622},{"text":"oh did you guys talk about counting semphores?","width":232},{"text":"YEAH!!!","width":55},{"text":"if you noticed that we initialized one of these to 16 and one of these to 0","width":225},{"text":"these are counting semphores","width":108},{"text":"not just mutexes","width":146},{"text":"counting semaphores","width":90},{"text":"if i initalized it to 16, what can i do","width":245},{"text":"i can call sem_wait ","width":105},{"text":"how many times?","width":101},{"text":"15 ","width":44},{"text":"and I can call sem_post ","width":141},{"text":"if i'm starting sem_pos 16 times.","width":227},{"text":"so what it's doing is it's giving me this ability to call sem_wait, m_queue 16 times","width":396},{"text":"or dequeue 16 items","width":127},{"text":"in and of itself that's not enough to make sure I don't break my system, but that's gonna be my counters to help me decide","width":374},{"text":"how many items i have, and how many spaces i have","width":223},{"text":"So my sem_wait on this one is gonna try to decrement ","width":464},{"text":"and sem_post, increment","width":360},{"text":"sem_wait increment","width":333},{"text":"Sorry","width":64},{"text":"backwards","width":113},{"text":"decrements","width":120},{"text":"sem_post","width":126},{"text":"increments","width":195},{"text":"so take a minute and look at this, and I can tell you this doesn't work","width":442},{"text":"maybe you can tell me why. Talk to you neighbors","width":1567},{"text":"say that one more time","width":466},{"text":"Yes","width":275},{"text":"So i have initialized it to 0 but my max is 16","width":634},{"text":"s2, i've initialized it to 0 with a max of 0","width":778},{"text":"Let me double check the actual interface of Sem_wait while you're looking at this","width":3355},{"text":"Sorry, i take that back. Ignore the first zero","width":288},{"text":"so, S1 is the semaphore, the zero is just whether or not it's shared across processes","width":488},{"text":"S1 is initalized to 16 and S2 to 0","width":4536},{"text":"Obviously I should not be writing code to make airplanes fly because they're going to fall out of the sky [something]. What's wrong?","width":696},{"text":"Yeah?","width":476},{"text":"so we're calling sem_wait and sem_post on the same sempahore","width":594},{"text":"my values are gonna change","width":337},{"text":"i'm gonna decrement and increment it right away","width":194},{"text":"and, how is that gonna implement my, how is that going to affect, write my dequeue","width":698},{"text":"yeah?","width":498},{"text":"so i'm going to call sem_wait on s1, which initialized to 16, that's good I have 16 spaces","width":484},{"text":"I'm gonna put something in. I'm gonno do sem_post and that's gonna increment it, and im gonna be forever be able to put things in","width":576}],
// Part 4
[{"text":"yeah, I've got this really wrong. alright, so my dequeue, is calling S2. what was S2 intialized to ? 0","width":1078},{"text":"which is Okay, there's nothing in there","width":247},{"text":"but","width":45},{"text":"i'm never changing it so I'm never going to put anything in there","width":172},{"text":"so i'm waiting forever","width":165},{"text":"my dequeue is never getting into anything","width":102},{"text":"and my enqueue is gonan run on forever","width":198},{"text":"so if we look at our requirements","width":215},{"text":"one of the things we asked for is that have we stopped overflow from happening","width":490},{"text":"is there overflow in this example? potential for overflow?","width":503},{"text":"what was the definition of overflow","width":479},{"text":"overwriting good data with something i'm trying to put in","width":264},{"text":"do we have overflow here? Yes, because the writer is going around writing writing and writing","width":439},{"text":"do you have underflow? Not really","width":253},{"text":"Why not?","width":129},{"text":"yes because dequeue can never really take out anything","width":162},{"text":"so you can really have underflow if you can't take anything out","width":189},{"text":"so this didn't work","width":122},{"text":"what else did I want to say about this","width":316},{"text":"do we have a race condition?","width":214},{"text":"is there any race conditions in here?","width":306},{"text":"no ","width":20},{"text":"why not?","width":242},{"text":"we've got our locks. So we can only have one enqueue in there at the same time","width":347},{"text":"and our dequeue is never going anywhere so it doesn't really matter","width":412},{"text":"actually it's gonna acquire the lock and it's gonna wait, and it's gonna block everybody from doing anything","width":486},{"text":"once anyone trying to call enqueue, the whole system is gonna come to a standstill","width":359},{"text":"so, we do have a deadlock. it's not a race condition but we've got deadlock","width":386},{"text":"and we'll talk more about deadlock on wednesday","width":194},{"text":"ok so, lets' move on","width":968},{"text":"we still have s1 and s2","width":142},{"text":"still initialized to 16 and 0","width":114},{"text":"so this is still spaces","width":238},{"text":"and this is still items","width":224},{"text":"what are the problems that you might noticed before from our prior one","width":547},{"text":"no matter what the enqueue did, it only affected S1","width":393},{"text":"and no matter what the dequeue did, it only affected S2","width":241},{"text":"so there was no coordination between the Enqueue and the Dequeue","width":258},{"text":"so i need to be able to tell the reader the dequeue that there's something to take out","width":499},{"text":"so for my next solution, i've mixed it up a bit","width":282},{"text":"so now i do a sem_wait on s2","width":443},{"text":"and a sem_post on s1","width":144},{"text":"and a sem_wait on S1 and a sem_post on s2","width":483},{"text":"did that work","width":2687},{"text":"Okay did i fix my problem?","width":276},{"text":"No oh","width":99},{"text":"ok, what did i do this time","width":352},{"text":"only dequeue could work this time","width":217},{"text":"why can't enqueue work","width":289},{"text":"S2 is always 0","width":122},{"text":"so i'm starting on calling S2. I try to decrement it, and I've got a problem","width":464},{"text":"I did fix one of my other problems though","width":126},{"text":"did you notice what I switched?","width":253},{"text":"i switched the order of the sem_wait and the lock","width":360},{"text":"i' dont actually acquire the semaphore until the semaphore is released","width":225},{"text":"and that is very important","width":138},{"text":"because if I acquire the lock and I wait for the semaphore to be released","width":404},{"text":"but somebody is not gonna released the semaphore unless they've got the lock.","width":189},{"text":"i've created a bad problem called deadlock","width":277},{"text":"that fixed that a little bit","width":448},{"text":"Okay","width":90},{"text":"so the problem here was This one starts at zero, right?","width":652},{"text":"so whenever I call sem_wait on it","width":99},{"text":"it's just gonna block","width":476},{"text":"what about this guy","width":98},{"text":"Do i have overflow?","width":347},{"text":"Do I have undeflow? Why?","width":380},{"text":"Here","width":34},{"text":"what does S1 start at?","width":261},{"text":"it starts at 16","width":179},{"text":"my first call to dequeue is gonna do a sem_wait on S1 and its' gonna say ","width":347},{"text":"\"Oh! Cool, it was 16 now, it's 15 here, so there' nothing really in there\"","width":433},{"text":"so i've given you some steps on how you would do this, i want you guys to implement your own","width":870},{"text":"i can tell you that you can do it with those variables","width":237},{"text":"figure out what you want the variables to be initialized to ","width":244},{"text":"and how to implement your enqueue and dequeue","width":303},{"text":"so it's only a couple of lines of code don't make it too complex","width":4626},{"text":"Yeah?","width":4544}],
// Part 5
[{"text":"but the way you build your code will stop that from happening","width":2125},{"text":"are you getting close?","width":1442},{"text":"okay I'm hearing the mumbling die down you guys ready","width":273},{"text":"anybody have a solution for me","width":679},{"text":"what's the sequence for enqueue","width":502},{"text":"okay I'm going to do the same way on s1","width":377},{"text":"why s1","width":269},{"text":"cause I have sixteen spaces and i want to wait if there are no spaces available","width":317},{"text":"so what do I initialize s1 to","width":163},{"text":"sixteen","width":136},{"text":"then what do i do","width":165},{"text":"lock","width":281},{"text":"what happens if i switch these two","width":163},{"text":"the order of those two","width":291},{"text":"okay I'm going have","width":67},{"text":"I'm breaking my synchronization I'll ask that again when we're done","width":170},{"text":"so then I do my enqueue","width":298},{"text":"how do I finish up?","width":162},{"text":"sorry?","width":139},{"text":"what should I do next?","width":334},{"text":"sorry?","width":134},{"text":"post ","width":301},{"text":"and then what? ","width":107},{"text":"unlock","width":373},{"text":"okay?","width":94},{"text":"what happens if uh is that the right order for those two?","width":510},{"text":"so he says he thinks the lock should be first","width":129},{"text":"why should the lock be first?","width":396},{"text":"you can let somebody else come in","width":99},{"text":"really you want your lock critical section ","width":329},{"text":"lock as tight as possible","width":238},{"text":"and then do other things outside that to manage your synchronization","width":269},{"text":"because you it's not going to be that bad for this small example","width":268},{"text":"but if you don't unlock until you do some other things","width":226},{"text":"you're locking somebody else out","width":103},{"text":"okay so if you release the lock before the post","width":284},{"text":"somebody else could come in and could be waiting right here","width":422},{"text":"remember because I got multiple readers can come past the wait","width":258},{"text":"up to sixteen if it's empty","width":218},{"text":"and then they all wait on the lock because only one is allowed in the critical section at the same time","width":431},{"text":"and then they're out","width":81},{"text":"once I step out of this","width":154},{"text":"the next one can acquire the lock and change something","width":213},{"text":"before the post happens","width":269},{"text":"so for the small pieces of code it's not really and issue","width":197},{"text":"but, for larger things you want to be careful","width":149},{"text":"okay so what's my dequeue","width":114},{"text":"so it's not a correctness issue it's a performance issue","width":206},{"text":"so what do i write for my dequeue","width":288},{"text":"wait on s2","width":53},{"text":"what's my additional value of s2","width":194},{"text":"zero because I have nothing in there","width":128},{"text":"and then I do what","width":116},{"text":"lock","width":180},{"text":"and then i do my dequeue","width":207},{"text":"then what do i do?","width":97},{"text":"unlock same reason","width":189},{"text":"and post which one?","width":219},{"text":"s1","width":149},{"text":"why does this work?","width":186},{"text":"I mean if you talk about this if you look at it right?","width":289},{"text":"the first thing is I'm coming in","width":247},{"text":"I'm saying are there any spaces","width":133},{"text":"if there's spaces I can put something in","width":212},{"text":"and now I'm telling the dequeue that I finished putting something in and now there's some items","width":513},{"text":"so same thing here","width":83},{"text":"I'm checking to see if there's any items","width":262},{"text":"and when I done I'm letting the enqueue know that there is more space if it was waiting for space","width":636},{"text":"so the key here is that the communication between the two","width":357},{"text":"is this crossover between s1 and s2","width":197},{"text":"our initial answer remember had just s1 on one side and s2 on the otherside","width":237},{"text":"there was no communication between the two to let them know that there was things changing","width":269},{"text":"and then our other answer just had them backwards","width":1457},{"text":"again if I unlock and then post","width":368},{"text":"alright first is somebody could be waiting on that lock","width":313},{"text":"the post just means somebody's waiting to know if there's more items","width":272},{"text":"the unlock says there's somebody waiting to get into the critical section","width":537},{"text":"but let's say there are five items in here right","width":303},{"text":"we'll say there's five items and I've called dequeue","width":336},{"text":"a bunch of times right so I've called dequeue the first time","width":205},{"text":"the first one goes through","width":113},{"text":"it says wait and it decrements it to four","width":413},{"text":"s2 is items right","width":143},{"text":"so it decrements it to 4 and it gets the lock","width":297},{"text":"and it could then post or unlock","width":228},{"text":"if the first thing it does is unlock","width":160},{"text":"the next one that was coming along here","width":169},{"text":"the next one came along and it blocked ","width":122},{"text":"it can't go anywhere","width":159},{"text":"it's not waiting for this post","width":161},{"text":"it's just waiting for the unlock","width":223},{"text":"so it's really just an ordering thing","width":130},{"text":"if there was more complexity to this system","width":200},{"text":"this mismatch could cause problems. it's just a performance issue it's not a correctness problem","width":320}],
// Part 6
[{"text":"okay so I only have about five more minutes left I don't think I'm going to be able to ","width":242},{"text":"any more questions left about this sorry","width":255},{"text":"any more questions about the ring buffer","width":236},{"text":"okay the back half of the page","width":428},{"text":"is return to the reader-writer problem","width":361},{"text":"okay","width":180},{"text":"so you guys remember what the reader-writer problem is?","width":369},{"text":"so there's a couple of rules when you're doing a reader-writer problem","width":242},{"text":"1. how many readers can you have at the same time?","width":372},{"text":"as many as you want","width":76},{"text":"how many writers can you have at the same time","width":159},{"text":"one","width":38},{"text":"can you have readers and writers at the same time?","width":168},{"text":"no","width":45},{"text":"so our first rule is exclusion","width":206},{"text":"one writer multiple readers","width":199},{"text":"that also means that whatever solution I design I want to be able to allow multiple readers to simultaneously read","width":492},{"text":"but only one writer to write at the same time","width":259},{"text":"so was there anything else?","width":498},{"text":"yes and we want to make sure that whatever solution we come up with doesn't starve either the readers or the writers","width":664},{"text":"so you guys saw condition variables right?","width":302},{"text":"so just to refresh your memory","width":173},{"text":"inside a condition variable","width":220},{"text":"inside the system it's doing an unlock on a mutex","width":248},{"text":"it's blocking on a signal","width":128},{"text":"so it's waiting for something","width":59},{"text":"and then when it's done it locks it","width":105},{"text":"and then it returns","width":102},{"text":"so whenever you call a condition variable","width":272},{"text":"you call it with both that condition variable and a lock","width":311},{"text":"what state does that lock have to be in?","width":191},{"text":"locked","width":47},{"text":"because in the system the first thing that happens is the system unlocks it for you","width":231},{"text":"but all that is done atomically-ish","width":206},{"text":"don't worry about that word","width":80},{"text":"it's all done in one step so you don't have to worry about race conditions inside the condition variable","width":345},{"text":"okay","width":88},{"text":"so here's my first solution","width":293},{"text":"to the reader-writer problem","width":259},{"text":"I'm going to lock a mutex and then I'm going to say ","width":395},{"text":"I have some variables here","width":156},{"text":"I have writing ","width":191},{"text":"that means somebody's writing","width":164},{"text":"and I have reading","width":215},{"text":"and that tells me how many the number of readers inside","width":318},{"text":"what value can writing be?","width":193},{"text":"zero one ","width":70},{"text":"reading can be whatever doesn't matter","width":165},{"text":"ok so, first thing I'm going to do is lock my variable and call","width":305},{"text":"and while somebody is writing I'm going to call my condition wait","width":280},{"text":"if somebody if there's a writer in there I'm going to wait for the writer to signal that they're done","width":386},{"text":"and then I can go on","width":126},{"text":"once that's done I increment reading","width":177},{"text":"I do my reading, I decrement reading, I signal that I'm done and I lock","width":371},{"text":"similarly, on the writer side ","width":179},{"text":"they lock","width":65},{"text":"if there's anybody reading or writing","width":166},{"text":"remember writers are exclusive they can't have anybody in there","width":219},{"text":"I wait increment writing, decrement writing call the condition variable","width":605},{"text":"if anybody, this we're a little bit short for time","width":130},{"text":"so is anybody off the top of their head see a problem with this","width":416},{"text":"there's only one reader at a time","width":131},{"text":"what's causing that?","width":128},{"text":"the lock, right, so the lock goes from here to here","width":306},{"text":"once I try to read and I acquire the lock nobody else can come in","width":255},{"text":"does anybody know how I can fix that?","width":245},{"text":"there's an easier way to do that?","width":190},{"text":"any other suggestions?","width":131},{"text":"well I have to lock","width":167},{"text":"but you're closer it does have to do with the lock","width":281},{"text":"what if we unlock the lock","width":262},{"text":"unlock before the reading and then relock","width":527},{"text":"right?","width":78},{"text":"because this unlock will let the other readers pass","width":307},{"text":"the writers will get here and stop","width":221},{"text":"because I've already incremented my reading so the writers aren't going to be able to get into the critical section, but the other readers will","width":729},{"text":"there's another problem","width":96},{"text":"am I done?","width":173},{"text":"give me one more problem here","width":90},{"text":"there's two more problem, we'll finish them on wednesday","width":520},{"text":"say that again?","width":187},{"text":"if there's a stream of readers","width":150},{"text":"if readers keep coming and keep coming and there's never no readers","width":257},{"text":"we're going to starve our writers","width":103},{"text":"one more problem","width":93},{"text":"I lied","width":241},{"text":"look at the writers for a second there's a problem here","width":435},{"text":"what does that do?","width":227},{"text":"what does a condition signal do?","width":349},{"text":"it wakes up what?","width":151},{"text":"no","width":59},{"text":"it wakes up ","width":110},{"text":"wakes up one reader","width":92},{"text":"what do i need to change that to?","width":224},{"text":"condition broadcast","width":239},{"text":"okay","width":183},{"text":"I want you guys to think about the better solution for a reader-writer","width":248},{"text":"we'll go over that at the beginning of class on Wednesday","width":132},{"text":"and we'll talk about deadlock","width":256}],
// Part 5
[{"text":"So, it turns out that this, uh, circular wait is not sufficient for, uh, determining whether there's deadlock. It is necessary. If there's no circular wait, there's no deadlock. But if there's circular wait, it doesn't mean there's deadlock","width":1088.1818182468414},{"text":"I mean, if there's a circle in the graph, it doesn't mean there's deadlock. So there are four conditions. They are Kaufmann's conditions.","width":537.1818182468414},{"text":"The first one is mutual exclusion. It means that only one process can use a resource at a time.","width":547.1818182468414},{"text":"so a process can claim exclusive control of the resource they require.","width":394.18181824684143},{"text":"So if we're only dealing with writers, writers require exclusive access to that critical section.","width":691.1818182468414},{"text":"If we're only looking at readers, there's no exclusive access. They can all look at the same time. So we have to have exclusive access. A lock implies exclusive access. only one process can have the lock at the same time","width":1022.1818182468414},{"text":"There is also something called hold-and-wait. Hold-and-wait says that the prcoess that the process holding the resources allocated to them is waiting for additional resources. ","width":597.1818182468414},{"text":"If we go back to our last two examples here, ","width":839.1818182468414},{"text":"In this case, the first one, P1 is holding B","width":391.18181824684143},{"text":"And waiting for C","width":164.18181824684143},{"text":"In this case, P1 gave up B","width":248.18181824684143},{"text":"And then was waiting for C, and so in this case doesn't have any hold and wait. it's not holding something and waiting for something else","width":351.18181824684143},{"text":"So, in a sense a hold and wait","width":323.18181824684143},{"text":"a process has a resource","width":359.18181824684143},{"text":"it has an arrow coming in, and it's waiting for another resource so it has an arrow coming out","width":641.1818182468414},{"text":"The third thing is that there are no preemptive conditions","width":247.18181824684143},{"text":"this means nothing can be taken out. I can't say well I'm going to remove the fact that -","width":425.18181824684143},{"text":"instead of A releasing B2, I'm going to force A to release B2. I'm going to preempt it and say someone else can have it","width":571.1818182468414},{"text":"Once you have it, it's never given away","width":145.18181824684143},{"text":"So the north and south goings ","width":268.18181824684143},{"text":"There is no pre-emption. they weren't going to give up anything to be able to make progress","width":469.18181824684143},{"text":"And the last one is a circular chain of processes exists. ","width":363.18181824684143},{"text":"So, there is actually a law on the books","width":498.18181824684143},{"text":"that said in Kansas, when two trains approach each other at a crossing, both shall come to a full stop and neither shall start up again until the other has gone","width":1077.1818182468414},{"text":"Yeah, not so good","width":123.18181824684143},{"text":"Total deadlock. They both can't make any progress. How would you fix this?","width":1827.1818182468414},{"text":"This is a train, I'm not using a stack.","width":743.1818182468414},{"text":"Ok I'm not sure I understand your solution.","width":355.18181824684143},{"text":"Ok, so give the north going train the priority and the south always has to give up. The north always goes","width":413.18181824684143},{"text":"So that would break it.","width":77.18181824684143},{"text":"What does that break?","width":140.18181824684143},{"text":"so we had four conditions for deadlock, would do you think that would break?","width":690.1818182468414},{"text":"Yeah, there's no pre-emption here, and in doing so you've gotten rid of the cycles too.","width":429.18181824684143},{"text":"Any other ways of fixing it?","width":441.18181824684143},{"text":"Let's see...did I have any others?","width":197.18181824684143},{"text":"Priority, uh...","width":186.18181824684143},{"text":"You could make one back up.","width":358.18181824684143},{"text":"But all of them have to be able to break one of the conditions.","width":313.18181824684143},{"text":"So let's go with one more simple example.","width":216.18181824684143},{"text":"Two students need a pen and paper.","width":282.18181824684143},{"text":"I want to know what conditions these do or don't satisfy. I need to know if there's deadlock here.","width":256.18181824684143},{"text":"Two students share pen and paper.","width":196.18181824684143},{"text":"Is there deadlock there?","width":376.18181824684143},{"text":"It breaks mutual exclusion.","width":157.18181824684143},{"text":"Both students agree to grab pen before paper.","width":531.1818182468414},{"text":"Which one does that break?","width":513.1818182468414},{"text":"I always grab pen before paper. This is no circular wait.","width":833.1818182468414},{"text":"Because I'm always waiting for the pen","width":129.18181824684143},{"text":"and then I'm waiting for the paper.","width":129.18181824684143},{"text":"If they randomly did it, one could get that paper first and the pen first and the other could get the pen first and then the paper first. then we would have the cycle","width":690.1818182468414},{"text":"and they both get one or none","width":404.18181824684143},{"text":"Hold and wait","width":191.18181824684143},{"text":"Last one, students I have the pen and you give up the paper","width":370.18181824684143},{"text":"There's your preemption","width":316.18181824684143},{"text":"This leads us to the dining philosophers problem","width":675.1818182468414},{"text":"How many people have heard of this problem before?","width":153.18181824684143},{"text":"This is the canonical computer science problem.","width":423.18181824684143},{"text":"We have N philosophers and N forks","width":171.18181824684143},{"text":"BUT you need two forks to eat","width":258.18181824684143},{"text":"You can do this with chopsticks too","width":322.18181824684143},{"text":"But you only pick up one at a time","width":560.1818182468414}],
// Part 0
[{"text":"okay good morning class","width":247.18181824684143},{"text":"as you might have realized, spring break is starting and so congratulations for being here","width":349.18181824684143},{"text":"as opposed to enjoying the sunny weather outside, oh wait","width":164.18181824684143},{"text":"so first of all if your sitting in the back and want to have a more cozy experience, why don't you get up and move to the front and see what it's like at the front for a change","width":549.1818182468414},{"text":"I promise not to bite too hard","width":291.18181824684143},{"text":"either sit down and relax or come on down and see what it's like at the front","width":230.18181824684143},{"text":"and we can have a cozy class","width":102.18181824684143},{"text":"right so here's what we're going to do today","width":80.18181824684143},{"text":"we're going to talk about handling errors and how we detect them with our system calls","width":273.18181824684143},{"text":"and then we're going to talk about some fun stuff, we're going to start talking about networking","width":259.18181824684143},{"text":"and this is kind of important right?","width":83.18181824684143},{"text":"we want our machines to talk to each other so we'll get done today with some of the basics about ip4 and what's the difference between UDP and TCP","width":654.1818182468414},{"text":"but before we do all of that, let's see if your brain cells are working today in terms of pipes","width":367.18181824684143},{"text":"right so I mentioned before that you can get a SIGPIPE when something happens - when?","width":659.1818182468414},{"text":"when does your process get a SIGPIPE?","width":410.18181824684143},{"text":"I'm sorry I'm not listening","width":144.18181824684143},{"text":"yes, when you have a PIPE and you write some bytes to the pipe and there's no one there to listen","width":508.18181824684143},{"text":"and the failure [will cause your process to] get a SIGPIPE so you can write some code inside your signal handlers to say oh look the listeners died, maybe I'll just fork exec a new one for example","width":686.1818182468414},{"text":"now a common gotcha though is when your playing with pipes and fork as you might have found out in the lab, is that you forget to close all of those file handles that you don't need","width":618.1818182468414},{"text":"so if you still happen to have a reading file descriptor open, you won't get the signal because in theory you could still read form that","width":698.1818182468414},{"text":"okay, so that's our first little question right","width":428.18181824684143},{"text":"alright so when all the readers have closed and you try to write to a pipe, you should get a signal","width":1093.1818182468414},{"text":"in practice we've found it doesn't actually work on EWS","width":218.18181824684143},{"text":"the old EWS machines don't support that yet","width":292.18181824684143},{"text":"but here's the good news, you may have gotten an email, did you get an email from me this morning?","width":310.18181824684143},{"text":"fantastic, right that's my new email script","width":156.18181824684143},{"text":"I can now send email as anybody to anybody inside UIUC","width":469.18181824684143},{"text":"anyway I won't make jobs about the provost","width":92.18181824684143},{"text":"so hopefully you've logged into your new virtual machines","width":392.18181824684143},{"text":"brand new feel free to destroy it, install software, etc etc","width":378.18181824684143},{"text":"and in the worst case, I'll just give you a new one","width":273.18181824684143},{"text":"so it's probably not a great idea to store your family archive on this machine","width":273.18181824684143},{"text":"but it is important because hey with this box you've got root","width":195.18181824684143},{"text":"you can do root-y things like mount file systems, like connect to named ports and run them ports","width":415.18181824684143},{"text":"we'll be talking about that in a little bit","width":134.18181824684143},{"text":"but anyways, so let's finish our pipes off","width":146.18181824684143},{"text":"so when can a listener discover that there are no more writers","width":237.18181824684143},{"text":"how about this then, because in section our listener right was wc, we were using word count to pull data from standard in","width":625.1818182468414},{"text":"how do you think wc knew that the pipe had closed, that there was no more bytes coming","width":730.1818182468414},{"text":"okay so we had to flush it but actually we had to do more than flush","width":189.18181824684143},{"text":"flush simply says to the C library hey you know those bytes you're looking after for performance sake","width":334.18181824684143},{"text":"I don't want you to look after them anymore","width":96.18181824684143},{"text":"send them down the pipe, in other words call write","width":227.18181824684143},{"text":"but we need to do more than that because flushing doesn't actually mean that the pipe itself has closed","width":369.18181824684143},{"text":"we want to close it but we haven't actually answered the question yet of how does the listener know when it's not going to get anymore bytes","width":724.1818182468414},{"text":"and the answer is if you call read, it returns zero","width":512.1818182468414},{"text":"so it's not an error yet, it's just simply that hey I'm going to give you zero bytes and the pipe is closed","width":736.1818182468414},{"text":"so let's do this","width":243.18181824684143},{"text":"let's have a little play","width":207.18181824684143},{"text":"okie dokie right so I made a pipe ","width":279.18181824684143},{"text":"I'm going to close the second file descriptor, in other words the write end","width":283.18181824684143},{"text":"and let's try reading from it","width":204.18181824684143},{"text":"okay so bytes read equals read","width":216.18181824684143},{"text":"we need to give it a file descriptor okay so what shall I say","width":270.18181824684143},{"text":"fd[0] is where we read from, how many bytes do we want? well here's a pointer to buffer and I'll take sizeof buffer minus one","width":582.1818182468414},{"text":"why minus one you say? well for safety for example I might put in at the very end a termination byte","width":583.1818182468414},{"text":"for example, just to make sure my strings don't go on forever","width":236.18181824684143},{"text":"okay so let's print out to see what value we get","width":277.18181824684143},{"text":"okay and I want to print out the result of my read call","width":844.1818182468414},{"text":"hey and look it's true, we do get zero, fantastic okay go away","width":333.18181824684143},{"text":"right so that's one way right? now that's obviously if we're doing the low level calls like read and write","width":515.1818182468414},{"text":"if your working at the C library level","width":349.18181824684143},{"text":"you can check for an end of file EOF condition on that pointer","width":744.1818182468414},{"text":"so remember how we do fdopen to get yourself a C library pointer","width":261.18181824684143},{"text":"well then there's a thing called fopen","width":256.18181824684143},{"text":"right so that's relatively easy then to discover that something is closed","width":306.18181824684143},{"text":"another way of doing it of course is that you come up with a special token or special character to say hey if I send them asterisks or a zero bytes, then I know that that signifies to me that there's no more bytes coming","width":745.1818182468414},{"text":"another way is to say at the beginning of your message, hey I'm going to send exactly 4000 bytes and here they come","width":402.18181824684143},{"text":"another way is to know exactly how many bytes you are going to send beforehand anyway and hard code it into your program","width":437.18181824684143},{"text":"so that's all we're going to say about pipes today","width":313.18181824684143},{"text":"let's mess up our program, let's try and read from a file descriptor that doesn't exist","width":363.18181824684143},{"text":"okay so let's say from one hundred and twenty three","width":167.18181824684143},{"text":"okay I don't need this right, so what's going to happen now?","width":680.1818182468414},{"text":"alright we get a result of negative one","width":171.18181824684143},{"text":"the read failed, I cannot read from file descriptor 123","width":259.18181824684143},{"text":"well you and I know that's because there's nothing connected to that integer","width":240.18181824684143},{"text":"it's an invalid file descriptor","width":156.18181824684143},{"text":"but we want to actually know more than that, we want to know something about what went wrong","width":409.18181824684143},{"text":"and for that there's actually this global constant called, whoops come back thank you, errno","width":750.1818182468414},{"text":"right error number, so error number will have been set","width":265.18181824684143},{"text":"so let's find out what value it was ","width":230.18181824684143},{"text":"okay so we'll stick this in here and we'll print it out","width":316.18181824684143}],
// Part 1
[{"text":"actually we can do more than just print out an error number","width":328.18181824684143},{"text":"there's a function that allows us to go from that error number to a useful string","width":422.18181824684143},{"text":"so we've got strerror and we can pass in a number","width":293.18181824684143},{"text":"like twelve well I don't want just twelve, I actually want the number that the system has set for us, so let's print that out as well and see what we get","width":807.1818182468414},{"text":"okay right here we go so yeah our read returned -1 to say hey I've failed","width":465.18181824684143},{"text":"we've got an error number that's now set to a non zero value","width":211.18181824684143},{"text":"and we've got bad file descriptor, which now makes sense to us","width":206.18181824684143},{"text":"yeah we've passed in an invalid file descriptor number","width":324.18181824684143},{"text":"so before we've played around with things like printerror","width":302.18181824684143},{"text":"and it will print out something like","width":426.18181824684143},{"text":"It is a Friday let us go okay","width":674.1818182468414},{"text":"and perror takes the text we've got followed by okay here we go","width":586.1818182468414},{"text":"It's a friday let's go with a colon and guess what, the same message: bad file descriptor","width":320.18181824684143},{"text":"which is if you were a user a completely useless message","width":329.18181824684143},{"text":"bad file descriptor? sounds like the beginning of a bad movie","width":327.18181824684143},{"text":"no it's worse, so okay put this into your log file but don't display it to the user of course","width":423.18181824684143},{"text":"but now you can see how perror might actually be implemented in terms of this strerror function","width":612.1818182468414},{"text":"okay so that's our error number, it's set when a system call fails","width":483.18181824684143},{"text":"so if we go back to our little handout here","width":321.18181824684143},{"text":"so what is errno? it's just an int","width":409.18181824684143},{"text":"and when is it set?","width":129.18181824684143},{"text":"well when a system call fails","width":735.1818182468414},{"text":"you can find out what went wrong","width":720.1818182468414},{"text":"so nine is not a particularly... yes","width":420.18181824684143},{"text":"[question]","width":742.1818182468414},{"text":"a new line? you mean because printerror adds a new line as well?","width":435.18181824684143},{"text":"is that your question?","width":125.18181824684143},{"text":"okay right so we don't need to deal with these numbers like nine, we don't need to remember that nine means bad file descriptor","width":597.1818182468414},{"text":"because guess what? on the man page of read","width":247.18181824684143},{"text":"[something] we discover the return value","width":283.18181824684143},{"text":"we got a list of errors, here they all are","width":625.1818182468414},{"text":"so lots of things can go wrong and if we wanted to write a robust program","width":362.18181824684143},{"text":"we might actually choose to handle some of these","width":289.18181824684143},{"text":"you might say okay in the generic sense, just crash the program or write to the log file","width":273.18181824684143},{"text":"but there might be others where you might decide to say print a message to the user","width":253.18181824684143},{"text":"and that's how we can do it, we can check errorno to see exactly why the system call failed","width":581.1818182468414},{"text":"and then we can just compare it to these constants","width":326.18181824684143},{"text":"so in our code here, we could say if errorno equals bad file descriptor EBADF, your file descriptor, your program is a mess!","width":1514.1818182468414},{"text":"okay so we are going to handle this particular problem","width":1089.1818182468414},{"text":"what are we going to do about multiple threads?","width":151.18181824684143},{"text":"let's say I've got threads making system calls, they are calling mutex lock, they are calling sem wait, they are calling read, they are calling write","width":652.1818182468414},{"text":"if they fail, don't we have a problem?","width":437.18181824684143},{"text":"how would you know which one actually failed?","width":163.18181824684143},{"text":"suppose you're trying to read error just as another thread also fails","width":500.18181824684143},{"text":"houston we have a problem","width":125.18181824684143},{"text":"we don't know which thread set errorno","width":780.1818182468414},{"text":"muahahah yes, okay, errorno is not just an int","width":479.18181824684143},{"text":"each thread gets its own errorno integer","width":1100.1818182468414},{"text":"how does that happen you ask? easy magic","width":493.18181824684143},{"text":"actually it uses something called thread local storage but never mind about that","width":240.18181824684143},{"text":"so that means if you want to know what happened inside your thread, easy, write errno","width":324.18181824684143},{"text":"if you want to know what error happened inside another thread, you can't","width":330.18181824684143},{"text":"you'd have to write the mechanics to share that information","width":239.18181824684143},{"text":"right, so it's actually local to each thread which is particularly clever","width":396.18181824684143},{"text":"yes, you can which brings us to the next question thank you very much for playing, right","width":288.18181824684143},{"text":"when is errno set to zero?","width":209.18181824684143},{"text":"when your process starts and that's it","width":397.18181824684143},{"text":"so here's a gotcha, that if we did something like if errorno is equal to something like we have the EBADF","width":1290.1818182468414},{"text":"then we just assume that that happened because of the previous call we just made","width":260.18181824684143},{"text":"that may not be true, perhaps this happened, perhaps errno was set many many many microseconds earlier in our program","width":690.1818182468414},{"text":"so errno is never reset back to zero","width":228.18181824684143},{"text":"if you want to set it back to zero, do it yourself","width":252.18181824684143},{"text":"and in fact that's quite a good kind of programming practice","width":150.18181824684143},{"text":"that if you intend to check its value","width":241.18181824684143},{"text":"then remember to set it to zero beforehand","width":2171.1818182468414}],
// Part 2
[{"text":"right so there's one other thing to be aware of with errorno is","width":507.18181824684143},{"text":"remember signal handlers?","width":133.18181824684143},{"text":"where we could write some code to cope with a signal like hey hey we've got a closed pipe condition","width":822.1818182468414},{"text":"so in your signal handler","width":626.1818182468414},{"text":"if we're going to be calling things which might set error number","width":327.18181824684143},{"text":"say we want to remove a file","width":241.18181824684143},{"text":"or we want to make a system call that we're allowed to call","width":188.18181824684143},{"text":"from a signal handler","width":127.18181824684143},{"text":"then it would be really really impolite to change error number for the other part of the code","width":647.1818182468414},{"text":"remember how does a signal handler work? we steal the current thread of execution","width":330.18181824684143},{"text":"we don't make a new thread. we just actually say to the CPU hey stop executing the current piece of code","width":366.18181824684143},{"text":"I want you to run this other little piece of code over here please","width":200.18181824684143},{"text":"and when you finish yeah you go back to what you were doing","width":169.18181824684143},{"text":"I'm not going to give you a new stack, I'm not going to... right we literally just steal it to run it","width":450.18181824684143},{"text":"so that means our signal handler might do bad things to error number","width":207.18181824684143},{"text":"so a good handler, a polite signal handler will remember the old value","width":554.1818182468414},{"text":"and just before returning","width":290.18181824684143},{"text":"we set it","width":689.1818182468414},{"text":"so it might go, if you want to write robust code...","width":298.18181824684143},{"text":"be careful with your signal handlers","width":287.18181824684143},{"text":"and two, if you're going to check the value of errno, it's probably a good idea to reset it to zero beforehand","width":436.18181824684143},{"text":"so that you know that if you're discovering an error, that it actually came from the code that you were looking at","width":623.1818182468414},{"text":"I've got a cute example here","width":1504.1818182468414},{"text":"the other thing to be careful about is in your error handlings","width":270.18181824684143},{"text":"be careful that you're not looking at errorno values from your actual error handling","width":214.18181824684143},{"text":"so for example here it is where we're trying to discover why does semwait fail","width":361.18181824684143},{"text":"and so we printed out the problem with this code is that the very first fprintf itself may set errno","width":608.1818182468414},{"text":"and that could then lead us down a rabbit hole right? we could say okay","width":383.18181824684143},{"text":"why am I getting a bad file descriptor? well it turns out standard error was closed or something like that","width":312.18181824684143},{"text":"we had out of memory and it was actually coming out of the fprintf call","width":288.18181824684143},{"text":"so it's better to if you're going to make more system calls, more function calls, grab it and stick it inside your own variable so you know that the value you're looking at actually arose from the original call","width":1595.1818182468414},{"text":"okay right so do you remember how do we print out a particular string message?","width":459.18181824684143},{"text":"yeah, easy, just call strerror and that gives you back a pointer to a string","width":606.1818182468414},{"text":"so typically you'd pass in errno here","width":245.18181824684143},{"text":"and you'd get the string","width":123.18181824684143},{"text":"that string might mean something to you and another system programmer but not much to anybody else","width":467.18181824684143},{"text":"I've got some bad news for you though","width":671.1818182468414},{"text":"it's not thread safe","width":378.18181824684143},{"text":"brought to you by homer simpson, yes that's correct your code in trying to handle errors might run into difficulties because in calling strerror in calling two different threads at the same time can contend with each other","width":851.1818182468414},{"text":"and overwrite each other's value","width":266.18181824684143},{"text":"so we've got two ways to fix this","width":303.18181824684143},{"text":"one is that you call mutex lock","width":409.18181824684143},{"text":"and unlock between getting back the pointer and using it","width":1351.1818182468414},{"text":"so you would get the pointer perhaps copy it into your own memory that is being used solely by your own thread","width":502.18181824684143},{"text":"and if you do this everywhere","width":188.18181824684143},{"text":"in your code that's going to call strerror then you can be confident that only one thread at a time will be calling strerror","width":486.18181824684143},{"text":"you've made it into a critical section","width":98.18181824684143},{"text":"just remember to do that everywhere inside your code","width":187.18181824684143},{"text":"including all of the library calls that wait you control? you don't control. you don't have the source code of all the library functions that might call strerror","width":562.1818182468414},{"text":"so this is actually pretty hard to do well and consistently","width":338.18181824684143},{"text":"but I have seen people do it","width":121.18181824684143},{"text":"the other way is that actually there is an alternative called strerror with an underscore r strerror_r which is thread saf","width":535.1818182468414},{"text":"and the reason why it's thread safe is because you pass in a pointer to some memory that you would like to use","width":413.18181824684143},{"text":"okay","width":1021.1818182468414},{"text":"so the next thing we're going to talk about is this EINTR","width":231.18181824684143},{"text":"hey this is the hey I got interrupted, do you want to retry?","width":687.1818182468414},{"text":"so there's quite a lot to say about this interrupt idea and we're not going to talk about all of it inside 241","width":657.1818182468414},{"text":"suppose you make a system call that's going to go on for a long time","width":197.18181824684143},{"text":"for example, you want to write some bytes down to a pipe that's going to connect to the internet","width":371.18181824684143},{"text":"you want to call semwait which is going to wait until someone calls sempost","width":665.1818182468414},{"text":"these calls can sometimes be interrupted and immediately returned","width":528.1818182468414},{"text":"so basically, they fail","width":196.18181824684143},{"text":"they fail to actually do what you ask them to do","width":203.18181824684143},{"text":"now in the simple kind of lecture code and in the MPs we just say hey don't bother about this, it's fine","width":386.18181824684143},{"text":"but in robust code, we actually have to check for this","width":231.18181824684143},{"text":"when you are writing robust code, you have to say ok what was the return value of this system call, did you really do what I asked you","width":369.18181824684143},{"text":"it's a bit like talking to a toddler, did you really flush?","width":333.18181824684143},{"text":"[gibberish] I'm pretty sure","width":207.18181824684143},{"text":"so that's what we have to do, we actually have to say oh look, it returned negative one to say it didn't work","width":369.18181824684143},{"text":"and now we have to say but why","width":150.18181824684143},{"text":"was it something bad like I gave it a bad file descriptor?","width":263.18181824684143},{"text":"or was is it just being annoying","width":164.18181824684143},{"text":"and if it's being annoying I say hey I've been interrupted, I'm sorry do you want to play again? just call it again","width":444.18181824684143}],
// Part 3
[{"text":"now we're only going to see this for slow running potentially blocking calls","width":613.1818182468414},{"text":"so things like semwait reading and writing to the network","width":372.18181824684143},{"text":"but it's important to handle this stuff well, otherwise","width":258.18181824684143},{"text":"your code will get to what we tested but in real situations it will then fail","width":388.18181824684143},{"text":"and imagine playing kind of russian roulette with your code","width":228.18181824684143},{"text":"I tell you what, just for fun we'll make sure one of the calls you make today is not going to work","width":307.18181824684143},{"text":"do you still feel lucky punk?","width":171.18181824684143},{"text":"so that's the purpose of this EINTR, it's to say oh look these thing were interrupted, we better call them again","width":578.1818182468414},{"text":"so let's see what the kind of code would look like in this case","width":270.18181824684143},{"text":"we'll make a call like semwait","width":603.1818182468414},{"text":"and we need to check to see if it failed","width":263.18181824684143},{"text":"okay how do I do that?","width":422.18181824684143},{"text":"you could say was its return value equal to negative one?","width":513.1818182468414},{"text":"right so if that's true, we know there was an error","width":483.18181824684143},{"text":"so let's find out if the error was hey I've got interrupted","width":1102.1818182468414},{"text":"if that's true, hey we'll go again","width":127.18181824684143},{"text":"right so here's our plan","width":358.18181824684143},{"text":"while this is true...","width":353.18181824684143},{"text":"go again!","width":73.18181824684143},{"text":"alright so perhaps you and your neighbor can tell me what's wrong with that code","width":256.18181824684143},{"text":"[silence]","width":1259.1818182468414},{"text":"so I'll give you a clue, what's an equals sign between friends?","width":913.1818182468414},{"text":"the worse thing about this error is that you get to see this kind of pattern right?","width":304.18181824684143},{"text":"you see this kind of code and you immediately say oh that's just calling sem_wait inside a while loop","width":272.18181824684143},{"text":"it's trying to be robust code, and you don't bother of course to actually read it","width":252.18181824684143},{"text":"so what are we doing here? well errno is settable, it behaves just like an integer and so we're just setting it","width":624.1818182468414},{"text":"so what's the result of this expression?","width":159.18181824684143},{"text":"a non-zero value so therefore it's true","width":261.18181824684143},{"text":"so what our code does then is say rather than check to see if it's equal to EINTR we just set the value to EINTR","width":683.1818182468414},{"text":"and so we go around again","width":93.18181824684143},{"text":"right so what effect would this have on the code?","width":348.18181824684143},{"text":"would you spot this error?","width":173.18181824684143},{"text":"when would it do bad things for you?","width":525.1818182468414},{"text":"thank you yes, if sem_wait failed for other reasons","width":265.18181824684143},{"text":"so for example, suppose you forgot to initialize the semaphore or you're running this on a system that doesn't support semaphores","width":522.1818182468414},{"text":"sem_wait might return a different message","width":379.18181824684143},{"text":"so what do you do? you call it again!","width":177.18181824684143},{"text":"it behaves exactly like a semaphore, it doesn't proceed, it just keeps on going around this loop forever","width":498.18181824684143},{"text":"and then you say ahhhhh why is this not working? right so be careful about that, watch out for your equal vs that","width":537.1818182468414},{"text":"so that is kind of a typical pattern","width":169.18181824684143},{"text":"sometimes you see a little bit more to this as well","width":201.18181824684143},{"text":"sometimes you see that actually we want to know say the number of bytes read","width":264.18181824684143},{"text":"so we might write something like this","width":170.18181824684143},{"text":"while negative one equals okay let's store the value of our return call so let's say we want to know the result of calling read","width":807.1818182468414},{"text":"blah blah blah blah blah alright","width":244.18181824684143},{"text":"and errno equals EINTR","width":948.1818182468414},{"text":"so now I'm assigning the value of read to my result so I can use that later inside the code","width":598.1818182468414},{"text":"perhaps I want to know for example if this is zero","width":185.18181824684143},{"text":"or the number of bytes that read managed to perform","width":303.18181824684143},{"text":"so if you were to drill down into the C library you would discover this kind of implementation","width":370.18181824684143},{"text":"that every time we make a system call, we potentially have to check to see whether it was interrupted or not","width":448.18181824684143},{"text":"for CS241 exams, unless I specifically ask you to write code that does this checking, I'm not going to expect anybody to have to write this full length out","width":614.1818182468414},{"text":"but put this in the back of your mind for the day that you're actually writing real system code outside a class","width":622.1818182468414},{"text":"questions? yes?","width":456.18181824684143},{"text":"aha, right","width":212.18181824684143},{"text":"so this normally happens when a signal comes in and your process has to process the signal","width":408.18181824684143},{"text":"but that could be anything, that could be a child finishing for example","width":477.18181824684143},{"text":"you might have noticed in some of the earlier programs we wrote that if you had a sleep and a SIGCHILD happened, the sleep itself could be interrupted","width":823.1818182468414},{"text":"so why is this? the short answer is that it makes operating system programming easier","width":579.1818182468414},{"text":"remember how I said that when we have to process a signal interrupt, we steal the CPU and we actually run some code for a moment","width":643.1818182468414},{"text":"and then we give the CPU back as if nothing happened","width":161.18181824684143},{"text":"well as you can see, it's not quite true","width":162.18181824684143},{"text":"actually as part of giving the CPU back, we just give up","width":304.18181824684143},{"text":"we say hey you know that system call I was trying to do, ha, I just gave up","width":351.18181824684143},{"text":"it's a nice day, I don't have a problem with that. do you?","width":398.18181824684143},{"text":"it's kind of like the californian hello, hello yes let's do lunch and not really","width":503.18181824684143},{"text":"so in making the design of the operating system easier, we've actually put the onus on systems programmers on our user code","width":584.1818182468414},{"text":"to actually deal with handling these interrupts, with failing system calls","width":893.1818182468414},{"text":"so fantastic, you actually now know a lot about how to actually write much more robust code by checking errno ","width":393.18181824684143},{"text":"by knowing that you have to potentially check this EINTR thing","width":288.18181824684143},{"text":"there's a bit more to say I'll let you read it on the wiki book as you usual","width":345.18181824684143},{"text":"but I'm not going to be writing this code all the time in future examples","width":574.1818182468414},{"text":"are you ready? page 2!","width":293.18181824684143}],
// Part 4
[{"text":"great, we get to talk about networking","width":429.18181824684143},{"text":"so here's another cool bit of CS241","width":260.18181824684143},{"text":"we're going to write code to make servers","width":151.18181824684143},{"text":"we're going to make code to make Yik Yak type stuff","width":249.18181824684143},{"text":"where we can send text and other data between different machines","width":448.18181824684143},{"text":"you could start with your virtual machine right now and with a friend on their virtual machine you could start setting up servers and clients and start transmitting information","width":581.1818182468414},{"text":"and this stuff is kind of near and dear to UIUC","width":200.18181824684143},{"text":"we were involved in some of the earliest network designs","width":171.18181824684143},{"text":"we are still today designing the network protocols deal with the internet 2 and the internet of things","width":422.18181824684143},{"text":"but we're going to go right back, all the way back to talk about a very important protocol which is called ip4","width":489.18181824684143},{"text":"so ip4 or ipv4 is a way to send data from one machine to another","width":547.1818182468414},{"text":"and for that every machine will have a number, an address","width":407.18181824684143},{"text":"so if we're going to send these little packets of information from me to you or from my machine to your machine","width":393.18181824684143},{"text":"I have to know, what your address is","width":168.18181824684143},{"text":"and this is what ip version 4 is about","width":555.1818182468414},{"text":"so this is not a full exposition of the whole description of ip4, just that every machine here or every connected device","width":1191.1818182468414},{"text":"can have ","width":268.18181824684143},{"text":"an ip4 address","width":457.18181824684143},{"text":"okay sounds pretty good to me, that was the plan that was the vision","width":301.18181824684143},{"text":"so when we are sending some bytes down a wire","width":263.18181824684143},{"text":"what we'll do is we'll say here's a sender, here's my ip address and here's the ip address of where it needs to get to","width":600.1818182468414},{"text":"and so these ip addresses we'l make them huge","width":290.18181824684143},{"text":"we'll say two hundred and fifty six, we'll have 256^4","width":303.18181824684143},{"text":"in other words four bytes or if you want to be precise, four octets","width":683.1818182468414},{"text":"so octets is a fancy word for byte in other words eight bits, in other words, we've got thirty two bits to play with","width":549.1818182468414},{"text":"in other words, ","width":273.18181824684143},{"text":"four billion possible addresses","width":253.18181824684143},{"text":"I need a red pen, anybody got a red pen?","width":337.18181824684143},{"text":"throw me a red pen","width":154.18181824684143},{"text":"ah alright great, this is a great plan when it was designed","width":855.1818182468414},{"text":"we can't do every device anymore","width":183.18181824684143},{"text":"why?","width":166.18181824684143},{"text":"sorry! the pen that wouldn't fly","width":393.18181824684143},{"text":"thank you, yes, we've run out of address space","width":415.18181824684143},{"text":"but this is the dominant way, today 95% of the internet traffic is still ip version 4","width":368.18181824684143},{"text":"so we have some tricks, we can hide a whole load of machines behind just a few ip addresses for example","width":508.18181824684143},{"text":"we can have multiple websites hosted on the same machine","width":287.18181824684143},{"text":"and so they all share the same ip address","width":172.18181824684143},{"text":"but we've got a problem, this initial specification of saying every device just had a ipv4 address is no longer sufficient","width":565.1818182468414},{"text":"so we'll be going over to ip6 slowly","width":220.18181824684143},{"text":"the protocol is already out but today ip version 6 accounts for less than 5% of the internet traffic","width":414.18181824684143},{"text":"we'll talk more about the actual details of ip version 4 after spring break","width":298.18181824684143},{"text":"so let's instead talk about a very special place, anybody going home for spring break?","width":471.18181824684143},{"text":"yes! great this is where you're going","width":243.18181824684143},{"text":"okay, so 127.0.0.1 is a very special place in our hearts","width":322.18181824684143},{"text":"it is the ip address of your local host","width":242.18181824684143},{"text":"your home machine, so if you try and send a packet here, it doesn't have very far to go","width":382.18181824684143},{"text":"next time you find a script kiddie on the internet, tell them to hack this ip address","width":410.18181824684143},{"text":"right so it's very very common, every system programmer knows this address","width":367.18181824684143},{"text":"if you set up a server for example and you want to test it","width":281.18181824684143},{"text":"you might to try and open this address in your web browser to say okay connect to the server on this very machine","width":489.18181824684143},{"text":"alright so rooting this address is this trivial, it doesn't even need to go to the network port","width":495.18181824684143},{"text":"the kernel will notice that hey I'm trying to talk to myself and not bother to actually craft any electrical pulses on the wire, it doesn't actually leave your machine","width":706.1818182468414},{"text":"and you can use this on a virtual machine or a real machine etc etc etc","width":216.18181824684143},{"text":"so this is your local host","width":456.18181824684143},{"text":"you can even buy door mats that say there is no place like 127.0.0.1","width":1027.1818182468414},{"text":"okay so that's your first ip address, fantastic!","width":519.1818182468414},{"text":"most people don't remember many ip addresses but they know that one and they might know an ip address for the dns server but more about that after break","width":504.18181824684143},{"text":"instead let's talk about a port","width":310.18181824684143},{"text":"so we're going to send some electrical pulses, some bits, down the wire and hopefully it will arrive at the other end","width":456.18181824684143},{"text":"at the machine of our choice","width":129.18181824684143},{"text":"so once it gets there we have to say well what are we going to do with these bits","width":228.18181824684143},{"text":"who are they for?","width":205.18181824684143},{"text":"so the idea is to think of a port, like a C port where things arrive","width":446.18181824684143},{"text":"we won't give them character names though","width":237.18181824684143},{"text":"we'll just give them numbers","width":109.18181824684143},{"text":"so on the outside of our packet, we'll say hey this data is going to go to machine whatever","width":481.18181824684143},{"text":"one hundred and twenty three point one blah blah blah","width":246.18181824684143},{"text":"and I want to go to a particular port","width":120.18181824684143},{"text":"so our packets then have thirty two bits or four octets","width":374.18181824684143},{"text":"hey look, here's an octet octet octet so in other words we can choose numbers","width":593.1818182468414},{"text":"between zero and two hundred and fifty five","width":183.18181824684143},{"text":"I just made this ip address up","width":223.18181824684143},{"text":"so this is our ip address","width":319.18181824684143},{"text":"four times eight bits or four octets","width":224.18181824684143},{"text":"but we also need a port number","width":235.18181824684143},{"text":"and port numbers use sixteen bits","width":478.18181824684143},{"text":"why? it seemed like enough at the time","width":192.18181824684143},{"text":"and eight bits didn't seem to be enough","width":213.18181824684143},{"text":"these are fairly arbitrary decisions back in the nineteen seventies and earlier","width":313.18181824684143},{"text":"to say well we know that we think that this internet thing is going to get big","width":469.18181824684143},{"text":"and if we have this many bits, then hopefully we can have different processes listening to different port numbers","width":684.1818182468414},{"text":"and that's the basic idea","width":239.18181824684143}],
// Part 5
[{"text":"so perhaps you know a few standard ports like","width":457.18181824684143},{"text":"port 80, what's port 80 used for?","width":196.18181824684143},{"text":"yes, the web!","width":111.18181824684143},{"text":"if you make an HTTP connection","width":275.18181824684143},{"text":"to get a webpage, there's a process listening on port 80","width":232.18181824684143},{"text":"so today you could write a process that listens on port 80 and sends arbitrary bytes back to people and you've got a basic web server","width":739.1818182468414},{"text":"what about port 443?","width":263.18181824684143},{"text":"this is secure HTTPs","width":176.18181824684143},{"text":"so secure HTTP","width":432.18181824684143},{"text":"does it have to have https content? no, it's just a convention","width":544.1818182468414},{"text":"and your client then, your web client, if you connect to say the BBC","width":451.18181824684143},{"text":"if you put this into your web browser","width":662.1818182468414},{"text":"it's going to turn this into an IP4 address","width":225.18181824684143},{"text":"this is the simplified version for friday okay?","width":151.18181824684143},{"text":"and also it's going to say look I'll try and connect on port 80","width":297.18181824684143},{"text":"and I'll connect to port 80 and I'll say something like hey give me the home page","width":324.18181824684143},{"text":"and hopefully the process at the other end will send back some bytes","width":270.18181824684143},{"text":"okay do we know any others?","width":240.18181824684143},{"text":"22, what's 22? yes ssh","width":613.1818182468414},{"text":"so your ssh client knows by default to connect to port 22","width":238.18181824684143},{"text":"it doesn't have to connect to port 22 by the way, you can tell it to connect to a different port","width":601.1818182468414},{"text":"now if you write a program and try to try to listen to these ports, you'll fail","width":736.1818182468414},{"text":"here's why","width":250.18181824684143},{"text":"port numbers up to 1023 are known as well known ports","width":1559.1818182468414},{"text":"and only root can connect to them","width":953.1818182468414},{"text":"or sorry, only root can listen to them, only root can serve on these ports","width":1323.1818182468414},{"text":"the thinking here was hey we've got some trust issues, if people are going to connect to my box, then we don't want any old user process being able to serve content from these ports","width":708.1818182468414},{"text":"we'll restrict it to people who have, to all the processes that have root access, that are admins ","width":808.1818182468414},{"text":"questions?","width":669.1818182468414},{"text":"so the last thing we'll talk about today is two different ways to talk to a server","width":496.18181824684143},{"text":"this is not a complete set","width":125.18181824684143},{"text":"there are other ways to send bytes to a server","width":241.18181824684143},{"text":"there are different protocols","width":116.18181824684143},{"text":"but these two are good ways to get started because they are very common and they have different characteristics","width":851.1818182468414},{"text":"here's the first version","width":159.18181824684143},{"text":"UDP","width":82.18181824684143},{"text":"UDP is packet based","width":296.18181824684143},{"text":"meaning, can I borrow this? thank you, that I can write where my packet wants to go so I write down your IP address","width":760.1818182468414},{"text":"and then I send it out in the wire","width":145.18181824684143},{"text":"and who knows? maybe we'll get there","width":218.18181824684143},{"text":"it did!","width":159.18181824684143},{"text":"in fact today, if you were to do a test between two different data centers between two different continents, 97% of UDP packets would get there","width":1230.1818182468414},{"text":"so it's packed based, and if you like, it's kind of fire and forget","width":712.1818182468414},{"text":"you don't get any tracking number with these things","width":146.18181824684143},{"text":"you simply say here's my bytes, I want to send them to this IP address, away you go, good luck out there, hope you make it, if you don't, too bad","width":847.1818182468414},{"text":"and like I said, typically 97% will make it","width":368.18181824684143},{"text":"the other 3% who knows? they just died half way, they gave up, they found a cafe","width":475.18181824684143},{"text":"so there's no guarantee, there is no real reliability guarantee that UDP packets will get there","width":444.18181824684143},{"text":"however, it's pretty fast","width":101.18181824684143},{"text":"because there's no accountability","width":115.18181824684143},{"text":"it's just hey let's get it through as many routes as possible to get to its destination","width":382.18181824684143},{"text":"there is no ordering guarantee either","width":202.18181824684143},{"text":"so if you send two packets one after the other, they may arrive in different orders","width":1256.1818182468414},{"text":"here's the other thing that can happen","width":266.18181824684143},{"text":"there could be duplicates","width":510.18181824684143},{"text":"right, so you send one packet the other end gets 0 gets 2 gets 4 of them","width":424.18181824684143},{"text":"so this is the wild west of sending data","width":243.18181824684143},{"text":"what do you get for all of these issues? answer: speed","width":274.18181824684143},{"text":"you're not trying to track anything, you're not making any constraints on the network, you just say hey get as many of these things to the other end as possible","width":625.1818182468414},{"text":"so when might that be useful? yes?","width":259.18181824684143},{"text":"video games? for what kind of traffic? why?","width":323.18181824684143},{"text":"okay so if you want to stream some data out where you don't care about the old data","width":309.18181824684143},{"text":"and you just want to, say, update the current position of all the players or perhaps send some audio where if you drop a few frames, it doesn't matter","width":784.1818182468414},{"text":"then UDP is a pretty good choice","width":498.18181824684143},{"text":"but you do have to work harder under these kind of constraints","width":256.18181824684143},{"text":"your code that you write has to say I might not get the data, I may not get the data in the right order, I might skip some data","width":490.18181824684143},{"text":"yeah so it's often used in where let's say audio or games","width":901.1818182468414},{"text":"where old information or data is unimportant","width":636.1818182468414}],
// Part 6
[{"text":"alright so the other one TCP","width":1047.1818182468414},{"text":"we'll talk about what TCP stands for after break","width":173.18181824684143},{"text":"TCP is the opposite","width":203.18181824684143},{"text":"TCP is like a pipe","width":993.1818182468414},{"text":"unlike the pipes that we saw before however, you already have one file descriptor","width":2042.1818182468414},{"text":"TCP allows us to say okay here's all the bytes that are going to make my home page","width":394.18181824684143},{"text":"off you go","width":73.18181824684143},{"text":"here are all the bytes in my file","width":183.18181824684143},{"text":"push it down that pipe","width":216.18181824684143},{"text":"and out the other end, at the other machine that we've connected to, those bytes will come out in order","width":447.18181824684143},{"text":"without duplicates","width":186.18181824684143},{"text":"without missing bits","width":363.18181824684143},{"text":"so some magic must have happened between our two endpoints","width":288.18181824684143},{"text":"the packets that were sent maybe some got missing, maybe got duplicated, but we are unaware of that complexity","width":499.18181824684143},{"text":"with TCP, it becomes just a pipe","width":285.18181824684143},{"text":"and if the network between our two endpoints improves","width":349.18181824684143},{"text":"TCP will speed up the rate at which packets are sent","width":187.18181824684143},{"text":"if it degrades, it can automatically reduce the speed","width":384.18181824684143},{"text":"so TCP gives us a way to hide a lot of the actual network complexity of how those packets get from one machine to another","width":726.1818182468414},{"text":"and we'll talk about those guarantees after spring break","width":206.18181824684143},{"text":"have a wonderful but safe spring break, I hope you have a lot of fun playing with the new virtual machine","width":349.18181824684143},{"text":"the TAs will be in touch with you when it comes to grading MPs","width":222.18181824684143},{"text":"thank you very much! come down and see me if you have any questions","width":379.18181824684143}],
// Part 0
[{"text":"okay","width":1066.1818182468414},{"text":"good morning and welcome back from spring break","width":219.18181824684143},{"text":"you might recognize that music as part of the Star Wars music, we'll find out why in a little bit","width":478.18181824684143},{"text":"well what we're going to do today, of course, is talk about networking","width":158.18181824684143},{"text":"here we are towards the end of the semester and the major topics we're going to look at is networking","width":490.18181824684143},{"text":"that is, how we can connect one computer to the rest of the internet","width":180.18181824684143},{"text":"and also how can we deal with scheduling and files and a few of the, kind of, loose ends towards the end of the semester","width":460.18181824684143},{"text":"so this is it, right?","width":58.18181824684143},{"text":"this is the part of the systems programming that allows us to watch Star Wars on a computer from another machine, or anything else who you'll find on Youtube, which of course, was invented here by a student","width":849.1818182468414},{"text":"and we'll see how you might've even seen Star Wars prior to Youtube","width":511.18181824684143},{"text":"so let's, kind of, take a look at that, right","width":203.18181824684143},{"text":"so let's get started","width":179.18181824684143},{"text":"first of all, kind of a little bit of sure case for, perhaps you're interested in networking, we're not going to all networking, or course in 241","width":699.1818182468414},{"text":"but, there are courses here that take it a lot further","width":213.18181824684143},{"text":"so this is really just some highlights of first of all, if you wanted to know about networking and you wanted to able to talk like you know what you sound lick","width":573.1818182468414},{"text":"you're very to quick to start talking about the OSI model","width":320.18181824684143},{"text":"and this is really just a set of abstraction layers, so when you talk about vulnerabilities, or you want to design a protocol, you're actually going to be doing it inside one of these levels","width":718.1818182468414},{"text":"so let's have a look at some of these","width":243.18181824684143},{"text":"okay","width":109.18181824684143},{"text":"so, for example, our friends over at the ECE building","width":276.18181824684143},{"text":"they worry about the physical level, like what voltages do I want and how am I going to represent my 1's and 0's etc.","width":545.1818182468414},{"text":"241, we're going to be playing mostly with in this level in terms of looking at packets and different mechanisms of transport","width":713.1818182468414},{"text":"in particular, we're going to be playing with TCP and UDP","width":372.18181824684143},{"text":"that's not the whole story though because of course, we don't want to simply send a packet of arbitrary data","width":352.18181824684143},{"text":"we like to make applications","width":248.18181824684143},{"text":"applications themselves have protocol","width":259.18181824684143},{"text":"so, if TCP and UDP are methods, are well-defined ways to communicate at lower level, at the higher level, you're going to find things like HTTP","width":724.1818182468414},{"text":"when do you see HTTP?","width":172.18181824684143},{"text":"websites! yes sir, if you wanted to talk to a web server, you need to know how to talk HTTP, and there's a document about that","width":491.18181824684143},{"text":"about how what it means to talk HTTP, what bytes you should send, what responses you should get","width":375.18181824684143},{"text":"if you want to send mail, there's a prototype called SMTP","width":418.18181824684143},{"text":"alright, so how about all of these different kind of levels of protocol","width":326.18181824684143},{"text":"inside CS 241","width":285.18181824684143},{"text":"what are we going to see?","width":87.18181824684143},{"text":"well, we're going to see, like I said TCP, UDP","width":176.18181824684143},{"text":"most of the internet today, as you know, uses IPv4, or often shortened to just IP4, or even sometimes IP","width":550.1818182468414},{"text":"and this is an addressing protocol that allows me to talk to machines, but we only use 32 bits","width":494.18181824684143},{"text":"to describe the endpoints, the starting point and the endpoint","width":271.18181824684143},{"text":"so we're limited because we have more devices than that","width":279.18181824684143},{"text":"so don't panic, we came up with a new protocol called IPv6","width":209.18181824684143},{"text":"which now has 128 bit addressing","width":238.18181824684143},{"text":"except even though it was designed many years ago, it still represents less than 5% of today's traffic and it still has problems that you'll find routers, which are misconfigured throughout the internet and IPv6 is not yet as reliable as it should be","width":954.1818182468414},{"text":"right","width":53.18181824684143},{"text":"but there are, okay","width":150.18181824684143},{"text":"so that's the kind of as far as we go in terms of these lower level protocols","width":425.18181824684143},{"text":"i'll show you what the actual bytes look like for IPv4 and IPv6 in another lecture","width":450.18181824684143},{"text":"but for now, we're just going to say, hey this stuff exists, and this is the way I can send data from one machine to another machine","width":523.1818182468414},{"text":"so let's have a look at this TCP and UDP","width":272.18181824684143},{"text":"alright, first of all, we better understand what they stand for","width":424.18181824684143},{"text":"so UDP is \"user datagram protocol\"","width":1081.1818182468414},{"text":"so, by the way, the word datagram comes from data and telegram","width":323.18181824684143},{"text":"it's like this, I want to send this telegram to you and I'm not quite sure when it's going to arrive and in fact, if I send two telegrams to you, maybe they'll arrive out of order","width":534.1818182468414},{"text":"maybe we'll get lost along the way, the carrier pigeon will be eaten by a hawk","width":408.18181824684143},{"text":"who knows, right?","width":93.18181824684143},{"text":"we don't know whether the information I send will truly get to the endpoint","width":395.18181824684143},{"text":"maybe a scribe will actually send you two of these things","width":213.18181824684143},{"text":"so, we talk about datagrams when we have this unreliable delivery mechanism","width":451.18181824684143},{"text":"so that's its main characteristic, it's unreliable","width":209.18181824684143},{"text":"and that pen doesn't work too well, so let's a different one","width":141.18181824684143},{"text":"unreliable","width":591.1818182468414},{"text":"so we can get our datagrams out of order","width":643.1818182468414},{"text":"if your general says, \"hey! retreat!\", and another telegrams says, \"hey! advance!\"","width":298.18181824684143},{"text":"without actually putting your own timestamp information inside that, you don't know which one is sent first","width":632.1818182468414},{"text":"so UDP gives you no guarantees about when things are going to arrive, the order of things going to arrive, and whether you have missing data, or even duplicate data","width":1283.1818182468414},{"text":"so, essentially it's making no guarantees about the lower levels of the internet","width":473.18181824684143},{"text":"it's saying, if there's any problems, if someone decides to disconnect the cable, or the router between you and me is misbehaving, you're open to those problems","width":583.1818182468414},{"text":"you have to deal with it","width":203.18181824684143},{"text":"but","width":287.18181824684143},{"text":"it's fast","width":216.18181824684143},{"text":"there's no handshaking","width":393.18181824684143},{"text":"as soon as I send a packet, and arrives at your end, you see it","width":510.18181824684143},{"text":"okay, so one of the main characteristics is it's unreliable, what does that mean?","width":201.18181824684143},{"text":"we may see dups","width":152.18181824684143},{"text":"we may see missing datagrams","width":634.1818182468414},{"text":"it may be out of order","width":187.18181824684143},{"text":"so there's no guarantee about sequencing","width":393.18181824684143},{"text":"essentially, it's saying, \"yeah, I've got a post office and I've got telegram service, but I make not guarantees about how good it is\". it might change from second to second","width":528.1818182468414},{"text":"\"it might change from second to second\"","width":64.18181824684143}],
// Part 1
[{"text":"alright, so why would anybody use UDP's?","width":227.18181824684143},{"text":"and the answer is: most of the time, we don't","width":134.18181824684143},{"text":"because it doesn't give us many guarantees","width":232.18181824684143},{"text":"however","width":300.18181824684143},{"text":"if we were writing an application where we prefer to handle these missing packets, so all of these unreliabilities stuff","width":367.18181824684143},{"text":"over late packets, over late information arriving, then maybe UDP will be a good choice","width":901.1818182468414},{"text":"alright, so let's flip to the other protocol, that is quite common, and that is","width":400.18181824684143},{"text":"TCP","width":273.18181824684143},{"text":"or","width":420.18181824684143},{"text":"transmission control protocol","width":635.1818182468414},{"text":"so if UDP was giving direct access to those telegram service","width":288.18181824684143},{"text":"TCP inserts some control now between you and actually what happens, actually what goes out on the wire","width":547.1818182468414},{"text":"actually, it will abstractly","width":369.18181824684143},{"text":"no, it will hide all of the problems we might see when packets are actually sent from one machine to another machine","width":579.1818182468414},{"text":"so what are we talking about?","width":111.18181824684143},{"text":"well, you're going to see the following great things","width":119.18181824684143},{"text":"first of all, it tries to add some reliability","width":577.1818182468414},{"text":"I feel like I'm a used car salesman at this point","width":125.18181824684143},{"text":"\"Hey! Don't worry about your car! If it breaks down, we'll send you a new one. No questions asked.\"","width":509.18181824684143},{"text":"if your packets get lost in transit, don't worry, I will handle it for you","width":230.18181824684143},{"text":"I guarantee that your data will get from A to B","width":324.18181824684143},{"text":"and in the right order!","width":242.18181824684143},{"text":"just give me the data you want to send, and you'll be fine","width":296.18181824684143},{"text":"and in fact, I'll give you some error collection as well","width":303.18181824684143},{"text":"so, we might write this as error detection, or guaranteed that your message is error-free","width":621.1818182468414},{"text":"which is whiter than any other cereal, no what?","width":235.18181824684143},{"text":"okay actually","width":111.18181824684143},{"text":"error-free is a bit of a marketing hype, actually the checksum is only 16 bits","width":366.18181824684143},{"text":"so actually, you got one in the 2^16 chance of this error detection not discovering some random bit flips","width":698.1818182468414},{"text":"so that's a little bit of a hyperbole","width":143.18181824684143},{"text":"but, it does do error detection","width":136.18181824684143},{"text":"okay, what else we got?","width":61.18181824684143},{"text":"flow control","width":325.18181824684143},{"text":"and similar to that, congestion control","width":557.1818182468414},{"text":"so","width":120.18181824684143},{"text":"our protocols are, at an abstract level","width":177.18181824684143},{"text":"and we don't know whether we're trying to send data over a fiber optic link","width":310.18181824684143},{"text":"or","width":176.18181824684143},{"text":"piece of telephone wire","width":175.18181824684143},{"text":"or even just some old barbed wire that we happened to have that stretches from my farm to your farm","width":441.18181824684143},{"text":"TCP can cope with all of these","width":205.18181824684143},{"text":"of course, the number of bits we can send per second in these two examples are very, very different","width":511.18181824684143},{"text":"so we want a mechanism to ramp up the speed at which we try to send bytes","width":432.18181824684143},{"text":"and we need mechanisms that can cope with partial failures","width":291.18181824684143},{"text":"so, suddenly, our route from China to here changes drastically and we can no longer send as many bytes as we'd like per second","width":569.1818182468414},{"text":"TCP will notice that and actually to reduce the number of bytes it sends per second, so we can optimize the use of available bandwidth in real time","width":892.1818182468414},{"text":"and finally congestion control","width":104.18181824684143},{"text":"hey, we don't share these links, so we actually want to be careful that we don't step on each other's toes and so, we attempt to make sure we play fair with other users of the link","width":748.1818182468414},{"text":"how do we do these things?","width":374.18181824684143},{"text":"magic!","width":180.18181824684143},{"text":"no","width":116.18181824684143},{"text":"we, of course, TCP actually includes additional information, in addition to the bytes that you want to send, includes additional information inside each packet as to how many bytes should be sent","width":793.1818182468414},{"text":"and the status of each end","width":130.18181824684143},{"text":"we might talk a little about it inside CS 241, but if you want to know more, take a networking class at the 400 level","width":600.1818182468414},{"text":"one of the most amazing things about TCP is that it, it has to work even with adversarial people, or attacks on the internet","width":693.1818182468414},{"text":"that will try to steal those bytes, copy those bytes, masquerade as you, and TCP is evolved of the time to try to cope with some of those threats","width":637.1818182468414},{"text":"and we might talk a little bit about that","width":186.18181824684143},{"text":"right then, so let's answer some of these questions","width":153.18181824684143},{"text":"okay, which one of these you think uses handshaking?","width":306.18181824684143},{"text":"yes! TCP!","width":172.18181824684143},{"text":"before TCP, can send any of your bytes","width":445.18181824684143},{"text":"it actually has to set up ","width":151.18181824684143},{"text":"it has to send a packet from one direction to the other direction","width":277.18181824684143},{"text":"so there's a latency, there's a startup cost","width":275.18181824684143},{"text":"to creating a TCP connection","width":304.18181824684143},{"text":"which one do you think requires more system resources?","width":211.18181824684143},{"text":"TCP, yes!","width":87.18181824684143},{"text":"so, TCP behaves a bit like a pipe","width":692.1818182468414},{"text":"except that we can use the same file descriptor for receiving and sending","width":523.1818182468414},{"text":"so remember how we're seeing read and write, and you've seen in terms of being able to talk to stdin, stdout","width":381.18181824684143},{"text":"you've seen it in terms of being able to read or write from a particular file, you've seen it in terms being able to read and write from an unnamed pipe","width":421.18181824684143},{"text":"guess what, we can use these with TCP as well!","width":366.18181824684143},{"text":"so once you've set up a connection with TCP, sending stuff is easy!","width":449.18181824684143},{"text":"and I'm going to put it in quotes","width":201.18181824684143},{"text":"easy for system programmers like yourself","width":151.18181824684143},{"text":"there's a few gotchas and we'll talk about some of those today and in future lectures","width":218.18181824684143},{"text":"okay, which one of these do you think encrypts your data?","width":373.18181824684143},{"text":"make your guess now","width":516.1818182468414},{"text":"neither","width":188.18181824684143},{"text":"the bytes you send on the internet using these are completely visible to anybody else that is sniffing on the wire","width":648.1818182468414},{"text":"so, do you trust every telegraph operator between you and your mom?","width":468.18181824684143},{"text":"because they could be copying the bits that you are sending","width":202.18181824684143},{"text":"\"Hi mom, having a great time. Send more money. Thanks\"","width":282.18181824684143},{"text":"being able to see those characters","width":153.18181824684143},{"text":"so of course, there is an art to making sure that those characters don't mean anything","width":427.18181824684143},{"text":"that's we can encrypt them in some way","width":99.18181824684143},{"text":"but that is not part of these lower level protocols","width":216.18181824684143}],
// Part 2
[{"text":"so a long, long time ago, we didn't care about ","width":361.18181824684143},{"text":"sending things in just clear text on the internet","width":251.18181824684143},{"text":"because there were no bad guys","width":189.18181824684143},{"text":"no one was listening to those bytes that we were sending","width":294.18181824684143},{"text":"and in fact, there used to be a service, a telnet service, where you could log on to a remote machine, type in your password and you'd have a remote terminal","width":743.1818182468414},{"text":"these days, of course, we use SSH on port 23","width":190.18181824684143},{"text":"but it didn't always be like that","width":116.18181824684143},{"text":"there used to be a service on port 22, which was completely unencrypted","width":366.18181824684143},{"text":"good luck today finding an unencrypted port 22","width":363.18181824684143},{"text":"a terminal service on port 22","width":187.18181824684143},{"text":"well, guess what?","width":66.18181824684143},{"text":"i've found one","width":61.18181824684143},{"text":"let me show it to you","width":107.18181824684143},{"text":"of course we're talking about an application here, a virtual terminal, where we can connect to a remote machine","width":384.18181824684143},{"text":"and start sending it some bytes","width":150.18181824684143},{"text":"so","width":316.18181824684143},{"text":"here it is","width":48.18181824684143},{"text":"right","width":23.18181824684143},{"text":"let me","width":322.18181824684143},{"text":"okay, right","width":719.1818182468414},{"text":"[gibberish]","width":1103.1818182468414},{"text":"okay, so there happens to be a server on this particular address","width":228.18181824684143},{"text":"let's connect to it","width":2192.1818182468414},{"text":"yes, you couldn't actually log into this particular server, but it will play Star Wars movie four in ascii","width":611.1818182468414},{"text":"and so it slowly sends bytes to you, and your terminal interprets those bytes as characters, and displays them on the screen","width":399.18181824684143},{"text":"and the servers careful not to sent too many bytes too fast","width":331.18181824684143},{"text":"right, so do you think this particular server, this terminal connection is run with UDP or TCP?","width":383.18181824684143},{"text":"TCP! because normally where we want to connect to telenet, we want to make sure that","width":448.18181824684143},{"text":"[gibberish]","width":148.18181824684143},{"text":"the screen size is a little messed up, but you kind of see the idea","width":1106.1818182468414},{"text":"this is what happens to good protocols","width":214.18181824684143},{"text":"they end up serving Star Wars movies","width":265.18181824684143},{"text":"fortunately, a UIUC student came up with Youtube, and we no longer have to watch this kind of stuff, right?","width":939.1818182468414},{"text":"okay this is way too much fun","width":98.18181824684143},{"text":"so","width":252.18181824684143},{"text":"it's easy to find, just type in \"telnet\" and \"Star Wars\", and you too can watch Star Wars","width":524.1818182468414},{"text":"and enough of that","width":426.18181824684143},{"text":"so these days of course, we have this major use of the internet, which is web traffic","width":411.18181824684143},{"text":"so when you want to talk to a web server","width":179.18181824684143},{"text":"you need to understand this high level protocol","width":263.18181824684143},{"text":"from the seventh layer","width":100.18181824684143},{"text":"HTTP, hypertext transfer transport protocol","width":433.18181824684143},{"text":"this of course runs over TCP","width":199.18181824684143},{"text":"and HTTP is actually an offspring of an FTP protocol","width":663.1818182468414},{"text":"and it's pretty old now, version 1.1 is about 15 years old","width":475.18181824684143},{"text":"and it was a ","width":230.18181824684143},{"text":"text protocol","width":200.18181824684143},{"text":"just recently, we now have http version 2 of this protocol","width":549.1818182468414},{"text":"which is now a binary","width":126.18181824684143},{"text":"so if you go to a model server and you say \"hey, i'd like to talk to you using version 2 please\", then you'd need to be able to speak it in binary","width":1110.1818182468414},{"text":"but the original protocol was text","width":141.18181824684143},{"text":"and so we can just play with that today, we can actually connect to a web server and get it to send us a page","width":515.1818182468414},{"text":"get it to send us some information","width":205.18181824684143},{"text":"and that brings us to page 2","width":1719.1818182468414},{"text":"alright, so let's do a little demo first","width":286.18181824684143},{"text":"we'll try this","width":610.1818182468414},{"text":"right, so let's try connecting to a machine","width":458.18181824684143},{"text":"i love the music","width":46.18181824684143},{"text":"right, here we go","width":61.18181824684143},{"text":"we'll do illinois.edu and I'm going to connect port 80, which is where web servers listen on","width":689.1818182468414},{"text":"great, we've connected","width":87.18181824684143},{"text":"right, so we've connected this machine","width":177.18181824684143},{"text":"and now, I can send something, so I'm going to type in get / HTTP/1.0 and we'll hit return twice","width":990.1818182468414},{"text":"okay, great! look at that, it actually understood what I said, and it sent back a whole load of stuff","width":443.18181824684143},{"text":"it said, oh look! this machine, this web server is serving using apache version 2.2.15","width":521.1818182468414},{"text":"so if I was a hacker, I'd immediately type in \"apache 2.2.15 vulnerabilities\"","width":439.18181824684143},{"text":"and tell us which version of SSL and OpenSSL","width":249.18181824684143},{"text":"great, I'll use those as a hack as well to discover if they've got any vulnerabilities","width":267.18181824684143},{"text":"it tells me when this page was last modified, so if I have to have a cache of this page on my local machine, I know that if my version is more recent than Friday","width":729.1818182468414},{"text":"that date, then 2012? my goodness","width":176.18181824684143},{"text":"then I can use my own version, right?","width":163.18181824684143},{"text":"and finally it tells me a little bit about what's there, so basically there's nothing there and it's in this particular memtype, this text/html","width":647.1818182468414},{"text":"so my web browser can use that to understand this content, and we know that we expect seventy-three bytes of content","width":642.1818182468414},{"text":"let me try a different machine","width":220.18181824684143},{"text":"let's try","width":491.18181824684143}],
// Part 3
[{"text":"so we'll get that and HTTP/1.0","width":497.18181824684143},{"text":"okay, right!","width":107.18181824684143},{"text":"and I get a big chunk of text, including stuff that says","width":230.18181824684143},{"text":"\"Hey, maybe you want to use Javascript as well\"","width":189.18181824684143},{"text":"alright, so I'm getting a little bit of text, of a script on that page","width":363.18181824684143},{"text":"and finally","width":207.18181824684143},{"text":"we see these tags down here, </body>, </html>","width":227.18181824684143},{"text":"is that part of the HTTP protocol? No!","width":165.18181824684143},{"text":"what is it?","width":107.18181824684143},{"text":"it's HTML!","width":83.18181824684143},{"text":"HTML is independent of our network protocol","width":254.18181824684143},{"text":"HTML is just a way to describe a webpage","width":328.18181824684143},{"text":"and of course you can save that on a file","width":253.18181824684143},{"text":"you can save it on a USB stick","width":143.18181824684143},{"text":"HTML is completely independent of HTTP, so HTTP is about talking to web servers","width":323.18181824684143},{"text":"HTML is about how to mark up web pages","width":209.18181824684143},{"text":"they are two different protocols","width":214.18181824684143},{"text":"so we've shown that I can use this little tele-command to talk to webservers and this number 80 here is a port number","width":765.1818182468414},{"text":"if you want to run things on port 80, you can't","width":243.18181824684143},{"text":"unless, you run it as root","width":257.18181824684143},{"text":"so, the lower port numbers","width":134.18181824684143},{"text":"port numbers 0, 1, up to 1023, require you to be an administrator on the machine","width":486.18181824684143},{"text":"which is great because you will have a virtual machine now, that you can root into","width":254.18181824684143},{"text":"you can do sudo, or you can log in as root, and you can then set up a web server on that machine on port 80 ","width":490.18181824684143},{"text":"let's see what we're going to do today","width":86.18181824684143},{"text":"we're going to write some code that basically does this from C","width":292.18181824684143},{"text":"so we're going to connect to another machine","width":168.18181824684143},{"text":"so this is kind of what was enough for you to write half of Yik-Yak, if you'd like","width":311.18181824684143},{"text":"at least the client end","width":188.18181824684143},{"text":"here's some code I wrote earlier","width":317.18181824684143},{"text":"perfect timing","width":323.18181824684143},{"text":"and this is the beginnings then, of what network coding looks like","width":517.1818182468414},{"text":"now","width":147.18181824684143},{"text":"what we're actually going to create is something called a socket","width":213.18181824684143},{"text":"so a socket is","width":113.18181824684143},{"text":"a system object ","width":133.18181824684143},{"text":"not a C++ object, of course","width":86.18181824684143},{"text":"but just an object that represents the connection endpoint","width":338.18181824684143},{"text":"that we can send bytes into and get bytes back from","width":228.18181824684143},{"text":"so it's like a, think of it like a socket you can plug into","width":342.18181824684143},{"text":"it's going to be a way for us to communicate with remote servers and also weigh a socket's","width":437.18181824684143},{"text":"you can set options on a socket","width":113.18181824684143},{"text":"we're not going to do anything fancy today","width":260.18181824684143},{"text":"but how to identify sockets?","width":78.18181824684143},{"text":"easy","width":33.18181824684143},{"text":"just with","width":371.18181824684143},{"text":"a file descriptor","width":94.18181824684143},{"text":"so this will just be a small number","width":169.18181824684143},{"text":"and once we've done all this magic, we can just call read and write on this socket descriptor, and use it just like an open file","width":947.1818182468414},{"text":"so let's what we've got here","width":137.18181824684143},{"text":"i'm going discuss this amazing beast","width":243.18181824684143},{"text":"this didn't used to be inside CS 241","width":189.18181824684143},{"text":"or any networking class, this is relatively a new addition: get address info, and it makes writing network code much, much easier","width":405.18181824684143},{"text":"it does so much for us, it sets a whole lot of C structures for us","width":263.18181824684143},{"text":"and it can be used in a variety of ways, we're going to look at one way today, which is to go from","width":415.18181824684143},{"text":"a host name that we understand","width":132.18181824684143},{"text":"a fully qualified name here, like \"www.illinois.edu\"","width":182.18181824684143},{"text":"and turn that into an IP address","width":217.18181824684143},{"text":"a binary number","width":495.18181824684143},{"text":"so to use it","width":152.18181824684143},{"text":"we actually have to create a little struct","width":237.18181824684143},{"text":"notice the struct name is the same as the function","width":293.18181824684143},{"text":"getaddrinfo","width":90.18181824684143},{"text":"but in fact, there's going to be two structs","width":123.18181824684143},{"text":"we set one up as a kind of \"hints\" structure, to say this is the kind of stuff that I'd like to know about","width":401.18181824684143},{"text":"and we get back a pointer to a different struct","width":273.18181824684143},{"text":"of the same type","width":100.18181824684143},{"text":"so that's why I have","width":107.18181824684143},{"text":"one called \"hints\" and one called \"Okay, yeah. I'm also going to need a pointer to one\"","width":218.18181824684143},{"text":"so I'm not going to set up result, that was going to be set up for me","width":201.18181824684143},{"text":"and if you look down here, you'll see that we pass in not the pointer, but a pointer to that pointer","width":353.18181824684143},{"text":"because this function is going to mess with that pointer","width":166.18181824684143},{"text":"it's going to set that pointer to the completed information","width":478.18181824684143},{"text":"right","width":57.18181824684143},{"text":"so, what do we care about today? ","width":102.18181824684143},{"text":"well, I would like to have information for connecting with an IP","width":534.1818182468414},{"text":"version 4, so I want to make a connection","width":127.18181824684143},{"text":"yeah, yeah, just like 95% of the rest of the internet traffic using using version 4","width":399.18181824684143},{"text":"and I want to use TCP","width":167.18181824684143},{"text":"and as we know, TCP is a stream, it's like a pipe","width":327.18181824684143},{"text":"and these constants are kind of hard to remember, don't panic in an exam","width":250.18181824684143},{"text":"I give you a crib sheet","width":90.18181824684143},{"text":"but also, just as a hint, notice that they always come in this variety where the AF corresponds to a hint for you about what things should this be connected with?","width":835.1818182468414},{"text":"so sock, for example, the kind of socket type is a prefix as to what this constant should be","width":577.1818182468414},{"text":"now these constants are just integers","width":210.18181824684143},{"text":"they're just there to make our code look more readable as opposed to hard-coding constants","width":326.18181824684143},{"text":"unfortunately, it can mean then that you can accidentally put the wrong constant into the wrong field, and the compiler won't complain","width":456.18181824684143},{"text":"your code simply won't work","width":215.18181824684143},{"text":"now, writing network code is hard","width":293.18181824684143},{"text":"because","width":168.18181824684143},{"text":"it's like going to McDonald's, where everybody inside working there hates you","width":309.18181824684143},{"text":"unless you specify everything exactly correctly","width":314.18181824684143},{"text":"nothing comes out the window at the ned","width":209.18181824684143},{"text":"like doing a drive-thru and trying to do it with an English accent","width":188.18181824684143},{"text":"I have a really hard time at McDonald's","width":353.18181824684143},{"text":"\"You want fries with that?\", and I'll say something, it doesn't really matter what I say, and I never get fries","width":442.18181824684143},{"text":"so when new is desperately working trying to figure how to say ","width":206.18181824684143},{"text":"another fun thing with an English accent is the phone things, you know","width":353.18181824684143},{"text":"like say \"one\" to \"one\"","width":155.18181824684143},{"text":"I never get anywhere","width":174.18181824684143},{"text":"so this is the fun of networking code is that you've got to specify things exactly and you've got to be on your tip-toes to make sure you haven't accidentally put the wrong constant in the wrong field because no one will tell you've made a mistake","width":968.1818182468414},{"text":"right, that's the first gotcha","width":97.18181824684143},{"text":"is give the right constants for the right fields","width":925.1818182468414},{"text":"the next gotcha","width":190.18181824684143},{"text":"at least for this code, is","width":168.18181824684143},{"text":"for the unused fields, we better set them to 0","width":278.18181824684143},{"text":"and that's the purpose of this memset","width":130.18181824684143},{"text":"there's a whole load of things in this struct that I don't want to set","width":244.18181824684143},{"text":"and if I don't do this memset","width":283.18181824684143},{"text":"and this is just on the stack","width":101.18181824684143},{"text":"then as you know, the stack memory is arbitrary","width":201.18181824684143},{"text":"so","width":93.18181824684143},{"text":"make sure that you've set unused fields to 0","width":279.18181824684143}],
// Part 4
[{"text":"so this getaddrinfo() is ","width":1358.1818182468414},{"text":"sort of a powerhouse of a call","width":163.18181824684143},{"text":"it does an awful lot of work behind the scenes","width":133.18181824684143},{"text":"including making a network connection, say \"hey! hey, anybody! anybody know who this is? www.illinois.edu? anybody got an ip address to this?\"","width":822.1818182468414},{"text":"so what am i talking about? i'm talking about","width":271.18181824684143},{"text":"dns, and we'll talk more about dns a different time","width":213.18181824684143},{"text":"well that itself, but that call itself could be making network requests to say \"hey i need the ip address that's connected to this name\"","width":559.1818182468414},{"text":"so the whole lot of stuff that happens behind the scenes just to discover the ip address","width":434.18181824684143},{"text":"right, so what does the ip address go into? it goes into one of these structs","width":504.18181824684143},{"text":"and where does the ip address actually appear?","width":223.18181824684143},{"text":"it actually appears inside here, this little [gibberish] here, this address, and this other thing called addrlen is set","width":553.1818182468414},{"text":"so why can address be different lengths?","width":193.18181824684143},{"text":"well, socket is an abstract idea, and it might have different kinds of sockets","width":350.18181824684143},{"text":"we might have an ip4 type socket, or we might have an ip6 kind of socket, or we might have an apple talk socket","width":447.18181824684143},{"text":"so these c structures are actually designed to be potentially different lengths, so when we call connect, we actually have to say \"and this is actually the size of my data structure\"","width":1232.1818182468414},{"text":"right, so","width":138.18181824684143},{"text":"so what have we got? we've got getaddrinfo() to fill out that socket information for me","width":293.18181824684143},{"text":"if we didn't have this, we'd be writing lots more code, and it's really ugly, it's got lots of casts in it","width":350.18181824684143},{"text":"the beautiful thing about this is we set up a hints thing, we say do we want ip4 or ip6, or we don't care, and we say say the socket stream, or we want UDP, and then we create a socket and we can connect to it","width":927.1818182468414},{"text":"and we're done! we're ready for action! right","width":250.18181824684143},{"text":"let's write some code then","width":257.18181824684143},{"text":"so connect will do the handshaking, so now we're going to actually use this thing ","width":481.18181824684143},{"text":"right, so i need to send it something, okay","width":339.18181824684143},{"text":"right, so what i'm going to send?","width":140.18181824684143},{"text":"here can be my request","width":250.18181824684143},{"text":"it'll say \"GET\" homepage","width":323.18181824684143},{"text":"make that larger, here we go","width":103.18181824684143},{"text":"right","width":39.18181824684143},{"text":"get the home page, i'm going to speak http/1.0 to you, and i need to send it these newline characters to say that's the end of my request \"/r/n\", if i wrote it twice","width":997.1818182468414},{"text":"okay, we could ","width":183.18181824684143},{"text":"for debugging let's just print this out","width":455.18181824684143},{"text":"okay","width":104.18181824684143},{"text":"and i'm going to write the minimum code that will kind of work, this is not robust quality code by any means","width":415.18181824684143},{"text":"that we'd used a real web server, or any other client","width":242.18181824684143},{"text":"but it's good enough for lecture demo today","width":122.18181824684143},{"text":"right, so","width":46.18181824684143},{"text":"how do we use write()?","width":49.18181824684143},{"text":"well, remember that you need to give it a file descriptor","width":166.18181824684143},{"text":"okay, that's what i got from the socket","width":359.18181824684143},{"text":"you need to give it a pointer to some bytes that we want to send","width":195.18181824684143},{"text":"okay, that was my request","width":210.18181824684143},{"text":"and i need the number of bytes, yes","width":558.1818182468414},{"text":"if","width":80.18181824684143},{"text":"right, even number of bytes","width":199.18181824684143},{"text":"so, could i say request?","width":610.1818182468414},{"text":"how many, what is the size of request?","width":254.18181824684143},{"text":"that's 4 bytes or 8 bytes?","width":214.18181824684143},{"text":"because it's a pointer, it's not - we didn't specify it as an array","width":195.18181824684143},{"text":"remember arrays, kind of like pointers, but they're not pointers","width":224.18181824684143},{"text":"if you ask for the size of a pointer, you get a size of a pointer, which is 4 bytes on a 32-bit machine, 8 bytes on a 64","width":425.18181824684143},{"text":"we didn't want that","width":77.18181824684143},{"text":"we could've either made request a different type, we could've made it a character array, or we could just calculate it during runtime","width":435.18181824684143},{"text":"so let's do it during runtime","width":55.18181824684143},{"text":"so strlen(), give me the number of characters inside request","width":432.18181824684143},{"text":"i do not need to send the 0 byte","width":208.18181824684143},{"text":"the protocol is not about c-strings, it's the end of the line, the end of the request is to find in terms of these double newline characters, right","width":648.1818182468414},{"text":"so we send that ","width":130.18181824684143},{"text":"i could get the return value to see how many bytes were sent, but nah, it's a lecture","width":286.18181824684143},{"text":"right, so","width":144.18181824684143},{"text":"let's get back to response, okay, we need some space for that, so as this is just a quick demo, we'll just have some space on the stack here","width":648.1818182468414},{"text":"it gives to my response","width":347.18181824684143},{"text":"and ","width":302.18181824684143},{"text":"let's read from that socket","width":208.18181824684143},{"text":"right, sock_fd","width":103.18181824684143},{"text":"i need to give it a pointer to some space, some memory","width":213.18181824684143},{"text":"how many bytes do i want to read up to? we'll say 999","width":236.18181824684143},{"text":"why 999? well, because if length is, get at least one thing","width":579.1818182468414},{"text":"we will print it out as a c-string, so i'm going to terminate it","width":611.1818182468414},{"text":"and finally, we'll print it out","width":653.1818182468414},{"text":"okay","width":207.18181824684143},{"text":"questions at this point?","width":366.18181824684143},{"text":"aha, it's easy! right?","width":220.18181824684143},{"text":"the file descriptor wasn't set once i called connect()","width":363.18181824684143},{"text":"i've connected!","width":93.18181824684143},{"text":"i am network man!","width":71.18181824684143},{"text":"anyway, so we've now got the power of the internet at our fingertips","width":374.18181824684143},{"text":"well at least","width":98.18181824684143},{"text":"all of the internet we can connect to using TCP","width":257.18181824684143},{"text":"right, so let me","width":283.18181824684143},{"text":"[gibberish] okay, we'll do illinois to begin with","width":128.18181824684143},{"text":"right, so","width":94.18181824684143},{"text":"we'll run this ","width":312.18181824684143},{"text":"what'll i call the code?","width":128.18181824684143},{"text":"[gibberish]","width":163.18181824684143},{"text":"alright, awesome","width":180.18181824684143},{"text":"[gibberish]","width":255.18181824684143},{"text":"ah! great, happy days","width":90.18181824684143},{"text":"right, so let's run awesome","width":236.18181824684143},{"text":"hey! look at that!","width":148.18181824684143},{"text":"we wrote some c code, we connected to another machine!","width":205.18181824684143},{"text":"this is what it's all about, this is what makes 241 so powerful, right?","width":214.18181824684143},{"text":"now we can actually talk to any  machine, and now i can run my machine, i can run this a hundred thousand times, and run a ddos attack on the internet","width":733.1818182468414},{"text":"don't do that","width":193.18181824684143},{"text":"because every server, of course, can log the ip address","width":399.18181824684143},{"text":"and log the content of what's being sent to it","width":121.18181824684143}],
// Part 5
[{"text":"now I actually have done attacks","width":425.18181824684143},{"text":"the difference was, was I had a nice, big legal agreement","width":233.18181824684143},{"text":"not from the janitor of the company","width":178.18181824684143},{"text":"well, from a C level executive","width":180.18181824684143},{"text":"i.e a CEO, a CTO, that kind of thing","width":169.18181824684143},{"text":"and I did this as part of a company, so I had liability protection, etc, etc, etc","width":294.18181824684143},{"text":"and I kind of knew what I was doing","width":139.18181824684143},{"text":"right","width":140.18181824684143},{"text":"so with great power comes great responsibility, and unfortunately, now, you are now treated as people that are no longer normal","width":721.1818182468414},{"text":"the justice systems hates you","width":201.18181824684143},{"text":"and they would love to see you put away for many, many years","width":304.18181824684143},{"text":"even for simple hacking, as defined by the newspapers","width":295.18181824684143},{"text":"right","width":79.18181824684143},{"text":"guess what? there's a log somewhere that says \"your peer address was used for x, okay that's good enough me!\"","width":318.18181824684143},{"text":"\"send him to jail and he can work a dollar, or she can work for a dollar a year\"","width":299.18181824684143},{"text":"splitting rocks, whatever","width":212.18181824684143},{"text":"probably not the ending to your university career that you're hoping for","width":337.18181824684143},{"text":"also yes, the server has logs, but there's routers in between that have logs as well, so it's relatively easy to discover where packets are coming from","width":765.1818182468414},{"text":"so if you must hack a system, here's a system i suggest you hack","width":610.1818182468414},{"text":"get in there and delete as many files as you want","width":213.18181824684143},{"text":"that of course is the ip address for your own machine, right? the packets never leave the machine, the kernel actually recognizes that as an ip address and we'll not even send that to the network hardware","width":951.1818182468414},{"text":"alright, so let's have a quick look at this response","width":251.18181824684143},{"text":"we saw that this http request includes the number 200 and little strings that says \"hey! okay!\"","width":444.18181824684143},{"text":"how do you think we can generate a different number?","width":464.18181824684143},{"text":"you probably know one of these number already","width":282.18181824684143},{"text":"with a four","width":183.18181824684143},{"text":"right? 404, not found? that is part of the http protocol","width":228.18181824684143},{"text":"let's change our address","width":220.18181824684143},{"text":"oh, sorry, let's change this so we request a resource that doesn't exist","width":580.1818182468414},{"text":"we'll go","width":89.18181824684143},{"text":"aprilfoolsjokes.html","width":299.18181824684143},{"text":"see if there's anything about that, right?","width":162.18181824684143},{"text":"okay","width":163.18181824684143},{"text":"alright, so we'll","width":152.18181824684143},{"text":"let's compile this","width":194.18181824684143},{"text":"okay","width":69.18181824684143},{"text":"let's run our awesome client","width":243.18181824684143},{"text":"okay, what do we get this time? we got a different number, 404","width":196.18181824684143},{"text":"so this is how your browser knows that this particular page does not exist, and it would render some blank content","width":443.18181824684143},{"text":"you could put some other stuff in there as well","width":216.18181824684143},{"text":"there are other definitions to say \"hey, this page has moved. please redirect to this other url, etc.\"","width":428.18181824684143},{"text":"so the http protocol species all of that","width":340.18181824684143},{"text":"right, let's take a break for a moment, and talk about the course","width":367.18181824684143},{"text":"couple of comments","width":91.18181824684143},{"text":"i hear that quite a few of your classes have given you, like lots of homework to finish and even exams this week, so","width":915.1818182468414},{"text":"no exam this week","width":438.18181824684143},{"text":"mondays in future weeks","width":229.18181824684143},{"text":"not too good","width":86.18181824684143},{"text":"yes, please expect, unless otherwise stated, that the in-lecture exams will be on mondays","width":518.1818182468414},{"text":"for cs 241, okay","width":152.18181824684143},{"text":"i will try to get out practice questions before that","width":462.18181824684143},{"text":"what else do i want to say?","width":130.18181824684143},{"text":"oh, yes, oh yes, right","width":356.18181824684143},{"text":"so the last thing i want to talk about today is some alternative ways to program","width":463.18181824684143},{"text":"first of all, yeah, you've probably now know about, kind of, vi and vim","width":513.1818182468414},{"text":"vi has a historical background to say, \"suppose you have a really slow connection\"","width":388.18181824684143},{"text":"the beautiful thing about vi is that it tries to actually work even if you've got a pretty slow connection, and it has some cute tricks in it as well, so i think i've shown you this one, where we can say, change our current lines, so we can substitute, and if you know regular expressions, you can write regular expressions in here","width":1477.1818182468414},{"text":"so, for example, we can change \"include\" to \"exclude\" ","width":333.18181824684143},{"text":"right, that's a kind of simple one, right?","width":104.18181824684143},{"text":"i'm just changing it to \"exclude\"","width":85.18181824684143},{"text":"let's undo that","width":112.18181824684143},{"text":"we can change a whole load of things, so for example, let's on all lines, substitute 'if' for 'while', and the 'g' just means, if there's one matchy thing on a line, then substitute it, so now i've got","width":1308.1818182468414},{"text":"bad code, right?","width":111.18181824684143},{"text":"let's quit this without saving","width":128.18181824684143},{"text":"but i want to mention that that's not the only way to write code","width":265.18181824684143},{"text":"another way is to use the \"cat\" command","width":147.18181824684143},{"text":"so you've seen \"cat\" in terms of reading from a file, right?","width":295.18181824684143},{"text":"well, \"cat\", if you don't specify anything, we'll just echo back what you've typed","width":405.18181824684143}],
// Part 6
[{"text":"right, so now we can do cat>hello.c","width":343.18181824684143},{"text":"so now we're going to pipe the output of cat into a file \"hello.c\"","width":353.18181824684143},{"text":"so this all you need to program right? so now do #include <stdio.h>","width":434.18181824684143},{"text":"int main() { printf(\"hello\\n\"); return 0; }","width":723.1818182468414},{"text":"right, how do i finish? i have to tell my terminal that i don't have any more input, so i'm actually going to close now stdin","width":504.18181824684143},{"text":"how do i do that? by doing ctrl+d","width":150.18181824684143},{"text":"here we go","width":41.18181824684143},{"text":"and now i can compile my program hopefully, and if that gives me return value 0, then i also want to run it","width":519.1818182468414},{"text":"so there we go","width":158.18181824684143},{"text":"right","width":146.18181824684143},{"text":"so if you ever find yourself without any editor, don't worry, just use cat","width":463.18181824684143},{"text":"okay, right","width":43.18181824684143},{"text":"questions?","width":390.18181824684143},{"text":"no questions","width":252.18181824684143},{"text":"still no questions, okay","width":280.18181824684143},{"text":"right, have i shown you that the includes actually exist","width":267.18181824684143},{"text":"oh, here's a useful command, \"which\"","width":166.18181824684143},{"text":"right","width":45.18181824684143},{"text":"so \"which\" is, you'll probably use it next time you have java installed","width":210.18181824684143},{"text":"you say, \"okay, where's that?\"","width":83.18181824684143},{"text":"alright?","width":38.18181824684143},{"text":"or \"where is my gcc installed?\"","width":167.18181824684143},{"text":"and so \"which\" looks along the path to discover where these commands actually are, so how's it do that? well it looks inside every directory including inside $PATH","width":773.1818182468414},{"text":"so next you install something","width":237.18181824684143},{"text":"you might want to edit this $PATH variable and you'll notice that the directories simply have a \":\" here on a linux machine","width":507.18181824684143},{"text":"simply have a \":\" between them","width":223.18181824684143},{"text":"and where can you edit that? well on a linux and mac, you can edit your ","width":523.1818182468414},{"text":"okay","width":48.18181824684143},{"text":"let's go to my home directory, which is like this little","width":231.18181824684143},{"text":"[gibberish]","width":48.18181824684143},{"text":"you can edit your bash","width":181.18181824684143},{"text":"oh, come on","width":311.18181824684143},{"text":"oh, that's why","width":187.18181824684143},{"text":"bash_profile, and you can","width":250.18181824684143},{"text":"define things and add additional things to your path, right?","width":599.1818182468414},{"text":"great! so, the next lecture, we'll start talking about TCP servers and UDP client-servers and i will get the interview questions out for thursday by the end of this evening! Have a great week, good luck with the MPs","width":854.1818182468414},{"text":"thank you very much! have a great week, good luck with the mp's","width":255.18181824684143}],
// Part 0
[{"text":"alright good morning class how are you","width":367},{"text":" alright let's try again, good morning class how are you","width":159},{"text":"ok great so here's what we are gonna do for the last lecture we look to making a TCP client  ","width":326},{"text":"we made a socket and we ask the socket to connect to a remote server","width":246},{"text":"we connected it to Illinois.edu and we connected it to BBC.com, this time","width":293},{"text":"this lecture what we are gonna now is to go to the other end of the equation and we are gonna make a TCP server, and I'm gonna walk you through the steps and some of the gotchas for that","width":717},{"text":"so we'll talk about some of the nitty bitty of the code","width":263},{"text":"and although we'll put it all together and ask you about the server","width":246},{"text":"ok sounds like a plan, ok let's get started","width":160},{"text":"before we do that, let's see how much you remember from last lecture","width":298},{"text":"alright so what do we need to do to set up a client TCP socket","width":374},{"text":"ok so here we go um so","width":236},{"text":"back in the mists of time","width":126},{"text":"get address info didn't really exist","width":150},{"text":"and we have to carefully setup a struct","width":148},{"text":"um but fortunately for us today, getaddressinfo does exist","width":262},{"text":"so the first thing we might do is um","width":233},{"text":"we'll use get address info, so how do we do that","width":189},{"text":"well we setup um a hint set up...","width":355},{"text":"the um....","width":131},{"text":"addressinfo struct","width":485},{"text":"","width":1},{"text":"and we'll setup the hints","width":367},{"text":"we'll copy this struct. another intended use for this getaddressinfo we are just gonna pass it into getaddressinfo and so here's the thing that we care about","width":497},{"text":"like we really want a stream based protocol","width":162},{"text":"hey we wanna use IP 4 or we wanna use IP 6 or we um or we don't care we'll use either","width":613},{"text":"but anyways we said about our struct like we are doing down here we said about we are configuring it","width":414},{"text":"um we could get address info","width":146},{"text":"to setup the real struct for us","width":231},{"text":"and then we can use it so now here's the um","width":276},{"text":"here's the main part","width":188},{"text":"write a socket","width":264},{"text":"call connect","width":197},{"text":"so in a sense","width":164},{"text":"making a client actually requires two calls","width":203},{"text":"get a socket and ask that socket to connect to something","width":145},{"text":"that's not quite true because we are using this getaddressinfo to help us make the connect call","width":399},{"text":"but this is the actual part, if we actually know exactly what we wanted to put","width":253},{"text":"set it to connect, we won't need to be calling getaddressinfo","width":200},{"text":"that's just a helper method for us","width":164},{"text":"actually it's just these two calls: hey i want a socket, and hey please connect to somewhere. please connect to BBC and here's the IP address. right","width":619},{"text":"alright so um","width":209},{"text":"last semester","width":115},{"text":"no, last lecture","width":156},{"text":"i lied to you","width":131},{"text":"just a little bit","width":144},{"text":"i said getaddressinfo returns a struct of these addressinfo objects. well that's kind of true","width":865},{"text":"actually, it returns a linkedlist of them","width":301},{"text":"so here's what happens, you say, look, in my hints","width":205},{"text":"i would like a certain kind of connection, like, i would like, say, IP 4, for example","width":558},{"text":"and i would like, say, a stream based port for, say, TCP","width":409},{"text":"getaddressinfo says, okay you wanna get this remote host, i will find all of the possible ways","width":397},{"text":"to set up a socket and connect to the remote host and return it to you","width":312},{"text":"and that's what we get, we get a whole lot of these addrinfoes","width":215},{"text":"now and for our little code inside CS 241, don't worry about that, just use the very first one that it gives back to you","width":387},{"text":"assuming of course that getaddressinfo gives us a success","width":281},{"text":"result code","width":86},{"text":"but if you are writing a more verbose server, you might say i wanna connect to the BBC","width":238},{"text":"and i don't care if you can find a good IP 4 connection or good IP 6 connection i know what i'll just try both","width":613},{"text":"alright so, in fact you get this linkedlist","width":336},{"text":"alright so what have we got inside this addrinfo ","width":168},{"text":"alright we've seen these um, this half up here which is kind of a description of what we want","width":413},{"text":"this is the stuff that we are probably gonna be using in our code later on","width":300},{"text":"and that is this structure here, sockaddr","width":293},{"text":"and also the number of bytes in that address","width":190},{"text":"so you'll be seeing us passing those addresss. so you'll be seeing us passing those two fields","width":191},{"text":"into our connect call and our bind calls in a little bit","width":251},{"text":"ok so watch out for these, so this is the stuff that is setting up for us so we don't need to set up","width":501},{"text":"ok alright so we got our addrinfos","width":286},{"text":"alright so","width":128},{"text":"how many addrinfoes does it return? 0, 1 or more?","width":310},{"text":"i promise you that we'll never return you a negative number","width":297},{"text":"OK um. ","width":152},{"text":"one little thing that you might notice on the code before which is that if getaddressinfo fails","width":680},{"text":"you can't use perror() or structerror","width":342},{"text":"no, it doesn't set error number like that it's got its own error","width":427},{"text":"error code that you could use to return an error","width":371},{"text":"and we'll look that up in a bit","width":95},{"text":"instead i wanna charge through this because I actually want to get to the demo today","width":157},{"text":"the demo is the most fun","width":79},{"text":"but so what is AF_INET6?","width":177},{"text":"what kind of address family is this","width":267},{"text":"it is, yes, IP 6","width":298},{"text":"IP version 6. well we can talk about nodes we can talk about hosts, we can talk about machines","width":374},{"text":"using 128 bits of addressing","width":150},{"text":"in other words our address base is much larger","width":147},{"text":"alright so it's gonna take us a while to exhaust 2^128 possible addresses","width":702},{"text":"so IP version 6 was created because people foresaw the problem that hey we are starting to run out of addresses with IP version 4","width":954},{"text":"so what do you think this might be","width":297},{"text":"I'll give you a clue","width":660},{"text":"there's no place like home","width":113},{"text":"this is how we talk about our localhost ","width":244},{"text":"using IP version 6. so if you want to hack yourself using IP version 6, this is the address you need to connect to","width":527},{"text":"there is actually a shorthand for this where we can collapse the longest ones and zeros","width":371},{"text":"and so there the shortest version of this is just ::1","width":266},{"text":"i'm not gonna talk about all the rules about collapsing IP version 6 addresses","width":356},{"text":"you're welcome to look them up but i guarantee you that they won't be on the exams. the wikipedia references is perfectly good enough","width":385},{"text":"if you ever need to actually need to talk about IP version 6 addresses","width":207},{"text":"but that's the shortest IP address IP v 6 address.","width":431},{"text":"and yes this might be on the exam or this should become acknowledged that hey, this is yourself and this is localhost","width":384}],
// Part 1
[{"text":"okay so lets see if we can set this up then","width":540},{"text":"I'm going to start writing some code then to make a TCP conneciton","width":319},{"text":"so yes we need to setup one of these int objects","width":242},{"text":"and we'll have a pointer as well to get the result","width":186},{"text":"so what should i set for the family?","width":508},{"text":"well if i want to connect with version 4 I would be connecting with IF_INET6","width":530},{"text":"if i want to do ip version 6 i would put a 6 in here","width":480},{"text":"and what about the socket","width":95},{"text":"Well we want a stream based protocol","width":151},{"text":"in other words TCP","width":104},{"text":"so for our socket type we specify socket stream","width":439},{"text":"if i had left these entries as zero","width":278},{"text":"we're basically saying hey we don't care","width":154},{"text":"and then we get back that linkedlist","width":145},{"text":"what are you connect to the BBC using the UDP","width":169},{"text":"using um datagrams","width":111},{"text":"you could connect using tcp","width":62},{"text":"and these would just be different entries in that linkedlist","width":271},{"text":"and then your code could try them all","width":116},{"text":"hey lets see if we can get a webpage over udp","width":212},{"text":"and the answer is actually quite a few webservers will do that","width":201},{"text":"they'll look at you strangely and go what do you want?","width":153},{"text":"but they will actually say okay I'll give you back some data as a single packet","width":354},{"text":"right so right we're going to fill this in","width":315},{"text":"ok so what do we put in here","width":148},{"text":"our function call of course is get address info","width":375},{"text":"and what do we pass over here","width":83},{"text":"well we need to pass in the hints","width":274},{"text":"and we need to pass in our reult","width":301},{"text":"okay, so lets see if your neighbor can first of all the mistakes i've just deliberately made in that code","width":606},{"text":"and also what are the two missing things that I need to fill in here","width":421},{"text":"what are the first two parameters","width":164},{"text":"so what mistakes did I make and what's missing in that code","width":6645},{"text":"okay right so ","width":178},{"text":"couple a mistakes we made","width":80},{"text":"first of all actually we want the address of our hint struct","width":205},{"text":"so we'll put an ampersand there","width":117},{"text":"and also we want the address of this pointer","width":179},{"text":"it's going to change that pointer for us","width":348},{"text":"ok so what do we pass in here?","width":132},{"text":"well we pass in sometimes it's called the node but you can think of it as just basically the machine we want to connect to","width":368},{"text":"so we could write www.illinois.edu","width":194},{"text":"we could write www.bbc","width":120},{"text":"we could write we could say for example do ::1 if we wanted to connect to ourselves using IP6","width":544},{"text":"we could write 127.0.0.1","width":366},{"text":"if we wanted to connect to ourselves and we were using ip4","width":378},{"text":"for here, i'm going to now specify the port","width":146},{"text":"and you can do this with two ways you can literally just write a string","width":235},{"text":"like 1234","width":383},{"text":"but for well known ports like HTTP, HTTPs you can actually write the protocol name","width":575},{"text":"like HTTPS ","width":451},{"text":"if you happen to know the port number, yeah you could use that","width":416},{"text":"so get address info is surprisingly useful","width":166},{"text":"if you give it a ASCII name it will try to convert that to a port number","width":332},{"text":"for you","width":639},{"text":"so if it returns zero we've succeeded","width":357},{"text":"if it fails now we can actually find out why","width":226},{"text":"and that's where that function comes in ","width":267},{"text":"we could call gai_strerror and pass in that result code","width":725},{"text":"and that would give us back string","width":246},{"text":"okay now I'm not going to expect you to remember that, the string error","width":346},{"text":"but what you might do as a system programmer","width":251},{"text":"with this networking code and in fact any time you want to write good code","width":251},{"text":"is check the manpages","width":93},{"text":"so if we were to go to manpages","width":194},{"text":"is this going to work here we go","width":92},{"text":"alright","width":200},{"text":"we see that um okay i can take the return ","width":298},{"text":"if i now read the description and the return value of this it would tell me that hey this integer can be plugged into this call","width":461},{"text":"to give me a basic message about what went wrong","width":256},{"text":"and let's have a quick look down here to see the kind of things that can go wrong","width":338},{"text":"we have a bad family bad flags","width":253},{"text":"no data no name","width":136},{"text":"this call can fail in all sorts of ways","width":186},{"text":"we might fail at turning a name like bbc.com into an ip address","width":599},{"text":"okay but lets say it worked","width":214},{"text":"what do we do next","width":102},{"text":"well the first thing we might do is okay let's make a new socket","width":318},{"text":"now you seen in some of my earlier examples that i've made the socket at the very beginning of the code","width":243},{"text":"and i hardcoded in exactly what family and type of socket type I wanted","width":559},{"text":"but you could also just use the return values","width":256}],
// Part 2
[{"text":"there we go","width":86},{"text":"we've also go the information we need inside here to actually create the socket","width":256},{"text":"so if you expect you'll get address info to return maybe an IP6 ","width":382},{"text":"maybe multiple kinds of different sockets","width":157},{"text":"then you'd be pulling that information out of that linkedlist each time","width":277},{"text":"so we've called socket and then we would try","width":441},{"text":"to connect to that remote host","width":275},{"text":"and let's say we've successfully got a connection","width":176},{"text":"hey great we're now talking to that machine","width":243},{"text":"right so this connect call is heavy it's big it's slow ","width":310},{"text":"it actually goes out there and connects","width":149},{"text":"it doesn't just like \"oh, connect please\" it's \"no make contact\"","width":238},{"text":"send some packets to and from that machine","width":267},{"text":"so connect might take a second or more to complete","width":212},{"text":"might take a minute","width":131},{"text":"if you're remote server you're trying to connect to is a long way away","width":303},{"text":"so this is potentially very very slow","width":213},{"text":"how quickly you can talk to the remote machine","width":364},{"text":"if you're trying to talk to yourself that should be pretty fast","width":323},{"text":"so you could talk to yourself very quickly and discover if you can connect to a particular port","width":491},{"text":"there's one thing we didn't talk about yet","width":177},{"text":"and that is ","width":288},{"text":"this magic call called bind","width":299},{"text":"so usually we don't like to be bound up","width":340},{"text":"but today we're going to be calling bind on our socket","width":250},{"text":"we're going to take our socket and we're going to bind it to a particular local port","width":494},{"text":"we're gonna say \"hey! use this local port\"","width":258},{"text":"now most of the time when you want to connect to a remote server","width":124},{"text":"you don't care where your packets leave from","width":170},{"text":"you don't care which port is used locally","width":213},{"text":"just let the operating system let the kernel choose the outgoing port","width":368},{"text":"but when we want to make a server typically we do care","width":150},{"text":"if I'm going to make a webserver I want it to be on port 80","width":457},{"text":"so we can use bind if we want to set the ","width":561},{"text":"local port","width":507},{"text":"you could also use it if you've got say two network cards","width":200},{"text":"and you want to specifically use a particular network card","width":592},{"text":"but it controls the local side of the connection","width":1433},{"text":"","width":2},{"text":"which is exactly what we're going to need when we make a server","width":649},{"text":"","width":1},{"text":"so if i tried to connect to your cellphone right now on a particular port","width":545},{"text":"i'd probably discover that it's not listening on that particular port that I was connect to","width":247},{"text":"connect would return back and say haha I'm sorry I've failed","width":215},{"text":"I've managed to send a packet and it said nothing ","width":193},{"text":"i didn't get anything back","width":91},{"text":"for your cellphone","width":54},{"text":"so connect fails","width":178},{"text":"what we ought to do in the server is the opposite","width":305},{"text":"we want to sit here and wait for people to come to us","width":275},{"text":"wait for packets to come to us","width":107},{"text":"wait for packets to come to our port","width":158},{"text":"what we want then is a passive connection","width":207},{"text":"not something that goes out and tries to connect","width":140},{"text":"but just sits there and says huh no let us the packets come to us","width":349},{"text":"we can do this","width":119},{"text":"and it's very very easy","width":272},{"text":"alright so a passive socket level one understanding is just hey it waits for connections to connect to it","width":623},{"text":"it's sitting on the key side of the particular port saying okay I'm on port 80 send your packets to me I'm ready","width":413},{"text":"and when they do I'm going to do something special","width":151},{"text":"right so what's a passive socket ","width":121},{"text":"first of all it's a socket that is listening ","width":254},{"text":"it's also known sometimes as a server socket","width":414},{"text":"because we use it for serving we just it for waiting for connections","width":358},{"text":"so it's passive in the sense that it's waiting for connections","width":705},{"text":"and it has a cute little trick","width":610},{"text":"","width":1},{"text":"lets say I'm the client, you're the server","width":182},{"text":"can you catch?","width":252},{"text":"let's say you're the server","width":78},{"text":"right there you go","width":307},{"text":"that ladies and gentlemen is a dropped packet","width":338},{"text":"alright here","width":237},{"text":"that server wasn't listening","width":588},{"text":"okay fantastic right","width":130},{"text":"so I've sent my-k-I've just connected to the server","width":339},{"text":"on the passive socket","width":63},{"text":"now here's what the passive socket does","width":197},{"text":"when it returns the connection, when it does the handshake back to me","width":446},{"text":"thank you","width":167},{"text":"it sends an additional piece of information which is","width":183},{"text":"don't talk to me, don't talk to that port anymore","width":199},{"text":"I've got a new port set up just there","width":321},{"text":"that is the special connection that is just between you and me","width":417},{"text":"so we'll see that in a moment on the C side as well ","width":127},{"text":"we'll see that on the seaside, I like that","width":110},{"text":"so we'll see that in terms an additional file descriptor","width":263},{"text":"that's part of that handshaking","width":139},{"text":"once we make the connection on the server side,","width":124},{"text":"no no we have a completely different port just for that one connection","width":347},{"text":"why do we do that?","width":60},{"text":"well guess what we're making a server","width":135},{"text":"we're trying to take over the world or whatever","width":120},{"text":"and other people might be connecting to port 80","width":210},{"text":"as soon as they do that they're going to be talking to you again","width":195},{"text":"so in order to keep all these connections separated","width":227},{"text":"we push them onto different ports","width":284},{"text":"alright so the time you actually spend talking to this particular port is minimal","width":330},{"text":"okay so why do we create one","width":181},{"text":"so we can have a server","width":529},{"text":"I want to make a server","width":231},{"text":"right so how do i do all this","width":199},{"text":"have I put this in yet no","width":86},{"text":"so here's what we should do ","width":136},{"text":"in our hints struct","width":389},{"text":"we're going to specify one more thing","width":209},{"text":"let's go back to here","width":62},{"text":"something we haven't used yet is this flags","width":808},{"text":"and there's a flag to say","width":181},{"text":"hey make a passive socket for me please","width":517},{"text":"trying to think if it's yeah must be uppercase right","width":646},{"text":"so before making your get address info call, just say oh, by the way, I would like a passive socket","width":576},{"text":"by the way i would like a passive socket","width":256}],
// Part 3
[{"text":"now if we were to run our code by the way","width":1253},{"text":"I didn't talk about this little guy in here","width":234},{"text":"what did you think he's there for?","width":456},{"text":"right? this little tiny question mark is the ultimate april fools in the sense that this will get you every day of the year","width":557},{"text":"this is C going oh you mean you didn't set all of the parameters in a field?","width":509},{"text":"don't worry, I'll make your code work today","width":311},{"text":"but, if we don't set all the fields inside a struct, then who's to know what the values are of the ones that we didn't set","width":443},{"text":"now maybe you made it in global memory","width":314},{"text":"and you know that there's going to be zero but if we didn't","width":223},{"text":"if we just made it on the stack","width":128},{"text":"then who knows what those global fields are going to be","width":301},{"text":"and we're just giving them to the operating system","width":133},{"text":"so who knows how getaddressinfo is going to interpret those unset fields","width":433},{"text":"so I'm talking about these in terms of setting up network code but this is actually a common common gotcha with C","width":353},{"text":"is you hey I've got a struct, I'll set a few things and I forget to set the other fields","width":435},{"text":"so right how can I fix that? well I showed you before","width":178},{"text":"one way is to call memset","width":101},{"text":"okay so how about we do this? memset on the hints","width":877},{"text":"sizeof(hints)","width":288},{"text":"zero","width":159},{"text":"and I can relax that I've now got job security","width":307},{"text":"my code will work!","width":535},{"text":"haha april fools","width":697},{"text":"so what have I just done?","width":128},{"text":"I've just managed to set zero number of bytes","width":216},{"text":"to a small integer value","width":164},{"text":"in other words the memset call I just made had no effect whatsoever","width":385},{"text":"because I accidentally swapped these two values around","width":586},{"text":"I suggest that you ideally just don't make this mistake","width":685},{"text":"or don't make this mistake in production code","width":305},{"text":"because the worst thing about it is that you probably won't realize it, you probably won't notice it right?","width":273},{"text":"the memory half the time is zero","width":140},{"text":"and it's only when say you are reusing old stack memory that you might not get nonzero values","width":371},{"text":"so watch out, watch out anytime you work directly with memory","width":235},{"text":"that's the most likely time that you'll get some very subtle bugs","width":484},{"text":"right so we've got our thing set up","width":158},{"text":"getaddressinfo is returning zero, it's working, right so...","width":394},{"text":"here's what we can do now","width":190},{"text":"remember how I said...","width":228},{"text":"in a client we make a socket and then we call connect","width":337},{"text":"and we connect to a remote end","width":109},{"text":"in a server, we go socket and bind","width":600},{"text":"we're not trying to connect to a remote end at all","width":260},{"text":"we're just saying ha I just want to set up a local socket here","width":189},{"text":"that doesn't connect to anything, it's just going to sit there and listen","width":200},{"text":"and all the parameters that we pass to connect to the same ones as bind","width":263},{"text":"so we're going to be passing in...","width":250},{"text":"these two again, this address and that length of that struct","width":215},{"text":"we'll see the real code in a moment","width":94},{"text":"but basically we've swapped our connect for a bind","width":195},{"text":"because we want to talk about not a remote endpoint but a local endpoint","width":342},{"text":"right... so at this point we'll just take a little bit of a break to","width":702},{"text":"mention these guys","width":285},{"text":"and also to kind of show you what the code might look like if you didn't have getaddressinfo","width":939},{"text":"so when setting up a socket","width":386},{"text":"one of the things we want to talk about then is the port address and the IP address","width":549},{"text":"and you'll notice if you do a lot of google searching on code, you'll quickly come across these functions here","width":330},{"text":"this htonl and htons","width":499},{"text":"here's what they do, they swap bytes around","width":354},{"text":"sometimes","width":140},{"text":"they swap bytes if you run this on an x86 intel machine","width":493},{"text":"why?","width":141},{"text":"why do you think we might want to swap the ordering of bytes?","width":716},{"text":"security?","width":276},{"text":"good idea but not the answer I was looking for","width":210},{"text":"endianness yes!","width":208},{"text":"so endianness why do we care about endianness well the point is we're sending information over the wire right?","width":443},{"text":"we're sending stuff out to the network, we don't want it to depend on the order with which we represent integers","width":415},{"text":"so if we're talking about a particular port number","width":151},{"text":"that's sixteen bits","width":104},{"text":"we better agree when we send the packet out on the network as to whether we want to put the low byte first or the upper byte first","width":594},{"text":"so network order is big endian","width":321},{"text":"and that should be independent of our machine","width":150},{"text":"so if the kernel says by the way, this remote host is connected to you on this particular port","width":405},{"text":"or here's this ip addresses","width":209},{"text":"we better be careful, these integers may not actually be the integers that we normally understand","width":373},{"text":"we may actually have to deliberately read that value with the bytes swapped","width":538},{"text":"so that's where these functions come in","width":124},{"text":"if you happen to compiling this code on a little endian machine","width":291},{"text":"big endian machine, they don't do anything, they are a no op they don't need to swap any bytes","width":291},{"text":"if you call them on an intel machine however, they give you the result with the bytes correctly swapped from big endian order to little endian order","width":576}],
// Part 4
[{"text":"vice versa","width":103},{"text":"so what do they stand for? they stand for host to network short","width":290},{"text":"and network to host short","width":195},{"text":"[silence]","width":1129},{"text":"so here's an example","width":179},{"text":"where we want to specify the port","width":211},{"text":"as port 1100","width":182},{"text":"notice how I chose a port greater than 1024 ","width":189},{"text":"and I want to set it directly into this structure here","width":291},{"text":"socket address","width":285},{"text":"and so I have to remember to actually set this up to be the network","width":455},{"text":"the network port number","width":308},{"text":"so this port number is actually going to be passed directly into the network card we're going to assemble the packet and that packet will have these bytes in now the correct order to say okay [something] on this particular port","width":1085},{"text":"you can use these inside your own code","width":205},{"text":"let's say you wanted to have a high performance server","width":236},{"text":"and you're not going to send ascii information, you actually want to send binary information","width":236},{"text":"and you want to send say the position of your players to all of the other, you want to cast it out to all of the order players on your game server","width":768},{"text":"you would have to decide on your protocol to say am I going to send this out in little endian or big endian format","width":312},{"text":"and you could use these kinds of calls to make sure that it doesn't matter whether your C code is compiling on an ARM platform an Intel platform","width":591},{"text":"that we always on the network are sending bytes out in the same order","width":368},{"text":"same endianness ","width":154},{"text":"alright so that's just a little aside, you'll see these codes and now you know what they do","width":250},{"text":"and here's the other one where you use it for a long so you can use it for 32 bits","width":434},{"text":"right so okay right","width":291},{"text":"so it's quite often said that setting up a server takes four cores","width":285},{"text":"we better say what they are","width":233},{"text":"and it's a common exam question or interview question to say what's the order of these?","width":306},{"text":"and what does each one do?","width":162},{"text":"right so the first one is easy, hey we need a socket","width":181},{"text":"you're not going to get very far without a socket","width":112},{"text":"we need a way to configure our network","width":339},{"text":"and a socket gives us back a file descriptor that we can then start to use","width":248},{"text":"once we've got that file descriptor","width":289},{"text":"we want to bind it to a local port","width":921},{"text":"let's bind it so we are now going to be on a particular local part and we set it up, we pass it","width":627},{"text":"now actually we're ready to go","width":145},{"text":"here's the nice thing that we can do with server sockets","width":269},{"text":"we can ask the kernel to do that little handoff trick and to start queuing up any connections","width":364},{"text":"so now we can start listening","width":213},{"text":"at that moment...","width":204},{"text":"we're live!","width":71},{"text":"our kernel is starting to actually accept connections for us","width":266},{"text":"and we'll generate a small queue of incoming connections that we can now start to process","width":375},{"text":"so with listen, we actually specify the queue size","width":660},{"text":"so as part of that little handoff process when we say oh actually go and reconnect to me next time on this other port number","width":396},{"text":"now the kernel has taken that and said okay by the way expect connections on this other port number, so internally its got a little queue","width":516},{"text":"when we want it from our user's side, we call...","width":339},{"text":"yes I'm prepared to accept this reverse call","width":520},{"text":"accept!","width":411},{"text":"so on the server side, when you call accept, you get...","width":407},{"text":"a new file descriptor","width":268},{"text":"okay so here's a big gotcha","width":156},{"text":"is that you've now actually got two file descriptors to play with","width":222},{"text":"if you want to be talking to your clients that are connecting","width":226},{"text":"this is one","width":202},{"text":"you get a new file descriptor each time accept returns","width":397},{"text":"also, this blocks","width":634},{"text":"until we have a client","width":243},{"text":"if your code is a bit slow in calling accept","width":185},{"text":"don't panic, that's why we called listen","width":148},{"text":"listen says look uhh my user code may not be able to call it except immediately so have a little backlog of connections that the kernel will maintain","width":720},{"text":"and hopefully I'll be able to call accept in the future","width":169},{"text":"so its very simple code, very simple server","width":306},{"text":"we can just call accept once, and that's it and that's what we'll do in a demo in a moment","width":231},{"text":"later can call accept in the loop to process one client at a time","width":399},{"text":"probably not going to be the best webserver in the world","width":222},{"text":"but hey it works and we can run that on some tiny embedded hardware","width":331},{"text":"later we might do things like hey let's for every accept call start a new thread","width":405},{"text":"and then everybody can talk to my server in parallel","width":387},{"text":"well that works until a thousand people try to connect and then you have a thousand threads that start on a machine with 8 CPUs that's probably going to work out so great","width":710},{"text":"so then we need to start figuring out even better ways to have a high performance server","width":368},{"text":"but anyways that's our four calls, socket, bind, listen and accept","width":240},{"text":"alright let's see this in action","width":300},{"text":"ooh look code!","width":192}],
// Part 5
[{"text":"Here we go! I'm going just hard code my, my constants. Like I said, we could have got this back from the address info.","width":764},{"text":"Today, I want to play with IP4, I want a TTP connection. There's my flags, those other flags you can set them here by bit-wise or-ing them.","width":591},{"text":"But we want a uh... a server, or passive connection. Yes, I remembered to set all my other unused fields to zero.","width":935},{"text":"Right. Yes, I'm going to call getaddrinfo. Check the result code; if it fails, I'll turn that into a useful error message.","width":610},{"text":"It's really really useful if your code doesn't work to actually check error messages by the way.","width":446},{"text":"Okay, so. We got a socket call, we got a bind let's connect to a local port.","width":460},{"text":"And look at this! I'm using the stuff I got from my getaddrinfo. I'm passing in that point of that struct and the size of that struct.","width":697},{"text":"okay, that's my set up: socket bind.","width":191},{"text":"Now, we start to say, \"Ooh!\" Um, please start listening and have a little backlog of ten connections.","width":583},{"text":"Okay. So, just for fun, I want to show you that I can say, \"I'm just doing a particular port. If I reach into one of these low-level C structures, I better remember to reverse the right order to turn it into from network to host (ntohs) and use the result of that call.","width":1955},{"text":"And now we're going to have our little server.","width":362},{"text":"This server code didn't actually send anything back to the client. It just listens to hear what the client has got to say.","width":438},{"text":"How do we do that? We call accept. Later on if we wanted to have to fill in the structure, like where the client was connecting from. We wanted their own IP address we can fill out these structures here.","width":923},{"text":"And remember how I said accept returns a new client? Here it is! Here is a new file descriptor (fd), and I'm going to use that on my read call and then turn it into a C string and print out what they said. Okay","width":1098},{"text":"So, let's uh, let's run this.","width":812},{"text":"Hmm. *bzzzzzzzzzzzz* Okie dokie, alright, so there's no error checking in this last part, um, alright.","width":515},{"text":"So I can... clear this right gcc ./server1 (./server1.c). Okay! Alright","width":1337},{"text":"Oh, look at that! That's my OSX is saying do you want to accept it?","width":329},{"text":"Wait! And it chose file descriptor 3, is this your port 1234? Shall we connect to it?","width":616},{"text":"Okay, alright. So, let's do this um, now I could write some C code, but instead I want to show you a pretty useful tool. It's called netcat.","width":1021},{"text":"Here is netcat. Blah blah blah, blah blah, blah blah blah, blah blah blah. Look it's like cat, except you can connect to an arbitrary machine, using an arbitrary protocol.","width":891},{"text":"And anything we sent this, it will use standard in and standard out.","width":546},{"text":"So today, I want to connect to 127.0.0.1, my local host, and I want to connect to port 1234.","width":1168},{"text":"So our code is working! The accept call has returned. ","width":192},{"text":"And it has given back our new file descriptor. Right, should we send something to it! Yes, okay here we go. HELLO GET / HTTP/1928349q87eyfaiu7tbeiqvwfa SAfuigae","width":831},{"text":"And here we go. So, it got that from the socket and printed that and stopped.","width":597},{"text":"This is the most useless web server in the world because it accepts one request then quits.","width":539},{"text":"Very easy to make a denial of service (DOS) on this particular web server. So what we'll do is make it so it cannot accept multiple clients. We're not going to do any threading code in this (we could though!). Right as soon as accept returns, why don't we make a new thread and pass it on.","width":992},{"text":"Instead, we'll just put this little part inside a loop. Alright so a while there.","width":913},{"text":"Okay, so we put this accept call inside a loop","width":1773},{"text":"Make another connection, and so on and so on. So we got the basics now of a little web server. What we have to do now is figure out how we are going to pause this. what do we want to do with this information, and what do we want to send back to the client?","width":1271},{"text":"Alright, so in fact what we've made is something a bit like a honey pot. For example, here's why it's called a honey pot.Take a jar of honey, open it, and see what insects are there after a minute or an hour. We can do this with our server. We can get it to simply listen on a particular port and see who connects and say capture the IP address. Or we can pretend to masquarade to build a real machine. Oh look! people are trying to log into this let's see what kind of pass","width":2502},{"text":"let's see what password they typed in.","width":223},{"text":"We can see what kind of attacks they do to our machines.","width":283},{"text":"So, on many modern networks now we have these machines which appear to be real machines, but which are infact are simple honey pots.","width":556},{"text":"This is the simplest kind, right? Where we can simply log the connection attempts, who they're from, and what information is sent to us.","width":704}],
// Part 6
[{"text":"Alright, another thing we're going to finish today is epoll.","width":558},{"text":"So I suggest for a simple server, hey, just uh, just little while loop.","width":296},{"text":"The next simple server is: hey make a thread so at least we can do this with uh multiple threads so that I can be servicing two clients at the same time.threads so","width":751},{"text":"Well, these kinds of ideas work until now you have hundreds or thousands of clients connected to it at the same time.","width":513},{"text":"And um, a bit of history is that we used to have a core called \"select\" you'll find in everywhere (works in a mac), but these days, epoll is a common solution to a hyperbolic server; in fact, you'll get to play with that this section.","width":1153},{"text":"And what epoll will ask you to do is with sockets or pipes, and you'll get to play with pipes.","width":455},{"text":"You can say, \"Actually, there's a whole load of file descriptors that I'm interested in.\"","width":338},{"text":"And so, the basic outline of epoll is: you make, we make a set you'll create, and then, using a control function we add a whole load of file descriptors, a whole load of file descriptors.","width":1541},{"text":"You say you'd want to read or write to these. What's your intent?","width":836},{"text":"And then you can wait--wait for an event.","width":477},{"text":"That's the basic idea.","width":126},{"text":"So actually now, I can have a single thread waiting on a thousand clients.","width":375},{"text":"If my clients don't talk to me very much, when one of them does, I can immediately find out which one.","width":500},{"text":"...because epoll call will tell me, \"Hey! By the way, now you have to talk to this particular file descriptor, now you need to be talking to this particular file descriptor.\"","width":502},{"text":"The old way of using select: will select allow me to go to sleep once something is happening; but once select returns, I'd have to kind of go through every single file descriptor. I'd have to do a linear search to find out which file descriptor was the one that I need to process.","width":1348},{"text":"So, that would be in session this week with epoll, and the other section thing we hope to do with sections tomorrow is to connect some class 7 code on the tablets as well.","width":877},{"text":"With that, have a wonderful week! Good luck with the MPs! I'll see you on Friday <3","width":384}],
// Part 0
[{"text":"alright good afternoon class","width":205.18181824684143},{"text":"now so today we have quite a few pretentives in the orders","width":236.18181824684143},{"text":"if you traveled here because you ... cs 241 but ur just visiting the class today","width":409.18181824684143},{"text":"please just wave your hand","width":126.18181824684143},{"text":"i know theres quite a few of you","width":83.18181824684143},{"text":"right","width":24.18181824684143},{"text":"these people I invited just been accpeted to cs major program","width":321.18181824684143},{"text":"or they are visiting campus","width":143.18181824684143},{"text":"so be sure to be nice to them and tell them","width":221.18181824684143},{"text":"what a great place wisconsin is","width":248.18181824684143},{"text":"so here's what we are going to do today","width":67.18181824684143},{"text":"we are going to finish our discussion about sockets","width":239.18181824684143},{"text":"uhh in terms of .. what we can do is we use imports, and ","width":330.18181824684143},{"text":"what happens if","width":88.18181824684143},{"text":"is my mic on yet","width":143.18181824684143},{"text":"what happens if we dont set various socket options when we are developing our programs","width":327.18181824684143},{"text":"and we discover that the port is in use","width":107.18181824684143},{"text":"and that kind of stuff","width":88.18181824684143},{"text":"and then we talk about how can we make the server actually discover who is connected to us so we can find out for example","width":657.1818182468414},{"text":"its ip address","width":103.18181824684143},{"text":"so yesterday you made yik yak, or at least use a very simple version of yik yak, where we connect to our virtual machines","width":495.18181824684143},{"text":"on the android tablet","width":92.18181824684143},{"text":"and now that we want to make it so that our server can actually find out who connected it","width":350.18181824684143},{"text":"a little story for you","width":88.18181824684143},{"text":"that is the very first time i visited urbana champaign","width":147.18181824684143},{"text":"was I was visiting wolfram research","width":119.18181824684143},{"text":"they're just down the road, you may have heard of them","width":113.18181824684143},{"text":"they made methametica","width":141.18181824684143},{"text":"i did some 3d visualization software which connected to wolfram using sockets","width":374.18181824684143},{"text":"they connected to mathematica using sockets","width":134.18181824684143},{"text":"and this is back in the day when we actually made a plugin ","width":263.18181824684143},{"text":"an external piece of software","width":98.18181824684143},{"text":"to display 3 dimensional shapes","width":204.18181824684143},{"text":"so i was talking to them","width":63.18181824684143},{"text":"and back in the older days of the web, before blogs","width":305.18181824684143},{"text":"and they said, you know, one trick what we do, about our web server, is we got various competitors right now","width":383.18181824684143},{"text":"and we dont want them to know immediately when we release our product","width":272.18181824684143},{"text":"so when they come to our website, we check their ip address of the connection and we serve them the old content","width":493.18181824684143},{"text":"so our competitors see our content at least two days old","width":303.18181824684143},{"text":"so they'll be a bit slow in discovering when we actually release new software","width":239.18181824684143},{"text":"so that's something you can play with","width":107.18181824684143},{"text":"with the yik yak implementation ","width":239.18181824684143},{"text":"that give bad inforamtion","width":140.18181824684143},{"text":"if you don't like the client connecting to your server","width":182.18181824684143},{"text":"hey, give them something, give them some alternative information","width":280.18181824684143},{"text":"ok","width":50.18181824684143},{"text":"so","width":48.18181824684143},{"text":"how can you do that? easy!","width":104.18181824684143},{"text":"look at, say, the ip address, the bytes they sending to you","width":267.18181824684143},{"text":"you could invent a new protocal","width":113.18181824684143},{"text":"all messages to you should have a hash value","width":176.18181824684143},{"text":"which should start with a colon etc. etc. etc","width":210.18181824684143},{"text":"and why not share your protocol with your friends at cs 241","width":287.18181824684143},{"text":"so that you can connect to each others' virtual machines","width":208.18181824684143},{"text":"and why not tell some bad information to the people you dont like in cs 241","width":258.18181824684143},{"text":"and then you can tell them when the exam's on when they re not","width":305.18181824684143},{"text":"alright ","width":23.18181824684143},{"text":"so","width":36.18181824684143},{"text":"lets go out for our handout for today","width":201.18181824684143},{"text":"uhh we need","width":163.18181824684143},{"text":"i can ... some content today","width":167.18181824684143},{"text":"alright what's the honey pot","width":202.18181824684143},{"text":"easy! a place for honey! remember this?","width":145.18181824684143},{"text":"we can make servers that masquarade as real machines ","width":253.18181824684143},{"text":"and then uhh see how they've","width":312.18181824684143},{"text":"been used on internet","width":95.18181824684143},{"text":"for example, what you see in todays lecture","width":121.18181824684143},{"text":"is how can we discover what client is connecting to our server","width":335.18181824684143},{"text":"so we can label those ip addresses","width":145.18181824684143},{"text":"you could for example on your virtual machine","width":127.18181824684143},{"text":"have a port 80 open up ","width":110.18181824684143},{"text":"and see if anybody tries to connect to your machine","width":308.18181824684143},{"text":"okay so","width":183.18181824684143},{"text":"what are the purpose of these calls, htons and ntohs?","width":364.18181824684143},{"text":" what do they do?","width":233.18181824684143},{"text":"yes host to network and network to host","width":220.18181824684143},{"text":"why do we need this?","width":85.18181824684143},{"text":"well because if we gonna be transfer bytes to each other we should agree on what order we should send the bytes","width":379.18181824684143},{"text":"for example if we are talking about an integer of two bytes long, we are sending the low byte or the high byte first","width":360.18181824684143},{"text":"and our cpu may not respect that perticular ordering","width":261.18181824684143},{"text":"and in fact if you on a intel machine it is actually the wrong order","width":328.18181824684143},{"text":"ok so we can use these to make sure that any integer values we send as binary are correctly ordered, that we put them in the right order","width":673.1818182468414},{"text":"for either working in our cpu or sending out on the wire we send it to the network card","width":372.18181824684143},{"text":"ok so its time for host to network short, network to host, short","width":272.18181824684143},{"text":"so we'd use this, for example, when working with port numbers","width":215.18181824684143},{"text":"umm port numbers are 16 bits","width":135.18181824684143},{"text":"ok so what are the four calls with the network server","width":148.18181824684143},{"text":"we've done this already","width":46.18181824684143},{"text":"remember","width":39.18181824684143},{"text":"our basic idea is we want to make a socket","width":302.18181824684143},{"text":"we'll say what kind of socket","width":91.18181824684143},{"text":"right","width":41.18181824684143},{"text":"then well call bind","width":111.18181824684143},{"text":"because we want to bind to a particular local port","width":367.18181824684143},{"text":"we may also use it to bind to a particular network card","width":313.18181824684143},{"text":"so weve made actual socket now so how do we get started","width":302.18181824684143},{"text":"we call listen","width":113.18181824684143},{"text":"all of these things will happen very quickly","width":183.18181824684143},{"text":"the next one will block, and that is when we call accept","width":345.18181824684143},{"text":"accept now will block if there is no one trying to connect to our server. ","width":233.18181824684143},{"text":"so it only returns when a client has actually connected. ","width":318.18181824684143},{"text":"why do we call listen?","width":73.18181824684143},{"text":"because we may want to set up a small","width":162.18181824684143},{"text":"queue so that if multiple clients connects together, the operating system is prepared to look after those immediate connections until we get them from accept","width":812.1818182468414},{"text":"and each time you accept, you get a new file descriptor","width":174.18181824684143},{"text":"and each time the client connects, it gets a new port to talk to","width":293.18181824684143},{"text":"alright so we've seen that","width":61.18181824684143},{"text":"now","width":32.18181824684143},{"text":"one thing i didnt talk about before","width":123.18181824684143},{"text":"was","width":237.18181824684143},{"text":"freeaddrinfo","width":70.18181824684143},{"text":"yes we've been playing with getaddrinfo","width":146.18181824684143},{"text":"to fill in a pointer to that struct ","width":332.18181824684143},{"text":"and remember that struct actually could be a linked list","width":299.18181824684143},{"text":"so when we finished using it","width":175.18181824684143},{"text":"rather than having to walk through the linked list ourselves","width":181.18181824684143},{"text":"there happens to be something called freeaddrinfo that does this for us","width":227.18181824684143},{"text":"and of course that is going to pull out the next pointer before calling free on each struct","width":417.18181824684143},{"text":"so what do you think might be wrong with this little piece of code here?","width":253.18181824684143},{"text":"you can assume that inside the dot dot dot i've called memset on hints and i set up the hints struct correctly ","width":434.18181824684143},{"text":"umm but what do you think mistake i might have made in writing this little bit of code","width":664.1818182468414},{"text":"make a pointer, called getaddrinfo, and then I called this function called free to say ","width":315.18181824684143},{"text":"ok, free that linkedlist that getaddrinfo set up for me","width":324.18181824684143},{"text":"what could possibly go wrong?","width":346.18181824684143},{"text":"yes?","width":164.18181824684143},{"text":"oh should i pass the address","width":93.18181824684143},{"text":"actually no freeaddrinfo takes a pointer to the first struct and go through destructively and frees up each member of the list ","width":618.1818182468414},{"text":"okay time to put your, yes","width":307.18181824684143},{"text":"thank you","width":31.18181824684143},{"text":"yes","width":47.18181824684143},{"text":"right","width":62.18181824684143},{"text":"so, remember we need to ask ourselves what could possibly go wrong","width":283.18181824684143},{"text":"ok here's one possibility ","width":116.18181824684143},{"text":"suppose getaddrinfo failed","width":181.18181824684143},{"text":"for example, you haven't actually connected to the wifi so it cant do the domain name lookup and find ip address","width":712.1818182468414},{"text":"so suppose getaddrinfo fails","width":128.18181824684143},{"text":"that means it never changed this pointer","width":163.18181824684143},{"text":"","width":64.18181824684143}],
// Part 1
[{"text":"so what is result pointing to?","width":560.1818182468414},{"text":"could be anything","width":96.18181824684143},{"text":"right? we just made this little thing on the stack","width":173.18181824684143},{"text":"its just whatever happened to be at the stack memory at that moment","width":212.18181824684143},{"text":"so we just called free on a arbitrary block of memory","width":258.18181824684143},{"text":"whoops","width":152.18181824684143},{"text":"our program is probably gonna crash","width":106.18181824684143},{"text":"at this point","width":62.18181824684143},{"text":"but its certainly probably vulnerable to other attacks at this point","width":259.18181824684143},{"text":"ok so how should we fix this?","width":127.18181824684143},{"text":"well here's what i would do","width":66.18181824684143},{"text":"i will probably set this to null to begin with","width":165.18181824684143},{"text":"and let me check, I'll only called this if the result has been changed","width":686.1818182468414},{"text":"so if its not equal to null","width":93.18181824684143},{"text":"then call freeaddrinfo","width":94.18181824684143},{"text":"that's a more robust program","width":272.18181824684143},{"text":"right","width":308.18181824684143},{"text":"port hijacking","width":167.18181824684143},{"text":"so","width":133.18181824684143},{"text":"i love this i want to dress up as a highway man as a pirate","width":294.18181824684143},{"text":"yes! there's a potential for port hijacking when we write our server programs","width":394.18181824684143},{"text":"imagine this, imagine you write a fantastic web server","width":188.18181824684143},{"text":"or another program that uses sockets to communicate","width":277.18181824684143},{"text":"and then your program finishes, perhaps it crashes","width":335.18181824684143},{"text":"at that precise moment, another process starts listening to the same port","width":335.18181824684143},{"text":"mua hahaha... and it gets some bytes","width":229.18181824684143},{"text":"that were intended for yoyu","width":235.18181824684143},{"text":"well this is a security risk","width":71.18181824684143},{"text":"we should prevent this, right","width":58.18181824684143},{"text":"we should prevent another process from immediately starting up","width":312.18181824684143},{"text":"and so that actually led to a socket rule where if you claimed a particular port, another process can't immediately reuse it","width":874.1818182468414},{"text":"if that process belongs to another user, we have a longer time out","width":423.18181824684143},{"text":"let's actually see this as a little demo","width":259.18181824684143},{"text":"and then we'll say what we can do","width":128.18181824684143},{"text":"uhh ... where is it... alright... so","width":1201.1818182468414},{"text":"ok, right, good","width":58.18181824684143},{"text":"i have a program here. so now let's run my little server here","width":277.18181824684143},{"text":"ok so gcc server1.c","width":374.18181824684143},{"text":"alright, so here's a little program we service for where we waiting on accept waiting for connection","width":485.18181824684143},{"text":"right, so let me connect to this. i'll start a new window, ","width":323.18181824684143},{"text":"and is today i'll use nightcat , so nc localhost 1234 ","width":414.18181824684143},{"text":"okay, we've connected. Yes!","width":121.18181824684143},{"text":"it's good! so I can send something over here","width":246.18181824684143},{"text":"let me at this point quit my program, i'll make a few changes, and i'll run it again. ","width":369.18181824684143},{"text":"oops. bind failed","width":115.18181824684143},{"text":"address already in use. ","width":81.18181824684143},{"text":"I couldn't reuse that port","width":258.18181824684143},{"text":"so that port for little while is still being bound to that old process","width":454.18181824684143},{"text":"even though the old process is quit, we couldn't immediately reuse it. ","width":311.18181824684143},{"text":"okay, so what can we do as developers?","width":206.18181824684143},{"text":"uh we like to be able to reuse our programs","width":127.18181824684143},{"text":"so i'll test it quickly","width":128.18181824684143},{"text":"[gibberish]","width":72.18181824684143},{"text":"it's okay I can reuse my port 1234 again","width":230.18181824684143},{"text":"so what options is to use","width":77.18181824684143},{"text":"hey, dont develop too fast","width":243.18181824684143},{"text":"but no we can do a bit better than that","width":103.18181824684143},{"text":"we can actually disable this security feature","width":239.18181824684143},{"text":"by setting an option on the sockets","width":137.18181824684143},{"text":"so lets see how we can do that","width":171.18181824684143},{"text":"hello ... just trying to connect to my machine right, my machine. so","width":265.18181824684143},{"text":"let's see what we can do here","width":118.18181824684143},{"text":"and there's a little option called setsocketopt","width":259.18181824684143},{"text":"where, make this larger, where ... on my server socket, i can say i wanna be able to reuse the port in the future","width":927.1818182468414},{"text":"so if you set this option on the port, that this when your process dies, or quits, another process can immediately reuse the same port","width":641.1818182468414},{"text":"okay. some odd syntax. we are gonna see this in a bit more examples. ","width":302.18181824684143},{"text":"of this. ","width":49.18181824684143},{"text":"is that youll see that we have to , in this case, pass in the address of the integer value, and then the size of an int","width":921.1818182468414},{"text":"so we are gonna see this passing a couple time today when we pass in the addresses of something and size of the thing that we are trying to pass in","width":479.18181824684143},{"text":"but thats just a bit kind of useful line of code that youll be using in one of the later mps","width":407.18181824684143},{"text":"one of the mps that we've got lined up for you is called wearable's mp, where we are going to simulate having a whole load of devices talking to, say, a server, so you might have to watch, you might have a pace maker, you might have a, i dont know, hair, that talks to your server ","width":1280.1818182468414},{"text":"and this is the single ... connecting and constantly talking to your server which collects your data, maybe collecting your blood pressure, and a whole load of your vital signs","width":543.1818182468414},{"text":"so ","width":70.18181824684143},{"text":"we want a server when we developing these stuff we wanna be able to quickly reuse ports, so here's the option to do that","width":451.18181824684143},{"text":"okay, so let's make a note of this","width":267.18181824684143},{"text":"how do i do this? if we start our programs and we use the same port, easy, we gonna use setsockopt and the magic ... is this SO_REUSEPORT thing","width":1221.1818182468414},{"text":"which should be in the wikibook. If not, I would add it","width":284.18181824684143},{"text":"and notice we do this before we call bind so we do this early on","width":356.18181824684143},{"text":"just after creating this socket","width":112.18181824684143},{"text":"set this option on on the socket","width":473.18181824684143},{"text":"right so we've played with very very simple kind of server, now you wanna do more. ","width":418.18181824684143},{"text":"right? this is uiuc, this is illinois of, university of illinois, we wanna go up to eleven. we don't wanna have just a single connection to a single client","width":657.1818182468414},{"text":"we actually want to write servers that can talk to thousands of clients at a time","width":401.18181824684143},{"text":"how can we do that?","width":119.18181824684143},{"text":"well, a long time ago, we realized that i dont want to always block on my read call waiting for my client to send me something, it would be nice to find out which client is coming talking to me","width":793.1818182468414},{"text":"has sent me some bytes","width":213.18181824684143},{"text":"so, the idea of select was born","width":287.18181824684143},{"text":"okay, right, so the very first implementation to attempt to making performance servers is to use the system call, is called select","width":859.1818182468414},{"text":"probably about 5 minutes after someone designed select, we discovered it wasn't any good. ","width":297.18181824684143}],
// Part 2
[{"text":"it was good enough at the beginning for the first four minutes but here's the problem with select","width":427.18181824684143},{"text":"you have to do an order N scan after it returns to find out which file descriptor you should be talking to","width":506.18181824684143},{"text":"you should be calling","width":100.18181824684143},{"text":"well that means an order N like up to say 1000 system calls","width":325.18181824684143},{"text":"and that in itself takes time, it's going to take milliseconds of time to say or should i be talking to this one, should i check...","width":402.18181824684143},{"text":"so select was a first pass, the great thing about select is that you'll find it everywhere","width":589.1818182468414},{"text":"if you want to write code on say simple embedded devices","width":317.18181824684143},{"text":"on windows, on mac, hey! just use select and don't worry about performance, it's good enough","width":367.18181824684143},{"text":"and it's easy to write code which times out so you can say okay I'd like to wait for say a second to see if the client sends me anything","width":495.18181824684143},{"text":"so select is a reasonable choice at that point","width":401.18181824684143},{"text":"so what happened next...","width":270.18181824684143},{"text":"is a system call called poll is defined","width":286.18181824684143},{"text":"that solved some problems, but today what we played with and what you've seen in lab is epoll","width":411.18181824684143},{"text":"the only downside of epoll or the main downside of epoll is that it's on linux","width":627.1818182468414},{"text":"but not mac","width":184.18181824684143},{"text":"not BSD","width":74.18181824684143},{"text":"so now you're stuck right? what should I use? select? poll? eopll? etc","width":482.18181824684143},{"text":"so epoll is performant, it's great for if you have a thousand long lived connections","width":560.1818182468414},{"text":"so it's ideal if you've got thousands of long lived connections","width":195.18181824684143},{"text":"so this is your yik yak server","width":273.18181824684143},{"text":"now a single machine can support thousands if not more connections, epoll would be a very good choice","width":622.1818182468414},{"text":"and as you saw, the way we used epoll is we set up a set and we just add file descriptors to that set","width":362.18181824684143},{"text":"and then we say okay now I'm prepared to wait, I'm prepared to block until I'm able to read from at least one of these","width":373.18181824684143},{"text":"and then when it returns it tells me which file descriptor I should use","width":471.18181824684143},{"text":"so for CS241, yeah we can play with epoll in the MPs","width":608.1818182468414},{"text":"and should you ever find yourself in a startup or fortune 500 company","width":368.18181824684143},{"text":"that wants to write a server, let's see that's probably every single fortune 500 company these days","width":346.18181824684143},{"text":"or just about most startups have some sort of client server architecture","width":319.18181824684143},{"text":"you might come down to which one of these should I use?","width":370.18181824684143},{"text":"just remember that there's actually three different versions","width":160.18181824684143},{"text":"here's some other thoughts on your server though which is.. sorry of you startup... is that why don't you do what chromium does, the browser that you found inside your android phone","width":904.1818182468414},{"text":"or chrome if you've downloaded as an app","width":131.18181824684143},{"text":"it uses the library called libevent","width":237.18181824684143},{"text":"and libevent basically wraps these three things","width":218.18181824684143},{"text":"so it provides an abstraction on top of the system calls","width":291.18181824684143},{"text":"now we're not going to use libevent in any exams, this is just an FYI","width":434.18181824684143},{"text":"it's that next time you want to do your startup, check out libevent because then you can write code that runs anywhere","width":415.18181824684143},{"text":"and it just provides implementation underneath that talks to select, poll or epoll to get the best possible performance on each platform","width":1073.1818182468414},{"text":"so I've been throwing a lot of information at you very quickly today, any questions at this point?","width":450.18181824684143},{"text":"okay I've got a bit of news for you","width":147.18181824684143},{"text":"I understand its passover this weekend so I'm going to ask the TAs to push the deadline for the MP back to Monday night","width":760.1818182468414},{"text":"11:59 pm","width":158.18181824684143},{"text":"okay so one minute before midnight on Monday","width":253.18181824684143},{"text":"is there not an MP that's due.. somebody sent me an email saying hey I need an extension so I'm going to ask the TAs to make sure there's no deadlines on this weekend","width":757.1818182468414},{"text":"okay if there are two deadlines this weekend","width":319.18181824684143},{"text":"ok well I push the one on Sunday onto Monday","width":203.18181824684143},{"text":"if you do not observe passover, you may still take advantage of this","width":349.18181824684143},{"text":"if you feel it's unfair to have two deadlines the same evening","width":195.18181824684143},{"text":"feel free to submit the first one just on Sunday night","width":472.18181824684143},{"text":"and then pretend that the extension hasn't been given","width":492.18181824684143},{"text":"I'm also asking the TAs to try to provide more verbose information about the MP merge","width":475.18181824684143},{"text":"by the way, the MP merge tester runs on a VM just like yours","width":361.18181824684143},{"text":"so it's probably a good idea to check your VM code on you personal virtual machine","width":523.1818182468414},{"text":"okay right so any quick questions?","width":251.18181824684143},{"text":"okay right let's jump into some other kind of little bits of know how then","width":488.18181824684143},{"text":"so we've been making servers that listen on a particular port","width":299.18181824684143},{"text":"if you're just doing development, you may not care which port your server listens on","width":544.1818182468414},{"text":"you'll just say hey give me any port that's currently unused","width":233.18181824684143},{"text":"here's how we can do this","width":103.18181824684143},{"text":"first of all when you call getaddressinfo if we're setting up a server, obviously we want to talk about localhost, that's NULL","width":365.18181824684143},{"text":"and just say I want port zero which is another way to say hey I'll be happy with any port","width":393.18181824684143},{"text":"well now we've got a problem though, we need to find out which port number we're actually listening on","width":482.18181824684143},{"text":"here's how we do this, there's something called getsockname","width":372.18181824684143},{"text":"sock of course stands for socket","width":154.18181824684143},{"text":"as opposed to things you wear on your feat","width":318.18181824684143},{"text":"this code kind of looks a little bit like the code you might have been writing before getaddressinfo existed","width":414.18181824684143},{"text":"we have these different structs for example...","width":253.18181824684143},{"text":"there's this sockaddr in which you can think of as a version or as a subclass of this other struct","width":846.1818182468414},{"text":"but because C doesn't support [something] we can't say hey this extends this other struct","width":510.18181824684143},{"text":"we have to forcibly typecast it","width":234.18181824684143},{"text":"and so there's all sorts of interesting gotchas, any days that you forcibly type stuff you might forget for example to put in the ampersand here","width":531.1818182468414},{"text":"so there's all sorts of gotchas","width":302.18181824684143},{"text":"I'm not going to ask this on an exam, I'm just pointing out, if you want to develop code that listens on any port, this is the way to do it","width":590.1818182468414},{"text":"you call getsockname on your socket","width":253.18181824684143},{"text":"and now we from that struct we can figure out which port","width":325.18181824684143},{"text":"there's just one little gotcha here","width":157.18181824684143},{"text":"if we try to use this value directly.. hahaha","width":255.18181824684143},{"text":"oooooooh we're going to be in a world of pain","width":268.18181824684143},{"text":"why?","width":205.18181824684143}],
// Part 3
[{"text":"one important thing we have to do to this particular value if we want to know the port number","width":608.1818182468414},{"text":"okay let's go back to the beginning of the lecture dodododo","width":243.18181824684143},{"text":"hello everybody welcome to Friday and don't forget what do you think htons means?","width":467.18181824684143},{"text":"network to host","width":123.18181824684143},{"text":"means?","width":43.18181824684143},{"text":"remember those little functions?","width":166.18181824684143},{"text":"yeah these C structures are the C structures to do with hey the bytes that we're trying to send to the network card","width":468.18181824684143},{"text":"the port number that is represented inside this struct is not really an integer like we like to think of it like an integer that's on our CPU","width":675.1818182468414},{"text":"so if we actually want the value of this entry, we've got to convert it","width":384.18181824684143},{"text":"so don't forget to call...","width":321.18181824684143},{"text":"network to host short ntohs","width":360.18181824684143},{"text":"and that will give us back an integer value that is actually the integer of the port","width":395.18181824684143},{"text":"so next time you hate your lab partner, just walk over and delete that code and watch them try to connect to the wrong port for the rest of the discussion section","width":650.1818182468414},{"text":"right so that's a little gotcha there, no one will tell you that you've forgotten to convert your integer to the right value","width":354.18181824684143},{"text":"other than the fact that you'll be trying to connect to the incorrect port","width":320.18181824684143},{"text":"the other thing you might want to do is find out who is connecting to your server","width":225.18181824684143},{"text":"here's how we can do that, remember this accept call, the thing that blocks waiting for a client to connect","width":493.18181824684143},{"text":"remember how it gives us back a new file descriptor?","width":281.18181824684143},{"text":"well we can now pass in a pointer to a struct","width":398.18181824684143},{"text":"very similar code here","width":113.18181824684143},{"text":"hey I've got this C structure, please fill it in and if you do that, it will tell you information about the remote client","width":541.1818182468414},{"text":"it won't tell you their login name but we can find out things like their IP address","width":324.18181824684143},{"text":"and their port number","width":77.18181824684143},{"text":"so for example, if you didn't like the remote client, why don't you send a thousand packets back to them and try and shut down their machine and send them a denial of service","width":525.1818182468414},{"text":"no don't do that for real unless you happen to be the US government","width":325.18181824684143},{"text":"okay so we've got that information and we now want to print something out","width":284.18181824684143},{"text":"here's how we can do it","width":87.18181824684143},{"text":"you can say okay turn this number to an ASCII value","width":364.18181824684143},{"text":"and that will turn it into an IP4 address like 127.0.0.1 we can see that","width":463.18181824684143},{"text":"and also with the port number, oh look here we go again, don't forget to convert that struct entry into a real number","width":478.18181824684143},{"text":"and then we'll print it out","width":74.18181824684143},{"text":"okay so let's see that as a demo","width":461.18181824684143},{"text":"okie dokie","width":166.18181824684143},{"text":"so I'll go to server2 let's see if this works okay right","width":683.1818182468414},{"text":"right so I've got my code now, it just picks an arbitrary port number that is available","width":530.1818182468414},{"text":"and let me try connecting to that","width":266.18181824684143},{"text":"well actually why don't you see if you can connect to that","width":177.18181824684143},{"text":"if anyone's got their laptop open you can telnet to 172.17.248.187","width":478.18181824684143},{"text":"and see if someone connects to that port number","width":473.18181824684143},{"text":"okay fantastic right","width":215.18181824684143},{"text":"and I got your address so now I can telnet back to you for example","width":537.1818182468414},{"text":"right let's see if you're running anything on port 22","width":277.18181824684143},{"text":"no you're not, okay so I can't try and hack into your machine today","width":289.18181824684143},{"text":"alright so that's in what you need for the next MP","width":252.18181824684143},{"text":"and to make your next multibillion dollar startup company","width":203.18181824684143},{"text":"of course this stuff underpins webservers, it underpins a little company called youtube, you might have heard of it, it started by an undergraduate here","width":481.18181824684143},{"text":"it started, well, what are we in siebel center","width":237.18181824684143},{"text":"networking, this is what it's all about, being able to connect multiple machines together","width":266.18181824684143},{"text":"and we've seen the basic socket calls that do all of this","width":537.1818182468414},{"text":"so for the remaining part of the lecture, let's say goodbye to networking and talk about a different systems programming topic","width":564.1818182468414},{"text":"are you ready?","width":79.18181824684143},{"text":"right, page 2!","width":241.18181824684143},{"text":"okay so today a couple of quick comments","width":233.18181824684143},{"text":"yes we have a quiz on monday","width":151.18181824684143},{"text":"it's going to be topics that we haven't talked about for a while","width":513.1818182468414},{"text":"remember virtual memory?","width":166.18181824684143},{"text":"do you remember page tables?","width":114.18181824684143},{"text":"translation look aside buffer? no? okay well don't worry now will be a good time to learn","width":334.18181824684143},{"text":"I will send a practice quiz in the near future","width":393.18181824684143},{"text":"remember pipes?","width":131.18181824684143},{"text":"do you remember how to use fseek, ftell, fpause? and finally we got the dining philosophers concurrent problem and also the reader writer concurrency problem","width":690.1818182468414},{"text":"so they'll be in it too okay so expect that quiz on Monday in lecture","width":485.18181824684143},{"text":"any questions?","width":819.1818182468414},{"text":"alright then so let's talk about a new topic","width":810.1818182468414},{"text":"scheduling! you already know as a student a lot about scheduling","width":479.18181824684143},{"text":"probably the scheduling algorithm that you're most familiar with is called earliest deadline first","width":545.1818182468414},{"text":"yes?","width":120.18181824684143},{"text":"right? my chemistry home is due and its due in 10 minutes oh no!","width":279.18181824684143},{"text":"okay so this is a problem of just how efficient can we be?","width":428.18181824684143},{"text":"can we use our CPU resources and other system resources to get as much work done as possible?","width":700.1818182468414},{"text":"well it turns out of course that earliest deadline first isn't actually the most efficient algorithm","width":374.18181824684143},{"text":"because we might spend a lot of time flipping from one piece of work to another piece of work","width":390.18181824684143},{"text":"and so we actually have addition latency involved with these context switches","width":493.18181824684143},{"text":"and with scheduling all of this work","width":183.18181824684143},{"text":"so for example, if you find yourself constantly updating your calendar to say oh I'm going to do this work here and this work here","width":337.18181824684143},{"text":"you've chosen an inefficient scheduling algorithm","width":287.18181824684143}],
// Part 4
[{"text":"so this is a non-trivial problem. we got things we wanna run inside our machine which are very urgent","width":590.1818182468414},{"text":"we got say mouse movements to update, things on screen to change","width":483.18181824684143},{"text":"we've got things are not so urgent but requires a lot of cpu a lot of disk","width":336.18181824684143},{"text":"so this will like batch jobs where we dont necessarily need them to be quite so responsive, but we want to schedule them so that they finish within a certain amount of time","width":877.1818182468414},{"text":"so these basic questions lead to a very large amount of mathematical analysis and experimental analysis as we try different scheduling algorithms and we try to find ways to make our system have a highest performance as possible","width":1104.1818182468414},{"text":"and this is non-trivial, and if you get it wrong, people dont like you programs, say, hey, this java thing sucks","width":667.1818182468414},{"text":"or hey this machine is no good for processing audio. i keep getting dropouts because my process isnt given enough cpu time when i need it","width":858.1818182468414},{"text":"or hey my scheduler just crashed my car","width":373.18181824684143},{"text":"because it didnt give enough cpu time to the neural network that decides whether to turn left or right","width":417.18181824684143},{"text":"so scheduling turns out to be a critical part of the system","width":316.18181824684143},{"text":"i'm going to look at it in terms of three different scheduling algorithms, ","width":283.18181824684143},{"text":"and also, just to give you an introduction to some of the terms of how we might actually compare different schedulers","width":570.1818182468414},{"text":"alright so lets define a few terms","width":447.18181824684143},{"text":"first of all, turn around time","width":342.18181824684143},{"text":"what is 5+11?","width":203.18181824684143},{"text":"16","width":36.18181824684143},{"text":"see, those about 2 second delay, when I ask the question, when i demanded the response, the completion of the work, and you actually give me the complete response","width":613.1818182468414},{"text":"thats turnaround time","width":77.18181824684143},{"text":"the time between when someone says hey, heres your chemistry homework, and you actually finish it. ","width":433.18181824684143},{"text":"ok, thats turnaround time, theres pretty obvious meaning, theres nothing special about it","width":908.1818182468414},{"text":"waiting time, so well define this as the total time that a job is able to run but is not schuduled","width":2189.1818182468414},{"text":"in other words, if you got your chemistry homework, hey give me another subject. ","width":338.18181824684143},{"text":"anybody have other, what homework do you have right now?","width":247.18181824684143},{"text":"stats","width":82.18181824684143},{"text":"ok, heres this stats homework, right, its on your desk, its ready to go, but you dont get to it because you are inside a cs 241 lecture","width":434.18181824684143},{"text":"ok, theres part of waiting time of this job, of this homework","width":308.18181824684143},{"text":"later you do some of it, but then you decide to go out with lunch with you dog","width":462.18181824684143},{"text":"or something. so again, this is more waiting time for this job. so if we want to compare between different scheduling algorithms, like the lunch first scheduling algorithm, as apposed to chemis","width":803.1818182468414},{"text":"right, we can talk about the total amount of waiting time this homework is done","width":325.18181824684143},{"text":"we can exclude tho, the time you actually writing on this","width":286.18181824684143},{"text":"so honestly the waiting time we'd like to be as small as possible ","width":400.18181824684143},{"text":"right, what about the response time? okay so heres a little difference between response time and turnaround time","width":453.18181824684143},{"text":"remember, the turnaround was basically the difference between the end and when you actually first submited it when you first knew about that homework","width":814.1818182468414},{"text":"the responsible time, is the time to the very first response","width":439.18181824684143},{"text":"so if it was your chemistry homework, it might be ok, you dont submit the whole thing yet, just submit the answer to the question 1a. ","width":772.1818182468414},{"text":"so you dont need to finish it, you just need to start producing or showing some output","width":386.18181824684143},{"text":"from your job. so if you going to run a very long job, we dont care when you actually finish it, we care about  when you actually starts it, able to give its first response. ","width":703.1818182468414},{"text":"first result","width":102.18181824684143},{"text":"so thats just a little gocha","width":97.18181824684143},{"text":"response time is not the whole time, its the time required to generate the first output","width":1433.1818182468414},{"text":"then we might care about throughput","width":224.18181824684143},{"text":"throughput is the number of homeworks that you can do each week, no you dont care about that, okay fair enough","width":703.1818182468414},{"text":"throughput we care about the number of jobs that we can complete. if your system was always swapping between bit of this hw, bit of that homework, your brain get so fried by thursday you say huh, if we get this I'm going to choose an","width":1095.1818182468414},{"text":"easier major, right","width":143.18181824684143},{"text":"umm so your throughput will go down","width":278.18181824684143},{"text":"you haven't chose a good scheduling algorithm","width":281.18181824684143},{"text":"so throughput we care about the number of jobs we complete","width":605.1818182468414},{"text":"in some unit of time","width":310.18181824684143},{"text":"latency we can define as the overhead of our scheduler that leads to delays or additional overhead of this scheduler that slows down our ability to actually do useful work","width":1833.1818182468414},{"text":"and then starvation","width":271.18181824684143},{"text":"right, starvation on your chemistry homework will probably get you an F on your chemistry homework ","width":358.18181824684143},{"text":"how could we get starvation? how could a scheduler generate a starvation","width":717.1818182468414},{"text":"you forget about the job","width":65.18181824684143},{"text":"ok","width":51.18181824684143},{"text":"yes thats not a very good scheduler ","width":176.18181824684143},{"text":"i dont do homework, ok","width":130.18181824684143},{"text":"what else? thank you! ya! so you always do your cs241 homework and you never do your chemistry homework or your stats homework","width":992.1818182468414},{"text":"so if you have a priority system when you  always do high priority stuff","width":285.18181824684143},{"text":"or you only do the homework you like, or you always do the easiest hoemwork","width":495.18181824684143},{"text":"the shortest homework","width":131.18181824684143},{"text":"that very project that is due for the woodworking 101 is never gonna get done","width":386.18181824684143}],
// Part 5
[{"text":"so yes you can see starvation with this systems","width":217.18181824684143},{"text":"so we gonna look at these terms and we are going to umm analyze different schedulers","width":737.1818182468414},{"text":"right, so here's a few common schedulers and next week on wednesday we are going to look at these in detail and run some examples through them","width":732.1818182468414},{"text":"fcfs, right, when i call it fcfs because in literature we see these things so commonly shortened because its a bit of mouthful","width":783.1818182468414},{"text":"first come first served","width":343.18181824684143},{"text":"so this is the mcdonalds scheduler","width":243.18181824684143},{"text":"you arrive first, i serve you first. its a queue, right","width":247.18181824684143},{"text":"its a simple queue. you put your homeworks in the order that they arrive. ","width":511.18181824684143},{"text":"is that a good thing?","width":290.18181824684143},{"text":"uhh it depends, we gonna have to think about whether these schedulers good for batched jobs or for our responsive needs because we actually have our user that wants to see progress on their work","width":1015.1818182468414},{"text":"so we have first come first served","width":218.18181824684143},{"text":"in other words , its just a queue","width":443.18181824684143},{"text":"right, the next scheduling algorithm, its fantastic, here it is","width":674.1818182468414},{"text":"shortest job first","width":430.18181824684143},{"text":"now, we can use this, we can analyze our scheduler mathematically","width":320.18181824684143},{"text":"in practice you might run into a bit of problem if you try to actually implement shortest job first. whats the problem?","width":683.1818182468414},{"text":"yeah, how do you know? so what you need to do is go out and buy a crystal ball","width":306.18181824684143},{"text":"and become clairvoyant and steals some tacheons from physics lab, and simply know in the future, how long your job is going to run","width":790.1818182468414},{"text":"now ok some specialized circumstances, you might be able to do that. for example, if you ran exactly the same program yesterday, and you are running the same code, with the same kind of data today, you can be pretty confident that your job is gonna take two hours to run","width":946.1818182468414},{"text":"but in a general system that is not true. we dont know how long our jobs gonna run","width":564.1818182468414},{"text":"but we can still at least analyze this. if we have some fake data, say, job1 takes 10 minutes to complete, or 2 hours to complete, we can still do some analysis. so shortest job first in practice ... [cant hear] difficult to implement because you dont know how long it is","width":1327.1818182468414},{"text":"right","width":44.18181824684143},{"text":"ahh haa, this is the pirate one, its the round robin","width":714.1818182468414},{"text":"now this might sound like a kind of quaint english thing and we dance around and jib with some medieval music ","width":780.1818182468414},{"text":"that would be an incorrect answer","width":318.18181824684143},{"text":"round robin, heres the idea, is that all of you are important, so im gonna spend a bit of time with each of you","width":590.1818182468414},{"text":"alright i set my clock, i talk to you a minute, and bye","width":200.18181824684143},{"text":"i talk to you a minute, and bye, i talk to you a minute, and bye, now of course i'm the cpu, right, we are talking about the cpu giving resource to each of these jobs, so imagine like if i got all of these homework, all of these stuff that my cpu can be doing, i'm going through all of these processes, and they got the cpu for a minute, and lets say, you're the last job, yes well we gonna go around again","width":1928.1818182468414},{"text":"ok","width":73.18181824684143},{"text":"so you can see if this say for fun all of these jobs has three minutes worth of cpu to complete, ","width":709.1818182468414},{"text":"ok","width":138.18181824684143},{"text":"none of them complete within three mintues, ok i'm gonna keep going through. these got a little slot of time, so thats why we call it round robin. now it turns out that this homework, half way through, has some problem on it that cant be completed, without additional information from the professor","width":1446.1818182468414},{"text":"so the cpu say, you're blocked, you're waiting on a semaphore, you're waiting on a callback function that, so i'll skip you. you are not actually runnable at this point","width":551.1818182468414},{"text":"so our scheduler only needs to run jobs which are not blocked. ","width":310.18181824684143},{"text":"so for example, if you just wrote you server code and your calling accept, we dont need to spend any cpu time on that process. its blocked, theres nothing for it to compute. ","width":800.1818182468414},{"text":"anyway, thats round robin","width":437.18181824684143},{"text":"so the idea is that we have a little piece of time and you get it and you get the cpu for certain amount of time","width":980.1818182468414},{"text":"of course it might be that if i give you thirty seconds, hey you're done already","width":370.18181824684143},{"text":"nothing more for you to do. you've finished copying data to the disk, you just called accept, you just called mutex lock and you're waiting for it to finish. ","width":581.1818182468414},{"text":"so your process might give up the cpu before you minute is up","width":414.18181824684143},{"text":"before you time quantum expires, but if you dont, ha, too bad for you, i'm taking the cpu away from you, and i'm assigning it to a different process","width":843.1818182468414},{"text":"so your little process is now stuck in time","width":231.18181824684143},{"text":"that homework is half finished because the cpu is now working on a different job. ","width":938.1818182468414},{"text":"right, preemptive scheduling. ok, this is easy, if our jobs, if our task have different priorities, hey, system programs is really important to me, and i'm going to get this done before anything else, then we can use that as a scheduling decision","width":1136.1818182468414},{"text":"so lets go back to round robin for a moment, and say how long should our time quantum to be? all that tradeoffs","width":901.1818182468414},{"text":"ok, lets turn that into a homework problem again. suppose that we work on this problem for ten seconds, and then this homework for 10 seconds, and then this homework with 10 seconds, and then this homework has 10 seconds ","width":954.1818182468414},{"text":"what's the disadvantage? yes?","width":376.18181824684143},{"text":"","width":128.18181824684143},{"text":"thank you! i'm doing a lot of context switch. I'm going to spend a lot of time, actual woke up time, real time, just switching one problem to the next problem","width":601.1818182468414},{"text":"so much so and now i've introduced some latency into the system, so much so that um my throughput is no longer good, its because actual cpu time is burned is spent doing all these context switches","width":1050.1818182468414},{"text":"okay, so lets go to the other extreme than. I'm going to work on this homework for a day","width":465.18181824684143},{"text":"and then i'm going to work on another homework for another day","width":138.18181824684143},{"text":"and the next day, so i've made my time quantum very very large now","width":230.18181824684143}],
// Part 6
[{"text":"what's wrong with that?","width":526.1818182468414},{"text":"ok, if a process runs forever, or one homework is really hard, you taking cs 473, you think 241 is hard, ha! wait till you take 473","width":559.1818182468414},{"text":"right, or take 373. anyway, the three hundred class, now, the i may not get to some short jobs quickly, right? if this job over here is just Hey, send all those email, they reply, you can have to wait a long time, even though it's gonna take a minute for you to complete this job, i've got a very slow quantum","width":1641.1818182468414},{"text":"so those are two extremes, I got one way where i got to introduce a lot of overhead, because of the context switch, another, where short jobs are now waiting for a very very long time, to be accessed","width":806.1818182468414},{"text":"so what do we do? on a real system. on, say a laptop, or on your linux. where for starters i'm gonna talk about linux just a sec because linux has actually got something better","width":752.1818182468414},{"text":"we gotta choose an appropriate quantum","width":153.18181824684143},{"text":"and you will see times, typical times of ten to hendred milliseconds","width":519.1818182468414},{"text":"in other words, a little hardware clock goes of says, hey, your time's up","width":313.18181824684143},{"text":"and interrupts the cpu, and kernel gets involved and say \"hey, time to move onto a different job\"","width":332.18181824684143},{"text":"why do you think we chose ten to a hundred milliseconds","width":846.1818182468414},{"text":"its empirical. yes, so in what factors, what factors influence that decision","width":840.1818182468414},{"text":"ok we got a lot of things running in parallel, we've got interactive jobs, you typing on a terminal, for example, and as you type, you want the letters to appear. if we context switch, if we go off to a different problem, many times a second, you won't know. people won't know that they are sharing the cpu with multiple jobs","width":1337.1818182468414},{"text":"right? you could be logging into a server, or you could be typing in a terminal, and it looks like \"hey, the system is mine\"","width":378.18181824684143},{"text":"the cpu is all mine to play with, and if we keep swapping it around fast enough, no one except for the people taking cs241 will know","width":574.1818182468414},{"text":"no one will know that actually we keep swapping the cpu ","width":212.18181824684143},{"text":"so that's the first idea to why we choose to this kind of time","width":258.18181824684143},{"text":"which is its not so short that we have a lot of overhead, but its short enough so that our system appears to be responsive","width":558.1818182468414},{"text":"when we interact with it","width":189.18181824684143},{"text":"these days you might see even faster times as well","width":217.18181824684143},{"text":"right, and finally, what does linux do today, it uses something called ... oops ... a completely fair scheduler","width":1130.1818182468414},{"text":"ok","width":97.18181824684143},{"text":"some comments about this, one is, huh, there is no such things as someone could be completely fair. ","width":398.18181824684143},{"text":"you ask any two-year-old","width":200.18181824684143},{"text":"alternatively, it's completely fair for some definition of completely fair ","width":412.18181824684143},{"text":"final thing is, this scheduler was actually stolen from network theory. ","width":298.18181824684143},{"text":"the ideas behind it were generated by understanding how to schedule packets on the network ","width":573.1818182468414},{"text":"and that's what we talked about it today","width":122.18181824684143},{"text":"with that, thank you very much. have a wonderful weekend, i will see you on monday for the next mini exam! thank you very much. Come down to see me if you have any questions","width":875.1818182468414}],
// Part 0
[{"text":"Ok, class welcome class to CS 241","width":324},{"text":"First announcement","width":101},{"text":"Yes, CS 241 is a lot of work but you may have noticed there are seniors still walking around in this building","width":397},{"text":"They survived CS 241 and you can too","width":255},{"text":"Why not get a T shirt","width":171},{"text":"Yes I appreciate its a lot of work","width":97},{"text":"But this is what kind of sets you apart from other students in other universities","width":289},{"text":"By the end of this course you really are going to know your stuff ","width":147},{"text":"And you really are going to change the world","width":122},{"text":"Ok so here's what we're going to do today","width":119},{"text":"We're going to talk about scheduling","width":154},{"text":"We're going to look at some simple different ideas about how to do different schedules","width":320},{"text":"And similar effects it has on things like the waiting time","width":217},{"text":"And exactly when each schedule is is uh uh exactly when each process is scheduled","width":401},{"text":"Right so let's have a look at this and in a moment","width":126},{"text":"I'm going to ask you to calculate this","width":227},{"text":"So as this is a model of - we're going to uhm be clairvoyant - we we we know when","width":471},{"text":"as a design we know when our processes are going to be ready to run","width":347},{"text":"And uh we've got four processes, we've labelled them one two three four","width":223},{"text":"We can say hey process four doesn't exist at the beginning","width":195},{"text":"or it's not ready to run","width":63},{"text":"Perhaps it's waiting on a condition variable, the process is waiting for some data to revive","width":337},{"text":"But anyway we don't need to consider it in the very beginning of our model here","width":360},{"text":"Uhm and then these different processes have different amounts of execution time they need in order to complete","width":568},{"text":"So for example in process one takes thirty milliseconds","width":216},{"text":"So we're going to look at our little simulation in ten millisecond blocks and see","width":344},{"text":"which process is using the CPU for each block of time","width":331},{"text":"Now here's our different scheduling approaches we've got","width":256},{"text":"Okay","width":52},{"text":"We've got something called round robin","width":281},{"text":"So with round robin what we do is we try to be fair and say","width":330},{"text":"Well you can have the CPU for a certain block of time","width":300},{"text":"In this little example, 10 milliseconds","width":135},{"text":"And after 10 milliseconds the alarm goes off","width":138},{"text":"Ding! A little hardware clock goes off","width":112},{"text":"And that causes an interrupt","width":131},{"text":"the interrupt then causes the CPU to execute some code inside the kernel","width":220},{"text":"The code inside the kernel says AHA you're out of time","width":245},{"text":"And now I'm going to give the CPU to a different process","width":252},{"text":"So the idea is we're going to do this every 10 milliseconds","width":391},{"text":"Uh we'll try to be fair","width":63},{"text":"So this means that if there's a long running job","width":162},{"text":"It shouldn't matter too much since after two milliseconds we're going to give the CPU to someone else","width":282},{"text":"And they get a chance to execute","width":150},{"text":"Okay so that's round robin","width":136},{"text":"We'll work that out in a moment","width":103},{"text":"And you'll notice in this little example","width":171},{"text":"I've actually got three processes","width":105},{"text":"All ready to go at the very beginning","width":180},{"text":"So what we'll say is the order in which they ask if you're ready","width":288},{"text":"Is just dependent on how we've written them done","width":105},{"text":"So process 1 we're going to run before process 2 et cetera et cetera et cetera ","width":330},{"text":"And then the next we're going to calculate is shortest job first","width":360},{"text":"Meaning we actually know in advance these timings","width":300},{"text":"And we give this to the operating system","width":101},{"text":"To the scheduler","width":64},{"text":"So it can decide when to run them","width":404},{"text":"A \"I gotcha here\" is remember you can't actually run process 4 at the beginning of time because it doesn't exist yet","width":346},{"text":"It only comes into play, it only enters the stage after 10 milliseconds","width":329},{"text":"Alright so that's not a choice at the very beginning","width":166},{"text":"And then we have first come first serve","width":218},{"text":"This is just a simple queue","width":228},{"text":"Whoever arrives first gets to eat first","width":224},{"text":"And they continue to eat, to use the CPU until they are finished","width":302},{"text":"So it doesn't matter how long they take","width":176},{"text":"So that's first come first serve, FCFS","width":244},{"text":"That sounds pretty fair to me but we'll see if there's a problem with it later","width":290},{"text":"Now we can make these a little more complicated","width":164},{"text":"We can talk about how to preemptive shortest job first","width":296},{"text":"And the idea here is if a new job arrives","width":312},{"text":"In other words appears on stage ready to go","width":199},{"text":"Then if it's shorter we'll run that instead","width":325},{"text":"Now, one thing to look out for shortest job does not mean remaining time","width":273},{"text":"It means the actual original specified time","width":221},{"text":"So if you've only got ten milliseconds to run on a thirty milliseconds job","width":256},{"text":"","width":2},{"text":"It still compares thirty milliseconds","width":83},{"text":"Not the remaining time, it's the actual total time","width":170},{"text":"When we talk about shortest job first","width":130},{"text":"And then the other variant is preemptive priority where","width":206},{"text":"instead of thinking about the execution time ","width":151},{"text":"We have some sort of priority assigned to each process","width":226},{"text":"So for example if this was controlling a lunar lander","width":248},{"text":"Controlling the rockets is probably more important than say running the -inaudible- activity right now","width":455},{"text":"We need to make sure that we make immediate course corrections","width":338},{"text":"So uh, in this, we've got higher value equals a higher priority","width":269},{"text":"And if a higher priority job arrives on the scene","width":162},{"text":"Ready to go","width":52},{"text":"Then we will give the CPU immediately to that job","width":250},{"text":"So that's the process we're going to run in a moment","width":254},{"text":"Let's go back to these questions","width":90},{"text":"So when might a process be in the ready queue","width":269},{"text":"Let's think about processes you've programming, you've written","width":222},{"text":"Why might it be in a ready state?","width":207},{"text":"Not running on the CPU","width":114},{"text":"But in a ready state","width":143},{"text":"What could have happened?","width":413},{"text":"Yes!","width":226},{"text":"Okay so there's more than one process who wants to run","width":169},{"text":"And someone else has currently got the CPU","width":206},{"text":"Give me something that might have happened to your process","width":126},{"text":"That makes the mediates become ready","width":344},{"text":"Ok, thank you. It's waiting for say disk IO, or say network IO","width":349},{"text":"Perhaps you've called read","width":118},{"text":"Perhaps you've called accept","width":158},{"text":"And now you're waiting for a client to connect to your web server","width":238},{"text":"To your chat server","width":51},{"text":"To your database server","width":86},{"text":"That thread of execution cannot run yet until the operating system says","width":279},{"text":"Okay, yes! I've got your data, off you go","width":165},{"text":"Okay","width":118},{"text":"What else?","width":1023},{"text":"No ideas?","width":263},{"text":"Yes!","width":38},{"text":"Let's say you call sleep and your process sleeps for five seconds","width":332},{"text":"After five seconds your operating system says","width":120},{"text":"Oh, okay, right, fine","width":90},{"text":"Time to wake this process up","width":77},{"text":"I'll let this process continue, I'll let that thread continue","width":321},{"text":"Similarly if you had a call with a timeout","width":244},{"text":"Alright, there's going to be time when your processor stops","width":389},{"text":"A zombie is not ready to run","width":232},{"text":"A zombie can't run, it's finished","width":107},{"text":"It's still taking up space in memory","width":155},{"text":"Inside the processor control block","width":86},{"text":"because we have things like it's exit status","width":256}],
// Part 1
[{"text":"Yep","width":213},{"text":"Okay so a thread has called condition wait","width":171},{"text":"Is not yet ready to run but if someone then broadcasts it","width":273},{"text":"It goes into the ready state","width":147},{"text":"So if we wanted we could draw a state diagram that says","width":320},{"text":"Look our processes can be in these different state","width":123},{"text":"It could have been just started, it be running on the CPU, it could be in this ready state","width":275},{"text":"And once it's in the ready state it's up to the kernel who gets to play and when","width":362},{"text":"And that's what this scheduling is all about","width":204},{"text":"Alright so we can define something called wait time","width":464},{"text":"And uh I can write a little formula for it","width":451},{"text":"Where's my notes","width":167},{"text":"Oh yeah","width":804},{"text":"So the wait time is the total amount of time spent in the ready state","width":323},{"text":"Waiting to run","width":370},{"text":"So uh if we know the completion time and the start time","width":458},{"text":"That gives us the beginning and end","width":147},{"text":"Some of that time was spent actually doing useful stuff","width":157},{"text":"Actually executing","width":75},{"text":"So if we subtract that stuff we can actually discover how much time our process was unable to continue, it was in the wait state","width":456},{"text":"So I can say that the total wait is the uhm completion time so","width":935},{"text":"Time, the actual wall clock time when we finished","width":374},{"text":"Minus when the process first arrived","width":560},{"text":"Minus - so that gives us the time interval","width":207},{"text":"And the other time we can subtract is the time we spent executing","width":353},{"text":"So the duration that we spent executing","width":182},{"text":"So if we subtract off those two","width":530},{"text":"We get a certain amount of wait time","width":56},{"text":"That might be useful in calculating the wait time in these examples","width":557},{"text":"So it's not the first uh time that we have to wait because a process might go back into the waiting state","width":369},{"text":"For example","width":50},{"text":"If a process with a higher priority and you are running a priority based scheduler","width":439},{"text":"Your process might be pulled away from the CPU and the CPU is assigned to someone else","width":308},{"text":"To a different process","width":103},{"text":"Okay, so we've done that","width":137},{"text":"So it's not the first waiting time","width":115},{"text":"It's the total waiting time","width":464},{"text":"Okay so just occasionally, maybe in these examples","width":291},{"text":"I haven't calculated them today","width":83},{"text":"You have a tie break","width":74},{"text":"For example your process might be ready to run again after round robin","width":329},{"text":"And a new process arrives on the scene ready to go","width":271},{"text":"Which one should you use","width":71},{"text":"Well we need some sort of tie break decision","width":204},{"text":"And in which case we might to choose the job that arrived the earliest on the scene","width":509},{"text":"So now we want the earliest job to complete","width":142},{"text":"So let's see if any of these examples require that tie break situation","width":402},{"text":"Okay soooooooo","width":196},{"text":"Here's five little examples","width":115},{"text":"I'll get started and then you get the next one","width":173},{"text":"So let's look at this round robin","width":129},{"text":"So round robin remember","width":146},{"text":"It's like a little song, each person gets to sing a little bit","width":170},{"text":"So process 1 gets to use the CPU for the first 10 milliseconds","width":342},{"text":"But then our hardware interrupt goes off and the kernel says","width":181},{"text":"HAHA not for you anymore","width":98},{"text":"And then process 2 has been waiting","width":348},{"text":"Also process 4 arrives on the scene","width":212},{"text":"But we're going to schedule process 2 because it was there first","width":237},{"text":"Alright","width":18},{"text":"10 milliseconds later we switch our process 2 and process 3 gets to use the CPU","width":339},{"text":"Another 10 milliseconds later our hardware clock goes off","width":199},{"text":"And finally process 4 gets to play","width":447},{"text":"And guess what happens next?","width":197},{"text":"We go around again!","width":65},{"text":"So process 1 and then process 2","width":189},{"text":"Now at this point process 2 is finished","width":236},{"text":"It's used its 20 milliseconds up","width":219},{"text":"It's finished calculating whatever it needed to calculated","width":186},{"text":"Then it's 3","width":227},{"text":"Process 4 you're already done ","width":148},{"text":"So we're back to process 1","width":463},{"text":"So now we could calculate the wait time and if we wish the average wait time","width":358},{"text":"So for process 1 how long was it waiting?","width":284},{"text":"I could count that 1 2 3 4 5","width":275},{"text":"It was waiting 50 milliseconds","width":242},{"text":"And process 2, it had to wait uhm, 1 2 3 4 - another 40 milliseconds","width":785},{"text":"Process 3, from my notes, looks like fifty","width":474},{"text":"And process 4 will be uh thirty milliseconds","width":360},{"text":"So I can add that up to get the total wait time and then divide by the number of processes to get an average","width":871},{"text":"Okay","width":46},{"text":"So that was me working through another example","width":105},{"text":"Now it's your time to play","width":628},{"text":"20 milliseconds? Oh quote possibly yesI'm sorry, oh quite possibly, ","width":217},{"text":"Because yeah it arrived at 10 milliseconds","width":227},{"text":"So it had uhm to wait in additional 20 milliseconds before being scheduled I think","width":720},{"text":"Right so","width":486},{"text":"Perhaps its not obvious but these are the end times of each block","width":297},{"text":"So this one goes from 10 to 20 and then 20 to 30, et cetera et cetera et cetera ","width":352},{"text":"Okay","width":82},{"text":"Right","width":38},{"text":"Sooooo","width":69},{"text":"Now is your chance to get cozy with these different scheduling algorithms","width":290},{"text":"And to run through these little examples","width":171},{"text":"It shouldn't take you very long","width":172},{"text":"Any questions?","width":156},{"text":"Okay, have a go.","width":256}],
// Part 2
[{"text":"Okay so with the shortest job first","width":9064},{"text":"We're not interrupting the existing jobs","width":162},{"text":"So even though process 4 arrives and is ready to go","width":238},{"text":"And is 10 milliseconds","width":95},{"text":"We let jobs run to completion","width":229},{"text":"Alright so 4 before here has to wait an extra 10 milliseconds before it can run","width":422},{"text":"There is no preemption","width":194},{"text":"Okay that's what we're going to do down here","width":111},{"text":"When we do preemptive shortest job first","width":170},{"text":"When we actually take the CPU away from a process","width":369},{"text":"In the preemptive version yes we start with P2","width":260},{"text":"But then P4 arrives on the scene, the new kid on the block","width":249},{"text":"Alright and so P4, off you go","width":177},{"text":"P4 runs to completion and now P2 can be scheduled back","width":289},{"text":"It beats P3, it arrived earlier","width":482},{"text":"And then P3 runs","width":91},{"text":"And then finally P1 has been waiting all of this time and it gets to run","width":488},{"text":"Alright K","width":157},{"text":"First come first served","width":100},{"text":"Couldn't be easier, right","width":82},{"text":"It just simply write down the order in which we wrote them down here","width":212},{"text":"No brain power required whatsoever","width":112},{"text":"And then the last version we are going to look down here is preemptive priority","width":447},{"text":"Yep","width":508},{"text":"It's not about the remaining time ","width":113},{"text":"It's about the total time of the job","width":188},{"text":"It's not remaining shortest job","width":145},{"text":"It's about the total","width":320},{"text":"So don't do any subtraction stuff","width":161},{"text":"It's a common gotcha","width":404},{"text":"Alright so and the priority in this example saying a higher priority number is more important","width":380},{"text":"So process 4 is the highest priority but it's not around at the beginning of time","width":263},{"text":"Instead process 3 gets to run","width":117},{"text":"And then it gets interrupted","width":181},{"text":"Process 4 comes along and says I need the CPU and I need it more than you","width":251},{"text":"So process 4 finishes so we go back to process 3","width":276},{"text":"","width":2},{"text":"Process 3 finishes","width":63},{"text":"And then we go back to process 2","width":132},{"text":"Process 2 finishes","width":70},{"text":"And finally process 1","width":739},{"text":"So we could calculate some wait times","width":411},{"text":"This one is 160 over 40","width":336},{"text":"That gives us an average wait time of 40 milliseconds","width":473},{"text":"Shortest job first: the average wait time turns out to be 20 milliseconds","width":954},{"text":"First come first served: average wait time 37.5 ms","width":559},{"text":"Preemptive shortest job is 22.5 ms","width":966},{"text":"The last one is also 22.5 ms","width":732},{"text":"Alright so we don't care that much about the figures","width":194},{"text":"But what we do care about the following","width":254},{"text":"Firstly there is a difference in ordering","width":171},{"text":"And yes this was just a paper and pencil exercise","width":159},{"text":"But it kind of shows you depending on how much you care about a particular job","width":296},{"text":"You might be in the ready queue for a long time, you might be waiting for a long time","width":262},{"text":"Secondly we have a clear winner here","width":214},{"text":"The shortest job first minimizes the wait time in this example","width":487},{"text":"And uh in general as well","width":264},{"text":"And if you think about that, that kind of makes sense","width":183},{"text":"The long running job and I put that first, all of my other processes are going to have to wait for that length of time","width":472},{"text":"Therefore I should put the very longest job at the very end of my queue","width":327},{"text":"","width":2},{"text":"And I can just prove that recursively therefore that my average wait time must be minimal if I put my shortest jobs at the beginning of the queue","width":578},{"text":"And I order them by total execution time","width":275},{"text":"So if my idea of fairness, if my idea of an optimal system, was just in terms of how long my processes have to wait","width":537},{"text":"Then I would choose shortest job first","width":276},{"text":"There's a problem with that of course","width":140},{"text":"First of all we'd actually have to know how long our processes really do run for","width":334},{"text":"And that might call for a crystal ball","width":201},{"text":"Or at least an assumption about how my processes work today are exactly the same as how they worked yesterday","width":380},{"text":"And that's kind of stretching it about with real systems","width":559},{"text":"Our preemptive schedulers worked pretty well","width":187},{"text":"Of course they're more complicated","width":67},{"text":"We're going to have to write a kernel who is prepared to switch out a process and save it someway so that we can preempt and pull it out","width":522},{"text":"And replace it","width":257},{"text":"And our round robin actually has the worst wait time even though it was going to be pretty fair","width":576},{"text":"though we thought it was going to be*","width":64}],
// Part 3
[{"text":"So what about this?","width":206},{"text":"We've heard about starvation before where a process never gets to complete it's uh, it never gets to make any significant progress.","width":713},{"text":"Which scheduler could lead to starvation and how?","width":263},{"text":"Maybe there's more than one correct answer.","width":227},{"text":"Don't tell me know; tell your neighbors and see if you agree.","width":3496},{"text":"Okay, so uh, a student has let me know that my calculations are suspect so I probably am off by a quarter millisecond or so.","width":823},{"text":"So I apologize for that.","width":185},{"text":"Silly  numerical error.","width":92},{"text":"Okay so which ones can suffer from starvation?","width":461},{"text":"The second fourth and fifth.","width":66},{"text":"Shortest job first, yeah, so if you're getting text messages continuously you might never get to your chemistry homework.","width":1069},{"text":"So next time you don't fill out your chemistry homework, or CS 241 HW, keep sending yourself text messages.","width":259},{"text":"They're nice and short, you'll do them straight away.","width":170},{"text":"So shortest job first; we can set up a starvation by keep making short jobs and we'd never get to the long job.","width":590},{"text":"The other possibility is pre-emptive shortest job first.","width":306},{"text":"So again uhm I would never get to my long job if I keep submitting short jobs.","width":436},{"text":"And preemptive priority.","width":122},{"text":"Same idea","width":105},{"text":"If I keep having an urgent thing to do","width":213},{"text":"I might never get to schedule my low priority items","width":779},{"text":"Is there a problem? Yeah.","width":150},{"text":"We have to choose a tradeoff.","width":87},{"text":"We have to decide what we mean by fair.","width":211},{"text":"So which schedulers are appropriate for batch jobs?","width":235},{"text":"Of course the answer is It depends!","width":233},{"text":"By batch jobs we mean aren't interactive which are typically run for long periods of time without user interaction.","width":468},{"text":"They have all the data they want to process","width":92},{"text":"Maybe stuff out of files or network","width":252},{"text":"Do some analysis on that data","width":233},{"text":"So we might care about say earliest job finishing first or shortest job finishing first","width":330},{"text":"in which case we might choose a shortest job first scheduler","width":208},{"text":"We might care about seeing the results of all of our jobs","width":343},{"text":"And we are prepared to wait so we might choose round robin","width":438},{"text":"Uhm","width":109},{"text":"The other possibility is to, in a real system","width":422},{"text":"Suppose your job crashes or runs forever, has an infinite loop","width":670},{"text":"If there is no preemption","width":131},{"text":"if we don't forcibly remove that job from the CPU everything gets backed up","width":540},{"text":"So we have to careful if we're not going to preemptive running jobs","width":372},{"text":"Right","width":36},{"text":"So there isn't a simple answer for this batch jobs","width":190},{"text":"It depends on what your criteria are","width":187},{"text":"So what scheduler does Linux use?","width":90},{"text":"I mentioned it last lecture","width":261},{"text":"Yes! The completely fair scheduler.","width":203},{"text":"Which is a little bit of an oversell","width":620},{"text":"Alright so it's not completely fair","width":164},{"text":"But it is similar to round robin where we are prepared to interrupt a process","width":424},{"text":"Every 10 milliseconds or so","width":412},{"text":"But we're prepared to give an extended period of time to jobs which don't use all of their time quantum","width":348},{"text":"So for interactive programs, desktop programs, UI programs","width":351},{"text":"These tend to have very bursty needs of the CPU ","width":185},{"text":"Like OH QUICK the user touched something","width":101},{"text":"OH QUICK I need to read data on disk","width":112},{"text":"And they won't use it for 10 milliseconds","width":140},{"text":"They will only require a tiny bit of CPU","width":292},{"text":"Processing before we end up say sending it an event to the system","width":275},{"text":"Update the screen","width":43},{"text":"And we're done","width":33},{"text":"And we wait for the next user event","width":110},{"text":"So the completely fair scheduler says we'll remember that these processes didn't require a lot of CPU in the past","width":427},{"text":"So we'll prepare to give it a little bit of extended CPU in the immediate future","width":319},{"text":"So we'll try to make the system as responsible as possible","width":363},{"text":"K here's a classic problem in scheduling","width":142},{"text":"It's known as the convoy effect","width":271},{"text":"And we see this with the first come first served","width":403},{"text":"Scheduler","width":332},{"text":"And you can imagine a real system where I've got jobs which are very strongly CPU bound","width":388},{"text":"And other jobs other processes which are IO bound","width":553},{"text":"And if you branch in the queue going this way by first come first serve","width":522},{"text":"I might have a big job which comes","width":245},{"text":"I illustrate by drawing it a large size","width":255},{"text":"It's going to take a lot of CPU time to run","width":230},{"text":"And behind it I've got loads of little jobs which","width":335},{"text":"They don't take much CPU but they take some IO to do","width":270},{"text":"And then the classic description of the convoy effect","width":129},{"text":"Is we imagine this process uses the CPU for a long time","width":360},{"text":"Then just a little bit of IO","width":86},{"text":"And then repeats","width":647},{"text":"And here's the problem.","width":64},{"text":"These are the processes that start after this CPU heavy process","width":483},{"text":"They can't use the disk","width":256},{"text":"Or the IO","width":100},{"text":"They only need a tiny amount of CPU","width":162},{"text":"It's like going to McDonalds to grab some little ketchup packets or something","width":242},{"text":"And someone there is taking all the space","width":154},{"text":"\"I just need a little ketchup packet\"","width":187},{"text":"\"I'M SORRY WAIT YOUR TURN\"","width":216},{"text":"And so we have poor use of uh IO","width":333},{"text":"CPU usage is great. it uses the CPU 100% of the time","width":199},{"text":"Very efficient","width":101},{"text":"But these other jobs are stuck and uh","width":325},{"text":"So our disk utilization is pretty poor","width":189},{"text":"We could have had a better choice if we used something like round robin","width":284},{"text":"Where we let these little jobs jump in and let them use the CPU for small amounts of time","width":302},{"text":"And then they can actually get on with their disk IO","width":368},{"text":"Right","width":32},{"text":"The questions about threads","width":163},{"text":"I mean uh scheduling","width":256}],
// Part 4
[{"text":"Okay so we talk about this classically in terms of processes","width":460},{"text":"What a thread really is just a thread of execution","width":205},{"text":"Uh everything we've talked about processes applies to threads","width":330},{"text":"And uh you can actually set the uh scheduling if you wish uh in the pthread library","width":593},{"text":"And so for example there's a pthread call that allows you to say hey I want to use round robin scheduler","width":334},{"text":"Or hey I want to use first come first served","width":299},{"text":"So it's possible to set that as you create each thread","width":508},{"text":"Bear in mind","width":83},{"text":"If you set them first come first served","width":368},{"text":"Be careful","width":208},{"text":"because if a thread never finishes","width":839},{"text":"All the other threads","width":504},{"text":"wait forever","width":172},{"text":"wait an infinite amount of time","width":237},{"text":"Because we did first come first serve","width":113},{"text":"and you are at the front of the queue","width":105},{"text":"And you're saying","width":45},{"text":"Hah I'm going to take up this server forever","width":248},{"text":"MUAHAHAHAAH","width":115},{"text":"So that's just a little gotcha if you truly try to set the scheduling policy","width":522},{"text":"Uh so another quick tidbit there's this little command called nice","width":381},{"text":"People would like their commands to be nice","width":144},{"text":"So what you can do is Linux changed the priority of your process by nice-ing it","width":575},{"text":"And uh mere mortals, non root people, can increase their priority number which decreases their priority","width":686},{"text":"Which makes it less important","width":299},{"text":"And so you can say Okay I have a long running job","width":188},{"text":"Its going to take a lot of CPU","width":81},{"text":"But only run if there's nothing else to do","width":127},{"text":"In which case you might call nice","width":141},{"text":"As part of that","width":132},{"text":"If you are root you can nice the other way","width":169},{"text":"You can actually make things more important and higher priority","width":344},{"text":"But you probably won't need nice unless you're trying to run uh background computational jobs","width":315},{"text":"And try to make it so they don't interfere with your UI","width":262},{"text":"So that's enough about scheduling","width":124},{"text":"Let's have a look at page tables","width":293},{"text":"So we've been playing a lot with TCP packets","width":235},{"text":"And uhm most of the internet uses TCP","width":275},{"text":"However uh we did mention there's another thing called UDP","width":537},{"text":"Which is packet based","width":77},{"text":"It's not a stream","width":65},{"text":"We simply send our telegraph or datagram off and hope it gets to the other side","width":490},{"text":"Let's have a quick look how we could make a UDP server","width":206},{"text":"And see how it's different from a TCP server","width":223},{"text":"Okay so uhm if we want to fill up a UDP server","width":406},{"text":"Listen on a particular port","width":211},{"text":"We'll set up our hints as usual","width":93},{"text":"Oh good we've set it to zero","width":175},{"text":"And today we want to use IPv6","width":203},{"text":"128 bit addressing","width":151},{"text":"So how do we specify that","width":112},{"text":"Well for our family we don't want address family INET","width":316},{"text":"We want INET6 for our socket","width":172},{"text":"","width":2},{"text":"We don't want sockstream","width":67},{"text":"We're not trying to make a streaming interface here","width":162},{"text":"We just want to send these little datagrams","width":159},{"text":"So we have SOCK_DGRAM","width":302},{"text":"And we want to listen on a port","width":136},{"text":"We don't want to actually send something anywhere","width":256},{"text":"We're trying to make a passive socket","width":134},{"text":"So for our flags here I need AI_PASSIVE","width":819},{"text":"Okay so we set this up","width":72},{"text":"We can call get address info as usual","width":282},{"text":"I don't need to connect anywhere","width":175},{"text":"I want to connect to port 300","width":313},{"text":"And we'll get our result","width":124},{"text":"Let's assume that works","width":122},{"text":"So well check the return value of this","width":175},{"text":"Here's how we can set things up","width":79},{"text":"It just takes two calls","width":202},{"text":"Yes we need to make a socket as usual","width":201},{"text":"Remember that represents our kernel object","width":155},{"text":"The thing that is going to talk about our ability to the outside world","width":293},{"text":"And we pass in everything we get from our result object","width":205},{"text":"Note the hints","width":128},{"text":"Yes we want to continue to a particular port","width":141},{"text":"So we need to call bind on that socket","width":447},{"text":"But then that's it","width":76},{"text":"There's no queue to make","width":156},{"text":"There's no exec to do","width":244},{"text":"We just wait for packets to appear","width":201},{"text":"How do I do that?","width":184},{"text":"I call recvfrom","width":407},{"text":"And when you do this","width":110},{"text":"Not only can you get the data that someone set you","width":202},{"text":"So let's pass in a buffer and how big our buffer is","width":228},{"text":"You can also find out who sent it","width":111},{"text":"So that's the purpose of this structure here","width":284},{"text":"And we pass in the size of this structure as the last argument","width":256}],
// Part 5
[{"text":"So what are these UDP packets look like?","width":444},{"text":"So here's the specification of UDP","width":240},{"text":"It's this little diagram here","width":513},{"text":"And there's really not much to it","width":155},{"text":"It's the UDP format","width":152},{"text":"I got a source port, destination port","width":141},{"text":"So each of those is 16 bits","width":141},{"text":"I've got the length here, also 16 bits","width":210},{"text":"a checksum which is optional for IPv4","width":149},{"text":"And the data that someone wants to send me","width":123},{"text":"So that was the original spec","width":352},{"text":"So it looks like we could have packet sizes up to 2^16","width":537},{"text":"Because that's the number of bits that our length is","width":273},{"text":"In practice that may not be true","width":237},{"text":"The spec actually says the minimum supported is 500 bytes","width":317},{"text":"And in practice most routers will happily send packets up to 1500bytes","width":695},{"text":"Which by the time you add the overhead of the UDP and IP fragment ","width":308},{"text":"It means that UDP packets are limited to about 1472 bytes","width":477},{"text":"So try sending a packet greater than that on a classic network","width":322},{"text":"Good luck","width":96},{"text":"How do you know it didn't work?","width":236},{"text":"This is the sound of silence","width":113},{"text":"You get NOTHING","width":122},{"text":"You send stuff out","width":76},{"text":"It goes nowhere","width":76},{"text":"There's a router in the middle that says","width":99},{"text":"I SEE YOUR PACKET","width":87},{"text":"I SPIT ON IT","width":168},{"text":"I EAT YOUR PACKET FOR LUNCH","width":73},{"text":"Right","width":13},{"text":"So","width":37},{"text":"There's two little problems right","width":133},{"text":"It's great for sending small amounts of information","width":399},{"text":"An amusing anecdote here is IPv6 has since designed jumbo packets","width":597},{"text":"Which can be up to 4GB in size","width":507},{"text":"I mention this because I find this amusing because right now ","width":147},{"text":"Most of the infrastructure spits on anything bigger than 1472 bytes","width":236},{"text":"And we've got spec that allows up to 4G","width":146},{"text":"Good luck getting that packet to go anywhere","width":163},{"text":"Maybe by the time you graduate we'll see jumbo packets floating around on the internet","width":280},{"text":"But the spec is there","width":153},{"text":"It's probably going to take a generation of electrical failures before we upgrade enough of the infrastructure before jumbo packets truly work","width":526},{"text":"You might be able to get it to work on your local subnet","width":287},{"text":"On your local router","width":124},{"text":"If you buy some very modern hardware","width":152},{"text":"But these days currently ","width":100},{"text":"UDP in practice","width":117},{"text":"Yes that's about the maximum size you send a packet","width":177},{"text":"So where is UDP actually used?","width":406},{"text":"You will see UDP packets for DNS","width":336},{"text":"domain name service","width":120},{"text":"So when you type in something like HEY","width":141},{"text":"I want to go to the host which say its bbc.com","width":305},{"text":"Somebody somewhere needs to know how to translate this address to an IPv4 or IPv6 address","width":748},{"text":"And the person","width":56},{"text":"The service","width":63},{"text":"Who knows how to do this is DNS","width":317},{"text":"Which cached this information","width":93},{"text":"So there's a whole hierarchical structure of servers that can convert hostnames and addresses to their relevant IP numbers","width":771},{"text":"To do this your machine sends out UDP packets","width":303},{"text":"And it may send out to 2 or 3 different DNS servers","width":318},{"text":"They might say Hey Im in a rush here","width":156},{"text":"And quick I need to know","width":68},{"text":"Who has the answer?","width":125},{"text":"So that's why we use DNS","width":87},{"text":"A single packet, if it gets lost, it doesn't matter","width":143},{"text":"I'm going to ask someone else as well","width":122},{"text":"If it times out I'll just send it again","width":136},{"text":"It's a simple kind of QUICK I NEED THIS","width":141},{"text":"and hopefully I'll get the response back as fast as possible","width":163},{"text":"Much faster than opening up a TCP connection","width":316},{"text":"So DNS traffic uses UDP","width":723},{"text":"Let's compare this with TCP","width":677},{"text":"So the TCP packets are much more uh complicated","width":440},{"text":"Here they are","width":37},{"text":"There's some similarities","width":227},{"text":"You'll notice that we've got a port number","width":310},{"text":"From the source and the destination","width":154},{"text":"Why do you think we need the source port?","width":695},{"text":"I'm sending you a packet to your server","width":194},{"text":"Why should I send you my source port?","width":268},{"text":"So you can respond","width":152},{"text":"So look there's multiple packets going out of different ports on my server all of the time","width":359},{"text":"When the other socket at the other end wants to send back some information it needs to know which port to send it to","width":520},{"text":"So  the source port is important because we'll need that for the destination","width":446},{"text":"We've also got a sequence number.","width":299},{"text":"Remember","width":39},{"text":"What does TCP try to do ?","width":67},{"text":"It tries to hide the fact that we're sending packets across","width":175},{"text":"We've kind of turned this into a stream","width":133},{"text":"But packets might get lost","width":64},{"text":"It might get duplicated","width":171},{"text":"So our trick is to keep track of the total number of bytes that we've successively sent in each direction","width":538},{"text":"So we'll mark each packet with where we are in the stream","width":399},{"text":"So we have a sequence number","width":85},{"text":"It represents the actual number of bytes that have been transferred in this direction so far","width":359},{"text":"So this means if we lose some packets","width":159},{"text":"The other end can say","width":144},{"text":"HEY","width":28},{"text":"I lost you. I lost you at this point","width":173},{"text":"","width":3},{"text":"Can you resend starting from here?","width":329},{"text":"And that's part of the acknowledgement number","width":124},{"text":"The other end of our connection can say I hear you","width":277},{"text":"I've got your message so far up to this point in the stream","width":681},{"text":"Right","width":192}],
// Part 6
[{"text":"In the beginning","width":222},{"text":"Uh TCP could just uh back in the early days","width":217},{"text":"of ARPANET","width":58},{"text":"our sequence numbers could just start from zero","width":212},{"text":"Today however","width":51},{"text":"They don't","width":31},{"text":"Initially when we start the connection we actually start it with a random number","width":431},{"text":"So we have a 32bit random number which is our initial sequence number","width":581},{"text":"Why do you think that might be?","width":417},{"text":"Security","width":102},{"text":"Otherwise somebody could send some data to whoever we're talking to","width":365},{"text":"And if they chose the sequence number correctly","width":230},{"text":"They could insert some data into our stream","width":223},{"text":"By making it harder to guess what sequence number we're on we can make our approach a little bit more robust","width":809},{"text":"So it uh it's random","width":467},{"text":"Now with each packet we send","width":214},{"text":"There's various flags we can set","width":152},{"text":"This is not a networking class","width":83},{"text":"So we're not going to go into detail with what these mean","width":198},{"text":"But we will mention this","width":288},{"text":"That packets can be labelled with these little flags","width":402},{"text":"And the first packet you send has this little label that says the SYN-ful packet","width":493},{"text":"","width":2},{"text":"And the receiver, the server, says THANK you! I acknowledge your SYN-ful ness.","width":320},{"text":"Yes","width":526},{"text":"Right so imagine you had a jigsaw puzzle","width":164},{"text":"A 1 dimensional jigsaw puzzle","width":163},{"text":"Much easier than a 2 dimensional jigsaw puzzle","width":173},{"text":"And each piece arrives with a sequence number","width":256},{"text":"This makes it really easy to put together","width":177},{"text":"That's the purpose of the sequence number","width":191},{"text":"if they arrive out of order, if you have any missing pieces","width":141},{"text":"You actually know where to put it inside your data stream","width":165},{"text":"You might get - a quick question","width":279},{"text":"It'll lap around","width":652},{"text":"Oh yes","width":89},{"text":"You couldn't send more than 4gb in a packet","width":505},{"text":"Yes the sequence number actually represents the data","width":265},{"text":"It's not just a count of the packets","width":277},{"text":"It represents the contents, it represents the data stream","width":299},{"text":"And what the bytes that you've put inside the packet where they should be fitted into inside the stream","width":828},{"text":"Right so you might have a packet that says","width":220},{"text":"OKAY","width":31},{"text":"I'm sequence 10 here's my data blah blah blah","width":273},{"text":"And there's another packet that might before or after that says I'm sequence number 20 and here's my data blah blah blah","width":498},{"text":"And the operating system says thank you very much","width":174},{"text":"I can see that the data stream that I should give back to my process should have the blue data first and the black data after  it","width":476},{"text":"So I might be able to reassemble the data back into a stream of data to send to the program","width":569},{"text":"No there's no limit","width":101},{"text":"Talk to me afterwards","width":66},{"text":"These numbers can lap around","width":277},{"text":"This is just a long stream","width":121},{"text":"And uh data was arriving from here in packets","width":127},{"text":"And the user is calling read so we're giving the data as the user process wants it","width":347},{"text":"But these numbers can just wrap around","width":141},{"text":"modulo 4gb","width":190},{"text":"Alright so","width":267},{"text":"So this is the connection handshake","width":165},{"text":"That we see between the server and the client","width":335},{"text":"So the client says","width":87},{"text":"HEY I want to connect to you","width":96},{"text":"And here's my SYN-ful number","width":97},{"text":"My sequence number","width":96},{"text":"The server says okay I've ignored your sequence number","width":281},{"text":"Here's mine","width":230},{"text":"So this is the client saying hello","width":276},{"text":"This is the server saying hello back","width":170},{"text":"And this is the client says I acknowledge your sequence number as well","width":307},{"text":"With that third packet we can also include some data","width":290},{"text":"So we'll see that again in the future","width":341},{"text":"And you see these diagrams in network classes where the client tells the server","width":598},{"text":"The server responds","width":98},{"text":"And the client responds again","width":192},{"text":"So we have this three way handshake","width":416},{"text":"But this takes time","width":304},{"text":"","width":2},{"text":"They're governed by the speed of light*?","width":107},{"text":"They're governed by the hardware","width":109},{"text":"They're governed by the routers in the way","width":103},{"text":"YES","width":31},{"text":"Quick question","width":732},{"text":"Okay so","width":150},{"text":"The server and client nomenclature, those words, are really only important for the initiation of the connection","width":451},{"text":"After that both sides can play","width":247},{"text":"Both sides have sequence numbers","width":133},{"text":"Both sides send acknowledgement packets","width":114},{"text":"Both sides control congestion","width":67},{"text":"Etc etc etc","width":99},{"text":"There is no longer a kind of master slave relation","width":239},{"text":"Both have equal footing","width":289},{"text":"So we'll finish with this that","width":251},{"text":"So one thing we'll try to prevent again is something called a SYN flood","width":228},{"text":"Which is an attack on TCP","width":143},{"text":"Where we try to send a server a whole load of packets with these synchronization messages","width":588},{"text":"Initiation messages","width":147},{"text":"We walk up and say HEY I'm SYN-ful here's my number","width":241},{"text":"And the server replies back and is now waiting for the response","width":301},{"text":"So it's very cheap to send these","width":160},{"text":"You can just fire a packet","width":83},{"text":"Whereas the server now has to set up a connection","width":171},{"text":"And it's like okay I'm waiting for the handshake","width":311},{"text":"So it's an attempt to do a denial of service on a server","width":318},{"text":"And with that we're out of time","width":91},{"text":"So thank you very much","width":79},{"text":"And I'll see you friday","width":64}],
// Part 0
[{"text":"Alright. Good afternoon class. Where are you? There we go. Alright. Hi","width":593},{"text":"So uh last night I had some fun uh making this uh camera preview.","width":347},{"text":"Uh. Normally when you set up a camera preview in android uh ","width":247},{"text":"For speed, you don't get to see the bytes.","width":200},{"text":"You don't see the actual pixels.","width":140},{"text":"Here's why. Memory is really really slow and when you start looking images","width":273},{"text":"typically you're talking about uh a million bytes or more","width":228},{"text":"Uh and uh uhhhhhh working with that in in Java and copying it from buffer to buffer ","width":445},{"text":"is going to make any kind of preview mode very very slow","width":341},{"text":"Um just as an example, uh a typically CPU these days can execute about 215 instructions per","width":553},{"text":"Sorry 250 per instructions per main memory access","width":345},{"text":"Versus say level 1 where it can do about 4 instructions per main uh per level 1 cache access","width":507},{"text":"Right so um I didn't want that thought I actually to get the bytes from the preview ","width":338},{"text":"and uh finally I finally got it working last night. So we'll be playing with this in uh","width":268},{"text":"section uh tomorrow.","width":164},{"text":"Uh","width":47},{"text":"Theeeeeeee plan,","width":146},{"text":"We'll see if I get it working and then if I can't then it's your turn","width":161},{"text":"Is to uh make a webserver that's part of this app","width":342},{"text":"So that the webserver actually is uhhh got a back end interface into an application","width":387},{"text":"This isn't quite as crazy as it sounds. In fact,","width":164},{"text":"many of programs now uh have an in built webserver so that you can interrogate ","width":440},{"text":"uhhh the current state of the program so","width":185},{"text":"for example if you're developing a game,","width":123},{"text":"You might consider a webserver as an alternative way in into the kinda back end of your your","width":389},{"text":"game engine so you could look at stats that the program is running","width":190},{"text":"you could change things as so as the program is running","width":169},{"text":"you could even build a complete a small interpreter so you could say quickly set where the","width":316},{"text":"uhhh where the players are or load a particular state file","width":231},{"text":"so that kind of thing","width":72},{"text":"I've seen it done with uh gas chromachaffs as well where there's a main screen","width":306},{"text":"and then there's a behind the scenes webserver which you can connect to ","width":157},{"text":"if you know the port and maybe a password","width":111},{"text":"Uh so again you can check the status of the engine or the program as it's running","width":361},{"text":"So as planned is can we make a webserver that is part of this camera preview","width":254},{"text":"and then we'll use it to actually share","width":181},{"text":"The image","width":93},{"text":"Alright so.","width":72},{"text":"We'll make our bit of kind of spyware so that anyone that knows the port number","width":293},{"text":"can actually look at the uh the current preview that's going on.","width":219},{"text":"right","width":28},{"text":"So that's what we're going to make. Ummm","width":202},{"text":"Now today, we're gonna talk about uhh files andd uhhh this kinda one really really really big idea","width":465},{"text":"and it's gonna this kind of misconception I want to clear up today","width":132},{"text":"that a file name is NOT a file","width":175},{"text":"and it's an easy trap that we get called into because we think like that all day long","width":270},{"text":"we think, open this file and here's the name","width":271},{"text":"Right","width":45},{"text":"If you could walk out of this lecture","width":114},{"text":"Not believing that anymore, then, you made significant progress","width":290},{"text":"Instead what I want you to think of isss","width":158},{"text":"that a file is an i node","width":160},{"text":"That, a file is just the bytes, just the content","width":266},{"text":"Forget for a moment that it has a name","width":165},{"text":"Forget that it lives inside a directory","width":175},{"text":"Forget that it lives inside a hierarchy","width":321},{"text":"That's all icing the cake, which we're gonna do seperately from the actual file","width":517},{"text":"Right. So how do we think of files?","width":163},{"text":"Think of them as just a particular inode","width":196},{"text":"and remember this is how we're going to organize our space on the disk","width":209},{"text":"Where we initially format it, uhh we'll have a super block","width":250},{"text":"SUPER BLOCK","width":54},{"text":"But the super block is just a managed information about how we've actually organized this data","width":383},{"text":"And in fact on real disks, disk information is so critical to be able to get anything done","width":292},{"text":"It's actually replicated several times throughout the disk ","width":180},{"text":"Just in case uh we get um a cosmic ray or some other effect which obliterates this particular copy","width":393},{"text":"But anyways super block tells us, how many say inodes we've got","width":175},{"text":"and and where the very first data block block starts","width":185},{"text":"Right. So. If we're using an inode. That means we've stored a file on our disk","width":408},{"text":"And remember we looked at last time that each inode might have some","width":242},{"text":"Direct entries","width":92},{"text":"HEY here's the content","width":70},{"text":"and we'll have say about ten of those","width":290},{"text":"But if we want to store larger files,","width":133},{"text":"Then the game we play is we store a reference a data block that is not actually used for data","width":314},{"text":"It's used just to hold pointers to actually data blocks","width":197},{"text":"And if we have a larger file, we play this game twice","width":180},{"text":"we have now, a reference to a data block","width":167},{"text":"That it to itself contains pointers to yet more tables of pointers","width":257},{"text":"And then finally huge file, ","width":206},{"text":"Then we play this game three times, thriple indirection block","width":169},{"text":"and that's it, we don't play after that. Right? We don't try to. We don't have quad indirection blocks","width":294},{"text":"Right so that's our contents of our inodes","width":120},{"text":"and you remember that inodes have more than just these pointers, ","width":264},{"text":"they have a little bit of information as well, a little meta information like the file size","width":214},{"text":"ummm, ahhh who owns the file.","width":269},{"text":"And as we'll see in a little bit","width":166},{"text":"Guess what? you could basically, from C,","width":221},{"text":"Discover what's in the inode.","width":204},{"text":"And uh.","width":137},{"text":"Including the inode number,","width":242},{"text":"And remember we talked about some of these things like,","width":129},{"text":"Who saw it, when was it last accessed, when was it last modified?","width":206},{"text":"When it last changed?","width":202},{"text":"And","width":86},{"text":"Total number of bytes","width":192}],
// Part 1
[{"text":"Ok so, let's get back up here","width":303},{"text":"We said that uh, we don't care about file names","width":231},{"text":"The inode is the file","width":298},{"text":"Is the big idea.","width":115},{"text":"Okay","width":715},{"text":"Okay right","width":117},{"text":"That's the big idea, great! ","width":64},{"text":"So what we're going to do to all going to talk about it after the rest of the lecture","width":138},{"text":"Okay so we've got a problem then, if that's the big idea, how are we going organize things into directories","width":341},{"text":"How are we actually going to give things names if we're saying their names is not actually part of the file","width":368},{"text":"Well, all we're going to say then is the name is actually part of a directory listing.","width":587},{"text":"So, a directory then will have","width":275},{"text":"A listing, and the listing will be","width":245},{"text":"A name","width":113},{"text":"And","width":149},{"text":"An inode number","width":109},{"text":"A name, and an inode number. etc etc etc etc","width":755},{"text":"In fact, we can think of a directory as just a file","width":343},{"text":"We'll bless it, we'll set a particular binding flag to say this isn't actually a user file,","width":368},{"text":"it's actually part of the file system","width":110},{"text":"And uh we'll need to read the contents and expect the bytes to mean the following","width":345},{"text":"The name followed by an inode number. The name followed by an inode number","width":369},{"text":"So that's all the a directory listing is","width":253},{"text":"Name followed by inode number","width":150},{"text":"And these, inodes then might correspond to one of our files","width":249},{"text":"but it might correspond to another subdirectory.","width":484},{"text":"Right so here's the big ideas we've had so far right","width":201},{"text":"Files don't have names.","width":152},{"text":"Directories have, a little map from a name to an inode number.","width":330},{"text":"And directories themselves are just files. They have data.","width":304},{"text":"What is it a data? This little mapping.","width":333},{"text":"So they'll have a data block with this kind of mapping.","width":218},{"text":"The good news is that we don't actually need to read these bytes.","width":227},{"text":"We've got some posix calls which we'll see in a moment","width":156},{"text":"Which actually interprets these bytes for us","width":197},{"text":"But what we'll be doing is opening these these directories just using a regular file descriptor","width":362},{"text":"And then we could call this posix call to actually weed out um the ","width":379},{"text":"the data as if its uh a certain ballistics","width":342},{"text":"Right","width":56},{"text":"Questions so far?","width":286},{"text":"Yesssss","width":374},{"text":"Yes so, every directory is gonna have two ","width":361},{"text":"special entries which um doesn't uhh the first one dot dot","width":418},{"text":"which is the um","width":186},{"text":"what","width":106},{"text":"parent directory, yes, how do you get out of here. I wanna go back up. right","width":341},{"text":"Anddd also, we don't need to store this one directly but we'll come across it in a little bit","width":367},{"text":"Ummm","width":58},{"text":"In current directory dot","width":94},{"text":"So we don't necessarily need to keep that inside the uh","width":303},{"text":"inside the the data but mainly the posix core will always see it. It's like uh","width":276},{"text":"Yes I can talk about myself","width":140},{"text":"So, each directory knows about itself and it knows about  uh it's it's parent.","width":323},{"text":"A directory can only have one parent so we're talking about a tree","width":554},{"text":"Other questions?","width":268},{"text":"Okie dokie. Then let's","width":1419},{"text":"Okay","width":306},{"text":"Alright so let's um","width":279},{"text":"Let's uhhh put some contents into a file","width":231},{"text":"Okay, my text","width":323},{"text":"Hellooooo","width":136},{"text":"I am a cat","width":141},{"text":"Alright","width":108},{"text":"And ctrl D to save. finished","width":151},{"text":"Great so normally we do kind of","width":120},{"text":"ls to see what's in here um","width":365},{"text":"Ok","width":61},{"text":"Umm","width":92},{"text":"But I can do more than that, I can say give me the inode numbers","width":519},{"text":"Here we go","width":155},{"text":"Uhh in fact, one of the options for ls is just to say give me it on one per line","width":250},{"text":"So now, yeah, I can, you can believe hopefully that every file","width":295},{"text":"Really is just an inode number, so if you're talking about a directory name or file name","width":264},{"text":"you're not, you're actually that's just gonna be converted into an inode number","width":427},{"text":"If i wanted to make another directory so hey I'm a subdir","width":485},{"text":"That subdirectory has what? a unique inode number","width":269},{"text":"So one way to tell whether you're truly are talking about the same file. you and me","width":290},{"text":"is to see if we are uh talking about the same inode number on a particular file system","width":672},{"text":"Alright so I lost my","width":733},{"text":"I seem to lost the projector, okay alright","width":704}],
// Part 2
[{"text":"So how can we find that the inode if you're the command line, you could just uh","width":586},{"text":"pass in uh on the side, ls","width":215},{"text":"or from code ","width":106},{"text":"uh we've got the following calls, we can ask for","width":274},{"text":"a stat, give the status of this file","width":205},{"text":"and uh there's two useful variations","width":224},{"text":"one is you supply a path, ","width":267},{"text":"so for example, I could say ","width":192},{"text":"stat","width":147},{"text":"on my file demo.c","width":265},{"text":"and pass in a pointer to","width":258},{"text":"my struct","width":301},{"text":"another is I pass in a file descriptor","width":710},{"text":"Now if you're going to start reading things from uh","width":246},{"text":"the buffer that's set","width":260},{"text":"make sure that you check the return value right? so you want to check the uh","width":466},{"text":"the result is 0","width":191},{"text":"otherwise its succesful","width":143},{"text":"if it's non-zero then that's ","width":174},{"text":"that uh C structure uh was never touched","width":248},{"text":"and you'll just read garbage or old values","width":270},{"text":"so it's a common programming gotcha. just assume that stat just worked ","width":213},{"text":"and then try to pull out um","width":190},{"text":"uh values and information from that stat","width":211},{"text":"where its in fact, stat says huh I don't know file or you don't have permission for that file","width":295},{"text":"or hey, it's nice day outside I don't I'll bother to do any work today","width":243},{"text":"Um that's not actually a posix error","width":160},{"text":"The uh","width":172},{"text":"Right so so check the return value of stat","width":487},{"text":"Now I mentioned before you can do fdopen","width":414},{"text":"and uh fdopen allows you to go from a file descriptor at the posix level up to uh","width":378},{"text":"uh a C file pointer complete with buffering and using printf and all that good stuff","width":391},{"text":"You can actually go the other way","width":127},{"text":"There's uh","width":114},{"text":"function called fileno which allows you to extract","width":256},{"text":"theeee","width":124},{"text":"file descriptor","width":112},{"text":"out of C as well","width":344},{"text":"Right so we can fill this in","width":82},{"text":"And there's one other call call here","width":233},{"text":"lstat","width":452},{"text":"So there's one thing we haven't talked about yet","width":173},{"text":"which is","width":225},{"text":"symbolic links","width":173},{"text":"we're gonna play with these in bit. we're just gonna mentioned them today","width":179},{"text":"was gonna say okay this exists","width":140},{"text":"and as a symbolic link","width":106},{"text":"is a file that pretends it doesn't exist","width":243},{"text":"instead it says HAH I don't exist, what you're actually looking for is","width":283},{"text":"over here somewhere and it gives you a redirection","width":270},{"text":"so just like you might move house and could set up your mail forwarding","width":291},{"text":"that's what a symbolic link can do","width":143},{"text":"so, uh you can say, Oh actually the contents that you really want uh","width":296},{"text":"read or write are not  here, they're stored in some other directory","width":333},{"text":"if you want to be evil","width":116},{"text":"you could set the symbolic link to point to another symbolic link which  can point back to the first symbolic link","width":318},{"text":"Muahahhahaah","width":81},{"text":"at which point your machine catches fire","width":303},{"text":"No you won't have been the first person to think of this","width":164},{"text":"and your program wont have been the first program to do this","width":159},{"text":"so instead","width":125},{"text":"the operating says ","width":100},{"text":"hold on a moment, I've been following these these symbolic links too many times","width":232},{"text":"i'm gonna quit trying to follow them and will give up after a preset number of times","width":393},{"text":"But anyway, uh the lstat exists if you actually want information about the symbolic link","width":386},{"text":"itself, rather than trying to follow it","width":1159},{"text":"If you call lstat on a regular file that's fine","width":206},{"text":"it'll just be the just be that equilvalent of calling um stat","width":282},{"text":"so lstat is useful if you are really interested in the symbolic link itself","width":319},{"text":"like who created the symbolic linke, who do I need to blame for this mess right?","width":228},{"text":"or when was it created?","width":213},{"text":"That's pretty unusual, most of the time we actually want to follow those links right?","width":216},{"text":"what most of the time we we just want to imagine that uh","width":231},{"text":"these aliases are automatic","width":552},{"text":"Right any questions so far?","width":174},{"text":"Okay so let's get a have a share of a look to see all the stuff we can kinda discover about the file","width":545},{"text":"First files themselves lives on a device","width":214},{"text":"yeah we know they have an id number","width":192},{"text":"and they have this ","width":152},{"text":"security access as simple protection","width":162},{"text":"where we can talk about who can do what","width":259},{"text":"so we're going to see more of this in the moment","width":158},{"text":"but this is the idea about who can read it, who can write it, and who can execute it","width":447},{"text":"they also have an owner","width":127},{"text":"and","width":122},{"text":"this we've got a user and a group","width":204},{"text":"I'm not gonna talk about groups","width":125},{"text":"much in CS241, just know that they exist","width":190},{"text":"Um if you get into linux administration, maybe it's it's useful if you have a lot of","width":352},{"text":"kind of team members working inside the same directory um","width":184},{"text":"but we're not going to play with them let's just let's just uh umm","width":191},{"text":"restrain our attention to users today","width":275},{"text":"okay","width":279},{"text":"And then the um","width":159},{"text":"total number of ","width":158},{"text":"locks, in actually uh","width":216},{"text":"these happen to be in in multiples of 512 just for historical reasons","width":290},{"text":"uhh and so that tells us, for example, whether the uh the 8th","width":321},{"text":"direct block entry is valid or not, or we should be using the indirect block as well etc etc so we","width":373},{"text":"from the number of blocks for example if that uhhh","width":294},{"text":"if that was a sufficiently small enough figure, ","width":124},{"text":"you'd know that there wouldn't be any triply indirect blocks or double indirect blocks etc etc etc","width":488},{"text":"Right so now I can write code to say, find me all the files","width":248},{"text":"which uhhhhhh have been created today","width":228},{"text":"or have been created by a certain user","width":307},{"text":"Most uh users are actually integers","width":346},{"text":"And so the file system doesn't keep a record of user names","width":256},{"text":"if you want, you can turn an integer back into a known user name","width":253},{"text":"you're gonna have to ask the operating system to do that","width":184},{"text":"so at the file system level, we just distinguish different users by different integer numbers","width":384}],
// Part 3
[{"text":"So I said that, hey we'd like to look at different files and maybe call stat on them","width":385},{"text":"Um, here's some starting code that maybe we can actually start to find different","width":431},{"text":"Look at, look at actually entries within a uh","width":302},{"text":"Entries inside the directory","width":305},{"text":"So here's the format of reading directories, we say okay I wanna open a particular directory","width":615},{"text":"And we're giving it dots. So what does dot mean?","width":404},{"text":"Current directory. Yes! So it depends on my process","width":202},{"text":"Where whatever the current directories of my my process.","width":137},{"text":"I could put it in an absolute directory here for example","width":244},{"text":"This opens a file descriptor","width":187},{"text":"So one way this could fail would be if you already got too many file descriptors open","width":399},{"text":"But it wraps it inside this DIR because we don't care about the actually bytes stored","width":374},{"text":"inside this magic file called a directory, we wanna pass it in terms of um","width":402},{"text":"uh uh uh the the names for example stored inside and the inode numbers possibly","width":339},{"text":"So that's what this uh readdir call does","width":236},{"text":"It updates an internal state inside this structure ","width":222},{"text":"and uh we can keep calling it and it will iterate all of those entries returning one at a time","width":493},{"text":"And then we could extract the name,","width":152},{"text":"maybe we care about trying to find a particular name","width":387},{"text":"So if strcmp returns 0, great we've got an exact match","width":239},{"text":"uh we could say yes we've found it","width":195},{"text":"Eventually readdir says okay I give up. ","width":190},{"text":"I um the the there's no more entries in which case it returns null","width":352},{"text":"So this is fairly kinda idiomatic C code ","width":189},{"text":"Where you not only ","width":157},{"text":"assign the result of a call to a variable","width":224},{"text":"you also uhh check it for something","width":212},{"text":"Like whether it's non-zero or not","width":252},{"text":"So eventually our while loop finishes","width":132},{"text":"we close the file descriptor and free any other internal resources","width":203},{"text":"perhaps we've malloced some memory inside there to hold the names","width":177},{"text":"and we return 0 saying we didn't find it","width":158},{"text":"okay so","width":137},{"text":"what's wrong with that code?","width":122},{"text":"Don't tell me. Explain it to your neighbor","width":314},{"text":"Or take a good guess","width":10361},{"text":"Okay so here's the code","width":190},{"text":"no errors found","width":310},{"text":"I'm gonna use it to try to find some file","width":227},{"text":"uh each time my little while loop, i'm going to print out the name i found","width":359},{"text":"Just run it","width":164},{"text":"okay","width":254},{"text":"Yay great! It actually all of the entries","width":317},{"text":"and remember how we said that we actually dot and dot dot","width":135},{"text":"yes, there they are, they're the first two entries  that we actually will see when we ","width":301},{"text":"iterate through the contents of my directory","width":173},{"text":"so i could start making this into a more useful program, I could start finding things","width":301},{"text":"uh for example, uh","width":169},{"text":"instead of just dot, i could actually make use of uhh the","width":291},{"text":"uhhm main. alright this could be for example uh argv(1)","width":781},{"text":"For now i've got a program that's a bit like DIR it's starting to look for things inside a certain directory","width":383},{"text":"okay right, so what's the error in this code?","width":568},{"text":"Yessss. Thank you, if you find what you're looking for you don't close the file descriptor","width":409},{"text":"Aight, the reason why this  I've bring this up because cause it's a really common error","width":345},{"text":"and it's really evil one to debug because when is it gonna you that it's gone wrong?","width":468},{"text":"somewhere else right? somewhere other time where you actually try to open a file descriptor","width":227},{"text":"when you try to open some you know simple file that exists","width":226},{"text":"and it's absolutely no reason why it can't open this file and yet your program fails in some bizzare way","width":377},{"text":"and its midnight and you've been staring at this for two hours","width":160},{"text":"and you wondered, why why did you learn to read? ","width":208},{"text":"you know life would've been so much simpler if you could kinda stayed in the yeah","width":216},{"text":"stayed outside and ran around and played or something","width":117},{"text":"right, so yeah watch out for this. and it's a very common error to forget about frame resources","width":355},{"text":"why blame only yourself but blame C","width":238},{"text":"C doesn't give us any support to actually uh remember to close resources","width":359},{"text":"hardware resources that we've opened","width":141},{"text":"and in fact your often find that's true for other languages as well even ","width":249},{"text":"with C++, uh we've actually got  to somehow remember to explicitly","width":298},{"text":"free those external resources and in this case it's remembering to call closedir","width":344},{"text":"So how can we closedir? Well one way is to make sure all possible","width":242},{"text":"code paths actually free the resource","width":240},{"text":"another thing that  we should probably do with our code if this is actually","width":237},{"text":"if we are being paid to write robust code","width":133},{"text":"is check the return value","width":101},{"text":"and being prepared to print out the actual error","width":243},{"text":"so if we actually written good code","width":237},{"text":"then our failure might have logged the fact that there were no more free file decriptors","width":343},{"text":"for us to use and that would've a strong hint that we were leaking resources","width":320}],
// Part 4
[{"text":"Um by the way","width":172},{"text":"A um","width":108},{"text":"Some people in the world of C actually use goto right?","width":334},{"text":"In this kind of uh","width":146},{"text":"Uh this kind of scenario so ","width":162},{"text":"we can have a kind of goto cleanup","width":204},{"text":"and","width":129},{"text":"we have a kinda cleanup right","width":237},{"text":"Uh and then yeah we fixed return values as well so","width":247},{"text":"Instead of this return here we set a flag or something","width":207},{"text":"Okay um whether you do this or not is a fantastic way to get into arguments with everybody","width":516},{"text":"Uh there's a lot to be read about how goto is bad but in practice","width":274},{"text":"you will find a system level code that does this as a way to to support kind of basic","width":360},{"text":"Um exception, exception handling","width":198},{"text":"And uh failure cleanup code. Uh where you want to leave early","width":249},{"text":"It's not the only other way to do it, the other way is to to actually set","width":224},{"text":"create your resources inside a wrapper method and uh","width":254},{"text":"uh then, uh you can return early inside your inner method","width":251},{"text":"Okay so let's let's let's pretend we didn't talk about goto","width":307},{"text":"There we go","width":119},{"text":"And fix our code","width":228},{"text":"Right, so close uh","width":211},{"text":"our directory pointer","width":432},{"text":"Right uh","width":132},{"text":"Next lecture we'll talk about how to extend this so that we can do uh","width":206},{"text":"Directory searching into subdirectories as well","width":247},{"text":"Right any questions about this?","width":307},{"text":"Alright there are mentioned one gotcha which is remember that you have the parent and your current directory","width":439},{"text":"so attempting to do subdirectory searching is like OH I know breadth first search or I know know recursive search!","width":398},{"text":"Be careful you don't keep searching yourself forever. Aight","width":206},{"text":"Oh be careful you don't keep searching down and up the tree forever","width":274},{"text":"your searches are going to take a long time if you go down the tree and back up the tree at the same","width":269},{"text":"Uh all is part of your recursive code so you have to remember those special cases","width":249},{"text":"remember you're going to see dot and remember you're going to see dot dot","width":253},{"text":"Right okay time for side 2","width":1063},{"text":"Okay","width":202},{"text":"I love this word \"canonical right it's","width":197},{"text":"What's a canonical definition of canonical","width":420},{"text":"Can you give me? Two directory paths that refer to the same file?","width":561},{"text":"Other words could you write down a string that actually reends referring to the same file but actually when you look at them they're different","width":492},{"text":"You're nodding your head how would you do that?","width":633},{"text":"Okay","width":278},{"text":"Okay, that's a good idea.","width":352},{"text":"Okay so, for example, slash home slash angrave slash um","width":630},{"text":"Uh one dot text","width":165},{"text":"might be the same as just \"Hey current directory\" slash one dot text","width":399},{"text":"Okay give me another way that I could refer to these files?","width":548},{"text":"Yeah","width":229},{"text":"Well some kind of weird double echo race condition thing going on. kay","width":683},{"text":"Okay so go up one directory then go back into angrave","width":397},{"text":"And then go into one dot text again","width":194},{"text":"Okay any other way? Yup?","width":258},{"text":"Okay, tilda actually is is a cheat that's actually part of the shell","width":333},{"text":"So that so tilda is expanded already. Um how about?","width":222},{"text":"dot slash dot slash dot slash","width":294},{"text":"dot dot slash angrave","width":257},{"text":"slash some subdirectory then go back up turn left right","width":450},{"text":"etc right? we could invent these crazy paths which after we've followed them","width":392},{"text":"we finally get to the file, I also mentioned these things called symbolic links. ","width":224},{"text":"Maybe we follow a symbolic link so we go to the file yeah awesome","width":520},{"text":"dot text which actually resolves to our original file","width":322},{"text":"So how do I know that these files are actually referred to the same thing?","width":233},{"text":"The answer is we need to reduce them down to the canonical form","width":256},{"text":"and the beautiful thing about a canonical form is that if you have a canonical path and I have a canonical path","width":403},{"text":"and they are identical then they must refer to the same file","width":355},{"text":"Why? cause that's the definition of a canonical path","width":361},{"text":"So is uhh it's not necessary an absolute path. Not all absolute paths are canonical","width":496},{"text":"but you can be sure that if two canonical paths are identical, they are talking about the same file","width":502},{"text":"right how do I get the canonical path?","width":157},{"text":"Well you give me any path you want","width":395},{"text":"I'll call realpath on it","width":150},{"text":"it will follow that follow any sym links that you happen to refer to follow any dot dots etc etc etc","width":403},{"text":"and then finally it'll give me an actual path. I can use that and later I'll just free it","width":701},{"text":"You can pass in a buffer but in practice don't bother just let malloc make sure it gives you enough path enough space","width":498},{"text":"Now I mentioned this because actually we can use this for security","width":218},{"text":"suppose you were to make a web server you probably don't want a web server to be able to serve all possible files","width":651},{"text":"on your hard disk drive","width":197},{"text":"Cause if it can, you bet your dollar I'm going to be looking for slash etc slash password","width":465},{"text":"Aight. Or your ssh uh private key","width":318},{"text":"we'll try to download that","width":389},{"text":"And in fact, these kinds of tricks are used to escape the current directory or the root of the webserver","width":487},{"text":"and uh we want to try to prevent that so one way when you're checking directories is to convert it into a canonical path","width":452},{"text":"and then check that it actually truly starts with the based directory that you care about","width":460},{"text":"so for example the user is trying to get an image from your image directory ","width":217},{"text":"not trying to download your password file as an image","width":451},{"text":"I've encountered numerous server programs that don't do this check","width":329},{"text":"so for example, uh I can get a printer to include using uh postscript and other commands","width":462},{"text":"to include a local file from the printer and therefore print out the printer's own password and other information you want about the printer","width":412},{"text":"whoops","width":217},{"text":"So anyways so thats so real path next time we want to write a robust server, remember this it's useful security tool","width":576}],
// Part 5
[{"text":"Okay right","width":214},{"text":"Question for your neighbor and yourself","width":214},{"text":"Does the inode contain the filename?","width":227},{"text":"Choose now","width":142},{"text":"Hundred internet points if you get the correct answer","width":1186},{"text":"Okay","width":132},{"text":"Right","width":62},{"text":"If you think the answer is ","width":275},{"text":"No, it's not part of the inode","width":171},{"text":"give yourself a pat on the back or or or or or","width":223},{"text":"shake hands with your neighbor alright?","width":153},{"text":"if you thought the answer was yes","width":148},{"text":"exits are this way and this way","width":214},{"text":"there are still majors look there are still majors looking for other people","width":270},{"text":"no it does not, remember okay? it does not","width":153},{"text":"the inode, the file does not know about it's own file name","width":263},{"text":"okay? that's the most important thing the most important point today we've got today okay","width":299},{"text":"and it allows us then to do  the following,","width":191},{"text":"i can have same file","width":201},{"text":"appear twice in my file system","width":417},{"text":"this seems impossible","width":177},{"text":"if you still think the file name is the file","width":429},{"text":"how can i get","width":119},{"text":"a file to appear twice?","width":151},{"text":"in two different places","width":100},{"text":"what do i need to do?","width":106},{"text":"yes","width":133},{"text":"I could yep hard link it. what's actually to my directory entries?","width":594},{"text":"Yes! thank you! remember my directory entries are just name inode number","width":392},{"text":"Somewhere over the mountain I've got two entries","width":252},{"text":"With a name1 that goes to a node1","width":210},{"text":"and another one","width":103},{"text":"in another directory I've got a name to and it happens to point to the same inode number","width":407},{"text":"I've better singing otherwise anyway alright so","width":224},{"text":"thank you","width":43},{"text":"I just made that up okay","width":169},{"text":"Yeah so look here's one directory remember all the directory is just some data it","width":278},{"text":"all that data is just a name and an inode number","width":196},{"text":"inside another directory we've got  a different name somewhere","width":198},{"text":"but it happens to point to the same inode number","width":127},{"text":"My goodness! So if I go into these two directories try to actually open the file,","width":262},{"text":"I open up this file","width":162},{"text":"and you can talk about this file when you talk about inodes","width":153},{"text":"and I start reading the bytes I'm talking about the same file","width":166},{"text":"That means if I change the content of this file","width":199},{"text":"then that file in that other directory changes as well why?","width":261},{"text":"because it's the same beep file","width":351},{"text":"okay?","width":143},{"text":"This looks impossible if you're sitting at the command line and you know","width":252},{"text":"you got two shells open and you're actually changing the contents of one file ","width":254},{"text":"and you've got another one other here","width":74},{"text":"and you cd-ed to a different directory ","width":96},{"text":"Oh my goodness! this is crazy, no it's not","width":165},{"text":"just remember this, it's just an inode","width":149},{"text":"we've just got two different places that happen to refer to the same inode number","width":233},{"text":"okay how do I do that?","width":194},{"text":"I can use a hard link","width":467},{"text":"How do I do that? There's a command called ln","width":534},{"text":"So link allows me to make another entry","width":235},{"text":"to an existing file","width":165},{"text":"let's see if I can pull up the manpage a moment","width":1086},{"text":"So you type this into a terminal and congratulations you've now got two files, two entries","width":435},{"text":"which point to the same inode","width":168},{"text":"so you could type say for example link","width":193},{"text":"hey here's my file slash home blah blah blah blah blah","width":204},{"text":"uh file1","width":99},{"text":"this better exists so it can pull out the inode number of that file","width":192},{"text":"and then go somewhere else uh blhblahblahhblah file different name","width":775},{"text":"alright so for this magic to occur, we want to be able to know when those disk blocks become available ","width":398},{"text":"for resuse, that means an inode has to do this","width":655},{"text":"has to some reference counting","width":140},{"text":"in other words, how many directory entries ","width":267},{"text":"actually refer to this inode","width":169},{"text":"if i reduce that down to 0","width":103},{"text":"I know nobody cares about me","width":193},{"text":"alright and we can resuse that inode and we reuse the disk blocks associated with the file","width":489},{"text":"so everytime you link, we're gonna increment the reference count, ","width":245},{"text":"everytime we link you add a hard link","width":270},{"text":"we implement the reference count","width":451},{"text":"now you might wonder, can i do this with directories as well","width":369},{"text":"right? could could my filenames here be directories","width":397},{"text":"and the answer is","width":163},{"text":"yes kind of","width":122},{"text":"no","width":128},{"text":"right","width":58},{"text":"so why yeah kind of no, here's why","width":348},{"text":"the operating system the repair tools","width":215},{"text":"all assume that directories are tree based structure","width":359},{"text":"if you are allowed to start messing with this hard links for directories","width":339},{"text":"you could violate that assumption","width":186},{"text":"you could set up a directory which has two paths","width":224},{"text":"you could set up a uh file system hierarchy","width":293},{"text":"which never ends right? you keep going into subdirectories and you come back round to the top somewhere","width":406},{"text":"and so all of the tools for following inodes wouldn't be to complete","width":283},{"text":"so in practice, filesystems typically prevent you from doing this","width":370},{"text":"right? even root cannot do this on most file systems","width":203},{"text":"the file systems C code says Hahaha no","width":213},{"text":"right nice try but no","width":141},{"text":"right so you can only do this with with regular files you can't do it with directories","width":511},{"text":"Right","width":100},{"text":"Questions?","width":287},{"text":"So what have we said? we just said that","width":116},{"text":"hard link is easy we just make a","width":153},{"text":"another entry inside a directory with a different name for the same inode","width":408},{"text":"and you can do it using this link tool, this link command","width":512}],
// Part 6
[{"text":"Right uh we got time to talk about provisions or the mode bits","width":494},{"text":"Here's some example ways of changing who can do what to a file","width":327},{"text":"you're going to see these numbers uh quite typically 644, 755","width":390},{"text":"and they're written in octal and reading octal is really easy","width":332},{"text":"we just decode each digit into three binary bits right? four two and one","width":437},{"text":"and so instead reading four turn and one think read write execute","width":367},{"text":"so what's this? this is change the mode bits of this particular file sandwich","width":570},{"text":"into","width":255},{"text":"read and write for me or the owner of sandwhich, read for the group, read for everybody else","width":469},{"text":"so if you're not in the group you're not me, you get the read, so you get to see the contents of sandwhich but you cant modify and you can't execute it","width":845},{"text":"what's uh 755?","width":259},{"text":"what permissions do I get or what permissions does the owner of the file get?","width":397},{"text":"read write execute, four two and one. everybody else gets what? read and execute","width":899},{"text":"So that's a very common way of setting permissions, there are other ways to do it","width":308},{"text":"uh you can do it symbollically so this means hey subtract the write permission from all three uh types of users","width":567},{"text":"uh this means subtract read and exewcute permission from the uh owner or other I forget I'll look it up","width":503},{"text":"personally I prefer the octal numbers","width":374},{"text":"what's wrong with the file that has the following permission?","width":753},{"text":"let's suppose on the file system you found a file that was owned by root","width":486},{"text":"and had those permissions? what if you find what could you do to this?","width":797},{"text":"right what does 7 mean? read write and execute, so first of all here's a file that  anybody can execute","width":422},{"text":"anybody can run","width":150},{"text":"anybody can read it but also anybody can write it","width":363},{"text":"muahahhahaha so now you don't delete the file you changed the contents of the file and next time someone runs it they run the code that you put inside it","width":677},{"text":"so if you find a file like this, this is a security risk","width":541},{"text":"right so uh you could play with chmod um from the shell","width":410},{"text":"you can also use","width":278},{"text":"chown to change the owner","width":229},{"text":"so for example uh I could change the owner to user angrave on a file","width":792},{"text":"but of course I just can't change any old that will be a security risk so only um the ","width":415},{"text":"super user can just modify any arbitrary file so only root can can override a particular ownership like this","width":658},{"text":"and you could do this from code as well, so you can set the permission bits or the mode bits on on a particular path","width":1191},{"text":"Alright there's two other bits inside of the mode","width":355},{"text":"integer that are useful, set group which I won't talk about.","width":428},{"text":"instead let's just finish the lecture with set user ID","width":450},{"text":"And uh ","width":255},{"text":"","width":3},{"text":"There's an example, have you heard of sudo?","width":400},{"text":"Right what does sudo do?","width":453},{"text":"Okay right, so supposed you have a command called, makemeasandwhich","width":742},{"text":"Which only root can execute","width":467},{"text":"sudo says okay change into the root user for a moment and run this command","width":579},{"text":"right so maybe you wanna format a disk which as a as a mere mortal in the system  you don't permissions to run this command","width":546},{"text":"because the command itself has say the following permissions ","width":233},{"text":"right makemeasandwhich might be owned by root and might be uh let's see we want it to be um","width":462},{"text":"executable by root and everybody can't even can't even read it","width":313},{"text":"right so if we could put sudo in front, sudo takes its arguments and runs it as root","width":400},{"text":"so on your virtual machines this is quite a useful command if you briefly want to become a root","width":600},{"text":"so how does sudo work?","width":193},{"text":"sudo has to have root permission to be able to do the things it wants to do like run things as root","width":344},{"text":"so the sudo command itself","width":166},{"text":"has this set user id bit set so that when it is executed it doesn't run as you as the calling uh user of the process","width":706},{"text":"uh it actually runs as a different user it actually runs as root","width":301},{"text":"so that's the purpose of this set-user-ID-on-execution bit it's you can change","width":337},{"text":"the effective user of the process once the process starts","width":324},{"text":"and the example of using that is sudo and uh if you wanna see sudo makemeasandwhich it's a popular xkcd comic","width":624},{"text":"right with that, have a wonderful week. I'll see you on friday and uh have fun in discussion section","width":512}],
// Part 0
[{"text":"alright, let's try that","width":9007.181818246841},{"text":"alright, good morning ladies and gentlemen","width":159.18181824684143},{"text":"minor technical difficulties this morning","width":138.18181824684143},{"text":"my laptop decided to freeze","width":124.18181824684143},{"text":"one second out of four","width":140.18181824684143},{"text":"never seen that before, guess it must be because we're trying to have a demo today","width":250.18181824684143},{"text":"right, so here's what we're going to do today","width":103.18181824684143},{"text":"I'm going to introduce you to one of the coolest things you can do in system programming","width":217.18181824684143},{"text":"and that is memory-mapped files","width":206.18181824684143},{"text":"so cast your mind back to when we said that","width":231.18181824684143},{"text":"we had virtual memory and our addresses are mapped to different parts of physical memory","width":440.18181824684143},{"text":"and this happens magically without our programs having to do anything","width":223.18181824684143},{"text":"well now we need to actually take control of that mechanism","width":213.18181824684143},{"text":"and we can ask for a file on disk","width":263.18181824684143},{"text":"to be mapped directly into our memory","width":203.18181824684143},{"text":"that's pretty cool if you think about it","width":84.18181824684143},{"text":"if you actually had, say, some structured data","width":118.18181824684143},{"text":"on memory, you could immediately jump to a certain area of the file","width":193.18181824684143},{"text":"and read it, without having to write","width":149.18181824684143},{"text":"read calls, fread calls, fc calls, that kind of stuff","width":203.18181824684143},{"text":"you can just say: \"Hey! I know where is is in memory","width":116.18181824684143},{"text":"I can just read that memory\"","width":123.18181824684143},{"text":"and the operating system will say \"Hah!","width":144.18181824684143},{"text":"I don't have those particular bytes","width":143.18181824684143},{"text":"actually on RAM yet, let me do it for you! Hold on a second","width":166.18181824684143},{"text":"we'll pause your process, and we'll pull in those bytes","width":186.18181824684143},{"text":"and we'll release you again","width":106.18181824684143},{"text":"so you can immediately see the contents of the file.\"","width":183.18181824684143},{"text":"The other cool thing we can do with this","width":118.18181824684143},{"text":"is if we mapped","width":146.18181824684143},{"text":"some memory using mmap","width":161.18181824684143},{"text":"and we then fork()","width":140.18181824684143},{"text":"we can now communicate between two processes","width":202.18181824684143},{"text":"directly, using some memory addresses","width":220.18181824684143},{"text":"so we'll play with that today","width":114.18181824684143},{"text":"if I can get my laptop to restart","width":123.18181824684143},{"text":"and play","width":195.18181824684143},{"text":"play correctly, okay","width":656.1818182468414},{"text":"alright so whilst that is ","width":137.18181824684143},{"text":"warming up. I've set it to gas mark 350div class=\"caption-track-final-caption ui-resizable\" draggable=\"true\" contenteditable=\"true\" style=\"width:8832px\">alright, let's try that<div class=\"ui-resizable-handle ui-resizable-e\" style=\"z-index: 90;\"></div></div>fwwar","width":208.18181824684143},{"text":"let me tell you about a couple of useful commands here","width":156.18181824684143},{"text":"one is dd","width":130.18181824684143},{"text":"so if you ever want to just copy some bytes","width":149.18181824684143},{"text":"from one place to another","width":144.18181824684143},{"text":"and you want to take control of exactly how many bytes","width":226.18181824684143},{"text":"to copy rather than, say, copying the whole file,","width":135.18181824684143},{"text":"dd is useful","width":122.18181824684143},{"text":"it will open","width":100.18181824684143},{"text":"one path","width":63.18181824684143},{"text":"and open a right path","width":96.18181824684143},{"text":"and you can say how many bytes to copy","width":99.18181824684143},{"text":"so, for example, the following copies some bytes","width":183.18181824684143},{"text":"from /dev/urandom to ~ (tilde)","width":183.18181824684143},{"text":"okay you and I know that ~ (tilde) means...","width":224.18181824684143},{"text":"the dog was here","width":43.18181824684143},{"text":"yes, that","width":57.18181824684143},{"text":"it means my home directory","width":94.18181824684143},{"text":"so I'm going to make a file called \"secret.txt\"","width":185.18181824684143},{"text":"hopefully the NSA doesn't try to decrypt this file","width":135.18181824684143},{"text":"because, in fact, it's just random bytes","width":102.18181824684143},{"text":"(evil laughter)","width":144.18181824684143},{"text":"and how big should it be?","width":93.18181824684143},{"text":"well, I want each block size to be 1k and count of 1024","width":263.18181824684143},{"text":"in other words","width":52.18181824684143},{"text":"my total file size will be a megabyte","width":214.18181824684143},{"text":"I could, if I wanted to overwrite my secret file","width":236.18181824684143},{"text":"start reading bytes from /dev/zero","width":193.18181824684143},{"text":"and again the file's going to be the samedfan","width":153.18181824684143},{"text":"and again, I'm going to make a file that is the same size","width":288.18181824684143},{"text":"equivalently, I could have set my block size to be","width":523.1818182468414},{"text":"1 byte, and","width":233.18181824684143},{"text":"put in a million here or whatever ","width":97.18181824684143},{"text":"[gibberish]","width":104.18181824684143},{"text":"so we'll pretend I know that calculation","width":191.18181824684143},{"text":"there we go","width":117.18181824684143},{"text":"and that would've caused the same number of bytes","width":85.18181824684143},{"text":"but it wouldn't have been quite so efficient","width":153.18181824684143},{"text":"we would have made very small calls so it would have been a little bit slower","width":290.18181824684143},{"text":"I can also use","width":197.18181824684143},{"text":"the following file as a place to send my output","width":180.18181824684143},{"text":"/dev/null","width":134.18181824684143},{"text":"here's some wonderful things about storing things inside /dev/null :","width":225.18181824684143},{"text":"you can store as much as you want inside /dev/null","width":459.18181824684143},{"text":"but it ain't coming back","width":261.18181824684143},{"text":"so this is perfect place to store your","width":213.18181824684143},{"text":"your love letters from past girlfriends, dogs, cats, goldfish, whatever","width":424.18181824684143},{"text":"because no one will ever find them","width":337.18181824684143},{"text":"that you've got this perfect storage","width":113.18181824684143},{"text":"of course, it's infinitely compressable as well","width":133.18181824684143},{"text":"you can send as many bytes as you want to /dev/null, and it won't use any disk space","width":244.18181824684143},{"text":"why? it's not a real place in your disk","width":255.18181824684143},{"text":"it's not part of your disk's filesystem","width":350.18181824684143},{"text":"there's something special about this /dev","width":286.18181824684143},{"text":"you won't find it actually listed in your disk","width":231.18181824684143},{"text":"anywhere, oh good my machine has booted up, now we can actually play","width":639.1818182468414},{"text":"instead, it's a virtual filesystem","width":908.1818182468414},{"text":"hooray! okay good","width":552.1818182468414},{"text":"okay, right, so","width":67.18181824684143},{"text":"let's go into, what have I got","width":266.18181824684143},{"text":"so I want to find anything that talks about","width":136.18181824684143},{"text":"CS and ends in a '1'","width":228.18181824684143},{"text":"so that star is an example of globbing","width":153.18181824684143},{"text":"the filesystem doesn't do that; the shell does","width":244.18181824684143},{"text":"the shell says \"Okay, I'll try to find all matching things that match that pattern","width":296.18181824684143},{"text":"you could have done that for parshell for example","width":192.18181824684143},{"text":"anyway, so let's go into our demo two today","width":287.18181824684143}],
// Part 1
[{"text":"why did we not find it?","width":465.18181824684143},{"text":"oh because I want to go into... oh","width":593.1818182468414},{"text":"cd cs241","width":312.18181824684143},{"text":"okay good, right, we're in the right place","width":321.18181824684143},{"text":"okay, so we talked about file globbing","width":247.18181824684143},{"text":"and uh, oh yes here's another little useful command","width":378.18181824684143},{"text":"let's have a look at, say the timestamp for mmap","width":523.1818182468414},{"text":"and you'll see I made it this morning at 10:46","width":293.18181824684143},{"text":"yeah, I was busy just before lecture","width":336.18181824684143},{"text":"I can change that timestamp","width":178.18181824684143},{"text":"just by calling touch, so if I say touch, and here's the file","width":381.18181824684143},{"text":"oh I cannot touch it, why?","width":535.1818182468414},{"text":"who owns the file?","width":163.18181824684143},{"text":"root, right, and","width":111.18181824684143},{"text":"only root has read and write permissions","width":138.18181824684143},{"text":"okay, so, let's become root, alright, so I can do sudo, and that will give me root permissions","width":423.18181824684143},{"text":"I'm going to do sudo -s because I want to stay as root","width":419.18181824684143},{"text":"alright, then, let's touch that file","width":128.18181824684143},{"text":"and if we do that","width":611.1818182468414},{"text":"wait we've just updated the timestamp","width":249.18181824684143},{"text":"so why would that be useful with make?","width":723.1818182468414},{"text":"what does make use?","width":287.18181824684143},{"text":"the makefile, yes, and inside of the makefile you write rules","width":233.18181824684143},{"text":"and those rules depend upon the timestamps","width":168.18181824684143},{"text":"it compares the modified time of the executable, or the output of each rule","width":327.18181824684143},{"text":"and all of the sources","width":114.18181824684143},{"text":"so, if we've touched our input file, then we can force make to","width":379.18181824684143},{"text":"remake any executables or libraries that depend upon this file","width":226.18181824684143},{"text":"so useful, for example, if you've just changed your compiler options","width":309.18181824684143},{"text":"say if you wanted to add a debug flag, and rather than, say","width":258.18181824684143},{"text":"doing make clean or manually removing stuff","width":281.18181824684143},{"text":"just simply updating the timestamp is sufficient","width":351.18181824684143},{"text":"by the way, with make, you're not limited to just setting the timestamp at the current time","width":382.18181824684143},{"text":"you could even set it tomorrow, so you could say","width":102.18181824684143},{"text":"\"Hey, look, my homework wasn't done until tomorrow\" or something","width":190.18181824684143},{"text":"so, you could actually modify the other timestamps","width":206.18181824684143},{"text":"but we won't play with that today","width":113.18181824684143},{"text":"but there's just a cute little useful tool sometimes to be able to modify the meta information about the file","width":706.1818182468414},{"text":"let me make a new file, okay, so here's a new empty file","width":514.1818182468414},{"text":"and this file only has the permissions of read and write for root","width":485.18181824684143},{"text":"let me check my umask","width":678.1818182468414},{"text":"that's actually a poor demo, because root is special","width":251.18181824684143},{"text":"I'm going to get out of being root","width":394.18181824684143},{"text":"let's make another one, touch empty","width":303.18181824684143},{"text":"okay so here's a better demo, root is a special case","width":222.18181824684143},{"text":"so when I make a file normally, I have read and write permissions","width":316.18181824684143},{"text":"and so does my group","width":86.18181824684143},{"text":"and everybody else does not have those permissions","width":206.18181824684143},{"text":"why is that? in part it's to do with my umask","width":325.18181824684143},{"text":"where the umask is one of the options that controls","width":236.18181824684143},{"text":"what permissions are taken away from a file","width":320.18181824684143},{"text":"so if I change my umask","width":363.18181824684143},{"text":"to be 777, I can subtract everything from those files","width":308.18181824684143},{"text":"let me make another file now, and look at that","width":354.18181824684143},{"text":"now we haven't got any permission to read this file at all","width":138.18181824684143},{"text":"or write it, or execute","width":81.18181824684143},{"text":"umask is a subtractive operation, it masks out some of the default bits that","width":353.18181824684143},{"text":"we would have otherwise set on the permissions of each file","width":263.18181824684143},{"text":"it's not the only thing that controls the default permissions of new files","width":250.18181824684143},{"text":"but it is part of your process","width":179.18181824684143},{"text":"so I'm playing with this inside of the shell","width":163.18181824684143},{"text":"but we could also do this inside of a C program aswell","width":203.18181824684143},{"text":"and so if you want to securely create a set of files","width":421.18181824684143},{"text":"where you don't want anyone to be able to, say, read them","width":221.18181824684143},{"text":"or you're going to create a lot of files then","width":191.18181824684143},{"text":"setting umask first is a good security operation","width":230.18181824684143},{"text":"you're subtracting the bits that you don't want set so","width":323.18181824684143},{"text":"in this case I said \"hey, take everything off, we don't want read or write or anything\"","width":255.18181824684143},{"text":"if I had said umask, let's do 600","width":827.1818182468414},{"text":"what have I done now?","width":73.18181824684143},{"text":"I've taken my own bits off","width":63.18181824684143},{"text":"6, my read and write aren't there, m","width":211.18181824684143},{"text":"but I've let through the group and the world access rights","width":496.18181824684143},{"text":"so what's a typical umask? a typical umask is 022","width":339.18181824684143},{"text":"that's a typical default value. What does that do? What does that subtract?","width":531.1818182468414},{"text":"remember we're thinking in octal, so each one of these values","width":247.18181824684143},{"text":"remember, is read write execute combined into an octal number","width":336.18181824684143},{"text":"so for ourselves we're subtracting nothing, but what about the group and others?","width":373.18181824684143},{"text":"we're subtracting write","width":111.18181824684143},{"text":"we don't want anyone to write our files by, anyone else to write our files","width":595.1818182468414},{"text":"if you actually read the manpage of write and other things you'll actually find references to umask","width":346.18181824684143},{"text":"so here's one other piece that controls the creation of files","width":241.18181824684143},{"text":"it does not effect existing files, it's only during the creation of new files and new directories","width":574.1818182468414},{"text":"it also creates, effects directories","width":168.18181824684143},{"text":"so let's play with this","width":178.18181824684143},{"text":"I will make a new directory","width":345.18181824684143},{"text":"So let's turn everything off (evil laughter)","width":199.18181824684143},{"text":"and I'll make a subdirectory","width":318.18181824684143},{"text":"and I will try to make inside subdir1","width":273.18181824684143},{"text":"another file, so mydata.txt","width":513.1818182468414},{"text":"oh, I get permission denied, I cannot write into the contents of this directory","width":358.18181824684143},{"text":"why not? because we took the execute bit","width":270.18181824684143},{"text":"off the directory, so here's something a little strange","width":236.18181824684143},{"text":"the execute bit for a directory means, can I actually see the contents of the directory","width":429.18181824684143},{"text":"not the name of the directory, because that's not part of the actual directory","width":231.18181824684143},{"text":"but the name of the directory is back inside of the closing directory, in the parent directory","width":364.18181824684143},{"text":"it's can I actually open the directory and look inside and see what files are stored there","width":339.18181824684143},{"text":"so I couldn't go into subdir1","width":222.18181824684143},{"text":"and in fact if I tried to list the contents of subdir1","width":304.18181824684143},{"text":"I get \"No! you can't open that directory!\"","width":123.18181824684143},{"text":"because it's not executable","width":138.18181824684143}],
// Part 2
[{"text":"so let's change our permissions","width":425.18181824684143},{"text":"so change mod, and I will change it to now","width":381.18181824684143},{"text":"what's a reasonable permission for directories?","width":134.18181824684143},{"text":"well maybe we want to be able to read write it and execute it, of course","width":230.18181824684143},{"text":"and we want other people to be able to read and execute it, so if I do that","width":437.18181824684143},{"text":"then now I can make my file","width":428.18181824684143},{"text":"and now if I do a d so I can actually see the subdirectory itself","width":573.1818182468414},{"text":"you'll see that yes, we're a directory","width":102.18181824684143},{"text":"and yes, I've got the read write execute for myself and execute and read for everybody else","width":611.1818182468414},{"text":"that was a very quick introduction to umasks and touching things","width":348.18181824684143},{"text":"and file globbing. Any quick questions about this?","width":356.18181824684143},{"text":"Alright, conceptually not hard, as I said the only surprise","width":173.18181824684143},{"text":"is that for directories, two bits is the execute bit","width":957.1818182468414},{"text":"that controls whether you can see inside","width":351.18181824684143},{"text":"the directory","width":103.18181824684143},{"text":"so no the directory's name, but whether you can actually go in and see the contents of a directory","width":318.18181824684143},{"text":"what files and other directories did I put inside of it","width":156.18181824684143},{"text":"and for the umask, remember it's a mask","width":335.18181824684143},{"text":"you're subtracting things that otherwise would have been set","width":250.18181824684143},{"text":"and it's only for new files and directories","width":1221.1818182468414},{"text":"so nothing conceptually very hard","width":203.18181824684143},{"text":"now, here's the fun part, let's","width":234.18181824684143},{"text":"let's have a look at some of these other filesystems","width":178.18181824684143},{"text":"I've already mentioned /dev as ","width":194.18181824684143},{"text":"this completely different filesystem that's not actually a part of my disk","width":305.18181824684143},{"text":"and so that's the big idea, that I've got one","width":227.18181824684143},{"text":"set of paths in","width":164.18181824684143},{"text":"POSIX that I start with slash","width":213.18181824684143},{"text":"and go from there, everything's underneath this single slash","width":214.18181824684143},{"text":"all of my other things that I want to add","width":138.18181824684143},{"text":"all of my USB keys I put in","width":126.18181824684143},{"text":"all of my virtual directories and","width":308.18181824684143},{"text":"virtual filesystems are going to be underneath this root","width":369.18181824684143},{"text":"Windows used to have a different idea, it would say","width":233.18181824684143},{"text":"I'll put one disk inside of C:\\, I'll put one disk inside of D:\\","width":249.18181824684143},{"text":"and we better not have more than 26 disks or we'll run out of letters","width":297.18181824684143},{"text":"that was the old kind of DOS way of doing things, thank goodness we've gone past that now","width":264.18181824684143},{"text":"but anyways back in POSIX","width":113.18181824684143},{"text":"we all start here, and we can add the virtual filesystems","width":387.18181824684143},{"text":"underneath specific directories of our filesystem","width":240.18181824684143},{"text":"so we've got /dev, there's a couple of others","width":310.18181824684143},{"text":"here they are:","width":185.18181824684143},{"text":"/proc and /sys","width":280.18181824684143},{"text":"right, so how can we find out about these?","width":177.18181824684143},{"text":"glad you asked! Let's have a look at a little demo here","width":801.1818182468414},{"text":"I want you to cast your mind back to","width":229.18181824684143},{"text":"before you were born and","width":241.18181824684143},{"text":"filesystems were heavy","width":258.18181824684143},{"text":"not something you would carry around in your pocket","width":166.18181824684143},{"text":"but literally something you had to lift with both hands","width":251.18181824684143},{"text":"because it was a huge tape, a huge disk","width":200.18181824684143},{"text":"and you'd lift it and you'd mount it onto a spindle","width":164.18181824684143},{"text":"and spin it up","width":237.18181824684143},{"text":"the command for looking at and thinking about filesystems is mount","width":403.18181824684143},{"text":"tell me what's mounted, tell me what's been put into my machine","width":245.18181824684143},{"text":"and by default we get a big list and we can see it","width":233.18181824684143},{"text":"and we discover, oh look, I've got a whole load of different filesystems","width":268.18181824684143},{"text":"mounted on different points inside of my filesystem","width":159.18181824684143},{"text":"so I've got one called /srv","width":237.18181824684143},{"text":"some of these are going out onto the network, etc","width":203.18181824684143},{"text":"I've got something called tmp","width":75.18181824684143},{"text":"oh, here are the one's I've just been talking about, /proc and /sys","width":295.18181824684143},{"text":"and there'd be /dev somewhere aswell","width":263.18181824684143},{"text":"so there are different types","width":164.18181824684143},{"text":"a lot of the ones we're looking at here, as you can see, are ext4","width":247.18181824684143},{"text":"which is the modern-day equivalent of ext2 which we've already studied","width":405.18181824684143},{"text":"and we could add more to this","width":95.18181824684143},{"text":"so if we plug in a USB key, for example","width":135.18181824684143},{"text":"you would see it appear here","width":128.18181824684143},{"text":"if I mounted a DVD or CD it would appear here","width":262.18181824684143},{"text":"our filesystems don't need to be on external devices","width":215.18181824684143},{"text":"they can even be inside of a file","width":221.18181824684143},{"text":"so here's a file I downloaded earlier","width":342.18181824684143},{"text":"it's a .iso image","width":128.18181824684143},{"text":"meaning that I could copy these bytes using, which command?","width":377.18181824684143},{"text":"dd, yes, onto a say USB key","width":289.18181824684143},{"text":"or onto a DVD-ROM, but","width":261.18181824684143},{"text":"I actually want to have a look to see what's inside this file","width":349.18181824684143},{"text":"it's just a sequence of bytes, it's just a filet'","width":156.18181824684143},{"text":"but allegedly this is actually a filesystem inside this file","width":362.18181824684143},{"text":"so how can we do that?","width":105.18181824684143},{"text":"first of all we need to make a directory","width":128.18181824684143},{"text":"where we're going to mount this filesystem","width":265.18181824684143},{"text":"so let me call it stuff","width":269.18181824684143},{"text":"and you know right now if I look inside stuff there's nothing there!","width":272.18181824684143},{"text":"oops, cannot open directory? why is that?","width":408.18181824684143},{"text":"probably because my umask, oh alright, okay, thank you umask","width":348.18181824684143},{"text":"fix my umask, okay","width":102.18181824684143},{"text":"make directory stuff2","width":399.18181824684143},{"text":"so there's nothing inside of that directory","width":125.18181824684143},{"text":"what I'm going to do now is that that iso file","width":166.18181824684143},{"text":"and say to the kernal, \"Treat this file that I just downloaded using wget","width":493.18181824684143},{"text":"and pretend that it's a real disk somewhere and start being able to read from it\"","width":369.18181824684143},{"text":"now you know that when you write disk commands","width":161.18181824684143},{"text":"you actually read in chunks, not at a byte at a time","width":203.18181824684143},{"text":"we're not doing fseek() and fread(), we want to read 4K blocks","width":239.18181824684143},{"text":"so we need one additional magic command with mount","width":191.18181824684143},{"text":"to say, okay, loop it back and wrap it","width":216.18181824684143},{"text":"wrap this this file and turn it and treat it as if it's a full","width":289.18181824684143},{"text":"as if it is a block-based device","width":248.18181824684143},{"text":"so let's do this, let's switch into root mode here","width":447.18181824684143},{"text":"okay, where's my little file?","width":162.18181824684143},{"text":"let me play with globbing, so there we go","width":165.18181824684143},{"text":"match any files that start with that, and I know it's just one of them today","width":240.18181824684143},{"text":"okay, and I want to mount it on a particular directory","width":204.18181824684143},{"text":"so, we had stuff2","width":223.18181824684143},{"text":"oh, it didn't work because I didn't add the loop option","width":194.18181824684143},{"text":"yes the .iso file I want to treat as a block-based device","width":306.18181824684143},{"text":"so I need that one last option. Great, it works, and now","width":151.18181824684143},{"text":"we can, if I look at my mount listings, see that we've got that file","width":398.18181824684143},{"text":"mounted inside of my directory as this iso9660","width":239.18181824684143},{"text":"which is a standard for CD-based filesystems","width":259.18181824684143},{"text":"and it's using particular loop-based device to turn it into a block-based device","width":256.18181824684143},{"text":"great, let's go and have a look","width":77.18181824684143}],
// Part 4
[{"text":"what have I got here?","width":199.18181824684143},{"text":"I've got useful things about","width":202.18181824684143},{"text":"how my memory is organized","width":125.18181824684143},{"text":"let's have a look at Swap information","width":257.18181824684143},{"text":"you see that my Swap file here is","width":263.18181824684143},{"text":"about a Gigabyte in size","width":598.1818182468414},{"text":"and let's get a look at my CPU","width":371.18181824684143},{"text":"okay so I can get a whole lot of data but my CPU I can discover, say","width":213.18181824684143},{"text":"what features my CPU has","width":173.18181824684143},{"text":"but my favorite thing about CPU is I can discover","width":229.18181824684143},{"text":"how many bogomips it has","width":306.18181824684143},{"text":"in fact this little particular box has 4 CPU cores","width":228.18181824684143},{"text":"and each CPU has 6,000 bogomips","width":484.18181824684143},{"text":"a bogomip is one of the most well-known fake measurements of how good a processor is","width":640.1818182468414},{"text":"and it's this: when Linux starts up","width":142.18181824684143},{"text":"it runs a timing loop","width":107.18181824684143},{"text":"to see how quickly a CPU runs","width":158.18181824684143},{"text":"before the hardware timer interrupts","width":173.18181824684143},{"text":"so we can get an idea of roughly how many instructions we can run per second","width":272.18181824684143},{"text":"and that's what this is telling us","width":110.18181824684143},{"text":"roughly, our little CPU can run","width":267.18181824684143},{"text":"six thounsand million instructions per second","width":457.18181824684143},{"text":"that's a pretty fast CPU","width":131.18181824684143},{"text":"and of course it's a completely fake measurement","width":163.18181824684143},{"text":"we don't ever start to get close to that","width":126.18181824684143},{"text":"but it's a cute way of being able to compare","width":172.18181824684143},{"text":"one CPU to another and have an idea of how fast the timing loop is","width":353.18181824684143},{"text":"if we're just writing a very simple - in Assembler - kind of a litle for loop","width":236.18181824684143},{"text":"to wait for, say, a hundred instructions or so","width":209.18181824684143},{"text":"so that tells me something about my CPU speed","width":226.18181824684143},{"text":"and as you can see I can see how many CPUs I've actually got in my system","width":481.18181824684143},{"text":"so I can look at these","width":180.18181824684143},{"text":"these system-wides prompters, but I","width":277.18181824684143},{"text":"can also discover things about specific processes","width":263.18181824684143},{"text":"remember these numbers over here? They're just process numbers","width":293.18181824684143},{"text":"how about we find out","width":162.18181824684143},{"text":"something about our own process","width":223.18181824684143},{"text":"well I've got two ways to do that","width":137.18181824684143},{"text":"actually, the shell","width":143.18181824684143},{"text":"in a variable, tells me the process number of itself","width":611.1818182468414},{"text":"haha!","width":79.18181824684143},{"text":"I'm now inside the Matrix","width":219.18181824684143},{"text":"here I am inside of the process number of my shell","width":277.18181824684143},{"text":"let's see what we can find out about it","width":271.18181824684143},{"text":"all sorts of things","width":92.18181824684143},{"text":"so we can","width":470.18181824684143},{"text":"we can discover something about its memory","width":651.1818182468414},{"text":"make that a little bit more readable","width":707.1818182468414},{"text":"there's a lot of stuff inside of maps","width":231.18181824684143},{"text":"the first thing is, this tells me how","width":184.18181824684143},{"text":"the memory of my process is mapped","width":243.18181824684143},{"text":"so I remember how I said \"Hey, some memory's not mapped to anything\"","width":161.18181824684143},{"text":"well here's the proof","width":154.18181824684143},{"text":"the very lowest part of memory is not mapped to anything","width":163.18181824684143},{"text":"the first we've got, actually, is","width":230.18181824684143},{"text":"memory starting at this virtual address going up to that virtual address","width":281.18181824684143},{"text":"and... come back!","width":600.1818182468414},{"text":"and it's at this address that memory is actually","width":320.18181824684143},{"text":"executable, and it's mapped from a file called /bin/bash","width":312.18181824684143},{"text":"then later I've got heap memory, here it is","width":294.18181824684143},{"text":"then I've got all of these librarys like ld","width":208.18181824684143},{"text":"libc, you could probably guess what's inside of libc","width":204.18181824684143},{"text":"all of the C calls that we call","width":247.18181824684143},{"text":"and eventually we should find the stack down here aswell","width":165.18181824684143},{"text":"oh there it is","width":93.18181824684143},{"text":"and there's our current stack","width":547.1818182468414},{"text":"I've got schedule information, I've got other status information","width":443.18181824684143},{"text":"and I've even got the file descriptors","width":423.18181824684143},{"text":"and I can look at even the","width":143.18181824684143},{"text":"the command line that was used to start this","width":272.18181824684143},{"text":"so if these are readable","width":256.18181824684143},{"text":"then that suggests an important security concern","width":155.18181824684143},{"text":"which is anything you put on the command line","width":260.18181824684143},{"text":"other people can read","width":108.18181824684143},{"text":"so it's probably not a good idea, on a shared system","width":197.18181824684143},{"text":"to put your passwords, or any other secret information, on the command line","width":308.18181824684143},{"text":"because this interface","width":159.18181824684143},{"text":"allows people to actually discover","width":171.18181824684143},{"text":"what's on the command line of all running processes","width":756.1818182468414},{"text":"let's start something in the background","width":185.18181824684143},{"text":"so let's start sleep","width":140.18181824684143},{"text":"10 echo","width":426.18181824684143},{"text":"so let's go into","width":630.1818182468414},{"text":"okay that was the wrong process","width":316.18181824684143},{"text":"with a little bit of searching we could have found","width":123.18181824684143},{"text":"that command line for echo","width":323.18181824684143},{"text":"and discover the secret","width":234.18181824684143},{"text":"alright so","width":137.18181824684143},{"text":"that's enough of these virtual file systems","width":135.18181824684143},{"text":"I think it's time to talk about virtual memory, so","width":162.18181824684143},{"text":"page 2","width":1206.1818182468414},{"text":"so using virtual memory is","width":157.18181824684143},{"text":"and using memory-mapped memory","width":187.18181824684143},{"text":"is relatively easy","width":459.18181824684143},{"text":"I'm going to show you one version today which is","width":254.18181824684143},{"text":"where we have our memory-mapped file","width":211.18181824684143},{"text":"and we actually have a real file behind the memory that we're going to use","width":397.18181824684143},{"text":"next lecture we'll play with forking and show you how we can","width":299.18181824684143},{"text":"use this with IPC aswell","width":128.18181824684143}],
// Part 5
[{"text":"okay so here's our plan","width":330.18181824684143},{"text":"we're going to use something called","width":132.18181824684143},{"text":"mmap","width":113.18181824684143},{"text":"and when you say \"Hey, I want to map some virtual memory\"","width":423.18181824684143},{"text":"we need to say","width":140.18181824684143},{"text":"what kind of memory do we want?","width":96.18181824684143},{"text":"do we want memory that is readable?","width":174.18181824684143},{"text":"writable? or executable?","width":150.18181824684143},{"text":"some combination of the above?","width":254.18181824684143},{"text":"so typically we will want at least read and write access","width":293.18181824684143},{"text":"so here's our protection","width":331.18181824684143},{"text":"so this is how, if you","width":120.18181824684143},{"text":"if your process tried to, say, change a byte of libc","width":417.18181824684143},{"text":"the virtual memory hardware would say \"Hold on a moment! ","width":121.18181824684143},{"text":"you don't have write access to that file.","width":147.18181824684143},{"text":"I'm going to let you proceed any further\" and it would raise a signal","width":353.18181824684143},{"text":"but we want to do more than that","width":77.18181824684143},{"text":"we actually want to be able to modify the file","width":150.18181824684143},{"text":"and we're going to actually change the contents","width":216.18181824684143},{"text":"of our file just by writing into memory","width":237.18181824684143},{"text":"which I think is pretty cool","width":256.18181824684143},{"text":"the other thing we're going to see is","width":101.18181824684143},{"text":"this map shared","width":170.18181824684143},{"text":"which means that changes we make","width":142.18181824684143},{"text":"are shared with the file","width":2790.1818182468414},{"text":"sudo change owner to be angrave","width":565.1818182468414},{"text":"run vim, great","width":310.18181824684143},{"text":"now, there's a gotcha with using mmap","width":202.18181824684143},{"text":"which is that it's not going to automatically extend the file for us","width":227.18181824684143},{"text":"so if want to be able to, say, store a few integers","width":219.18181824684143},{"text":"in our memory-mapped space","width":91.18181824684143},{"text":"then we better make sure that our file is big enough before-hand","width":264.18181824684143},{"text":"so let's do that","width":294.18181824684143},{"text":"first let me look at a file descriptor","width":122.18181824684143},{"text":"and I'll open the file called data","width":106.18181824684143},{"text":"I want read and write","width":97.18181824684143},{"text":"if it doesn't exist, I want to be able to create it","width":131.18181824684143},{"text":"if it does exist, I'm going to truncate it","width":135.18181824684143},{"text":"and here's my permission bits, 0600","width":163.18181824684143},{"text":"what does 0600 mean?","width":169.18181824684143},{"text":"the 0 and the beginning means I'm going to speak octal","width":177.18181824684143},{"text":"and the 6 means","width":189.18181824684143},{"text":"I want read and write permission","width":100.18181824684143},{"text":"and everyone else, ha! nothing for you","width":196.18181824684143},{"text":"we're making this a private file","width":174.18181824684143},{"text":"we need a way to be able to extend this file","width":276.18181824684143},{"text":"how can I do that?","width":520.1818182468414},{"text":"any ideas?","width":433.18181824684143},{"text":"how about using seek","width":183.18181824684143},{"text":"there's two ways to do this: we could have actually written enough bytes","width":217.18181824684143},{"text":"so we could have written size time size number of bytes into my file","width":330.18181824684143},{"text":"but another way do it is just to deliberately seek","width":222.18181824684143},{"text":"to a new end-point, and we'll write something in there","width":280.18181824684143},{"text":"so let's seek","width":169.18181824684143},{"text":"on my file descriptor","width":148.18181824684143},{"text":"who remembers how to use seek?","width":150.18181824684143},{"text":"I want to go this far into the file","width":117.18181824684143},{"text":"and remember we can like seek end","width":243.18181824684143},{"text":"seek beginning, we can say seek set","width":150.18181824684143},{"text":"and I'm going to write just one byte in here","width":160.18181824684143},{"text":"so let me write into my file descriptor","width":156.18181824684143},{"text":"here's a pointer to some data I want to send","width":124.18181824684143},{"text":"I'll just send, say, abc","width":190.18181824684143},{"text":"and I'll send those three bytes","width":136.18181824684143},{"text":"and in doing that, I've made sure that","width":93.18181824684143},{"text":"my file is more than","width":218.18181824684143},{"text":"this size","width":72.18181824684143},{"text":"so that's just the easiest way of","width":182.18181824684143},{"text":"extending the size of a file","width":137.18181824684143},{"text":"now we do our map","width":143.18181824684143},{"text":"and if it works, we get back a valid address","width":758.1818182468414},{"text":"for now","width":172.18181824684143},{"text":"I can treat that address","width":122.18181824684143},{"text":"as some memory that I can now use","width":151.18181824684143},{"text":"so I'm going to write into","width":204.18181824684143},{"text":"my memory","width":123.18181824684143},{"text":"12345678","width":95.18181824684143},{"text":"and this other hexidecimal constant called dead code","width":348.18181824684143},{"text":"to make sure that","width":193.18181824684143},{"text":"the changes in memory are","width":289.18181824684143},{"text":"written back to the file after","width":93.18181824684143},{"text":"I should unmap it, so how do I do that?","width":113.18181824684143},{"text":"I call munmap and we're done","width":249.18181824684143},{"text":"so let's compile this","width":1640.1818182468414},{"text":"undefined reference to seek","width":203.18181824684143},{"text":"what did we do wrong there?","width":1148.1818182468414},{"text":"sudo chmod angrave","width":384.18181824684143},{"text":"everything","width":63.18181824684143}],
// Part 6
[{"text":"oops, too much speed","width":309.18181824684143},{"text":"okay thank you right so","width":705.1818182468414},{"text":"oh yeah, sorry I was doing lseek","width":1181.1818182468414},{"text":"alright so we got a","width":118.18181824684143},{"text":"reasonable address","width":106.18181824684143},{"text":"we wrote those bytes into it","width":103.18181824684143},{"text":"now actually let's have a look at our file","width":589.1818182468414},{"text":"okay here's a letter 'a' that we wrote","width":593.1818182468414},{"text":"here's those numbers we wrote","width":83.18181824684143},{"text":"12345678 and deadc0de","width":257.18181824684143},{"text":"but that's not what we see inside of the file","width":183.18181824684143},{"text":"why?","width":603.1818182468414},{"text":"endianess, yes","width":202.18181824684143},{"text":"what can you conclude about this particular processor?","width":284.18181824684143},{"text":"that 78 56 34 12","width":418.18181824684143},{"text":"we put the largest values of our integer, the 12","width":213.18181824684143},{"text":"and the very end","width":225.18181824684143},{"text":"our integers are written in reverse","width":123.18181824684143},{"text":"we put the","width":109.18181824684143},{"text":"the smallest byte of our integer first in our file","width":296.18181824684143},{"text":"and that's a property of the CPU","width":293.18181824684143},{"text":"so be careful when working with binary data","width":163.18181824684143},{"text":"we have to know how our CPU","width":293.18181824684143},{"text":"represents integers and other data formats","width":156.18181824684143},{"text":"if we're simply going to just write them into the file","width":139.18181824684143},{"text":"likewise, if you're going to read from a particular binary file","width":198.18181824684143},{"text":"you need to know whether that","width":143.18181824684143},{"text":"structure on the binary file actually can be","width":138.18181824684143},{"text":"easily mapped into the CPU","width":240.18181824684143},{"text":"that you're trying to work with","width":120.18181824684143},{"text":"okay, so that's our file, and","width":99.18181824684143},{"text":"look how easy it was to actually","width":123.18181824684143},{"text":"change the contents of the file","width":651.1818182468414},{"text":"we just wrote into the file","width":296.18181824684143},{"text":"as if it was regular memory","width":166.18181824684143},{"text":"and if we had a very very large file","width":215.18181824684143},{"text":"we could simply write in offsets here","width":204.18181824684143},{"text":"and immediately use that data","width":163.18181824684143},{"text":"so if this was genetic data","width":111.18181824684143},{"text":"we wouldn't need to parse it, we could simply","width":171.18181824684143},{"text":"write it and read it directly from our processing loops","width":253.18181824684143},{"text":"so it can make working with binary data","width":306.18181824684143},{"text":"very very efficient","width":357.18181824684143},{"text":"one last comment on this is that","width":123.18181824684143},{"text":"memory-mapped files isn't always a free lunch","width":139.18181824684143},{"text":"you won't necessarily speed up all operations","width":213.18181824684143},{"text":"the kernal, the operating system, the disk drive","width":315.18181824684143},{"text":"are designed for fast streaming of data","width":220.18181824684143},{"text":"so if your process is simply streaming data in","width":214.18181824684143},{"text":"doing some simply processing or filtering of that data as it comes in","width":185.18181824684143},{"text":"and streaming it out, memory-mapped files will not","width":142.18181824684143},{"text":"give you any significant advantage","width":164.18181824684143},{"text":"what it will do for you is","width":92.18181824684143},{"text":"when you want to make use of the virtual memory framework","width":190.18181824684143},{"text":"to automatically map parts of files directly into address space","width":435.18181824684143},{"text":"and with that, my demo's finished. Any questions?","width":347.18181824684143},{"text":"you might find this useful","width":139.18181824684143},{"text":"in the very last MP","width":114.18181824684143},{"text":"if you're trying to your keyserver","width":163.18181824684143},{"text":"run fast, but I'll say no more for now.","width":233.18181824684143},{"text":"thank you very much, I'll see you in two days.","width":180.18181824684143}],
// Part 2
[{"text":"alright so here's what these two lines do","width":257.18181824684143},{"text":"they're basically saying hey operating system, I need some extra bytes","width":181.18181824684143},{"text":"heres how many","width":93.18181824684143},{"text":"talking to your operating system is very slow","width":156.18181824684143},{"text":"thats gonna take several microseconds to complete","width":411.18181824684143},{"text":"and then we're gonna say here, chosen","width":217.18181824684143},{"text":"im going to set this pointer to be sbrk and then call sbrk on size","width":274.18181824684143},{"text":"guess what that does. that also says to the operating system i need now size bytes","width":313.18181824684143},{"text":"they're actually calling sbrk 4 times","width":227.18181824684143},{"text":"to say alright give me some byte not only for the struct but give me some bytes in order for to satisfy the users request","width":507.18181824684143},{"text":"and what we're doing with the asterisk each time is raising the rule to mar raising the threshold for where our heap finishes","width":610.1818182468414},{"text":"so now we're gotten set up our little struct","width":137.18181824684143},{"text":"we'll set it's size","width":113.18181824684143},{"text":"we'll set that it's free","width":108.18181824684143},{"text":"and we'll set the next pointer to equal to metadata and we change the metadata chosen to the pointer","width":397.18181824684143},{"text":"so what we've done here is insert our new entry into the beginning of the linked list","width":515.1818182468414},{"text":"so the next time we call free or malloc we're gonna see this newly created entry inside our linked list","width":497.18181824684143},{"text":"and then finally we say back to the user here's the memory of size bytes that you needed","width":908.1818182468414},{"text":"questions about this code?","width":368.18181824684143},{"text":"yes?","width":531.1818182468414},{"text":"if chosen is bigger than the amount of space that you need","width":153.18181824684143},{"text":"yes","width":51.18181824684143},{"text":"so","width":64.18181824684143},{"text":"what this code does not do","width":133.18181824684143},{"text":"is do anything without spare space","width":293.18181824684143},{"text":"it's got a very simple view of the world","width":116.18181824684143},{"text":"its view of the world is","width":120.18181824684143},{"text":"yeah i've got a block here that was previously allocated, a block here, some memory here","width":412.18181824684143},{"text":"and if you want to say to this much memory then it's obviously not going to give you that one and it would give you say this block","width":703.1818182468414},{"text":"and you'd say well what about this space back here","width":149.18181824684143},{"text":"can we use that","width":69.18181824684143},{"text":"should we add another entry because maybe in the moment someone will malloc and attempt to make a smaller space","width":457.18181824684143},{"text":"ah too bad","width":128.18181824684143},{"text":"okay so we've got some fragmentation inside each of these allocations","width":282.18181824684143},{"text":"if we dont have a perfect fit","width":598.1818182468414},{"text":"yes?","width":558.1818182468414},{"text":"ah right","width":36.18181824684143},{"text":"okay","width":32.18181824684143},{"text":"so","width":47.18181824684143},{"text":"before this line","width":214.18181824684143},{"text":"we've got metadata","width":271.18181824684143},{"text":"pointing to our first entry","width":238.18181824684143},{"text":"yes this is my little struct now","width":108.18181824684143},{"text":"which then has a next pointer which points to another one which has a next one which points to another one","width":291.18181824684143},{"text":"and so on and so on and so on","width":140.18181824684143},{"text":"so what we do","width":160.18181824684143},{"text":"is ","width":93.18181824684143},{"text":"we set up our new struct","width":147.18181824684143},{"text":"so its next pointer ","width":365.18181824684143},{"text":"points to the old beginning of the linked list","width":294.18181824684143},{"text":"alright so when you see equals","width":146.18181824684143},{"text":"just remember","width":24.18181824684143},{"text":"your copying bit patterns","width":63.18181824684143},{"text":"you're just changing one pointer to look at the same thing as another pointer","width":360.18181824684143},{"text":"and then the next line is meaningful","width":148.18181824684143},{"text":"we've changed that variable metadata","width":142.18181824684143},{"text":"to look to our new brand link","width":970.1818182468414},{"text":"any other questions","width":232.18181824684143},{"text":"alright then","width":119.18181824684143},{"text":"so","width":898.1818182468414},{"text":"okay yes","width":41.18181824684143},{"text":"get your spectacles on","width":86.18181824684143},{"text":"i did this too small today and it was tiny","width":337.18181824684143},{"text":"when can a system use COW","width":91.18181824684143},{"text":"moooo","width":57.18181824684143},{"text":"that's a moot point","width":38.18181824684143},{"text":"no","width":69.18181824684143},{"text":"COW","width":54.18181824684143},{"text":"cow stands for copy on write","width":381.18181824684143},{"text":"here's the idea","width":169.18181824684143},{"text":"you and I can share a resource","width":158.18181824684143},{"text":"providing neither of us actually tries to change it","width":336.18181824684143},{"text":"and we can do that very quickly","width":97.18181824684143},{"text":"well the day that one of that you and i actualy need to write to that resource, that's when we're asked to duplicated it","width":497.18181824684143},{"text":"we'll do it very quickly before the other person notices","width":311.18181824684143},{"text":"so you can defer the actual copying process, the duplication process, until a change or modification happens","width":510.18181824684143},{"text":"ah this is a common idea for performance because quite often it turns out that we don't actually need to write to something or modify something","width":670.1818182468414},{"text":"so if you can detect when something is about to change","width":193.18181824684143},{"text":"maybe you're writing an alloc class or youre the operating system","width":238.18181824684143},{"text":"we dont actually need to initialize stuff or copy stuff until it actually is required","width":500.18181824684143},{"text":"and so","width":130.18181824684143},{"text":"a little brain teaser i have to today","width":136.18181824684143},{"text":"is how can we improve calloc performace here","width":285.18181824684143},{"text":"so COW is just copy on write","width":563.1818182468414},{"text":"so its a way to have shared data structures until something mutable happens","width":318.18181824684143},{"text":"until a change happens, and that way, we can use our resources efficiently","width":504.18181824684143},{"text":"right lets just see what you remember from previous lectures","width":177.18181824684143},{"text":"what's realloc","width":367.18181824684143},{"text":"it's when you change your mind","width":90.18181824684143},{"text":"you say, oh okay remember those bytes i malloc, actually i decided i need more bytes","width":393.18181824684143},{"text":"so we can use realloc when i say i'm creating an array","width":292.18181824684143},{"text":"and i keep going around a loop","width":93.18181824684143},{"text":"and i decide to say remember that array i made","width":125.18181824684143},{"text":"turns out it's not large enough","width":152.18181824684143},{"text":"okay so realloc works but there's a big caveat","width":355.18181824684143},{"text":"as you've just seen how malloc actually places things","width":210.18181824684143},{"text":"it could be that we can't keep the user data inside the same memory address anymore","width":356.18181824684143},{"text":"so when you call realloc be prepared to update your pointers with the return result of realloc","width":465.18181824684143},{"text":"so if i've got an array","width":153.18181824684143},{"text":"that i previously created say from realloc or malloc or calloc","width":457.18181824684143},{"text":"then don't just say you know what im gonna make it larger","width":786.1818182468414},{"text":"i'm gonna make it say 100x 100 entries larger","width":476.18181824684143},{"text":"infact, let me just change this code a little bit","width":143.18181824684143},{"text":"let's say that ","width":206.18181824684143},{"text":"you called calloc","width":126.18181824684143},{"text":"and","width":126.18181824684143},{"text":"i've got like a size of thing","width":222.18181824684143},{"text":"something","width":82.18181824684143},{"text":"and i've got like 50 entries here","width":362.18181824684143},{"text":"and then you say you know what actually 50 wasn't enough","width":122.18181824684143},{"text":"im going to double my space","width":165.18181824684143},{"text":"i've just managed to write two errors in 2 lines","width":508.18181824684143},{"text":"actually both of those were in the second line","width":140.18181824684143}],
// Part 3
[{"text":"so here's two gotchas the first is that my variable, array i didnt build it to update","width":820.1818182468414},{"text":"and so it could be that during testing everything is fine but later one it turns out that im trying to change the size of realloc and actually had to move my array to different memory and i didnt update it","width":812.1818182468414},{"text":"so make sure you use a return value","width":193.18181824684143},{"text":"this second error is awful","width":153.18181824684143},{"text":"and im going to tell you know its because life is short","width":216.18181824684143},{"text":"and please please never make this error","width":183.18181824684143},{"text":"unless youre trying to confuse someone else","width":184.18181824684143},{"text":"this is a fantastic gotcha","width":367.18181824684143},{"text":"does that code really allocate enough things for 100 entries","width":482.18181824684143},{"text":"no it allocates 100 bytes","width":187.18181824684143},{"text":"what we forgot to do was multiply it by the sizeof() our entries","width":696.1818182468414},{"text":"so don't just plug in N here or number of items remember that calloc realloc and malloc work with bytes","width":477.18181824684143},{"text":"and we didnt allocate enough bytes","width":139.18181824684143},{"text":"which means later on","width":74.18181824684143},{"text":"when we start putting things in our array we're going to go past the end of the array","width":285.18181824684143},{"text":"and exciting things can happen called segfaults and data corruption","width":405.18181824684143},{"text":"so start and pause whenever you see realloc are you actually passing the right number of bytes","width":351.18181824684143},{"text":"and when you see sizeof() are you calculating the size of the right type","width":443.18181824684143},{"text":"okay","width":58.18181824684143},{"text":"thankfully now no one in this room is ever going to mkae that error again","width":194.18181824684143},{"text":"we'll just let university of whatever make those errors","width":277.18181824684143},{"text":"okay","width":29.18181824684143},{"text":"so","width":80.18181824684143},{"text":"what do remember about calloc?","width":105.18181824684143},{"text":"what does calloc do","width":164.18181824684143},{"text":"okay it takes two arguments","width":140.18181824684143},{"text":"and it multiplies them together to determine the number of bytes","width":179.18181824684143},{"text":"what else? how is it different from malloc?","width":289.18181824684143},{"text":"it clears the memory","width":68.18181824684143},{"text":"yes","width":112.18181824684143},{"text":"calloc now only gives you back a pointer to some memory","width":194.18181824684143},{"text":"it zeros out all that memory as well for you","width":242.18181824684143},{"text":"so we go back to java arrays","width":120.18181824684143},{"text":"we said hey i need a new integer array","width":159.18181824684143},{"text":"a great way to implement that would be to use calloc","width":371.18181824684143},{"text":"so of course then","width":48.18181824684143},{"text":"calloc is much slower","width":83.18181824684143},{"text":"we actually have to write to all those memory locations","width":104.18181824684143},{"text":"and you remember talking to memory is really slow","width":187.18181824684143},{"text":"especially when you need to talk to lots of it","width":167.18181824684143},{"text":"so the reason that we dont necessarily always call calloc is because sometimes we know that our program is going to write into every memory location","width":505.18181824684143},{"text":"we don't even need to waste time zeroing it out first","width":498.18181824684143},{"text":"so it zeros the bytes","width":800.1818182468414},{"text":"so you can write a loop to do this","width":228.18181824684143},{"text":"but ill give you a little hint","width":138.18181824684143},{"text":"if youre ever writing a calloc and you want it to be performant","width":233.18181824684143},{"text":"then remember when you do the operating system and say hey i need some new bytes","width":358.18181824684143},{"text":"i guarantee you those bytes will be zero","width":304.18181824684143},{"text":"because the kernel the operating system does not want to give you some memory that is being used by a different process","width":517.1818182468414},{"text":"maybe its got a password in it","width":73.18181824684143},{"text":"maybe its got a secret key in it","width":85.18181824684143},{"text":"maybe its got stuff that you shouldnt have access to","width":156.18181824684143},{"text":"so for security","width":134.18181824684143},{"text":"you will get bytes which are zero","width":315.18181824684143},{"text":"so if you know that you're getting new bytes","width":183.18181824684143},{"text":"you can reliably","width":114.18181824684143},{"text":"you dont actually have to zero those out","width":139.18181824684143},{"text":"but only if you know that youre getting them fresh from the operating system","width":201.18181824684143},{"text":"youre not just using memory thats already part of your process","width":687.1818182468414},{"text":"boundary tags we haven't talked about much","width":159.18181824684143},{"text":"but we have talked about indirectly","width":207.18181824684143},{"text":"the last lecture","width":78.18181824684143},{"text":"i gave you an idea about whenever we did an allocation","width":220.18181824684143},{"text":"we could actually store the size of our allocated area","width":463.18181824684143},{"text":"at the beginning and the end of each part","width":270.18181824684143},{"text":"so rather than having a separate struct like we saw at the beginning of this lecture","width":223.18181824684143},{"text":"we could actually hide inside here how many bytes this is","width":280.18181824684143},{"text":"so this say is 16 bytes","width":158.18181824684143},{"text":"put 16 here","width":71.18181824684143},{"text":"this is 20","width":212.18181824684143},{"text":"so if we do these tags at the beginning and end","width":272.18181824684143},{"text":"then when we come to do something like a free","width":359.18181824684143},{"text":"i know that because these are like train couches becuase theyre next door to each other if i just go backwards enough bytes","width":438.18181824684143},{"text":"i can actually read how big the previous allocation was","width":236.18181824684143},{"text":"and that allows me to manipulate these values","width":149.18181824684143},{"text":"and to maintain a list what's been allocated","width":334.18181824684143},{"text":"as part of this train","width":174.18181824684143},{"text":"as part of these tags which are next to each other","width":369.18181824684143},{"text":"alright","width":55.18181824684143},{"text":"so when actually return from malloc","width":193.18181824684143},{"text":"we wouldn't return the beginning of the carriage if you like, no we look a few bytes in","width":383.18181824684143},{"text":"and say okay here's that area for you to play with","width":240.18181824684143},{"text":"you can put whatever data you want inside this bit here","width":246.18181824684143},{"text":"because you asked for 8 bytes in the middle","width":258.18181824684143},{"text":"but becuase the users code was broken","width":296.18181824684143},{"text":"it kept going","width":140.18181824684143},{"text":"say someone didn't actually request enough bytes","width":238.18181824684143},{"text":"so as a result of that","width":101.18181824684143},{"text":"the user code just destroyed our metainformation inside here","width":329.18181824684143},{"text":"in fact it could've kept going as well","width":527.1818182468414},{"text":"things might seem to work until the day the code calls free","width":446.18181824684143},{"text":"becuase now you're free implementation assumes that it can read these values correctly","width":417.18181824684143},{"text":"but as we've just seen the values here are gone","width":473.18181824684143},{"text":"they've been replaced by whatever the user code happened to write in there or the rest of the program actually did","width":467.18181824684143},{"text":"so now you linked list manipulation and your calculations","width":267.18181824684143},{"text":"ha ha ha","width":240.18181824684143},{"text":"might be updating arbitrary pieces of memory","width":144.18181824684143},{"text":"and you're adding whatever the values were in here","width":255.18181824684143},{"text":"heres an example where a buffer overflow could make your perfectly reasonable code do bad things","width":478.18181824684143},{"text":"now it could make it say write arbitrary values into arbitrary different locations","width":339.18181824684143},{"text":"which is why buffer overflows are so dangerous","width":275.18181824684143},{"text":"of course most likely whats going to happen is when you call free your program crashes","width":385.18181824684143},{"text":"so when your program crashes during free its probably because something bad happened earlier to the heap","width":546.1818182468414},{"text":"so how can we stop that?","width":229.18181824684143},{"text":"what can we do?","width":364.18181824684143},{"text":"lets say youve inherited a program where it just crashes strangely on free","width":350.18181824684143},{"text":"how could you try to figure out what's going on?","width":693.1818182468414}],
// Part 6
[{"text":"okay","width":277.18181824684143},{"text":"right lets run this, see what happens","width":232.18181824684143},{"text":"and it wont quite work, cus uhhh gcc will say \"hey I've no idea.. what\"","width":765.1818182468414},{"text":"uhhh doesn't know what sleep is, and shouldn't know what pthread is either","width":281.18181824684143},{"text":"so lets fix this","width":76.18181824684143},{"text":"we need uhmm","width":152.18181824684143},{"text":"pthread.h","width":93.18181824684143},{"text":"and also on our options down here","width":173.18181824684143},{"text":"we have to tell the compiler","width":93.18181824684143},{"text":"please","width":28.18181824684143},{"text":"I really wanna compile with pthread","width":275.18181824684143},{"text":"there we go","width":586.1818182468414},{"text":"... what. okay! ","width":144.18181824684143},{"text":"right great","width":58.18181824684143},{"text":"so it printed out..","width":198.18181824684143},{"text":"dead code..","width":187.18181824684143},{"text":"so what I want to show you is...","width":76.18181824684143},{"text":"look we passed in a pointer to something over here","width":218.18181824684143},{"text":"and then inside our function called beans, we just printed the pointer value","width":276.18181824684143},{"text":"we did not try to follow the pointer value","width":117.18181824684143},{"text":"if I tried to print out the string of deadcode","width":172.18181824684143},{"text":"my program will probably crash","width":96.18181824684143},{"text":"thats probably not a valid memory address to read","width":296.18181824684143},{"text":"okay ","width":33.18181824684143},{"text":"and now my machine is getting hot","width":196.18181824684143},{"text":"why? because there a cpu","width":64.18181824684143},{"text":"we're running","width":123.18181824684143},{"text":"uhmmm it it it, my program never finished","width":183.18181824684143},{"text":"right, the first cpu is still running","width":373.18181824684143},{"text":"so what have we just proved","width":71.18181824684143},{"text":"we proved","width":33.18181824684143},{"text":"that we can do two things at the same time","width":212.18181824684143},{"text":"inside one process","width":290.18181824684143},{"text":"what do you think happens","width":73.18181824684143},{"text":"if I make a hundred threads","width":526.1818182468414},{"text":"my machine ","width":53.18181824684143},{"text":"might only have say a couple of cpus","width":195.18181824684143},{"text":"so how is it going to run","width":146.18181824684143},{"text":"those threads","width":44.18181824684143},{"text":"if I've only got 2 actual cpus. yeah?","width":388.18181824684143},{"text":"so what I do, is it","width":123.18181824684143},{"text":"lets one thread run","width":80.18181824684143},{"text":"and when it finishes","width":66.18181824684143},{"text":"it says","width":23.18181824684143},{"text":"next thread I know youve been waiting for a while","width":133.18181824684143},{"text":"you can have the cpu next","width":87.18181824684143},{"text":"actually its cleverer than that","width":125.18181824684143},{"text":"every 10 milliseconds or so","width":194.18181824684143},{"text":"a little hardware timer goes off","width":110.18181824684143},{"text":"and the operating systems scheduler comes up","width":120.18181824684143},{"text":"and it says","width":37.18181824684143},{"text":"you have been having chocolate for too long. in other words you've been having the CPU for too long","width":266.18181824684143},{"text":"Im going to put you on pause and let this other thread","width":255.18181824684143},{"text":"that has been waiting for a while have access to the CPU and so that thread gets to run","width":256.18181824684143},{"text":"so the operating system","width":95.18181824684143},{"text":"treats memory, the cpu and other resouces","width":181.18181824684143},{"text":"as scarce resources","width":93.18181824684143},{"text":"and tries to allocate them very efficiently","width":123.18181824684143},{"text":"and the different parts of the running system","width":158.18181824684143},{"text":"that wants to have access","width":165.18181824684143},{"text":"and how we schedule that ","width":171.18181824684143},{"text":"is actually an area of research","width":206.18181824684143},{"text":"so we have passed in something. you've seen that","width":113.18181824684143},{"text":"what we have passed in here arrives as the pointer though here","width":281.18181824684143},{"text":"lets make our program","width":98.18181824684143},{"text":"return something","width":63.18181824684143},{"text":"so ","width":35.18181824684143},{"text":"I'll return another void pointer","width":139.18181824684143},{"text":"lets call it one two three four","width":193.18181824684143},{"text":"how do I get that from another thread?","width":290.18181824684143},{"text":"Well, this time I'm going to","width":85.18181824684143},{"text":"pthread join","width":555.1818182468414},{"text":"so pthread join","width":70.18181824684143},{"text":"is a bit like","width":116.18181824684143},{"text":"wait","width":98.18181824684143},{"text":"it says","width":86.18181824684143},{"text":"don't continue","width":65.18181824684143},{"text":"until this thread has finished","width":193.18181824684143},{"text":"and uhh","width":96.18181824684143},{"text":"lets just grab it","width":72.18181824684143},{"text":"okay","width":351.18181824684143},{"text":"here is the thread I care about","width":62.18181824684143},{"text":"so lets just pass in the id number","width":118.18181824684143},{"text":"that we have before","width":96.18181824684143},{"text":"and uhmm","width":80.18181824684143},{"text":"I better have","width":331.18181824684143},{"text":"somewhere to store it","width":72.18181824684143},{"text":"right","width":11.18181824684143},{"text":"so now I just need a void pointer","width":366.18181824684143},{"text":"and I need the address of that void pointer","width":253.18181824684143},{"text":"and so lets finally print out the value of that","width":751.1818182468414},{"text":"okay, so","width":24.18181824684143},{"text":"what did we see of it here","width":255.18181824684143},{"text":"we still have two threads","width":143.18181824684143},{"text":"then the new thread","width":42.18181824684143},{"text":"the second thread","width":44.18181824684143},{"text":"slept for 2 seconds","width":176.18181824684143},{"text":"meanwhile, the main thread","width":111.18181824684143},{"text":"the first thread say","width":86.18181824684143},{"text":"okay","width":22.18181824684143},{"text":"I'm just going to join","width":87.18181824684143},{"text":"so it gets paused","width":138.18181824684143},{"text":"because its waiting for that second thread to finish","width":146.18181824684143},{"text":"and then the second thread finally prints out something","width":267.18181824684143},{"text":"prints out what it is given and then returns a vlue","width":247.18181824684143},{"text":"which we can then get back fromthe first thread using pthread join","width":392.18181824684143},{"text":"theres another way to exit threads","width":177.18181824684143},{"text":"and that way is called pthread_exit","width":319.18181824684143},{"text":"right","width":11.18181824684143},{"text":"so lets exit with something","width":97.18181824684143},{"text":"uhhh","width":46.18181824684143},{"text":"lets exit with","width":160.18181824684143},{"text":"ohh I dont know","width":217.18181824684143},{"text":"hello!","width":605.1818182468414},{"text":"oh, wrong way","width":733.1818182468414},{"text":"did I...","width":630.1818182468414},{"text":"ohh, yes","width":140.18181824684143},{"text":"okay and we'll","width":63.18181824684143},{"text":"cast it as a void ** pointer","width":56.18181824684143},{"text":"there we go","width":244.18181824684143},{"text":"if you call pthread_exit","width":128.18181824684143},{"text":"you're never going to execute, that thread is never going to execute more code after that point. you're telling the system","width":326.18181824684143},{"text":"Im done with this","width":77.18181824684143},{"text":"but my cpu for this thread","width":96.18181824684143},{"text":"does not need to execute","width":86.18181824684143},{"text":"any more","width":178.18181824684143},{"text":"so this time","width":80.18181824684143},{"text":"my thread called pthread_join","width":153.18181824684143},{"text":"prints out","width":25.18181824684143},{"text":"hello world and hello","width":136.18181824684143},{"text":"instead of the other return value","width":211.18181824684143},{"text":"soo","width":199.18181824684143},{"text":"pthread_join","width":104.18181824684143},{"text":"the exit here basically says","width":152.18181824684143},{"text":"I'm done","width":81.18181824684143},{"text":"and with that","width":77.18181824684143},{"text":"we've finished","width":113.18181824684143},{"text":"have a wonderful section tomorrow","width":138.18181824684143},{"text":"if you have any questions about it come down and ask me now","width":291.18181824684143},{"text":"there were three students","width":60.18181824684143},{"text":"that failed to put their exam key","width":118.18181824684143},{"text":"and by the way your quiz scores are in your subversion","width":267.18181824684143},{"text":"if you are one of those students that didn't buble in your exam key","width":204.18181824684143},{"text":"come down and we'll sort that out now","width":194.18181824684143}],
