/** Copyright 2015 Board of Trustees of University of Illinois
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var transcriptions = [{"start":"0:00","end":"0:03","text":"my love for you is 42"},{"start":"0:03","end":"0:10","text":"so this means this is going to continue until we get that null byte"},{"start":"0:10","end":"0:11","text":"alright that's enough hints"},{"start":"0:11","end":"0:13","text":"let's fixed that code"},{"start":"0:13","end":"0:19","text":"right so see if you and your neighbor can fix this code faster than your other neighbor that yu're not talking to"},{"start":"0:19","end":"0:28","text":"it's not copying the string, that's one of the bytes"},{"start":"0:28","end":"1:30","text":"copy the bytes so actually we didn't just want to copy src into dest "},{"start":"1:30","end":"1:36","text":"all this would do is whatever the value of src is whatever the value of src is i is just some memory location, we set that into dest"},{"start":"1:36","end":"1:43","text":"but dest is just a local variable so that would actually do nothing, it would actually just change src into dest"},{"start":"1:43","end":"1:46","text":"what we want to do is just use src as a pointer"},{"start":"1:46","end":"1:49","text":"so we need to put a star in here"},{"start":"1:49","end":"1:50","text":"there we go"},{"start":"1:50","end":"1:56","text":"right so we should have read the value at src hey go back to memory and then use dest as a pointer"},{"start":"1:56","end":"1:58","text":"we wanted to dereference it "},{"start":"1:58","end":"2:02","text":"we wanted to say okay now write that value into whatever dest is pointing to"},{"start":"2:02","end":"2:06","text":"so we've done that, we've copied one byte and we increment both pointers"},{"start":"2:06","end":"2:11","text":"and then we go back around the loop so we're going to keep writing bytes until we get to the null byte"},{"start":"2:11","end":"2:13","text":"is my function finished?"},{"start":"2:13","end":"2:15","text":"no, what's wrong with it?"},{"start":"2:15","end":"2:22","text":"yes thank you, yes we forgot to copy the null byte"},{"start":"2:22","end":"2:27","text":"so this function is broken it forgot to copy the null byte"},{"start":"2:27","end":"2:32","text":"but it might work if you test it if you happen to test it with memory that is already zero"},{"start":"2:32","end":"2:35","text":"and you think aha I finished my mp"},{"start":"2:35","end":"2:38","text":"right, no your code is broken"},{"start":"2:38","end":"2:41","text":"because is forgot to terminate the C string"},{"start":"2:41","end":"2:47","text":"and then some future function would start reading this and it wouldn't come across a null byte because there would be garbage after it"},{"start":"2:47","end":"2:50","text":"and it would start printing random characters"},{"start":"2:50","end":"2:55","text":"until it eventually got to a null byte"},{"start":"2:55","end":"2:59","text":"of course if it didn't get to a null byte maybe other bad things would happen"},{"start":"2:59","end":"3:00","text":"anyways so let's fix this"},{"start":"3:00","end":"3:04","text":"we needed one more line to say after the while loop "},{"start":"3:04","end":"3:11","text":"the src should be a null byte which I could write like this"},{"start":"3:11","end":"3:24","text":"okay here's another example of a classic C error which is when you've got two pointers you're probably using the wrong one"},{"start":"3:24","end":"3:32","text":"okay so make sure that we change the very last byte at the end to be a zero byte"},{"start":"3:32","end":"3:34","text":"so we terminate it"},{"start":"3:34","end":"3:39","text":"we could have also fixed this by using a do while loop instead of a while loop"},{"start":"3:39","end":"3:45","text":"so we would have only done the check at the very end"},{"start":"3:45","end":"3:47","text":"we would have copied at least one byte"},{"start":"3:47","end":"3:50","text":"alright so that was my string copy"},{"start":"3:50","end":"3:52","text":"how about something that actually duplicates strings"},{"start":"3:52","end":"4:05","text":"right so we want something that takes a character to some memory and we are going to make a new memory object"},{"start":"4:05","end":"4:10","text":"and we're going to copy the contents of the original into our new piece of memory"},{"start":"4:10","end":"4:19","text":"right so how do I get some new memory? easy I remember what I said ten minutes ago and say malloc"},{"start":"4:19","end":"4:32","text":"so I've got malloc I've got the right size I copy.. whoops wait a moment I've got two pointers am I using them in the wrong direction?"},{"start":"4:32","end":"4:34","text":"if in doubt, yes I probably am right?"},{"start":"4:34","end":"4:38","text":"how do we check? easy go back to the manpage alright"},{"start":"4:38","end":"4:53","text":"man let's try strcpy and BSD kindly calls them s1 and s2"},{"start":"4:53","end":"4:57","text":"okay copies a string from s2 into s1"},{"start":"4:57","end":"4:59","text":"yes we managed to do it the wrong way round"},{"start":"4:59","end":"5:06","text":"what we should have done is swap these around"},{"start":"5:06","end":"5:11","text":"by the way is this text large enough to see at the back?"},{"start":"5:11","end":"5:13","text":"can you give me a thumbs up if it is?"},{"start":"5:13","end":"5:16","text":"alright so most of you"},{"start":"5:16","end":"5:21","text":"alright I'm assuming the people who didn't are going to sit close to forward in the future"},{"start":"5:21","end":"5:23","text":"but seriously let me know if it's not"},{"start":"5:23","end":"5:33","text":"okay right is our code finished? okay we run it and it doesn't work, it might crash"},{"start":"5:33","end":"5:40","text":"here's one problem, what's the size of src? what will this give us?"},{"start":"5:40","end":"5:46","text":"one, we've managed to allocate enough space for one byte"},{"start":"5:46","end":"5:50","text":"and then we try to write into that one byte"},{"start":"5:50","end":"5:55","text":"okay that's fine if our string is very short, just one byte long"},{"start":"5:55","end":"5:59","text":"not so fine if our src strings were longer"},{"start":"5:59","end":"6:02","text":"so we shouldn't have done this right?"},{"start":"6:02","end":"6:07","text":"what we wanted to know was the number of characters at the src"},{"start":"6:07","end":"6:09","text":"so how can we do that?"},{"start":"6:09","end":"6:13","text":"call strlen of src"},{"start":"6:13","end":"6:22","text":"so now we test it and it almost works but it still crashes"},{"start":"6:22","end":"6:28","text":"here's the issue, strlen tells us about the number of characters excluding the null byte at the end"},{"start":"6:28","end":"6:31","text":"look C is trying to help you give off by one errors"},{"start":"6:31","end":"6:36","text":"what a polite language, if it's not my fault it's your fault"},{"start":"6:36","end":"6:40","text":"alright look we only need to add one to that"},{"start":"6:40","end":"6:42","text":"let's just even huh? who came up with this"},{"start":"6:42","end":"6:49","text":"alright so when you write a language don't do this"},{"start":"6:49","end":"6:55","text":"make your strlen actually say how many characters, how many bytes it actually took"},{"start":"6:55","end":"7:04","text":"okay so we've got now we're calling malloc and we copy from the src "},{"start":"7:04","end":"7:10","text":"so this should be p, this should be from the src into our memory and finally we return p"},{"start":"7:10","end":"7:13","text":"is it okay to turn p because look p is an automatic variable"},{"start":"7:13","end":"7:14","text":"it's a local variable"},{"start":"7:14","end":"7:19","text":"is that a problem? no because we are not returning a pointer to p itself"},{"start":"7:19","end":"7:20","text":"we are running the contents of p"},{"start":"7:20","end":"7:29","text":"and p is just looking at this memory that we've malloc'd and that memory that we've malloc'd will exist until we free it "},{"start":"7:29","end":"7:39","text":"now malloc itself returns a void pointer and if we wished we could cast that changes type into a character pointer"},{"start":"7:39","end":"7:40","text":"in practice you don't need to"},{"start":"7:40","end":"7:51","text":"that if you have a void pointer it's okay, it's allowed to cast it implicitly to a different type"}]
var captions = transcriptions.map(function (transcription) {
  var startTime = timeStringToNum(transcription.start);
  var endTime = timeStringToNum(transcription.end);
  var width = Math.max(endTime - startTime, 1) * 64;
  return {
    text: transcription.text,
    width: width
  }
});

console.log(JSON.stringify(captions))

/*
  Converts a time string to a time integer
*/
function timeStringToNum(timeString) {
  var minutes = parseInt(timeString.split(":")[0], 10);
  var seconds = parseInt(timeString.split(":")[1], 10);
  return 60 * minutes + seconds;
}