// // Data structure that holds captions for the videos
// var videoCaptions = [
//   [{"text":"Yershova: Hello.","width":7697},{"text":"Welcome to CS 225.","width":718},{"text":"My name is Anna Yershova.","width":434},{"text":"I'm gonna be teaching this class, and I'd like to start with some introduction for our staff.","width":1528},{"text":"You can find all of us on our web page, which is our course web page, and under the directory for staff you'll see all of our pictures, and you can get contact information as well.","width":1521},{"text":"So, I have been teaching in CS department since 2010, and I took a short break for two years to California to work as a research scientist at Oculus VR, and then I don't know what it was...","width":1391},{"text":"about Illinois.","width":46},{"text":"The cornfield, probably...","width":66},{"text":"I didn't know.","width":49},{"text":"And all the lovely weather.","width":162},{"text":"But I came back, and I'm here teaching.","width":192},{"text":"So I teach CS 225 every spring and virtual reality class every fall.","width":359},{"text":"But, there're so many of you, this is just one third of the class, there's two third in ECE building, so I'm not gonna do alone, we have a fantastic staff to help us managing this class.","width":1050},{"text":"So, I wanna start with Cinda.","width":166},{"text":"I wanna introduce Cinda to you.","width":197},{"text":"She's the star instructor in our department, and she'll be co-lecturer for our class.","width":494},{"text":"Heeren: Hi, I'm Cinda.","width":240},{"text":"I have been teaching here for a decade, CS 225 not quite that long, but longer than you need me to report, and...","width":734},{"text":"let's see what else do they wanna know...","width":151},{"text":"Oh, I was a graduate student here.","width":185},{"text":"Somebody asks me recently what my favorite course was at University at Illinois and my major reaction of course is...","width":568},{"text":"(CS 225) Right, right?","width":186},{"text":"Except no, cuz I forgot I was a student here too, so actually the time it was CS 350 which was automata for graduate students.","width":622},{"text":"So, I also like the algorithms class a lot which is now CS 374, so...","width":417},{"text":"you know...","width":23},{"text":"this is my favorite class!","width":182},{"text":"Forgot!","width":70},{"text":"And then of course going along with that is a warning: if you move here, it's very easy to just sort of get swallowed by this place.","width":686},{"text":"So, yea, get out while you can when you have the chance, but then again life is good here so I don't know.","width":605}],
//   [{"text":"But you know she's in the room, and you wanna ask her your favourite question.","width":310},{"text":"So how would you proceed?","width":105},{"text":"What you think you should do to find her in this room, without knowing how she looks like?","width":381},{"text":"Any ideas?","width":142},{"text":"Yo.","width":45},{"text":"OK, Yo.","width":25},{"text":"What about you to use microphone would that be better?","width":222},{"text":"Ok.Because we can scale up the same problem, you can imagine that the same problem from a couple of hundred of students, we can scale up to a couple of thousand of people in the stadium, and the problem could be stated in the same way.","width":921},{"text":"How to find Cinda over there.","width":84},{"text":"So probability you would want to find a microphone or megaphone and yell her name.","width":394},{"text":"Right?","width":52},{"text":"Fine.","width":41},{"text":"Very good solution.","width":107},{"text":"It assumed something about the data, and the way, or infostructure, in which you can add a few data.","width":467},{"text":"Having a microphone means that you have the access to all of the instances in your data set, in which case database represents people.","width":538},{"text":"So the info structure allows you to access to all of them simultaneously, very efficiently.","width":499},{"text":"You will not always have that info structure.","width":176},{"text":"Right, I can turn off the microphone, and that instance is gone, right?","width":423},{"text":"So do you have a plan B, do you have a second strategy?","width":207},{"text":"How would you find her without a microphone?","width":188},{"text":"Ask every student in the stadium.","width":246},{"text":"Ok, let's do that.","width":77},{"text":"That's a good strategy.","width":56},{"text":"Are you Cinda?","width":62},{"text":"I'm not.","width":33},{"text":"No?","width":4},{"text":"No.","width":2},{"text":"No?","width":17},{"text":"Uh, not.","width":101},{"text":"Is this fast?","width":131},{"text":"No.","width":8},{"text":"No, right?","width":36},{"text":"It's gonna take a long time because I would have to ask every single one of you.","width":297},{"text":"So this is called the Brute-force strategy.","width":134},{"text":"We will use those.","width":71},{"text":"We will have some brute-force algorithm, we will have to just go one by one to each data to complete the search.","width":507},{"text":"But it's not efficient if you have a large dataset.","width":217},{"text":"So can we optimise in a way?","width":211},{"text":"Ask people whether they know where Cinda is.","width":534},{"text":"That's an interesting one.","width":91},{"text":"Do you know where Cinda is?","width":60},{"text":"Yeah.","width":64},{"text":"Yeah!","width":25},{"text":"Oh- wah.","width":63},{"text":"It may or may not shorten your search.","width":294},{"text":"Which is kinda related to some kind of hash algorithms that jump from one reference to another maybe or link list hash.Yes.","width":610},{"text":"Very good, we will cover similar problem in class, for some of the test and one of the data structures.","width":453},{"text":"What if nobody knows where Cinda is?","width":197},{"text":"They don't know how she looks like and you end up with Brute-force right?","width":288},{"text":"Any other way to speed up the search?","width":85},{"text":"Ask the person at the top of each roll.","width":449},{"text":"So I'm gonna go through the aisle and ask to propagate along the rolls.","width":294},{"text":"Is that your idea?","width":207},{"text":"Yeah.","width":73},{"text":"OK.","width":70},{"text":"So it assumes that I have arranged my data.","width":348},{"text":"So I created some kind of organisational data.","width":184},{"text":"I don't spend much time on this but you know whoever build this room, edit it.","width":339},{"text":"So it's kinda investment.","width":100},{"text":"You will see that a lot that by organising your data, you put in some time to do it, but it will be a good trade-off with future searches, right?","width":586},{"text":"It shows trade-off for time and efficiency in your search.","width":379},{"text":"Good.","width":46},{"text":"What if I ask you: You're not Cinda right?","width":409},{"text":"Raise your hand if you are Cinda.","width":352},{"text":"Ok.","width":41},{"text":"It's a very good hash, for this small room right?There is no Cinda in ECE Building as well.","width":482},{"text":"It's also something to think about, how good is your identifier for your data.","width":380},{"text":"Would it narrow down on to only one person or a large group that you would have to further do some kind of search on.","width":552},{"text":"So I'm going to do the following strategy.","width":171},{"text":"I'm going to ask you if you are Cinda and then ask you to ask the same question to all of your neighbours.","width":447},{"text":"And then, you will ask them to then propagate this information, and search.","width":451},{"text":"What would that look like?","width":93},{"text":"How do you make sure that everyone is absolutely right?","width":623},{"text":"Maybe I do want to, maybe I don't care.","width":165},{"text":"Maybe they can propagate back or I just ask them to only ask people who were not asked or didn't ask you before right?","width":446},{"text":"So we have to think about the algorithm in detail there a little bit.","width":447},{"text":"Anyway.","width":34},{"text":"Imagine you asked your neighbours whether they are Cinda and ask them to ask further, and they raise their hands during this time.","width":454},{"text":"How would the search look like?","width":185}],
//   [{"text":"This propagation of the- yeah?","width":122},{"text":"Student: Will it be exponential?","width":151},{"text":"It will be exponential in each round and it will propagate like a wave, right?","width":455},{"text":"Some kind of wave form.","width":48},{"text":"So here we go.","width":62},{"text":"So it will- you'll see um...","width":163},{"text":"you'll see instances of different kind of data structures or data organizations in this class and different kinds of ways of searching over them or performing some kind of other task and that's why this class is called data structures.","width":873},{"text":"So I'm- I just had a slide about ways of searching for data in a data structure and this is an example of an organization.","width":616},{"text":"So another metaphor for our class you might not want to invest time to organize the data.","width":424},{"text":"So now there is a chance for me to find out a little bit about you and the question will be a little too personal.","width":389},{"text":"Uh, please raise your hand if your closet looks like this one on the left.","width":317},{"text":"Sorry.","width":32},{"text":"If you don't mind sharing um...","width":168},{"text":"okay...","width":18},{"text":"cool.","width":49},{"text":"I mean not exactly maybe more like, right?","width":168},{"text":"Um, please raise your hand if your closet looks more like the one on the bottom right.","width":462},{"text":"It's half and half.","width":100},{"text":"In my household I have people across the board like both kinds of people.","width":464},{"text":"Uh okay.","width":176},{"text":"Student: Which type of closet do you have?","width":207},{"text":"That's too personal.","width":92},{"text":"I'm more like that and this is my husband okay I'm sorry.","width":334},{"text":"I'm sharing too much.","width":103},{"text":"Okay um, so then I have a question then to those of you who raised your hand, uh, and said that your closet looks more like this and I'm asking you a question.","width":678},{"text":"Wouldn't it be difficult for you to find something, say, you're favorite pink, uh, short-sleeved shirt?","width":587},{"text":"Would it be difficult for you or would you argue that for you its as easy as finding it in a well organized closet?","width":497},{"text":"Please raise your hand if you think its easy to find it in your closet.","width":277},{"text":"Yeah that's what my husband would argue \"that it's not difficult I know the organization.\" The thing is even though it doesn't seem like there was any, um, any time put into organization into this closet there is a data structure, it's just implicit.","width":1053},{"text":"It's hidden in the owner's head, right?","width":152},{"text":"So you have that organization of that closet in your head and and you can access the items pretty fast.","width":347},{"text":"The problem is its not shared with others.","width":150},{"text":"If you were to ask....","width":106},{"text":"if you were on vacation and you were to ask your mom to find your shirt, probably she would have difficulty.","width":371},{"text":"She would prefer if your closet was organized like this, right?","width":298},{"text":"Does that make sense?","width":59},{"text":"There is always, uh, ways to optimize the search.","width":329},{"text":"Optimization helps, it just, or data structure organization helps and, uh, sometimes even though its not apparent it may still be there.","width":619},{"text":"Also, this slide kind of demonstrates the programming style.","width":280},{"text":"If you're programs look like that, it doesn't mean they aren't efficient, its just that it will be hard to share them in a collaboration.","width":539},{"text":"They may still work fine.","width":145},{"text":"Okay, so this is what the class is about.","width":267},{"text":"Now I want to talk a little bit about what to expect from it.","width":303},{"text":"So this is a difficult class.","width":96},{"text":"It is a lot of work.","width":101},{"text":"Um, we will have labs released every week due on every Sunday.","width":506},{"text":"We will have MP's due every other week, so every two weeks there will be a machine problem assignment and there will be three exams.","width":561},{"text":"So another metaphor for this class that...","width":305},{"text":"um, just a second....","width":202},{"text":"that you might feel like the course is really, really tall waves and you're a surfer and you have to, your job is to survive and stay on top of it, okay?","width":1052},{"text":"So its not unheard of that this class takes about 20 hours a week of work and if you're not doing well around the third week and you're not spending 20 hours a week, thats probably the reason why.","width":882},{"text":"So I would recommend, especially if its not easy for you, to spend those hours because from our staff members who took the class and so many other student who successfully finished this class I've heard thats how long it takes each week.","width":1068},{"text":"So, expect to have the time investment to succeed in it.","width":387},{"text":"But its a fundamental class.","width":101},{"text":"Its very fun and its very important for your career in the future.","width":366},{"text":"Uh, now also I wanna kind of warn you about how this class will progress through the next month.","width":403},{"text":"Um so, we will start...","width":237},{"text":"we will get to data structures later.","width":203},{"text":"Probably after the first month.","width":162},{"text":"In the first month we will study the language with which we will communicate with the computer to store the data and data structures.","width":422},{"text":"Our language will be C++.","width":87},{"text":"Uh, please raise your hand if you took CS125 as the prerequisite", "width":356}],
//   [{"text":"Okay, and please your hand if you took ECE 220, as a prerequisite.","width":461},{"text":"A minority here in this room it's always the case, it's ECE 220.","width":327},{"text":"Um, which means that in this room we have about 70% of computer scientists, who probably are very familiar with objects.","width":527},{"text":"And, uh, classes.","width":75},{"text":"And, you might feel like in the course of the next month, you'll feel bored when I cover that.","width":400},{"text":"Because C++ allows you to use classes, an uh, you'll be familiar with that, um, with that subject.","width":497},{"text":"Those of you who took C class, and it's about um, 30% here, uh you'll be familiar with pointers and how to manage memory, um and uh, this part of the next month will be familiar to you and you might feel bored, bored as well, so that's okay, because since there's so many from both, I'll have to assume that you know neither Java nor C, and I'll have to bring all of us to the same ground, okay so that's okay to feel a little bored for once, once in a while, it's just important that if you do get distracted, don't miss the point at which I do contents which is something that you don't know, okay?","width":2651},{"text":"So that's, that's important, because there will be something that, you don't know, because unless you took both of them.","width":350},{"text":"Then you have to wait until the data structures part.","width":330},{"text":"Okay, any questions about this?","width":280},{"text":"So, um, I wanna start our lecture today, so I'm done with introductions, every lecture um, throughout the semester will start with the announcements, which will show the status of the current assignments.","width":900},{"text":"And you do have three assignments released today.","width":229},{"text":"Um, so the first one is Homework zero.","width":284},{"text":"If you go to the course website, you'll see it under MPs, and uh, it will be due on Monday in class, and due on Monday on SVN.","width":822},{"text":"So in class means that you have to bring a hard copy of it, in class.","width":612},{"text":"And on SVN means that you will have to submit it electronically, uh, electronically.","width":663},{"text":"Uh, so you have to also submit an electronic version through SVN, and there's the guide, you can go through the Homework 0 specifications and you'll see the guidelines for doing so.","width":752},{"text":"But you have to submit both.","width":110},{"text":"So we provide on the Homework 0 webpage we provide two files, PDF file and TeX file, so if you prefer you can print out a PDF file, do handwritten solutions, bring them to me in class, but then you'll have to scan them to upload them electronically, or you can edit on top of TeX file and then electronically submit your produced PDF file, but you have to print it out still and bring a hard copy to me in class, okay?","width":1788},{"text":"So any questions about this?","width":131},{"text":"Uh, Homework 0 is an easy homework if you have taken CS 173, okay?","width":615},{"text":"Discrete math, prerequisite.","width":144},{"text":"Otherwise if you're struggling with this again it's something that it may difficult for you to continue with the class.","width":475},{"text":"Um, we have also released the first lab, it's gonna be due on Sunday, however we will not grade it for credit, okay?","width":633},{"text":"It's just an exercise for you to, on how to use SVN.","width":324},{"text":"Because we will be communicating through SVN a lot, that's the way we'll be exchanging files throughout the semester, so it's important to learn it, including Homework 0, so want you to go through this process and we'll guide you the process in lab section.","width":926},{"text":"So if you have your lab section the first one will be tonight, go there even though the lab is not graded we still take attendance and you are graded for attendance to uh labs.","width":811},{"text":"So go there and then it will be very easy for both Homework 0 lab and MP1, and future MPs and labs, okay?","width":704},{"text":"So that's lab_intro, also MP1 is available, it's due on next Tuesday midnight.","width":423},{"text":"Tuesdays will be when our MPs are due for the first part of the semester, then it will switch to Thursdays.","width":510},{"text":"So the three assignments, they're easy, so don't expect MPs, all of the MPs be this easy, but there a lot already, so you can see how the class is starting pace up.","width":684},{"text":"If you have any kind of questions, general questions or assignment questions, the best way to reach out to us is to post questions on Piazza, that's why we have so many assistants to help answering Piazza posts.","width":1085},{"text":"Also there will be office hours which are already available, uh you can see which TAs and CAs are available um, on our webpage, we have schedule posted.","width":753},{"text":"So this is for general questions.","width":235},{"text":"Any questions at this point?","width":179},{"text":"And we'll get, we'll start with C++.","width":223},{"text":"Yeah?","width":396},{"text":"This one is very easy, because essentially MP1 is very similar to lab_intro, it familiarizes you with SVN.","width":629}],
//   [{"text":"...in the future.","width":100},{"text":"Okay?","width":15},{"text":"So it doesn't mean that I'm going to use it now, that's why the value is still garbage.","width":326},{"text":"So if I want to assign the value, if I want to use this variable now, I will use variable definition.","width":459},{"text":"And how do I write it?","width":130},{"text":"Probably a lot of you know.","width":172},{"text":"If I want to assign a value to myFavoInt, what do I write?","width":423},{"text":"I'll just assign a value.","width":80},{"text":"My favorite value, say 27.","width":179},{"text":"myFavoInt will get my favorite value 27.","width":200},{"text":"So that is a definition of a variable and when I say definition we assign value or give a value.","width":625},{"text":"Give a value...","width":227},{"text":"to variable.","width":74},{"text":"Okay?","width":13},{"text":"So that's super easy.","width":147},{"text":"This is super easy and a little boring but I want to go through the syntax because for more complex types, an integer is not an interesting type variable type but for a more interesting variable type, the syntax will look very similar.","width":916},{"text":"Okay, but so far as I said, this type that I will be discussing first are called primitive types.","width":363},{"text":"They are provided to you by C++ system.","width":164},{"text":"You can google for all the possible primitive types provided to you by C++, but I will just go over a couple of them.","width":589},{"text":"Okay so very similar line, syntactically what is it?","width":273},{"text":"Is it a declaration or a definition of a variable?","width":218},{"text":"And what's it's name, type, value, and location of that variable?","width":247},{"text":"The definition or declaration?","width":163},{"text":"It's both!","width":61},{"text":"What's the name of the variable?","width":160},{"text":"Rating.","width":57},{"text":"Type?","width":144},{"text":"Character.","width":40},{"text":"So the name is rating, the type is character, the value is 'E' and not garbage anymore because we assigned it, we defined the variable simultaneously with declaring it.","width":940},{"text":"And what's it location?","width":146},{"text":"Provided by the system so we again have all four of these defined for this variable.","width":412},{"text":"Similarly I declared and defined the variable u of type double with a value 37.","width":661},{"text":"In the next slide.","width":167},{"text":"So this is an example of declarations and definitions of primitive type.","width":303},{"text":"That is boring.","width":69},{"text":"So the most interesting part of C++ is that you can create other kinds of types and do a lot of things with those and those are called user defined types, which we call classes in C++.","width":786},{"text":"Okay?","width":132},{"text":"So a class, a class will allow for more complex and interesting types that we can use.","width":543},{"text":"But the syntax is very similar, so if you look at this next line you probably can guess what's the name, type, value and location of that variable.","width":752},{"text":"And is it a declaration or definition of the variable?","width":225},{"text":"So what's the name of it?","width":121},{"text":"My favorite sphere.","width":75},{"text":"Whats it's type?","width":143},{"text":"Yep.","width":57},{"text":"So the type is sphere.","width":77},{"text":"What's the location?","width":186},{"text":"Provided by the system.","width":126},{"text":"And what's the value?","width":147},{"text":"So far garbage.","width":130},{"text":"Okay so pretty good?","width":129},{"text":"I use this line and assume that this type has been defined.","width":469},{"text":"If I didn't personally define that type, the compiler will complain about this program.","width":467},{"text":"If the program that I wrote contains this line but doesn't actually have the definition of the class sphere, then my program most likely will not compile.","width":691},{"text":"So you can only use variables of some type once you created them.","width":266},{"text":"And the rest of the lecture today and for the next week couple lectures, we will be going through ways of defining user defined types.","width":667},{"text":"Different ways of defining classes.But before we start with that, I want to define formally what a class is.","width":473},{"text":"So class in C++ is a group of variables and functions.","width":1082},{"text":"And why do we need to have class with this definition?","width":252},{"text":"Classes with this definition.","width":116},{"text":"Oh because you want to do something with instances for this class.","width":246},{"text":"So if I have my favorite sphere of type sphere, I might want to work with this sphere and do something with them.","width":444},{"text":"Just like with type integer of primitive type integer.","width":195},{"text":"I might want to add integers, divide integers, or subtract integers.","width":304},{"text":"I may want to do something with spheres.","width":133},{"text":"So all the instances of type sphere I may want to change the color of the sphere or change the transparency or merge them in some way.","width":517},{"text":"Right?","width":11},{"text":"So I want to have some kind of functionality associated with this type.","width":334},{"text":"So functions they actually represent, they represent the functionality of instances for this class or also what can you do with it, right?","width":1362}],
//   [{"text":"And what do variables represent in the user-defined class type?","width":446},{"text":"Yeah?","width":9},{"text":"Some kind of properties, right?","width":246},{"text":"Some kind of values or data that is associated with it, and we'll go through examples, so this is kind of representation associated with the object, or, um, data associated with it.","width":1239},{"text":"Because this, types are gonna be complex, so not like with primitive types where the value is just integer, there may be more information that we want to store in that, for each of the instances of this user-defined type.","width":981},{"text":"Ok, so I'm gonna go and write my first function with the first user-defined type, called sphere.","width":642},{"text":"So I'm gonna switch and please ignore this for a while, but I'm gonna create a program a file, called program.cpp, in which I'm going to, let's see, so let me remove everything that I have so I have a clean directory.","width":1043},{"text":"I'm going to create a file program.cpp and I'm gonna edit it.","width":465},{"text":"Let's see, is this font good for the last row?","width":363},{"text":"Let me try to increase it and then you tell me stop if it's enough.","width":318},{"text":"I think 24 was so is this better?","width":267},{"text":"Do you see it well?","width":161},{"text":"Ok, cool.","width":27},{"text":"So I'm gonna start writing my first class, and I will start with using a keyword class.","width":571},{"text":"Which tells the compiler that I'm gonna start definition of the class with the name, whatever follows the keyword, which is I'll write sphere.","width":672},{"text":"So my class will have name sphere, and then I will put curly braces, which will indicate the properties of the sphere.","width":795},{"text":"So within these curly braces is where I will put my variable and functions associated with this class.","width":552},{"text":"But we're not gonna write yet, so my class is gonna be super simple at this point.","width":354},{"text":"It's just a class with nothing associated with it.","width":199},{"text":"And I'm gonna put a semi-colon here.","width":146},{"text":"Could you please ask me why I put a semicolon there.","width":198},{"text":"Or answer it, maybe.","width":73},{"text":"Maybe you know.","width":48},{"text":"Do you know why I put a semicolon there?","width":389},{"text":"What is a semicolon in C++?","width":285},{"text":"Delimiter, right?","width":84},{"text":"So it says stop, my comment has just ended.","width":241},{"text":"So why do I need it there?","width":218},{"text":"Anybody knows?","width":96},{"text":"Yeah?","width":191},{"text":"So what if I didn't put a semicolon.","width":115},{"text":"What would happen?","width":76},{"text":"Why does it have to have it there?","width":232},{"text":"So I could put myfavoriteSphere here.","width":292},{"text":"So I could have define my type together with declaring a variable of that type, and the compiler wouldn't know.","width":468},{"text":"If you omit this semicolon, it would be waiting for that name of the variable name in declaration, okay?","width":597},{"text":"So you have to put semicolon to say no there will be no declaration at this point, it's just a class itself.","width":385},{"text":"Okay, fine.","width":89},{"text":"So I have my first class, and according to the slides, to compile it we'll have to call my compiler that I have on this machine, and in the EWS computers, you'll have clang compiler.","width":978},{"text":"So the syntax will be slightly different, you'll have to put clang++ there.","width":214},{"text":"And then the name of the program that I want to compile.","width":209},{"text":"And my question to you is is this gonna compile or not?","width":388},{"text":"Why not?","width":186},{"text":"Right, so it complains.","width":109},{"text":"Usually when it compiles, no error messages, or no messages come up.","width":452},{"text":"No complaining is coming out.","width":81},{"text":"And there's a complaint in here, no executable was created and the purpose of compilation, so let me go back to my slide, the purpose of compilation is to first, when I run g++ on my program, it first checks for syntactic correctness, and second creates an executable.","width":1297},{"text":"So if it didn't create an executable and had some kind of error messages, that means there's either syntactic problems, or something else went wrong with the executable.","width":811},{"text":"So I have a question to you.","width":66},{"text":"Why do they get error messages?","width":154},{"text":"What do you think is wrong, and I heard the answer.","width":169},{"text":"There's no main function.","width":100},{"text":"So, ", "width":179}],
//   [{"text":"[Answering student questions] I'm sorry, I have to start.","width":1628},{"text":"Volume controls...","width":464},{"text":"Okay.","width":52},{"text":"Oh, is it too loud?","width":80},{"text":"Is it okay?","width":131},{"text":"Everybody hears me?","width":114},{"text":"Better?","width":58},{"text":"Too loud?","width":82},{"text":"Good?","width":114},{"text":"Okay.","width":80},{"text":"So let's start.","width":140},{"text":"I want to start with some announcements.","width":112},{"text":"Oh.","width":36},{"text":"Okay, nevermind, I somehow lost my...","width":389},{"text":"Okay.","width":98},{"text":"I want to start with the first announcement which is the opportunity to compete in a software competition called ECE PULSE tomorrow.","width":685},{"text":"One of our TAs is an organizer for this so he shared this poster with me to share it with you, and he said that he would announce more details via Piazza.","width":727},{"text":"So if you are interested, go to the webpage of the event or wait for a Piazza post.","width":487},{"text":"This is an opportunity for some kind of hackathon to participate in.","width":437},{"text":"Okay.","width":70},{"text":"Now some announcements about the class.","width":151},{"text":"First of all, our webpage is up, and all of our assignments that need to be completed, they are there.","width":738},{"text":"Okay, so they are released and you have all of the information and guidelines to complete them.","width":378},{"text":"If you have any questions about the assignments, your first place to go is Piazza.","width":414},{"text":"So this is a to-go place.","width":169},{"text":"Second one is, unfortunately I didn't do it in the last lecture, but the second one is office hours.","width":542},{"text":"So how many of you have met our TAs already live?","width":380},{"text":"Did you do Chara queue?","width":254},{"text":"How did you find them?","width":140},{"text":"In the lab?","width":40},{"text":"Okay okay.","width":58},{"text":"How many of you went to the office hours, because we have office hours running already.","width":373},{"text":"You've done it?","width":57},{"text":"Did you use Chara queue?","width":126},{"text":"So all of you have to go to our website for information, or simply go to Chara and there is information about this webserver which hosts queue for meeting office hours and information for how to use it.","width":1214},{"text":"Okay, if you need questions, go to Piazza post a question, or go to Chara, register yourself, and meet a TA live for a question about assignments.","width":615},{"text":"Does that make sense?","width":109},{"text":"Okay.","width":137},{"text":"Piazza is number one, Chara is number two.","width":211},{"text":"Now assignments that are out are Homework Zero, MP1 and lab_intro.","width":377},{"text":"MP1 and lab_intro, you'll need to have SVN access to submit it, so if you're not registered you will not have that but it's okay.","width":672},{"text":"It's okay because lab_intro is not for credit anyway.","width":289},{"text":"It's just for an exercise of how to use SVN, and MP1 contributes to very very tiny fraction of the final grade.","width":586},{"text":"so for those of you who are not registered, this is not a big loss, and I will talk about opportunities for registration in a bit.","width":663},{"text":"Homework Zero, though, I want to talk about it a little more.","width":227},{"text":"Homework Zero, you do have to submit it via SVN for our record.","width":262},{"text":"If you are not registered, just make sure that you bring hardcopy, because that's what's actually gonna be graded: the hardcopy of your submission.","width":607},{"text":"So bring it in lecture here, and we'll have a separate pile for unregistered students.","width":476},{"text":"And if you are unregistered make sure that you put your UIN on your submission.","width":518},{"text":"If you don't there will be no way for us to know who you are, and then you will lose an opportunity to get enrolled, so if you don't submit your homework submit your homework with your UIN, then it's almost guaranteed that we will not provide you an additional resource of registering for the class.","width":1178},{"text":"Does that make sense?","width":135},{"text":"But if you just do submit it, then we are trying to work in such a way so that up to 50 seats will be overridden for you.","width":713},{"text":"Okay?","width":12},{"text":"So you will get an override, if you submit it with the UIN.","width":183},{"text":"Okay, so what's the purpose of Homework Zero?","width":248},{"text":"Homework Zero is an exercise mostly for you, not for us, so see whether this class is for you.","width":668},{"text":"It will cover some subjects that you already should know from the Discrete Math class that we'll just assume that you know, so it's important that you know them for this class.","width":787},{"text":"We do not put any constraints on how you should work on it, so you can work in groups, you can go on Piazza, and find teammates for your Homework Zero submission.","width":688},{"text":"So you can work in a group with people, you can Google for terms, you can use your textbook for Discrete Math.","width":446},{"text":"However, if you have to Google for every single term in the homework, this class is probably not for you, so that's kind of more an indication whether it will be easy for you later on or not.","width":886},{"text":"Okay?","width":12},{"text":"So any questions about that?","width":322}],
//   [{"text":"Print it out, yeah.","width":154},{"text":"Print it out and bring it here, we'll have [gibberish] to submit them according to your lab sections.","width":319},{"text":"By then registered students can also submit them, the hard copy.","width":357},{"text":"Yeah?","width":227},{"text":"I didn't hear you at all.","width":229},{"text":"Solution to the homework.","width":184},{"text":"Oh, we will return graded homework probably in a week.","width":435},{"text":"We'll give back the hard copy.","width":239},{"text":"We will give them back to you in each of your lab sections.","width":413},{"text":"And by a chance you miss it, then you'll still can, you'll be able to come to my office and pick them up, so I'll have the leftovers.","width":535},{"text":"Okay.","width":18},{"text":"So you'll have your hard copy of your homework back.","width":209},{"text":"Hopefully in a week.","width":200},{"text":"No digital solutions.","width":289},{"text":"Okay.","width":65},{"text":"Any questions?","width":213},{"text":"Okay, fine.","width":45},{"text":"Let's start working on our C++ program.","width":273},{"text":"So I gonna go to the terminal.","width":109},{"text":"But I want to make sure you guys work on your slides.","width":348},{"text":"The point to this, my goal today is to mirror everything that I do in the emacs or in terminal here.","width":600},{"text":"So you will be able to write on your slides.","width":282},{"text":"So I'm gonna go to my emacs program.","width":527},{"text":"And this is a very very simple program that I wrote which you don't see.","width":593},{"text":"That's funny.","width":101},{"text":"OK, this is really strange.","width":267},{"text":"Do you see [gibberish] on that screen?","width":276},{"text":"Because even this one is cut on the left or this one is cut on the left.","width":358},{"text":"I think I prefer that one.","width":151},{"text":"Do you all see...","width":61},{"text":"If you have any problem seeing please let me know.","width":167},{"text":"And we'll try to work on this one, but this one..","width":128},{"text":"It has this problem that if I move too much to the left it just disappears.","width":304},{"text":"You know, it's a very advanced technology here.","width":255},{"text":"Okay.","width":56},{"text":"So this is a very simple program, we'll start to making...","width":282},{"text":"trying to make our main function do something useful.","width":278},{"text":"And I'm gonna just write one line and let me ask you what it does.","width":382},{"text":"And whether you see something unusual or strange that you want to talk about.","width":619},{"text":"So what do you think my main program does now?","width":256},{"text":"Print to screen.","width":59},{"text":"Is it gonna compile?","width":166},{"text":"No, why not?","width":207},{"text":"What is 'cout'?","width":26},{"text":"It's not..","width":63},{"text":"if it's a variable or function that is not defined.","width":238},{"text":"So you [gibberish], define it somehow, and the thing it's a function that is defined in the standard library.","width":475},{"text":"So I better include the files that contain this function and this function, it sounds that it's gonna print something out in the screen, right?","width":850},{"text":"Okay, so the library that contains that function is called 'iostream'.","width":502},{"text":"But I'm gonna say...","width":184},{"text":"to include it I'm goona say hash sign, include, iostream, okay?","width":865},{"text":"And I know that this is a standard library because of the brackets.","width":389},{"text":"Sometimes I will put it in quotes, and that would mean that it's not necessay standard library, could be some local library that I use.","width":558},{"text":"And also know that iostream is something relating to input/outpur stream.","width":386},{"text":"So you'd probably has a bunch of functions for printing stuff out.","width":308},{"text":"However, since iostream is a standard library, so it's a collection of files that are commonly used in many programs.","width":532},{"text":"It has many different classes defined there.","width":204},{"text":"It has vectors, it has queues.","width":176},{"text":"So a lot of things could have the same function for printing things out.","width":344},{"text":"So how do I know that cout really refers this cout, really refers to printing out all the string itself?","width":629},{"text":"Yeah, we have to say it's a standard class.","width":265},{"text":"That is we have to write down that this cout function should be found within iostream library within standard class definition, okay?","width":748},{"text":"So double semicolon indicates it's a scope resolution operator and it tells the compiler where to look for the function cout.","width":820},{"text":"What is end line ('endl')?","width":158},{"text":"What is it?","width":27},{"text":"Is it defining...","width":108},{"text":"It's an [gibberish] character.","width":131},{"text":"I didn't define it in my program.","width":100},{"text":"So it's also included in the same [gibberish] library.","width":282},{"text":"And we have to use the same scope resolution operator to indicate in which part to [gibberish] in library it store in std.","width":582},{"text":"Okay?","width":15},{"text":"Any questions about this?","width":123},{"text":"Will it compile now, you think?","width":421}],
//   [{"text":"Yeah.","width":117},{"text":"Yeah, it will.","width":79},{"text":"So let's do this, it will because I do have a well defined class, it's just not an interesting class at all.","width":462},{"text":"So I'm gonna compile it and run it, and it's the same thing.","width":232},{"text":"However, I don't have anything interesting in it.","width":163},{"text":"So, my next call is to define members of the class Sphere.","width":414},{"text":"So each class has two fields associated with it.","width":269},{"text":"One is called \"public\" and another is called \"private\".","width":386},{"text":"And the reason it has, C++ allows for these two fields is again encapsulation.","width":464},{"text":"It controls who- which other functions can access members of class Sphere.","width":581},{"text":"Okay?","width":30},{"text":"And if you don't put public and private, by default, all of the members will be private.","width":447},{"text":"But I wanna be more specific here, okay.","width":248},{"text":"So we will go to my lecture slides now.","width":236},{"text":"Where are we?","width":43},{"text":"We're here, right?","width":204},{"text":"We have the main function.","width":175},{"text":"We just declared -[gibberish]- I just declared a variable of type Sphere, and now it's a design moment.","width":783},{"text":"And I know that there will be two fields that are associated with the class.","width":448},{"text":"One is public and one is private.","width":136},{"text":"And um, here is a design moment.","width":200},{"text":"What do we want this class to do?","width":245},{"text":"What do we want the clients, that is the main function, the client program, to do with objects or instances of type Sphere.","width":661},{"text":"So, let's talk about a little about these fields.","width":214},{"text":"As I said, public and private is one of the methods of implementing encapsulation.","width":384},{"text":"Which means that everything in \"public\", the client code can access and use.","width":564},{"text":"And the client code will not be able to access and use anything in \"private field\", okay?","width":513},{"text":"Which means that this is not allowed.","width":116},{"text":"This which gives us an opportunity to define something about Sphere such as say Radius, something that represents Sphere in the private field.","width":1040},{"text":"So that's what I'm gonna write.","width":84},{"text":"I'm gonna say that my sphere representation, I'm gonna differentiate objects of sphere by their radius, so the sphere representation is gonna be radius.","width":896},{"text":"And I'm going to put it in private.","width":1001},{"text":"Okay.","width":124},{"text":"Which means that the client code cannot see radius directly, cannot change it directly but my public members will be able to access it.","width":683},{"text":"Okay, so that's how the control is manipulated through the public and private fields.","width":446},{"text":"Okay, so now we have a data associated with the class, but let's see what we can do, what the client might want to do with Spheres.","width":509},{"text":"What kind of things might we want to do with spheres.","width":220},{"text":"I just declared one, which means I created an instance of one, right?","width":278},{"text":"What else might I wanna do?","width":73},{"text":"I know that it's defined by a radius yeah, getRadius, which means I might want to extract and get some information about the um, about the class.","width":760},{"text":"Okay, so I'll put a number 2, and number 3, and I'm going to say that some sphere functionality might be \"getting information out of it\".","width":989}],
//   [{"text":"So there are two more includes, and, that's exactly the difference between this slide and the next slide, okay?","width":544},{"text":"The next slide shows exactly how those three files are organized.","width":224},{"text":"So just a couple of more includes with sphere.h, and separation to three files, yeah?","width":978},{"text":"No.","width":60},{"text":"There is a way applied for the compiler to not contain an executable, but to contain an object file.","width":439},{"text":"So, the process of compiling one file, or many files like this is described in the Makefile tutorial that some of you maybe went through in your first lab, or maybe you didn't but you were definitely referred to the tutorial.","width":1064},{"text":"And the compilation process is described very clearly there.","width":250},{"text":"In fact it was created by one of our staff members, it's a really good tutorial.","width":243},{"text":"And it shows you how to compile different files into the same executable so, this default can be compiled into the same executable which will do exactly the same thing as my original program .cpp would, Okay?","width":949},{"text":"But then you'll just have to use certain flags to tell the compiler how to combine all of these into one.","width":394},{"text":"However, into one executable.","width":172},{"text":"However, by dividing them into the three files, let me get back to that point, you're dividing the code into two different entities.","width":766},{"text":"The first two, sphere.h and sphere.cpp, is the implementing side so it could be created by, say you are working for a company or a start up, and you're providing the product.","width":781},{"text":"You'll be writing sphere.h and sphere.cpp.","width":142},{"text":"That is you implement some class with some functionalities, sphere.h will be interface to it.","width":542},{"text":"You'll be able to show the code for sphere.h to the client, but you'll hide implementation details.","width":706},{"text":"So the client, you never share of the code of cpp files, okay?","width":278},{"text":"So this is a very useful property.","width":179},{"text":"So you show them what your class can do, but never show the secrets, right?","width":393},{"text":"Within the company itself, you can distribute who does what.","width":333},{"text":"So sphere.h could be written by one person and it could be manager, who knows exactly the clients needs, so what can write down what this function-- what this class has to do.","width":843},{"text":"While the implementer, say software engineer on this side, can write implementation independently.","width":631},{"text":"But, he or she has to follow the guidelines provided by the interface class, interface file sphere.h, okay?","width":623},{"text":"So again, it's a way to make, to make it possible to write this code in a more collaborative way, but also it's a way to protect the implementation details and never give away the code for this to the client.","width":1135},{"text":"And then the client, the client code can be written by whoever will be using the program provided by your company, and it can be written by a completely independent person, and your classes can be used just by looking at what are functionalities that are provided in .h file.","width":1168},{"text":"Does that make sense?","width":106},{"text":"Yeah?","width":102},{"text":"So you precompile Makefile tutorial and we'll go about, we'll talk about encapsulation a little more in detail later.","width":865},{"text":"Um, and the way, what does it really mean that you have these three files?","width":320},{"text":"Nevertheless, you precompile your sphere.h and sphere.cpp into an object, that is not quite an executable but it's an object that provides machine code for all implementations, but you never give the code itself.","width":909},{"text":"So it's really neat.","width":100},{"text":"You give the .h file declarations and machine code with implementation, and then taking those two, the client can then compile main.cpp.","width":753},{"text":"Makefile tutorial definitely do that, it'll also explain the process.","width":218},{"text":"And then if you, when you do it by Monday we can talk about this incident further.","width":395},{"text":"Okay?","width":17},{"text":"So that's one way, another way is to actually not put implementations outside of the clause definition but put whatever's inside of these curly brackets right here.","width":1413},{"text":"Oh that's set radius, sorry.","width":235},{"text":"Right here in-- right here.","width":425}],
//   [{"text":"and right here.","width":193},{"text":"does that make sense.","width":60},{"text":"You just put your function definitions together with your function declarations and if there is nothing you want to protect just go ahead and do it.","width":971},{"text":"Some of the libraries are very lite libraries that have about 8 files with all the implementations and declarations are lumped in together.","width":654},{"text":"Does that make sense.","width":331},{"text":"So, any questions about this.","width":283},{"text":"[gibberish] You can specify exactly what you do in the makefile.","width":1395},{"text":"We just give you some examples and that is it.","width":217},{"text":"So now i am going to go to my file.","width":243},{"text":"And i want to introduce a couple situations here maybe introduce some bugs and ask you what is going to happen and how to prevent it.","width":1120},{"text":"I already said that this will not compile because it is a private variable so we have to set radius use setRadius public function to set the radius of this sphere.","width":1905},{"text":"What if i remove this line all together and i dont set the radius at all.","width":637},{"text":"Would it compile?","width":213},{"text":"Yes?","width":298},{"text":"So let me see.","width":68},{"text":"It compiles.","width":215},{"text":"What does it compile.","width":146},{"text":"A lot of exam questions will be does it compile and if it does what will be the result of the execution.","width":514},{"text":"So it does compile now we know.","width":133},{"text":"What will be the result of the execution?","width":115},{"text":"What do you think?","width":130},{"text":"Garbage.","width":44},{"text":"Garbage is correct.","width":186},{"text":"Lets run it.","width":61},{"text":"So why is that.","width":232},{"text":"So our default constructor doesn't set the radius at all.","width":379},{"text":"which means that whatever is in that space allocated by this class.","width":214},{"text":"And dont worry about memory allocation we haven't really talked about it yet.","width":218},{"text":"Nevertheless, the object is created the instance is created and the whatever was there in the radius, we didn't assign it so that means its garbage.","width":725},{"text":"So i dont like it thats why it is better explicitly to either write a better constructor that is not so default.","width":592},{"text":"that will set up a better default value than garbage.","width":238},{"text":"Or we use set radius to say 10.","width":366},{"text":"But then i have this question what if i, as i said i have this definition outside the class and maybe i assigned someone else to write those definitions and maybe whoever was writing getDiameter was distracted or i dont know what the reason but they actually reassigned the value of radius here to 100.","width":2087},{"text":"Is this legal would this compile.","width":115},{"text":"So it is definitly maybe not even malicious mistake but some kind of incompetence happened right.","width":349},{"text":"So the question is how would you control for this.","width":319},{"text":"And lets start with whether this would compile.","width":264},{"text":"Yeah, what will be the result of the execution.","width":654}],
//   [{"text":"What would be the output?","width":266},{"text":"200?","width":64},{"text":"Fine, now how would you control for that?","width":197},{"text":"So I am the manager I can set up function signature here.","width":425},{"text":"This part of the function is called function signature so exactly what is the name of the function, what's the output and what's the input.","width":843},{"text":"So I can set it up and hand off the rest to the implementor but maybe i can control the way the function should work.","width":508},{"text":"The function signature, do you know what that is?","width":169},{"text":"Out of something you might have seen in the lab already.","width":216},{"text":"const right?","width":144},{"text":"If I say const here, that is an indication that this function must promise not to change any of the private variables.","width":928},{"text":"Okay?","width":74},{"text":"So if I write the function declaration with const there, then whatever Im inputting into the function declaration should follow the same function signature.","width":794},{"text":"Otherwise, it will not compile.","width":188},{"text":"The compiler will be confused.","width":117},{"text":"The implementation of the function does not correspond to any of the functions I declared.","width":442},{"text":"Okay?","width":80},{"text":"because this one may change the private variable but in declaration it promised not to.","width":953},{"text":"Sorry, sorry, So the class variable cannot be changed, I am sorry.","width":603},{"text":"All of the variables.","width":55},{"text":"It means that it will not change the classes so it will stay the same.","width":275},{"text":"Okay the question is will it compile this way?","width":308},{"text":"No?","width":95},{"text":"Am I out of time?","width":149},{"text":"Okay, I am out of time, so the answer is they have to match and they will not compile so this function will not be able to change the radius and I can control for malicious or inconfident behavior, okay?","width":1535},{"text":"So we will start with that next time.","width":13561}],
//   [{"text":"and return getDiameter returns two times the radius.","width":547},{"text":"Okay, so that was our class function number function in quotations and then and then we also learn how to initialize a variable of types here and we knew that a default constructor would be called upon this declaration so that we know what this line does.","width":1546},{"text":"But let me just overview certain things because we need to write down definitions exactly mm, explicitly last time.","width":518},{"text":"So what is this double colon mean here?","width":225},{"text":"what is it called, this operator, what is it called?","width":346},{"text":"It's called scope resolution operator and what it does- what does it do?","width":668},{"text":"You remember?","width":67},{"text":"It glues what to what?","width":263},{"text":"It glu- glues that function getDiameter to class sphere, not to class circle, not to class basketball, not to class basketball field, or anything that might use spheres, but particularly this function to this class.","width":953},{"text":"Okay fine, so what is this keyword const meant here?","width":290},{"text":"Just to review what we did.","width":262},{"text":"Yeah?","width":9},{"text":"I pinky promise that this function will not change member data.","width":610},{"text":"Member variables.","width":145},{"text":"So will not change class data.","width":516},{"text":"Okay in this position, const means this.","width":160},{"text":"In other positions, and we'll learn how to use keyword const in various positions, in class sign- in function signatures but we would be jumping ahead if we discussed it now.","width":734},{"text":"But in that position, it means that.","width":137},{"text":"Yeah.","width":326},{"text":"Yes.","width":34},{"text":"Yes.","width":37},{"text":"Neither.","width":27},{"text":"Any- so the question was, does it apply to public or private?","width":283},{"text":"To both.","width":64},{"text":"N- there will be no class data, neither public or private or other access fields that we will discuss later as well, so no class data whatsoever will be changed.","width":908},{"text":"Uhm, okay which brings me next, so what do this public and private fields indicate?","width":573},{"text":"They indicate regions in the class definition which can be accessed via other pieces of the code.","width":684},{"text":"Right?","width":41},{"text":"So private, private field indicates all of the data members- variables, and functions cannot be accessed from the client.","width":1046},{"text":"And public is something that can be accessed from the private.","width":253},{"text":"and we will talk about it in a little bit more detail in a bit.","width":364},{"text":"Okay.","width":48},{"text":"So now I want to talk about this line.","width":222},{"text":"So let's- let's go in depth here.","width":170},{"text":"As I said, if we had, and we- I think we ran this func- this program last time- if I declare s of type sphere, and try to print out the diameter of that sphere, the output would be garbage.","width":1215},{"text":"Because a default constructor is called upon this line.","width":327},{"text":"So if I did not write any constructor and I didn't in my class definition so far, I don't have any constructors, a default system provided constructor will be called, and that will not assign anything to anything.","width":841},{"text":"So it's an empty [gape?].","width":121},{"text":"Okay, so this is a chance, this is an opportunity for us to take control of how we initialize member data.","width":487},{"text":"Okay?","width":53},{"text":"So instead of me relying on system provided constructor, we can actually implement our own, and we should.","width":456},{"text":"Most of the time.","width":110},{"text":"And the way I'm going to do this, I'm gonna specify first the constructor declaration and this will be a default, no argument constructor, okay one that we can write, and um, take control or put the values- initialize variables to something predictable, but maybe maybe I want to initialize another instance of class sphere called t, with a preset radius say 2.5.","width":2615}],
//   [{"text":"are parenthesis required for the second constructor?","width":319},{"text":"yea.","width":2},{"text":"You have to have the implementation so it has to have the function body.","width":317},{"text":"Its in the interface where you don't put parenthesis.","width":316},{"text":"Its either or.","width":138},{"text":"Its an alternative to make implementation slightly more efficient.","width":636},{"text":"So now i want to be able to also initialize or declare a variable of type t, lets say of two point five radius.","width":1448},{"text":"So what would be the constructor that matches that constructor signature?","width":382},{"text":"The third one, right.","width":103},{"text":"So let's implement and I'm going to implement it in the following way.","width":308},{"text":"I'm going to say theRadius should be assigned to whatever is the integer parameter that is r.","width":622},{"text":"And here I should have some questions from you.","width":319},{"text":"Why didn't I do it in the initialization line?","width":312},{"text":"Right, that's a valid question, right?","width":636},{"text":"So the answer is that I could.","width":255},{"text":"The correct answer is I could have done it through the initialization line.","width":216},{"text":"Let me show you how but you may still not always want to.","width":219},{"text":"The idea is that you can put a lot of stuff including even optimizing slightly this function using initialization line.","width":797},{"text":"Instead of writing this, which ultimately in this particular example I will not want to do but just for the purpose of an example of what can be done with the initialization line, I could have put theRadius and assign r to it because initialization values could be variables, not only constants, not only one point zero, the color red.","width":1749},{"text":"It could be variable r.","width":213},{"text":"It could be even r+1.","width":150},{"text":"So you can put even some kind of operator in there but in this particular case, I may not want to do that.","width":696},{"text":"Or let's put it even more carefully.","width":186},{"text":"I may not want to do that for the purpose being careful.","width":357},{"text":"Do you have kind of an intuition as to why I would not want to do it on the initialization line?","width":582},{"text":"Some kind of safety check, right.","width":126},{"text":"Or maybe some other things that you may want to do, some other statements you want to do before assigning the value.","width":586},{"text":"So in fact you can input a {something} operator in there and check for negative or positive.","width":349},{"text":"So that is not even a good example but just for the sake of the argument, sometimes you just don't want to put initialization in the initialization line because you want to do some steps first and in this example I could have asked, or checked, what if radius is positive, then I assign the value of radius to that argument else I assign the default value one.","width":2698},{"text":"Does this make sense?","width":189},{"text":"So you might want to do certain steps in the function body before assign your value.","width":432},{"text":"But still initialization line would work like that, without the safety check.","width":281},{"text":"Does that make sense?","width":60},{"text":"Any questions?","width":382},{"text":"Okay.","width":99},{"text":"So lets summarize what we have learned about constructors.","width":476},{"text":"So first of all, the first point is that even without any of the implementation of the constructors, we could have initialized a variable to type Sphere because system provides a default Null argument constructor.","width":1866},{"text":"The system always provides one.","width":368}],
//   [{"text":"So here's the catch The system always provides one, so what if I say, \"Fine, I like the default, no-argument constructor provided by the system, so I'm not gonna implement my own no-argument constructor, but I just want to use this one.","width":1260},{"text":"I just want to implement this one.","width":133},{"text":"And I'm gonna run exactly this code.\" Yea?","width":557},{"text":"No, because there's a catch.","width":86},{"text":"It's okay, yea?","width":55},{"text":"Yes, the first one will not exist anymore.","width":408},{"text":"So there's a rule, just a rule of C++ that if you implement any constructor, then the system provides none.","width":824},{"text":"So if you implement any constructor, then the system no longer provides any.","width":725},{"text":"So the system provides none.","width":524},{"text":"Which means that what would be the result of compiling and execution of this code compilation error.","width":676},{"text":"Not execution, compilation.","width":90},{"text":"At the compiler level, that default, system-provided no-argument constructor would no longer exist because I have written one.","width":702},{"text":"And then the third point is just a matter of semantics, English semantics.","width":328},{"text":"So, you cannot just say \"Oh, I'm gonna cal constructor here\", or \"Oh, I'll make this function call a constructor.\" It's not for you to call the constructor or for you to decide to call the constructor.","width":793},{"text":"It's for the system to call it when it finds appropriate.","width":214},{"text":"So, you just cannot say \"I'm gonna do that.","width":123},{"text":"I'm gonna call the constructor.","width":99},{"text":"We don't say that.","width":91},{"text":"So, instead we say that constructors, constructors, I guess a constructor, so constructors are for the system to call when it finds appropriate.","width":1447},{"text":"And one of the examples when the system will invoke a constructor will be upon a variable declaration, but there will be other examples that you will learn later in the class.","width":965},{"text":"Ok?","width":12},{"text":"So, any questions from you, for me?","width":491},{"text":"I have a question what if I have written here 'sphere s()'?","width":522},{"text":"Is that legal?","width":446},{"text":"Just a catch, okay?","width":79},{"text":"I think you'll have lab_debug next and there will be lots of catches like this you'll have to debug and find.","width":487},{"text":"So, is that valid?","width":66},{"text":"How do we want to interpret it and how would compiler interpret it?","width":433},{"text":"It's valid?","width":130},{"text":"So what does it say?","width":180},{"text":"Yea, we have everything.","width":231},{"text":"So assume that you have all sorts of things here, so I have implemented these guys, we can assume, you can assume anything.","width":659},{"text":"I just want to ask you How do you think It's gonna be interpreted?","width":260},{"text":"Is that a variable s of type sphere, or is it something else?","width":612},{"text":"It could be there.","width":293},{"text":"So, okay, let me put it another way.","width":170},{"text":"Would a constructor be called on this line?","width":355},{"text":"So, we want to interpret it as if it's a variable s, initialized with type sphere, and this is just to indicate that the constructor should have no arguments, right?","width":819},{"text":"So no, this is not gonna be interpreted like that, because there is another way to interpret it as a declaration of a function with the name s, with the return type sphere, with no arguments.","width":1023},{"text":"So there is really this, there is ambiguity, really serious ambiguity.","width":483},{"text":"So this would be okay if you wanted to declare that function s, but it's not okay to call a no-argument constructor with that, okay?","width":591},{"text":"So, never no-argument constructor will be called upon this.","width":384},{"text":"Does that make sense?","width":100},{"text":"So, just like a catch question.","width":316}],
//   [{"text":"Okay.","width":282},{"text":"So this will be interpreted this is a declaration of function with name \"s\" and return type Sphere.","width":1069},{"text":"And that's the only way the compiler's gonna interpret that, okay?","width":297},{"text":"Okay, let's move on.","width":150},{"text":"So now I want to summarize what we have learned about mechanisms of encapsulation.","width":441},{"text":"So let me just describe and annotate these blocks.","width":365},{"text":"So the blue block is going to be the function interface of the class interface, so I'm not even going to write sphere, I'm just going to say whatever that class is, it's going to be .h for that class, that is its interface of the class and that's where we put all of the class definitions.","width":1226},{"text":"And this block will denote .cpp, the implementation of the member functions of the class.","width":686},{"text":"And these little blocks here will be the clients.","width":266},{"text":"So one of our clients that we have implemented was-- we have implemented just one, main.cpp, a very simple client, but there could be more complex animations of spheres, basketball court will lots of balls running around or flying around.","width":1064},{"text":"So there could be many different clients using our class, sphere.h and sphere.cpp.","width":528},{"text":"So what are the mechanisms for providing encapsulation that is limiting access to certain portions of the class or providing restrictions, what are two mechanisms?","width":927},{"text":"Well the first one was public and private fields in the class interface.","width":920},{"text":"So this public and private fields, they're called access types.","width":276},{"text":"So they define access types.","width":358},{"text":"And they describe which parts of another code can access or use certain members of the class.","width":722},{"text":"So I'm going to draw it in the following way.","width":250},{"text":"If I have a public field here, and a private here, then I'm going to denote who can access those members by a hand.","width":796},{"text":"See, the client can access public variables and functions, right?","width":526},{"text":"So it's okay to grab them and use them.","width":200},{"text":"We get diameter was one of them, or setRadius.","width":213},{"text":"But the client cannot access private members of the class.","width":674},{"text":"Okay?","width":34},{"text":"So this is one of the mechanisms of encapsulation, the client will not be to use those, which is really helpful.","width":749},{"text":"So they will be restricted for use, while the implementation of the class can access both.","width":656},{"text":"Right?","width":114},{"text":"Okay, so that's one mechanism.","width":203},{"text":"It may be useful.","width":138},{"text":"It provides you some mechanisms for safety of your class.","width":255},{"text":"Another mechanism is what can and cannot be seen by the client.","width":504},{"text":"Okay?","width":59},{"text":"So this is accessing, but another is even seeing what's there.","width":464},{"text":"So the interface of the class provides information about what the class can do.","width":687},{"text":"So this is what the class can do.","width":601}],
//   [{"text":"And, implementation provides information and how it's done.","width":293},{"text":"So that's going to be useful.","width":181},{"text":"Here is a couple of a steps of second mechanism for encapsulation which is called separate compilation of objects.","width":1274},{"text":"So this is the low its not that difficult it just may be a little confusing at this point.","width":511},{"text":"So if you ran through the makefile tutorial you probably know that the first step for compiling these three files into one executable is to compile.","width":864},{"text":"So first step is to compile .cpp of the object plus .h of the object into one .cpp fille.","width":714},{"text":"This is the first step.","width":101},{"text":".cpp and .h file into one object file.","width":250},{"text":"That's the first step.","width":269},{"text":"That's fine.","width":63},{"text":"So we compile it into object file.","width":156},{"text":"So the second step is to compile main.cpp plus class interface into another object for main.","width":1059},{"text":"So main object so at this point you can see that in order for main to compile it has to see the interface.","width":919},{"text":"In order for the implementation of the class to compile, it has to see the interface.","width":444},{"text":"So this eyes.","width":102},{"text":"However, there is an impenetrable wall between the class implementation and the client code.","width":642},{"text":"That is there is no way that client code can see the implementation of the class.","width":343},{"text":"and this is done through the two separate compilation of the objects.","width":379},{"text":"in order for main to compile it only needs to have .h included.","width":299},{"text":"it doesnt see the implementation.","width":138},{"text":"in order for the implementation of the class to compile.","width":201},{"text":"it only needs to see .h it doesn't need main for that.","width":225},{"text":"which means that first of all it provides protection of implementation of the class which could be intellectual property information.","width":601},{"text":"also when you write your client code, you should never assume that you know how things are implemented.","width":411},{"text":"you should only know what is implementation and in what interface and thats it.","width":280},{"text":"so thats also kind of a programmer's style of writing client code.","width":384},{"text":"and there is always a third link to create an executable.","width":216},{"text":"so in order to create an executable you need to link that of the class plus main.o for two objects and there will be an executable file.","width":891},{"text":"and im going to do it now in code but do you have questions about this concept.","width":515},{"text":"about two mechanisms for encapsulation.","width":170},{"text":"*question asked* all it needs is function signatures to compile into the object.","width":702},{"text":"so the compiler just needs to validify and call this function with this input parameters and will return this.","width":474},{"text":"does main seem proper syntactically?","width":186},{"text":"yes.","width":32},{"text":"fine.","width":20},{"text":"so all it needs is what sphere can do.","width":269},{"text":"not how exactly it assigns space.","width":273},{"text":"*question asked* step three it depends on.","width":511},{"text":"so the makefile tutorial sometimes it matters in which order you link them.","width":309},{"text":"in this case it does.","width":110},{"text":"okay so so lets see i want to just finish off the second point that separate completion of objects hides class implementation.","width":1545}],
//   [{"text":"Okay?","width":111},{"text":"So one mechanism provides no access to chron and another one doesnt provide the possibility to see the code.","width":790},{"text":"So I have my three functions, I have my sphere.cpp that has to include sphere.h.","width":522},{"text":"Remember in order to compile it has to have .h included and you have your code in the next slide all of it.","width":603},{"text":"I have my .sphere .sphere.h which is a class interface and you cannot see all of it so it is getting back.","width":578},{"text":"And this is my main function and it has to include sphere.h.","width":249},{"text":"So thats what is indicated here in order for sphere.cpp to compile i have to have this file included and in order for main to compile I have to .h included and im going to do what ive said.","width":1094},{"text":"So i have my three files there.","width":237},{"text":"In order to compile sphere.cpp, I have it with my c which means dont create an excecutable just create machine code so it can do without an excecutable yet.","width":851},{"text":"Does this suppy to the same group.","width":262},{"text":"yeah i think so but just check its been a while.","width":261},{"text":"I believe so.","width":181},{"text":"Okay so we do this, and this should create an object for sphere.","width":494},{"text":"Lets see if i start a new file i got a new file .o.","width":316},{"text":"Okay so the next step is g++ c main.cpp and is in mainline c this include means that sphere.h is like a text file.","width":748},{"text":"we dont really compile sphere.h its inlined with both sphere.cpp and main and thats what makes compilation possible.","width":626},{"text":"Okay so lets create an object for main.","width":193},{"text":"Lets see if we have main.o yes we got it and now we are going to compile them both together.","width":412},{"text":"and link them together into an executable.","width":538},{"text":"And lets see if we have an executable.","width":133},{"text":"And what should it do?","width":79},{"text":"Okay.","width":18},{"text":"Im going to run my code.","width":137},{"text":"What does my code do?","width":173},{"text":"I declare sphere, I do not have any constructors so which means a system will provide a default so if i run a executable file its going to be grabage Okay?","width":1063},{"text":"so we got it.","width":101},{"text":"Any questions about this?","width":184},{"text":"so in this case we use both of the methods of encapsulation not that we needed to protect anything in this simple class but.","width":510},{"text":"So, Okay.","width":464},{"text":"So if you dont have any questions about that we can jump into memory because this is a very difficult topic.","width":518},{"text":"Its, there will be alot of interesting questions in the exam concerning pictures.","width":508},{"text":"And therefore since we will be working towards pointers we have to understands a little bit about how the memory is laid out and used by C++ and this is not the class where we are going to go into details at all because we have other courses about what is exactly the purpose of ram and how it is laid out but we will, it will suffice for our class to use the following analogy.","width":1590},{"text":"So if this is a RAM chip right here, this is do you see what this is.","width":703},{"text":"Satellite view of a neighborhood right?","width":169},{"text":"so some kind of satellite map and why we use this matter for describing how memory is laid out or because every entity on this map has an address by which we can access it the same it is for memory for every entity in RAM has an address associated it by which we can access it we or the system.","width":1703},{"text":"So there are different ways by which the system uses it or allows access to those addresses so there is some neighborhoods and there will be four types of different address types so some addresses will have a barb wire fence around them because the system will not let any process to use that it only uses that for by itself and what can be stored there.","width":2331},{"text":"What do you think?","width":82},{"text":"an example of something so sensitive that you dont want your program to access those address.","width":595},{"text":"System code.","width":69},{"text":"what about your program's source code.","width":229},{"text":"You probably will the system will never allow to overwrite your own programs code while it is executing so something like that some source codes of various things so this is never allowed to be accessed.","width":1097},{"text":"Now there is another very special part of memory.","width":317},{"text":"Which has an address 0, which we call do you know what that is.","width":393},{"text":"It is called null.","width":400}],
//   [{"text":"So that's a very special address that has nothing in it, so the system will never let you access the value stored at that address because there is vacuum there.","width":909},{"text":"There's nothing.","width":120},{"text":"So it's a very useful thing, which you will use quite a bit.","width":312},{"text":"Because it's a controlled way of accessing something that is not allowed, so we will use that later.","width":635},{"text":"Now there are two very special parts which we will be use to be able to access in the code through the code that we will write in C++.","width":677},{"text":"First one is called the stack.","width":354},{"text":"And that's a very nice piece of memory addresses because it is very low-maintenance, so it's called non-persistence memory as well because the system will provide for some addresses f you ask for them on the stack and once you stop using them the system will clean them out.","width":1873},{"text":"So the garbage man here is the system.","width":287},{"text":"So system cleans it.","width":806},{"text":"Okay.","width":85},{"text":"That's very useful, its very low-maintenance and very easy to use.","width":287},{"text":"There is another, much bigger portion of the memory that will be allowed for us to be accessible or we will have programmatic access.","width":953},{"text":"All programs will be allowed to access it and its called the heap and its an example of persistent memory.","width":775},{"text":"Which means that it persists.","width":166},{"text":"That means if you don't clean it up it will stay there.","width":241},{"text":"So is much more difficult comparatively to maintain it.","width":412},{"text":"So you have to clean it up by yourself,, if you ask the system to provide some address and you build stuff there, if you leave it there it will clutter up your heap, So you really have to clean the heap up yourself okay.","width":1020},{"text":"So the garbageman here is you and it is very important to know how to clean it up or you may run out of memory if you're not careful, okay.","width":752},{"text":"So persistent because it persists until you interfere and clean it up, non-persistent means low-maintenance:the system will clean it up, so very good.I think that do you have any questions?","width":1164},{"text":"I will start with pointers next time.","width":529},{"text":"You can ask in program to initialize your variable on stack or on heap and we will tell you how to declare those variables to ask for those particular pieces of memory, next time.","width":1273},{"text":"Yeah, so there will be explicit mechanisms for calling for heap or stack memory", "width":1049}],
//   [{"text":"Okay, let's start.","width":6145},{"text":"You can grab some.","width":1204},{"text":"Okay, so let's start, we're almost done here.","width":225},{"text":"Some announcements.","width":96},{"text":"I expect that your hard copy of homework is in one of these envelopes.","width":321},{"text":"And if not, then just hurry up and submit it under the door of my office because um...","width":575},{"text":"But there is a little bit of playing with fire because once I give them away to graders then that's it.","width":329},{"text":"So I really hope that they're all here.","width":222},{"text":"If you're not registered, I sure hope you put your UIN, otherwise you will not get a link from us for overriding.","width":630},{"text":"And there's a big, big chance we'll be able to get all of you because it's a small size of unregistered students.","width":559},{"text":"Smaller than one-hundred, which we'll be able to accommodate, so that's really good news for all of you who are not registered yet.","width":488},{"text":"Now, because we'll have so many students coming in who were not registered yet, we didn't want to give them an extension for MP1.","width":547},{"text":"And it's our tradition, even though it's not written policy, that at this day, we usually announce that, \"Hey, MP1 deadline is extended.\" Okay, we have done that for years.","width":776},{"text":"So here we go, MP1 deadline is extended for all of you.","width":320},{"text":"For those of you who have submitted it and have a great score, that's fine.","width":583},{"text":"For those of you who submitted it and are not happy with your score, there is a chance for you for a regrade.","width":428},{"text":"We'll run the regrade on the second of February.","width":236},{"text":"But, here's the catch.","width":559},{"text":"There's also MP2 out.","width":168},{"text":"So, second machine set, problem set is out.","width":312},{"text":"And its deadline, its main deadline to get full score for it, which counts towards two percent of the final total grade, the MP2 full deadline is ninth of February.","width":1049},{"text":"However, if you work fast and complete half of it, and it's all offline in the specs for it.","width":521},{"text":"If you complete the first part of MP2, we call it extra credit.","width":387},{"text":"You get an additional one percent.","width":140},{"text":"So the total score you can get for MP2 is three percent of the total final score.","width":664}],
//   [{"text":"This Means that there is a choice for you.","width":272},{"text":"Finish and fix your MP1, in case there is a problem.","width":255},{"text":"That's for what?","width":172},{"text":"Half a percent, okay so that's one half a percent of the final grade, or work towards the three percent.","width":771},{"text":"Okay so thats kind of a choice because the extra credit deadline is due on next Tuesday as well.","width":430},{"text":"Okay.","width":139},{"text":"any Questions about this.","width":223},{"text":"Also we have released another lab and its due as every other lab, every lab is due on Sunday.","width":463},{"text":"You have a chance to work, was it ah in your lab sections this week.","width":358},{"text":"So here are the new assignments.","width":209},{"text":"Ah, MP2 is considerably harder than MP1 so.","width":366},{"text":"So the work you know all starts only accelerating at this point.","width":325},{"text":"Any questions?","width":144},{"text":"And we will start with a new topic.","width":255},{"text":"So the new topic is very exciting, we are going to be talking about how variables are stored in different ways of storing.","width":502},{"text":"Variables in memory of C++.","width":135},{"text":"So ah let me ah start with a simple example, so imagine that Im writing something in my main function.","width":584},{"text":"Using C++ and Im going to declare a variable x of type integer.","width":571},{"text":"SO I want to know how C++ will interpret the integer as well as what is going to happen with the memory.","width":663},{"text":"So the system will look at this sequence and go \"Oh okay you want to declaring and intend to use variable x so I'm going to give you space for that in memory and since you say your memories name is and that variable has a name a very important property\" the system will give you a piece on the stack.","width":1671},{"text":"The stack will store, stores variable with names.","width":665},{"text":"Wow this is this might sound scary like, Oh my God there will be variable without names?\" and yeah we will have to deal with that, that will not be stack anymore.","width":875},{"text":"The stack is very simple, everything has a name and the memory will give you the memory and the name.","width":415},{"text":"So it will give you the memory and clean it up as needed.","width":216},{"text":"You don't have to worry about many things that you will have to worry about when variables don't have names.","width":439},{"text":"But thats for later.","width":133},{"text":"Okay so this says, okay is that what you need?","width":132},{"text":"Ill give you a chunk of memory, with some address say a40 of variable x of type integer I will allocate the chunk exactly the size that that type needs, however many bits that is.","width":1294},{"text":"and since you didn't give me a specific value, that value will be whatever was at that place before\" Right?","width":525},{"text":"we call it garbage.","width":126},{"text":"Okay so our problem at declaration is that our values stored is garbage.","width":294},{"text":"Fine, so after this assignment statement the system also says, \"Thats great I know exactly what you need, Ill have to put the value five into the x's location.\" Our value for that variable.","width":1019},{"text":"That simple.","width":151},{"text":"Now ah the same process happens with user defined variables not just primitive types, that user defined types.","width":531},{"text":"So if I were to declare a variable of type sphere the system would say, \"Okay I know exactly what you want.","width":615},{"text":"Ill allocate a memory chunk on the stack, um say at address a50 for a variable with the name s of type sphere.","width":796},{"text":"And Ill do whatever the statement tells me about the value of this variable\" Whats going to be the value of that variable upon declaration?","width":761},{"text":"We already know whats going to happen upon the declaration of user defined types.","width":315},{"text":"What is called?","width":81},{"text":"The system calls a constructor.","width":204},{"text":"It could be default, provided by the system or an argument constructor we have written for that class.","width":492},{"text":"So a constructor is invoked here.","width":212},{"text":"It depends which one on other, on something else.","width":342},{"text":"That a constructor is called there and it initializes the values.","width":381},{"text":"S is could be nothing and then there are garbage values.","width":183},{"text":"Or a member data, of that it could be radius, and other um arguments associated with the sphere.","width":557},{"text":"So it could be garbage, it could be default values.","width":220},{"text":"Fine, so it's all good.","width":96},{"text":"Thats how memory is handled on the stack and given to variables.","width":425},{"text":"So today, today we'll care about one more thing that can be stored inside of the stack memory.","width":549},{"text":"Let me give you the syntax for it.","width":218},{"text":"So we'll say, \"Well Im going to declare something of integer pointer.","width":399},{"text":"And it is a variable of name p, with the name p.","width":310},{"text":"And lets see...", "width":129}],
//   [{"text":"What the system will do, will do, after seeing this statement.","width":414},{"text":"So what's happening here?","width":164},{"text":"um.","width":57},{"text":"and the system will say well, \"its kind of very similar, uh, you ask me to initialize a variable with the name p, so i'll give you the address for that.","width":711},{"text":"it may be a60 and the type of the thing you'll want to store or the type of this variable is integer pointer.","width":803},{"text":"or integer asterisk.\" Which means that the intent is that this variable has a strange type, called integer pointer, that is, that means that the value of this variable should be an address of a variable of type integer.","width":1417},{"text":"so we will, we want to store here, so uh let me write it down, p's value is memory address of type integer.","width":1519},{"text":"Okay.","width":112},{"text":"So that is the intention, so we want to store variables whose values are not just types that we considered before but pointers to those types, that is, the values are/at memory addresses themselves.","width":962},{"text":"okay?","width":10},{"text":"okay so tell me please what values can be stored here associated here with this type and we have only one among all of the variables initialized on the stack here, what would that be?","width":990},{"text":"[you know all answers, someone else say, oh, oh, sorry sorry, because you know, huh] NULL would be good but that's jumping ahead.","width":787},{"text":"good, hold onto that, so among the variables that we have, which one of the addresses would correspond to the type of p, yeah, a40, so we somehow want to put a40 in here, okay, want to put a40 in here, the question is how?","width":1322},{"text":"thats a good question, so we want to initialize p to a40.","width":296},{"text":"but how would we do that we don't have syntax for or mechanism for doing that yet.","width":319},{"text":"That's going to be on the next slide.","width":110},{"text":"but that's the intention, right?","width":135},{"text":"and the picture will be something like, well my variable p is a pointer type, that is, its value indicates a location where an integer is stored.","width":934},{"text":"So it points to an integer variable.","width":208},{"text":"makes sense?","width":52},{"text":"okay.","width":20},{"text":"so thats cool lets look through the way of initializing pointers so I'm gonna look at my first block here.","width":747},{"text":"and see if this declaration corresponds to my picture here.","width":491},{"text":"Do they?","width":17},{"text":"So lets go line by line integer x declares a stack variable with some location the system will give us and value upon this declaration the value of x will be garbage.","width":1432},{"text":"but we have 5 here.","width":70},{"text":"so something does not compute, right?","width":123},{"text":"so we have to say, we have to insert another statement x equals 5 then 5 will be right there.","width":557},{"text":"and then the next statement will declare p of type integer pointer.","width":387},{"text":"so we'll want to have an integer address here.","width":221},{"text":"and there will be location in memory for it.","width":283},{"text":"so the next question is how do we assign to p the address of x?","width":527},{"text":"right?","width":64},{"text":"could I just put a40 here because that's our intention.","width":442}],
//   [{"text":"No video with supported format and MME type found.","width":17212}],
//   [{"text":"So first we apply p to ampersand, and the result of this, if the input variable is p, ampersand returns what?","width":973},{"text":"a40.","width":48},{"text":"Is that a variable?","width":322},{"text":"It's a hex number, it's like 5.","width":142},{"text":"Can I take asterisk or apply anything to it?","width":343},{"text":"No.","width":13},{"text":"So the input type to asterisk will not match this type, It needs a variable of pointer type.","width":648},{"text":"Asterisk needs a variable of pointer type to look at value of that variable which a40 doesn't have.","width":504},{"text":"That's not a variable it's not even on the stack as a variable.","width":368},{"text":"It's a constant.","width":110},{"text":"The compiler will really complain about it and say \"you passed something of not variable type to asterisk.\" You can try it I think we will have examples later that will run in a program.","width":838},{"text":"This is not compiled.","width":174},{"text":"I mean compiler error.","width":183},{"text":"[Student] If all pointers point to an address which is a hexadecimal constant, how does declaring a pointer p a certain type like that integer pointer or double point or something like that, why does that matter if the pointer itself is an address.","width":1601},{"text":"[Professor] Of certain types it is very important, I think we wrote it down here, that we declared, yeah your right, the value will always be a constant but it has to match the declared type of that pointer.","width":1057},{"text":"So it can be only an address of that type.","width":259},{"text":"Integer pointer can only have an address of integer type.","width":269},{"text":"Not sphere, it cannot point to sphere, it cannot point to circle, it cannot point to double.","width":334},{"text":"So that is why type is important in declaration.","width":439},{"text":"Does that answer your question?","width":73},{"text":"[Student] Kind of.","width":133},{"text":"[Professor] The value of any pointer is a constant hex number, but the type.","width":302},{"text":"[Student] Right, is that because of how many bytes it takes from the stack.","width":515},{"text":"[Professor] Yeah, there is more to that.","width":131},{"text":"Let's leave it at that because I do not want to talk about stack now, we will talk about it later.","width":499},{"text":"There are reasons for that, but let's talk after lecture because that is going into deep.","width":585},{"text":"Let's leave it at that, that the system somehow needs to know what that address points to at point just to verify that your intentions are good.","width":915},{"text":"Any questions?","width":124},{"text":"So, this example was kind of contrived because we have two variables connected through a pointer, both of them had names.","width":600},{"text":"So, we could access both of them directly through their names.","width":361},{"text":"There is another mechanism that allows you to access much bigger chunks of memory that is called heap memory.","width":826},{"text":"That will store the same things kind of like variable things but they will have no names, and will hold on to them through pointers.","width":708},{"text":"And that will given us a lot of flexibility, and it will all lead us to using arrays in C++.","width":426},{"text":"So, that is how we want to use this bigger chunk of memory that every program has access to store large sets, like arrays of different large objects.","width":797},{"text":"So how do we do that?","width":193},{"text":"We will start with a declaration of an integer pointer.","width":442},{"text":"The system will given the stack a chunk memory of type integer pointer so we kind of commit to have an address here that points to integer.","width":807},{"text":"And with name p and at certain location.","width":206},{"text":"And then if I want to ask for a heap memory, what I do is, I just say this.","width":658},{"text":"I want p to point to new integer.","width":373},{"text":"So, that is the syntax for it, and what the system will do it will first, well it's an assignment statement, so in the end we expect that p will get a value here.","width":702},{"text":"Which will be an address that stores an integer type.","width":379},{"text":"But let's see how the system does it, first of all it is the right hand side, and at the right side it says, oh there is a new keyword.","width":523},{"text":"Which means that you are asking for a chunk of memory on the heap and I will give it to you say b50.","width":638},{"text":"There will be no name because it is heap, there will be no names here.","width":550},{"text":"Even though these chucks are kind of like variables.","width":269},{"text":"And of type integer and there is no value associated with it yet, so it will be garbage what ever is there.","width":504},{"text":"And now return, so the return of this is address.","width":756}],
//   [{"text":"You will run out of memory.","width":308},{"text":"So I can put this in a loop, and you can do that simple program and I think I actually have it for next lecture.","width":691},{"text":"So if you say it, I'm not going to write.","width":350},{"text":"So if you run this thing asking for new memory location, I think its going to be 200,000 times, maybe for a larger primitive type...","width":1421},{"text":"don't remember.","width":75},{"text":"But you run it many times, you will run out it will be runtime error \"out of memory\".","width":591},{"text":"Yea.","width":64},{"text":"(Question) Um so in order to avoid this, you are asking how should we avoid this problem?","width":594},{"text":"(Clarification) It's next slide, okay, so I'll tell you how to clean up memory, it's a little more than that.","width":773},{"text":"Okay, I wanna draw a picture because that's important, okay?","width":395},{"text":"So what happens is...","width":181},{"text":"I'm gonna draw it here, can we go out through these lines one-by-one and except we are not gonna do this 200,000 times.","width":757},{"text":"So this is my program and I'm gonna draw a drawing or a diagram that we are always gonna do for this type of problems.","width":684},{"text":"So once I see declaration of a variable.","width":205},{"text":"First of all, does it have a name or not?","width":122},{"text":"Based on that I will draw it on stack or heap.","width":396},{"text":"So p is on the stack and every variable will have a box associated with it okay?","width":391},{"text":"Which will store its value.","width":106},{"text":"So upon this first line, p will have a box and its of integer pointer type, which means that I know that it should point to something, but it doesn't have a value.","width":745},{"text":"It has garbage values for now, so I'm gonna put a dot in there to indicate that.","width":335},{"text":"Fine.","width":106},{"text":"Now second line says, right-hand side asks for new variable on the heap so its gonna be a box associated with it of type integer, has no value, garbage value so far, but it returns it memory address to p.","width":1160},{"text":"Which means I'm gonna say the value of p changes from garbage to that memory address, and p points to that heap address.","width":761},{"text":"Third line, follow the pointer, put two hundred in it.","width":321},{"text":"Follow the pointer, put two hundred in it.","width":370},{"text":"Third line, print out something.","width":186},{"text":"We are not going to change anything on the picture.","width":158},{"text":"Forth line, or fifth line, asking for new memory location on the heap, which means we are gonna get a new box of type integer and its memory address is assigned to p which means p's value changed to point to that memory location.","width":1603},{"text":"Yea.","width":3},{"text":"(Question) On the stack?","width":426},{"text":"Whenever you can use variables on the stack, its slightly faster.","width":407},{"text":"Stack is much smaller chunk of memory given to you and there are certain things you will not be able to do so system has a lot of control over it.","width":615}],
//   [{"text":"Ok.","width":708},{"text":"Let's start.","width":80},{"text":"You guys hear me well?","width":85},{"text":"I don't know which mic is best.","width":259},{"text":"I don't really have many announcements today, so unless you have any questions, we will jump into the code right away.","width":607},{"text":"So there are assignments they get harder.","width":142},{"text":"You probably noticed if you looked at MP2 and we got two more.","width":378},{"text":"We got a lot of work.","width":127},{"text":"So, someone look at the code and in the beginning I didn't want to uh pull out my compiler yet.","width":737},{"text":"I want to pretend we have a little compiler in our heads and see what happens, compile it as we go, by looking at it.","width":577},{"text":"So, uh, let's go line by line and see what happens upon execution of those lines or a compilation of those lines.","width":545},{"text":"And I told you last time that we'll always draw pictures, so I'll start drawing them right away.","width":343},{"text":"I know that this is about pointers so I better draw um, I better have space for both the stack and the heap.","width":638},{"text":"And these two variables are declared.","width":175},{"text":"The names are going to be p and q.","width":147},{"text":"Since they have names, that means they are both on the stack.","width":274},{"text":"So they both have boxes associated with them in which their values are going to be placed.","width":377},{"text":"The question is what is the type of p and what is the type of q?","width":377},{"text":"The type of p is integer pointer and I know that because I associate the asterisk.","width":693},{"text":"S the asterisk tells me whether this variable is of pointer type or not pointer type, and I look at it and glue to the name instead of the type.","width":703},{"text":"So that's how I know how to read it.","width":134},{"text":"Since the asterisk is glued to the name, that means it's a pointer of type whatever the type is.","width":443},{"text":"Um so that means that both of my variables are on the stack, p and q, and they are both pointers and they are supposed to have values which are addresses of some integer number somewhere, right?","width":869},{"text":"And originally they are initialized to some garbage.","width":182},{"text":"I could have had another line, and please tell me how that is interpreted.","width":371},{"text":"So I could have init- I could have declared those variables in a different way, and then p would be of type integer pointer and q would be of type just integer, right?","width":805},{"text":"So that's how we know.","width":40},{"text":"So the asterisk belongs to the name of the variable, not the type, right, when we write a declaration.","width":644},{"text":"Ok.","width":18},{"text":"So the next line says \"oh I want some heap memory\", so the system will say \"fine.","width":416},{"text":"I'll give you\" and I'm going to draw the box in the heap memory because this variable does not have a name.","width":443},{"text":"It has type integer, and the address will be returned as the right hand side of this assignment and given as the value to p, which means my p pointer from pointing to some garbage now will point to this new space in the heap.","width":1098},{"text":"That's cool we have done it last time, so this is kind of we are going over the same material just to remind ourselves of it.","width":578},{"text":"The next statement says, please assign the value of p to be the value of q.","width":585},{"text":"Ok?","width":18},{"text":"What does that really mean?","width":142},{"text":"What am I going to draw for this line?","width":250},{"text":"So the value of p is an address for this variable on the heap, and q should get the same value which means it should point to the same location.","width":714},{"text":"That's how we draw it.","width":96},{"text":"So its value is going to be the same address it is going to be essentially pointing to the same place in memory so now if I want to assign value eight to dereference q, I'll have to follow the pointer of q", "width":1189}],
//   [{"text":"find that location and insert value 8 into that location.","width":531},{"text":"OK?","width":8},{"text":"So the question is what happens if now I try to print out whatever is the value of de-reference p.","width":772},{"text":"What's gonna be the output, the result after executing that line will be?","width":574},{"text":"So what's gonna happen is that we're gonna try to follow the pointer of p and print out whatever that value stored in that location.","width":770},{"text":"Which is 8.","width":66},{"text":"Ok so this is all cool, this is nice, this is simple so far, right?","width":225},{"text":"So now we're going to do something so it kinda reviews what we learned last time.","width":260},{"text":"Now we're going to do some more interesting things with pointers.","width":199},{"text":"So the next line, I'm going to say well, you know, for q please give me another location on the stack, right?","width":590},{"text":"So I'm going to initialize another box.","width":188},{"text":"Oh on the heap sorry.","width":56},{"text":"So I'm going to initialize another box on the heap that doesn't have a name.","width":269},{"text":"It has a type integer and that address is going to be the new value given to q.","width":579},{"text":"Which means that it point anymore to that old location that's an old value of q and I'm going to give it a new value.","width":510},{"text":"A new address.","width":131},{"text":"And I'm going to follow the pointer q and put 9 in there.","width":467},{"text":"So far so good, right?","width":108},{"text":"And now I'm going to say OK, now p should be equal to null.","width":334},{"text":"What does that really mean?","width":119},{"text":"And I didn't talk about Null yet.","width":163},{"text":"Null is a memory address that is zero.","width":309},{"text":"So in hexadecimal format it's going to be just a zero.","width":266},{"text":"OK?","width":13},{"text":"And it's kind of like a zero for pointers.","width":207},{"text":"So integers have a zero; doubles have zero.","width":239},{"text":"Pointers have a zero and that's called null.","width":331},{"text":"We like to use it and I'll talk a lot about it today.","width":352},{"text":"But lets just leave it at that for now.","width":185},{"text":"So p is now going to have another value which is the zero address and not whatever it had before.","width":442},{"text":"So I'm going to draw it like this.","width":93},{"text":"I'm going to put a slash across the box for zero.","width":474},{"text":"And it doesn't have a pointer; it doesn't point to that location in heap memory.","width":291},{"text":"So the question is, do you like it?","width":195},{"text":"Why not?","width":204},{"text":"It's called memory, right?","width":128},{"text":"Um.","width":61},{"text":"Ok.","width":51},{"text":"So what's happened really to that old box on the heap...","width":675},{"text":"This location in memory does not have any pointers pointing to it anymore, right?","width":389},{"text":"However, we asked for it and we didn't explicitly give it back to the system so the system will not use it anymore and if you do this sufficiently many times say in the loop of 1 million times and you ask for heap memory again and again and again without giving it back you may run out of heap memory.","width":1364},{"text":"It could be a run time error that you generate.","width":244},{"text":"So no.","width":50},{"text":"We don't like this.","width":82},{"text":"This is called memory leak.","width":79},{"text":"Let's right down the definition of memory leak if we understand it properly.","width":245},{"text":"Do you have a question, yeah?","width":333},{"text":"P equals to null, its not its pointing to yeah.","width":235},{"text":"So it's value is hexadecimal number which is 0.","width":400},{"text":"That is it's value is null.","width":267},{"text":"Does it point to that memory location?","width":154},{"text":"Yeah.","width":45},{"text":"The thing is that you cannot do much with it.","width":114},{"text":"You cannot really de-reference.","width":107},{"text":"It's more like a way to check whether your pointer initialized properly.","width":428},{"text":"Like its difficult to ask the system \"hey is my pointer garbage?\" How do you do that, how do you know, in the beginning, say, after the first line in your program, how would you know if we didn't really look at the code right here after the execution of this line, how would you know that it's garbage value?","width":1357},{"text":"If you didn't do it yourself, if you didn't write that code yourself?","width":243},{"text":"But now there's, if somebody would assign it to null there would be a way to check \"is this null or not?\".","width":416},{"text":"But we'll have more better examples later.","width":149},{"text":"So it's a little bit jumping ahead.","width":120},{"text":"Yeah?","width":148},{"text":"If you don't say p equals to null...","width":780},{"text":"Nil integer?","width":123},{"text":"So is that C++?","width":314},{"text":"Null and you n-u-l-l?","width":124},{"text":"Oh new integer.","width":478},{"text":"Sorry.","width":128},{"text":"So if he is changing the statement to p equals to new integer.","width":583},{"text":"Yes.","width":17},{"text":"That also will cause a memory leak.","width":100},{"text":"That will be in an example in the next slide for that.","width":196},{"text":"OK?","width":90},{"text":"So no, we don't like this.","width":65},{"text":"Let's write down what a memory leak is.","width":175},{"text":"So memory leak occurs when...","width":264},{"text":"So I'll start it and please help me finish it.","width":278},{"text":"When all pointers...","width":253}],
//   [{"text":"[Gibberish] to a piece of heap memory are what?","width":1043},{"text":"Are removed for some reason right..","width":244},{"text":"Removed.","width":93},{"text":"So we have this chunk of memory that doesn't have a name, has no pointer's pointing to it anymore.","width":346},{"text":"So there is no way way to get back to it and tell the system \"Hey, you can take it back!\"...","width":306},{"text":"Which we haven't done yet.","width":68},{"text":"Yep?","width":421},{"text":"[Student asking question].","width":58},{"text":"Data Structures..","width":30},{"text":"Custom Data Structures.","width":65},{"text":"This class about data structures.","width":92},{"text":"We are not in that topic yet.","width":183},{"text":"Please let's not jump yet!","width":110},{"text":"But I would be happy to talk about it after.","width":139},{"text":"But yes, we are..","width":94},{"text":"this is a data structures class.","width":135},{"text":"We will be creating a lot of data structures over these things...","width":225},{"text":"like in three weeks.","width":172},{"text":"Yep?","width":129},{"text":"[Student asking question].","width":435},{"text":"I initialized a pointer and never dereferenced and input anything into it...","width":248},{"text":"like what if?","width":70},{"text":"Example?","width":84},{"text":"Okay..","width":20},{"text":"[gibberish]..","width":22},{"text":"Okay, I'm not taking anymore questions because that's like next examples that we'll go and ask to..","width":377},{"text":"we'll go through that.","width":67},{"text":"Is that okay?","width":431},{"text":"Okay.","width":29},{"text":"Uhm, so..","width":40},{"text":"we'll..","width":20},{"text":"let's do this now.","width":139},{"text":"Uhm, so what happens here is that I didn't really handle this heap memory location well.","width":469},{"text":"I lost all references to it and I actually created a memory leak.","width":305},{"text":"So what...","width":85},{"text":"how would i do...","width":82},{"text":"or what would I do better to not..","width":117},{"text":"to make sure that this doesn't happen to this memory address on the heap.","width":277},{"text":"I still have one pointer pointing to it.","width":118},{"text":"So I want to cleanly get rid of that memory.","width":257},{"text":"To do that, I have to say delete and give a pointer to the memory address that I want to give back to the system.","width":608},{"text":"Upon execution of this line, what will happen is that this memory location will be given back to the system and now system may assign it to another pointer as a value.","width":951},{"text":"So upon declaration of some new statement, this memory location may be given to that pointer again.","width":383},{"text":"Okay, so system can reuse this memory address now and we didn't lose it.","width":285},{"text":"The problem is that q still references..","width":239},{"text":"so it still pointing to that memory location, right?","width":214},{"text":"And a good way to make sure...","width":159},{"text":"and that opens a door...","width":82},{"text":"the door for...","width":49},{"text":"to many many opportunities to create bugs.","width":237},{"text":"So if you gave some memory address back to the system and you still have pointers pointing it, that can cause many problems that again will have...","width":582},{"text":"uhm...","width":54},{"text":"we'll see what...","width":62},{"text":"what are the problems on the next slide.","width":137},{"text":"But in order to avoid that, you have to say q is equal to NULL which will...","width":393},{"text":"on our drawing, it will remove the value of q, which is currently pointing to that memory address which we just gave back to the system, and will reset it to NULL.","width":861},{"text":"So do you like this?","width":136},{"text":"How we handled q?","width":89},{"text":"We did handle it pretty well, right?","width":169},{"text":"We handled q pretty well.","width":176},{"text":"But we didn't handle p, well...","width":249},{"text":"enough.","width":63},{"text":"So once we are talking about NULL pointers, I want to see what happens if I work with them later.","width":532},{"text":"So if I have my q here, and I want to write the following statement.","width":342},{"text":"What if I want to dereference it and put some value in there?","width":323},{"text":"What do you think will happen.","width":76},{"text":"And this is the case of dereferencing a NULL pointer with an asterisk.","width":458},{"text":"Yep?","width":85},{"text":"[Student answers].","width":29},{"text":"It's a segfault.","width":30},{"text":"So it's a very well defined behavior.","width":145},{"text":"If I didn't set up q to NULL and tried to dereference q after giving away that pointer...","width":425},{"text":"that address to the system.","width":107},{"text":"There could be lots of bad things...","width":159},{"text":"uhm, that would happen.","width":94},{"text":"However, if I set it to NULL, then I have a defined behavior and it's a run-time error: segmentation fault.","width":630},{"text":"What if I also say delete...","width":168},{"text":"if I don't like dereferencing q...","width":178},{"text":"so instead what if I try to attempt to delete memory or give back to the system, NULL?","width":702},{"text":"Yep?","width":220},{"text":"[Student asks question].","width":50},{"text":"How do we use delete?","width":101},{"text":"[Student talking].","width":402},{"text":"So what happens upon delete...","width":199},{"text":"delete is a...","width":211},{"text":"accepts a pointer to it.","width":305},{"text":"It looks at that pointer, follows it, looks at that location, and gives it back to the system.","width":510}],
//   [{"text":"After that p is still a pointer to the same location, but that location now can be used for other variables.","width":538},{"text":"We told the system that you kind of got rid of it you cleaned it up.","width":291},{"text":"So with new it's kind of the opposite, with new you ask for a memory address and with delete you give it back.","width":520},{"text":"So deleting null pointers; what happens on deletion of q?","width":400},{"text":"Nothing.","width":55},{"text":"Nothing happens, you're allowed to do that.","width":280},{"text":"And you'll see that it's very helpful.","width":245},{"text":"So let's jump into examples of what really happens with bad behavior when we don't clean up memory nicely as we did with q.","width":519},{"text":"So let's look at other examples.","width":121},{"text":"Any questions about this?","width":61},{"text":"Yeah.","width":2},{"text":"[Student asks a question] If you what?","width":628},{"text":"Yeah.","width":40},{"text":"What happens?","width":71},{"text":"Ok if you don't assign null to the pointer after deleting it, then the following code will do that with that.","width":723},{"text":"So let's see what happens.","width":202},{"text":"So let's draw a picture again but, it will correspond to the situation when we don't null the pointer and try to work with it.","width":536},{"text":"So we have the stack and the heap.","width":238},{"text":"We declare two variables: p and q.","width":309},{"text":"And so far they have garbage addresses as their values.","width":375},{"text":"For p we ask for new memory location on the heap of type integer and p is assigned that value.","width":601},{"text":"Then again the same line q is assigned the same memory address as p points to.","width":357},{"text":"And now we want to delete p.","width":255},{"text":"Which means that we tell the system follow the pointer and give that memory address back to the system for further use.","width":563},{"text":"So it's free'd.","width":230},{"text":"And the question is what happens if we try to dereference and print out q at this point.","width":763},{"text":"Um to make it a little more interesting, maybe I'm gonna say follow the pointer so asterisk q equals 8.","width":633},{"text":"Which will after assigning these pointers to the same memory address, it will also fill it out with integer value 8.","width":465},{"text":"So what happens here is the system will do something that will really do something that will really depend on what this random stuff is.","width":732},{"text":"If there's nothing there, that means there was nothing going on really after assigning to that memory address 8.","width":610},{"text":"Even though we deleted it, if we follow the pointer, it will most likely still be 8 because nothing else happened really in the program.","width":662},{"text":"No other variables were initialized, we didn't assign any other values to any pointers.","width":469},{"text":"Which means that the output of this will most likely be just 8.","width":266},{"text":"But the problem with this is that I don't really know.","width":206},{"text":"Ok.","width":40},{"text":"I couldn't guarantee that that something forgettable will happen on execution of that code.","width":403},{"text":"That's why it's very important to set pointers to null after you free up the memory, because if you don't and somebody writes this kind of code.","width":670},{"text":"The behavior is unpredictable.","width":194},{"text":"And we call it an insidious bug.","width":121},{"text":"So this is very dangerous.","width":481},{"text":"You actually should not like this quite a bit.","width":324},{"text":"Let me give you an example of what kind of things can go wrong.","width":552},{"text":"What if I I printed out 8, I didn't set q or p to null.","width":634},{"text":"What if I what if I declared another point: say integer pointer r.","width":550},{"text":"And I asked the system for some new heap memory.","width":385},{"text":"With the new.","width":319}],
//   [{"text":"And now, put thirty-eight.","width":446},{"text":"So what might happen there is that, I'm sorry, it's a little loud, guys, it's very loud, I'm sorry, it really really disrupts me.","width":623},{"text":"Um, thank you.","width":124},{"text":"Okay so what may happen here, is that, the system said oh shoot, you ask for new memory, I can give it you, this chunk is not used anymore.","width":782},{"text":"So, I'm gonna assign r upon this assignment, that memory address, and I'll put thirty-eight in there, thirty-seven in there.","width":808},{"text":"Okay?","width":10},{"text":"So what if since, I don't know maybe somebody is using your code and wants to write the right things up and they see that, you know, pointer q is somewhere there, so what if they say well I'm going to dereference eight and put value eight there, I dereference q and put value eight there because I like that value in q, okay?","width":1468},{"text":"And even though, at some point over here you freed up the memory for q, q is not null so I can dereference it.","width":483},{"text":"I can execute this line, follow the pointer and put eight back in there.","width":479},{"text":"Okay?","width":54},{"text":"And now, if somebody else wants to print out the value for r, what's gonna be the result of this?","width":702},{"text":"Eight, right?","width":51},{"text":"It will know that process or that function assigned thirty-seven to r clearly, and there is no way to see the connection between r and q because the system made that connection behind the scenes with new, right, with the new statement.","width":1054},{"text":"That memory location was not used with new, it was assigned to r.","width":266},{"text":"Yeah?","width":8},{"text":"At the point where um, you're setting uh [gibberish].","width":691},{"text":"What would happen, yes very good, let's lets, let's work through this, through that scenario.","width":403},{"text":"So after the case of delete where?","width":414},{"text":"[gibberish] After this one?","width":84},{"text":"What if we assign q to null, [gibberish] oh delete q again?","width":407},{"text":"Ohh.","width":104},{"text":"Oh that's interesting, delete q.","width":154},{"text":"So what's gonna happen up on this?","width":201},{"text":"It's gonna follow q, it's gonna free up that memory address to the system back, and then r, if you introducing yet another insidious bug.","width":714},{"text":"Because now r may not be pointing something you may think that you have control of the r pointer, but you don't anymore, somebody, the system may give back memory address yet again to another variable, so it's very dangerous.","width":871},{"text":"Yeah?","width":99},{"text":"[gibberish] How does the system?","width":287},{"text":"It keeps a list of all unused address, so how does the system know whether this address is used or not, it keeps a list, and with the new it gives the control of that address to your program, and with delete it takes it back on the list.","width":845},{"text":"[giberish] Yeah, yeah, sure.","width":351},{"text":"Yeah you can't, if you, if you ask keep asking for more and more addresses and you say don't delete them, you'll run out of heap memory, and there will be a runtime error.","width":522},{"text":"And we, I think in the end of your slides you see an example where you play with parameters, you're asking for a big string, and don't delete it so you're asking for new string and don't delete it, and if you do it one hundred thousand times, run it and see what happens.","width":870},{"text":"The system will say I don't have any memory to give you anymore, so it'll [gibberish], before a long time by the way, before it runs out of heap, yeah?","width":650},{"text":"[gibberish] Yeah it just takes that memory address and gives it back to the system, yeah, yeah?","width":891},{"text":"[gibberish] Is it a good reason why delete does not set that pointer that we just used to delete that memory to null.","width":390},{"text":"Yes there is a very good reason, because you might need, so I told you before that stack memory system controls it, but heap memory you're supposed to take good care of it.","width":749},{"text":"So here we go, these are the rules of taking good care of it, which means it may be a headache really.","width":334},{"text":"Debugging your code in MP2 in will be a headache, because you'll have to take good care of it, yeah.","width":320},{"text":"So that's by design, yeah?","width":193},{"text":"Yeah.","width":54},{"text":"[gibberish] I don't know that, I said hypothetically it could happen.","width":366},{"text":"So the question was when I declared r how do I know that that memory address was assigned to q which q q used to have a hold on?","width":509},{"text":"I don't know that's why it's insidious, it may not, it may or may not be the case.","width":456},{"text":"Okay on more question and then we'll move on.","width":103},{"text":"[gibberish]", "width":294}],
//   [{"text":"You don't really know...","width":358},{"text":"well, at this point you really know that there was 8 at some point, but there could be something else.","width":411},{"text":"It might be some random stuff, maybe some other process [gibberish].","width":435},{"text":"Ok, so let's go through a couple more examples.","width":327},{"text":"So over here, this is the previous slide and we'll just go through those examples.","width":594},{"text":"So let's see.","width":108},{"text":"Let's try try to compile in our heads the first piece of code.","width":296},{"text":"So my p is a pointer, and my x is an integer.","width":174},{"text":"I'm going to assign p to x.","width":159},{"text":"So both of them have names and they are on stack.","width":259},{"text":"And, p is a pointer garbage.","width":174},{"text":"And I want to assign x to p, so do like this if not, will or will not this compile, or will this be a run time error.","width":539},{"text":"What kind of behavior will it have?","width":151},{"text":"Do you like it?","width":108},{"text":"Is it a compile error?","width":181},{"text":"What kind of error?","width":174},{"text":"Type mismatch, right?","width":123},{"text":"Type mismatch.","width":396},{"text":"So we don't like it and it's a compile error.","width":155},{"text":"On the right hand side we have an integer, and we're trying to give an integer value to an address.","width":455},{"text":"P is supposed to have value that is an address.","width":205},{"text":"So we can't assign an integer to that.","width":163},{"text":"Ok, so now, this is just a review.","width":186},{"text":"So if I have a pointer p and I have an integer x, I want you to tell me how could I (say x equals 3) assign the value to p such that in the first case p's value is an address on the stack, and in the second case, p's value is an address on the heap.","width":1550},{"text":"Yeah?","width":121},{"text":"So, first represent x.","width":276},{"text":"Ok?","width":22},{"text":"So that's going to be a stack address, which is x's address.","width":320},{"text":"And then the heap, new integer.","width":255},{"text":"And if I wanted to have x's value, it would be (x).","width":355},{"text":"So, that's good.","width":160},{"text":"So, let's draw corresponding figure though.","width":204},{"text":"So we have stack and heap, p as a pointer, x has a value 3.","width":382},{"text":"So in the first case, p points to x like that.","width":416},{"text":"But, in the second case, we actually asked for a new memory location and we put 3 in there.","width":555},{"text":"Right?","width":66},{"text":"Yeah.","width":336},{"text":"[gibberish] That's right here.","width":278},{"text":"Next example, so he asked what happens in the next example, let's go through that.","width":264},{"text":"Ok, so let's view another example, and things start getting worse here because things happen if you don't really take good care of the heap memory.","width":594},{"text":"So we have stack variable p of integer pointer type and we say in the next line, we'll follow the pointer and put 37 in there.","width":1167},{"text":"So follow the pointer and put 37 in there.","width":294},{"text":"Hm.","width":49},{"text":"So what's going to happen?","width":103},{"text":"Do you like it or not and what kind of problem there is?","width":172},{"text":"Is there a compile problem, run time error?","width":317},{"text":"You like it?","width":252},{"text":"There's no pointee, so that's when the Binky blew up last time.","width":283},{"text":"So that was a matter of animation or like a metaphoric kind of expression that Binky blew up.","width":358},{"text":"Nothing is going to blow up here.","width":129},{"text":"The program will run, most likely it will run.","width":200},{"text":"So where is it going to really follow?","width":161},{"text":"Upon declaration of p, our pointer is garbage right?","width":297},{"text":"Which means that I don't really i'm going to put a dash pointer here I don't really know where it's going to point.","width":357},{"text":"It can point to stack, it can point to the heap, it can point outside of my process allocated memory, it can point to some place I can access or not, which means that I don't really know what's going to happen.","width":1022},{"text":"I really don't like this.","width":169}],
//   [{"text":"Type mismatch.","width":159},{"text":"It is is a pointer.","width":396},{"text":"OK, so here is a compiler error.","width":257},{"text":"But the intention of deleting that memory is just that in the first place.","width":444},{"text":"If you delete it in the first way, it will be a compiler error, if you type it into the second way, it's just wrong.","width":380},{"text":"OK?","width":88},{"text":"Umm, any question about this?","width":343},{"text":"OK.","width":12},{"text":"So there is no real good way to do this here right?","width":333},{"text":"If you have two variables, you don't want to give that addresses to the system if they are on the stack.","width":428},{"text":"OK, that's good.","width":69},{"text":"So now I'm gonna look at this code and I'm actually gonna run it.","width":387},{"text":"And see what kind of bad thing it may or may not happen here.","width":370},{"text":"So I have my main function.","width":392},{"text":"Let me match it with my slides.","width":198},{"text":"Integer x equals to 5.","width":197},{"text":"OK.","width":68},{"text":"And I want to find out a lot of things about this code.","width":202},{"text":"So.","width":174},{"text":"My drawing here is that I have a stack and a heap.","width":298},{"text":"I declare my variable p with initial garbage.","width":335},{"text":"Umm.","width":96},{"text":"Point to a value.","width":169},{"text":"Than I declare and give value 5 to a variable x.","width":242},{"text":"And then I set dereference p.","width":440},{"text":"Where is it gonna go?","width":246},{"text":"Garbages right?","width":42},{"text":"So let's draw that strange.","width":165},{"text":"For dereference, we did not really ask for any memory, we didn't assign the location, proper location.","width":348},{"text":"We didn't assign NULL there.","width":117},{"text":"But still dereference it and put x's value in there which is 5.","width":352},{"text":"So that's gonna be the drawing.","width":109},{"text":"And, as I said.","width":178},{"text":"There is nothing wrong with this code most of the times.","width":310},{"text":"Unless that garbage location is something bad.","width":167},{"text":"And let's see what's really is gonna be the output if I want to print out some of things of p and find out.","width":418},{"text":"So I wanna first find out where is p pointing.","width":220},{"text":"What do you think that's gonna be?","width":133},{"text":"And I wanna find out what p is.","width":241},{"text":"And I want to find out what is the address of p.","width":197},{"text":"OK?","width":11},{"text":"So these three things I gonna find out.","width":241},{"text":"But let's compile first.","width":141},{"text":"Do you think there is gonna be compilation problem?","width":391},{"text":"No.","width":87},{"text":"That's fine right.","width":62},{"text":"But upon execution, I want you to tell me what do you think is gonna be dereference p?","width":535},{"text":"Looking at our drawing.","width":110},{"text":"5 right?","width":244},{"text":"It's gonna follow that pointer.","width":146},{"text":"wherever that is and give me the value.","width":149},{"text":"Since nothing really happens since I assign that value.","width":277},{"text":"That location may not have been overwritten right?","width":230},{"text":"Cool.","width":84},{"text":"What's gonna be p itself?","width":283},{"text":"That garbage address right?","width":73},{"text":"So we will see what that is.","width":136},{"text":"And what is gonna be the &p?","width":71},{"text":"That's gonna be the actual location of p on the stack, right?","width":536},{"text":"OK, so let's look at those.","width":437},{"text":"OK, so the first dereferencing, uh, p is fine.","width":365},{"text":"And it's 5 because you put 5 there but it may not have been, right?","width":290},{"text":"Or it may not have been fine to dereference it.","width":134},{"text":"It's a insidious bug.","width":98},{"text":"We don't know what could have been there.","width":180},{"text":"And that is garbage address, we can see what it is.","width":172},{"text":"It just may or may not be helpful.","width":226},{"text":"Umm, so that's really cool.","width":197},{"text":"What we gonna do next is, so the next slides are actually a ways for you to practice.","width":388},{"text":"It's the same problems that we already went through but it ran different outputs you can figure out what's gonna be the outputs.","width":483},{"text":"But.","width":119},{"text":"I want to go and start something different today because we are actually really well in the material.","width":606},{"text":"OK?","width":41},{"text":"We did really well so we can start looking at pointers with respect to the next topic which is gonna be the arrays.","width":525},{"text":"And I want to ask you to use the free space in your slides and help me with the following configuration in memory.","width":711},{"text":"So I want to write the code that will correspond to this memory configuration that I'm about to draw.","width":615},{"text":"So I want to have a pointer.","width":137},{"text":"I didn't know what that type is yet.","width":153},{"text":"You have to tell me.","width":87},{"text":"It's gonna point to an address on the heap with the integer value of 5.","width":673},{"text":"And I want to have another pointer that points to that stack location that's to that 5.","width":359},{"text":"And I want that to be q.","width":368},{"text":"And I want you to write the program that sets this up.","width":441},{"text":"So definitely there should be a q variable there and something else declarations and definitions.","width":402},{"text":"It takes like 2 minutes maybe and then you can tell me how to do that ok?","width":1134}],
//   [{"text":"initialize it with a bunch of exclamation points, actually exactly 10 of them, right.","width":745},{"text":"Then I print it out and then I delete it and I do it two times but what I'm gonna do is I want to make this program such that it runs out of heap memory.","width":741},{"text":"So why don't you take a couple of minutes thinking how to arrange that so we have the result and I'm gonna write down that program in the meantime, ok.","width":614},{"text":"So tell me exactly what needs to be modified in the program so that we have, so that we run out of heap memory.","width":3208},{"text":"Ok, any ideas?","width":106},{"text":"What should we do?","width":112},{"text":"Huh?","width":260},{"text":"What if we don't delete S each time?","width":282},{"text":"So what happens is that if within the loop we ask for memory and then we free it with delete, we can do that many times.","width":575},{"text":"But what if don't delete it, right?","width":128},{"text":"And what if we run this program, I don't know, oh let's run it, two times first, let's see if there is a problem of memory that we see upon just doing it twice, right, Well what if I do it a million times.","width":1607},{"text":"That's fine, right.","width":107},{"text":"What if I do many more?","width":703},{"text":"This is fine, actually.","width":151},{"text":"Actually, ok, let's do 20 million, hah.","width":900},{"text":"Ok.","width":264},{"text":"A million.","width":80},{"text":"huh.","width":380},{"text":"Got it.","width":80},{"text":"So bad allocation core dump, not enough memory.","width":404},{"text":"So this is kinda means that n, believe with strings its harder, with integers its even worse.","width":370},{"text":"When you have large classes, large arrays, if you don't clean your memory you get core dump, and sometimes you don't it just slows down and that's even worse.","width":986},{"text":"Thank you.","width":366},{"text":"she wants to show you core dump.","width":294},{"text":"I'm gonna do that in ema...","width":1164},{"text":"I'm not sure, ya I don't know how to interpret that But yes, the most importantly thing, the program would slow down if I didn't quite run out of memory but 'I was getting close that would slow down the execution if you weren't careful.","width":2535}],
//   [{"text":"Chicago, unexpectedly, she'll be back on Wednesday nothing really changes I just get this fun opportunity.","width":786},{"text":"Um let's see so there are some deadlines that you're fully aware of already, so I'm not gonna spend a lot of time talking about this.","width":698},{"text":"Or even spend any time talking about them except, oh, I just did, shoot.","width":324},{"text":"There are, however, 2 administrative issues.","width":174},{"text":"One of which is for the very late adders, what do we do with lab debug?","width":485},{"text":"Here's the thing: we have built into the system a lot of extra credit, a full letter grade or more, so my immediate and superficial answer is this is just one of your points of extra credit that you're not going to be able to use.","width":1379},{"text":"Using up 1 of your opportunities for extra credit, there will be plenty more opportunities don't worry about it.","width":342},{"text":"In reality we will probably not be so cold, but we don't have an administrative fix for it at this minute.","width":586},{"text":"So I'm gonna ask you to trust me, or rather us to deal with the discrepancy between who could and couldn't turn in lab debug, we'll deal with it.","width":956},{"text":"The other issue is much more important.","width":182},{"text":"That is the new policy that demands that you go to the section for which you are actually registered.","width":522},{"text":"So I'll admit and I know that this is a hardship for some of you, so let me explain why we are doing it.","width":398},{"text":"First of all, in order to accommodate all of you who needed to take the class, we needed to fill all the seats in the lab which meant we don't have the normal flexibility in seats, as in the labs that we have had before, so one way of handling that is to be rigid while attendance is still high, be very rigid about which section you should attend.","width":1657},{"text":"The other issue is that we're trying something new with tests this semester.","width":448},{"text":"We're going to be delivering the assessments for the course the midterms during lab section.","width":387},{"text":"So you have to be there for that time so that you can take your test.","width":404},{"text":"Unless you don't want those points, in which case, you know...","width":176},{"text":"come whenever you like.","width":138},{"text":"But that's when the midterms will be.","width":180},{"text":"The good news is that it'll save you a couple of Tuesday nights.","width":255},{"text":"Moreover, we're likely to we don't know yet be having more of them so you will have more opportunities to show us what you know, and no one of them will be as scary as the big Tuesday night exams used to be.","width":1966},{"text":"That's our hope and justification, and our admonishment that you make sure you can attend the lab section for which you are registered.","width":631},{"text":"Now, we will help you once the enrollment gets settled down, if things are currently infeasible for you, we will help make adjustments as much as we can.","width":827},{"text":"We have a tentative list of the exam dates, exam weeks, since you know it takes up a week.","width":518},{"text":"We'll let you know them as soon as they are real.","width":225},{"text":"Oh, I'll tell you the first one!","width":152},{"text":"The first one which is no negative consequence, we're gonna give you a trial assessment so we can evaluate the logistics of the whole thing, not this week in lab but next week in lab.","width":1076},{"text":"So we don't know yet what we're gonna do with those scores, but we will make it so that they cannot hurt you.","width":497},{"text":"So dazzle us and we'll feel compelled to give you credit for your hard work.","width":565},{"text":"Isn't that the way things will always be?","width":120},{"text":"Dazzle us and we'll give you credit, perfect!","width":253},{"text":"Let's work.","width":90},{"text":"I have two little pieces of code for you and what I wanna know from you is how do they differ functionally.","width":654},{"text":"That is, if you were to execute each of these pieces of code, what would be different in the effect?","width":412},{"text":"In the observed effect.","width":95},{"text":"Raise your hand, I want to have a conversation about this, so somebody raise their hand.","width":423},{"text":"Very close, that's close to the right answer.","width":648},{"text":"The code on the right is much less confident...","width":419},{"text":"hello?","width":64},{"text":"instead of hello!.","width":99},{"text":"That is really the only functional difference between the pieces of code.","width":317},{"text":"What happens behind the scenes, though, is a little bit different.","width":380},{"text":"Let me ask you this: which of these two pieces of code takes longer to run?","width":351},{"text":"Yes, stopwatch we can judge it.","width":117},{"text":"Which one takes longer?","width":75},{"text":"Everybody point to which one takes longer to run.","width":324},{"text":"Go for it.","width":214},{"text":"Right, the one on the right.","width":333},{"text":"(GASP).","width":169}],
//   [{"text":"It's hard for me.","width":95},{"text":"Oaky.","width":19},{"text":"Uh right, because it has to go \"Yo can I have some stack memory please?","width":492},{"text":"I've got a string over here I'd like to put out there\".","width":249},{"text":"And the system hands back the heap memory.","width":252},{"text":"The heap memory is handed back to the system and then the code proceeds.","width":478},{"text":"Now, I have another question for you.","width":160},{"text":"Which one of them uses the stack more?","width":206},{"text":"Which one invokes more stack operations?","width":373},{"text":"Go ahead and point to the one.","width":535},{"text":"Ok superficially at least you can't really tell what they do for sure,but superficially at least their it's the same.","width":430},{"text":"Each of them has a single stack variable.","width":432},{"text":"Each of them has a single stack variable the only difference is in this case it's a string.","width":532},{"text":"Right, the type of thing thats put on the stack here is a string.","width":271},{"text":"The type of thing thats set up on the stack here is a pointer, that's right.","width":375},{"text":"But in both cases there is a variable on the stack.","width":258},{"text":"Alright any questions about all of that?","width":167},{"text":"So you see how that sort of unrolls in memory?","width":274},{"text":"Ok and then all of those things are true.","width":296},{"text":"Ok so we would not get, oh, there's one little conversation about distinguishing pointers from objects which I would like to have really quickly before we move into arrays which the semester would be over if we didn't have arrays so its kind of an exciting day.","width":1098},{"text":"Ok So I have declared this class face, its private members are articulated here for you, hold on let me fix oops.","width":748},{"text":"Uh its private members are articulated here for you and were gonna execute the few little piece of code for each...","width":606},{"text":"designed to show you two different things.","width":124},{"text":"Ok so lets start with this one.","width":279},{"text":"Um i'm gonna set up two face variables.","width":192},{"text":"Here's A and here's B and I wanna initialize B.","width":335},{"text":"A variable B of type face, so raise your hand if your name starts with B.","width":361},{"text":"Raise your hand, okay what is your name?","width":299},{"text":"Benny?","width":19},{"text":"Ok can you spell it for me?","width":208},{"text":"Benny ok and your smiling.","width":299},{"text":"Ok and are you done benny?","width":168},{"text":"Are you done?","width":149},{"text":"Done?","width":4},{"text":"Are you done?","width":179},{"text":"I need to be able to instantiate that variable, just tell me true or false.","width":396},{"text":"Your done alright your done.","width":114},{"text":"I don't know what it means either, that slide has been there for six years and I still don't know what it means.","width":308},{"text":"Ok and I wrote it.","width":177},{"text":"I don't know.","width":48},{"text":"Ok so now we're going to, we're gonna execute that line of code.","width":422},{"text":"The way your read that line of code in C++ is A gets the value of B.","width":356},{"text":"Now you don't have to whisper it to yourself every piece of code that you read but what it means is A gets the value of B.","width":647},{"text":"And here's what happens in C++ when you do that.","width":250},{"text":"You get a member wise copy by default.","width":472},{"text":"Ok so assignment is member wise by default.","width":924},{"text":"Ok so lets see what that means.","width":167},{"text":"It means that we look at each of the members and make a copy of them.","width":373},{"text":"So this String...","width":106},{"text":"Strings know how to copy themselves.","width":211},{"text":"Benny comes across here.","width":294},{"text":"PNGs know how to copy themselves.","width":947}],
//   [{"text":"What am I trying to illustrate there?","width":160},{"text":"Do you like that?","width":483},{"text":"...PNGs are big, right?","width":103},{"text":"And when we say that they know how to copy themselves we mean that they are making an independent copy of the data associated with them.","width":635},{"text":"For large objects that is a cost you are incurring so this act of creating an independent copy of this PNG comes at a cost.","width":720},{"text":"But, okay, maybe that's what we mean and that's what happens by default.","width":312},{"text":"PNGs or whatever type you are dealing with know how to copy itself, sort of like the inductive assumption, you assume it to be true.","width":665},{"text":"And then finally of course, booleans know how to copy themselves.","width":389},{"text":"And now we have this new object whose name is a and values are copies of b's.","width":499},{"text":"We choose that when we execute the following two lines of code we set benny to ann and when we do b.getName() we get benny.","width":956},{"text":"Any question about that all?","width":358},{"text":"[In the first line, when you declare face a and b, we are calling the constructor of a as well.","width":569},{"text":"So when you assign a to b you destruct a and create a new face, or do you call some kind of copy inside of a] So the question is all about what really happens, okay?","width":958},{"text":"And the observation is look this isn't just a declaration but constructors happen there too, and, with great intuition, he's going, well wait, if there's stuff that's hiding behind the scenes there, maybe there's stuff that's hiding behind the scenes here as well and are we sure that it's what we really want it to be.","width":1493},{"text":"And my answer to you is in this case, we can just take it at face value that all the private members know how to copy themselves.","width":852},{"text":"Will there be instances where we will need to redefine what it means to make an assignment the answer is absolutely yes, but this is not one of them.","width":625},{"text":"Okay?","width":57},{"text":"And in case you have followed along with this conversation, the reason is because none of these objects are allocated in the constructor using heap memory.","width":718},{"text":"So these are all in the stack for the objects.","width":336},{"text":"Alright so the short answer is not yet.","width":436},{"text":"Okay, any other question on how that works, member-wise copy by default.","width":359},{"text":"Okay, fine, lets do this example.","width":236},{"text":"This time we have two pointers, also declared on the stack, right?","width":290},{"text":"That's where variables always are when you declare them.","width":351},{"text":"This time they are called c and d, we're going to initialize the value of d, that means we are going to ask for the memory, and make sure that the value has value, so raise your hand if your name starts with d.","width":1220},{"text":"What's your name?","width":143},{"text":"[Daniel.] Hi Daniel we've met before haven't we nice to see you.","width":437},{"text":"Okay Daniel are you smiling?","width":137},{"text":"[Yes.] Okay.","width":137},{"text":"We have some glasses, I'm not good at drawing glasses please forgive me, they look more like ears today.","width":396},{"text":"You have ears too so that's okay.","width":116},{"text":"Alright Daniel are you done?","width":260},{"text":"[No I am not.] Okay good, there's hope.","width":260},{"text":"You Benny I don't know.","width":111},{"text":"You could construe that lots of different way.","width":423},{"text":"Alright lets see what happens when we make an assignment.","width":153},{"text":"Anyone want to guess what happens when we make this assignment what happens?","width":467}],
//   [{"text":"Well, what I get?","width":247},{"text":"Yeah?","width":55},{"text":"Oh, man if my compiler is kind, if as part of compilation process variables are initialized, then I might get a 0, but I will be really lucky if I did.","width":895},{"text":"[gibberish] using Visual Studio C++ or something.","width":321},{"text":"You cannot count on it.","width":146},{"text":"So upon declaration even a static array just like every other variable you declare, you should assume has value, oh very good.","width":793},{"text":"We try that in harmony.","width":101},{"text":"[gibberish].","width":113},{"text":"So upon declaration..","width":112},{"text":"I don't need to write it, you got it.","width":200},{"text":"So now how do we initialize these values.","width":255},{"text":"Well, you are not gonna be surprised by any of these because these things are just arrays.","width":402},{"text":"I'm going to initialize all of them in one for loop.","width":242},{"text":"Like this.","width":377},{"text":"x sub i equals...","width":427},{"text":"we'll do this this time.","width":150},{"text":"And result will be value 0, 2, 4, 6, 8.","width":513},{"text":"Question about that?","width":185},{"text":"Yes.","width":293},{"text":"Well the answer is garbage.","width":80},{"text":"You don't know what value, you can't test, you can't.Say have I initialized this yet?","width":289},{"text":"That's why it's pretty good practice to upon declaring something, immediately give it a testable value.","width":520},{"text":"Alright, so this is garbage, this is the answer.","width":394},{"text":"Okay, what is the constraint that we said early on?","width":225},{"text":"This is great and I say great because we love stack variables.","width":291},{"text":"Variables that we can argue or justifiably [gibberish] through the stack, that's good, right?","width":656},{"text":"This is great if size is known at compile time.","width":829},{"text":"And additionally if the sizes is not very big because you want to save your stack space for the execution of your program and not use it for data generally.","width":911},{"text":"Not too big.","width":210},{"text":"And furthermore the constraining part of this actually is that it will not change; hence the static piece of its naming.","width":723},{"text":"So known at compile time, it's not too big and it will not change.","width":586},{"text":"Okay what's the contrast?","width":151},{"text":"What's the contrast to this.","width":154},{"text":"These are dynamic arrays...","width":105},{"text":"Yeah you have a question?","width":229},{"text":"No I mean the size of the array.","width":180},{"text":"Size.","width":108},{"text":"No, you can certainly change the values, sorry.","width":429},{"text":"Yes.","width":381},{"text":"Sure.","width":55},{"text":"The value you can change.","width":176},{"text":"They are just like variables.","width":121},{"text":"They are just normal variables.","width":112},{"text":"But the size of the structure you can't.","width":216},{"text":"Okay, Was there another question?","width":74},{"text":"Yes.","width":253},{"text":"Compile time.","width":90},{"text":"That is a draw-back.","width":229},{"text":"So, luckily, we are not really constrained in that way, we can setup dynamic arrays.","width":381},{"text":"And these are arrays in the heap, that is the balk of memory is stored in the heap.","width":326},{"text":"Now, it probably won't surprise you, we still use a pointer to access heap memory, just like we did before.","width":730},{"text":"So, this declaration right here, this integer pointer whose name is x get set up in the stack, a30, x.","width":1071},{"text":"Of course, its type I didn't specify here is a pointer, its value at first is garbage.","width":1179},{"text":"Now here though is how we initiate x, we give it value.","width":507},{"text":"We call 'new'", "width":227}],
//   [{"text":"Ah...","width":145},{"text":"and the argument to null is a type of thing but rather than asking for one of those things from the heap we are going to ask for a block of size of them.","width":749},{"text":"And size can be evaluated at one time which means it can be conditional to fell like a small laundry today.","width":645},{"text":"Right?","width":14},{"text":"Can be user input, can be enter the size you would like and program can handle it.","width":530},{"text":"Here's what happened on execution.","width":218},{"text":"A block of memory, let's see what is the size, it's three of them, is all allocated each one of these things is an integer.","width":837},{"text":"I am gonna to change this to type.","width":397},{"text":"Each one of these is integer.","width":270},{"text":"And the location is chosen for you by whatever is administrated in the heap.","width":443},{"text":"Okay by the operating system.","width":124},{"text":"All right and at that point though, after that memory is allocated, we can use x just like any other old array.","width":925},{"text":"So I can do what I did on the previous slide except correctly and give that value 0 no 3,4,5 to these array locations.","width":1190},{"text":"Okay, everybody put your finger on X1, the value of X1.","width":462},{"text":"Put your finger on yours, don't point this time.","width":221},{"text":"On your paper.","width":168},{"text":"Put your finger on the value of X1, did you all put it here?","width":440},{"text":"All right, so here is what happens.","width":285},{"text":"Here's what's happening?","width":104},{"text":"When I say something like cost x1.","width":352},{"text":"And to think about it but only think this once, okay?","width":522},{"text":"Start with a pointer x, square brackets are just like dereference.","width":720},{"text":"The square brackets says \"Oh x is a pointer and dereference it\".","width":359},{"text":"Okay, just defer it a different thing.","width":258},{"text":"That is follow the pointer and then what you see here?","width":370},{"text":"That is the number of steps to take forward.","width":305},{"text":"So take one step forward then you get to the right place.","width":374},{"text":"All right, so syntax associated with an array here.","width":339},{"text":"The syntax associated it looks just like an array that you learned back in computer science kindergarten.","width":536},{"text":"Really now means something that make sense in the context pointers, means dereference, takes steps forward.","width":492},{"text":"Now you never need to think about it again.","width":127},{"text":"Let's treat it like an array.","width":147},{"text":"I did say one thing though merits some discussion.","width":281},{"text":"And now let me tell the delete first and then go back.","width":160},{"text":"Okay, so this is memory allocated on the heap which means we need some macinism for giving it back for freeing up the memory to be used by another process.","width":720},{"text":"We do that simply by specifying square brackets in the delete statement.","width":374},{"text":"So it still matter of giving a block of memory back and I believe the compiler will warn you if you do this wrong.","width":377},{"text":"So I think if we just said delete x, the complier will go umm...., you use the square brackets before you'd better use it again.","width":560},{"text":"Okay, all right, what I am gonna to say earlier?","width":232},{"text":"Oh this was important, what was it?","width":206},{"text":"Hum..Oh, I know what it was.Think about this new thing in the context of constraint of stack array.","width":1122},{"text":"We said that stake array was good for fixed size things, so this implies maybe these are good for not fix size things.","width":863}],
//   [{"text":"In fact for MP2 for your second assignment, we ask you to implement a dynamic array whose size can change.","width":700},{"text":"Now its a little bit of a stretch to say, \"Oh, you think you can change your size no big deal\".","width":417},{"text":"It is a big deal.","width":101},{"text":"You still have to work hard to do it.","width":194},{"text":"That is if your array is this size and you want it to be THIS size, you have to first allocate all that memory, copy these values over, and now you've got the bigger array.","width":1108},{"text":"Kay so, it isn't really like you can just wave a magic wand and its any size you want.","width":430},{"text":"You still have to control the memory associated with your object.","width":259},{"text":"But, at least you can.","width":158},{"text":"At least you can resize it.","width":176},{"text":"Okay, any questions about this?","width":333},{"text":"Yes.","width":25},{"text":"\"So yeah there are about a gazillion ways of managing linear memory.","width":419},{"text":"They all come at costs.","width":156},{"text":"We are going to see extremes.","width":173},{"text":"We are going to see the complete reallocation.","width":191},{"text":"We are also going to see Linked Lists wherein every piece of memory you have a pointer to the next one.","width":446},{"text":"And what you are kind of talking about sort of goes in between.","width":210},{"text":"like lets take a chunk and then string chunks together.","width":262},{"text":"But they come with complexity costs and possible sacrifice of performance in places you don;t suspect.\" \"So the question is If you are assigning space and you know that size too, and the answer is that all of those sizes can be determined at runtime rather than at compile time.","width":3923},{"text":"So you can take for example streaming data where you don't know how much you are going to get.","width":289},{"text":"It is just going to keep coming at you and you have to have a place to just do it and in order to do so, you have to keep growing the amount of memory that you allocate to your structure.","width":622},{"text":"Whereas there is no way to know ahead of time how much you are going to use.\" Oh, you could allocate it all statically, but you better err on the size of large, which means you incur the cost of not using all of the memory that you are asking for, which has its own problems.","width":1249},{"text":"\"So you write your code, and then you do Make, Make MP2.","width":804},{"text":"That invokes the compiler.","width":158},{"text":"That means, at that moment, you have to know how much memory you need.","width":437},{"text":"When you say \"a.out\" or \"a.exe Anna does\".","width":391},{"text":"That is runtime.","width":136},{"text":"Now knowing at compile time how much memory you need means you cannot ask during execution \"User, how big do you want your array to be today?\" Or you cannot evaluate how big you want your array to be based on input data of any kind.","width":1339},{"text":"Okay you can't read in a csv and say \"Ok I need an array as big as my csv because you don't know how big your csv is.","width":412},{"text":"Ok, does that help at all?","width":446},{"text":"\"If you are really truly interested in performance, you are going to want to do that.","width":558},{"text":"If you know there are 10 different majors in this class, might as well just have a static array, almost like a lookup table, of the 10 things people like to study in this class and be done with it.","width":1133},{"text":"Alright, anything else?","width":142},{"text":"We good?","width":177},{"text":"\"Why can't the resizing be done on the stack?\" \"Because the variable table contains the types and sizes of all the variables you are going to use in C++.","width":821},{"text":"Essentially what you are doing here is you are making a new type of thing, so you could have a 10-array and a 5-array and a 5000-array, but they would all be there ahead of time taking up space and waiting for you to use them.\" \"Ok so the question is, If you declare an array on the stack and then you ask for input from the user, is that ok?","width":2773},{"text":"And the real answer is if you declare an array on the stack, it doesn't matter what that user says, that array is going to be the same size no matter what.","width":686},{"text":"If you don't give it a size, it will allocate a huge one.","width":326}],
//   [{"text":"Ok.","width":665},{"text":"Ok, hello, I'm sorry for the delay I have almost lost my slides.","width":419},{"text":"I have some announcements for you.","width":252},{"text":"First of all, MP2 you know that it's due next week.","width":274},{"text":"The new lab will be released today, maybe it's already online but uh, it will be released if it's not it will be released by the time you have your new lab and um.","width":850},{"text":"The name of it is going to be lab_memory.","width":215},{"text":"And it's going to be due on, I really apologize for this because [gibberish] I have to change these things.","width":514},{"text":"So it's due on Sunday, February, um.","width":213},{"text":"Is it seven?","width":133},{"text":"Seven.","width":252},{"text":"So it's just like normal.","width":123},{"text":"The reason why I have to change the slides is that we are going through some changes in the class and Cinda has announced it last time so, you looked scared already, but let me kinda explain what's going on.","width":1004},{"text":"Um, carefully.","width":140},{"text":"So, instead of the lab next week, we'll have our first exam.","width":326},{"text":"So you'll come to your Wednesday, Thursday, Friday February 10th, 11th, and 12th labs and instead of regular schedule of the lab happening there we will have an in lab exam.","width":919},{"text":"Which means we will really ask you to be in the lab that you registered to.","width":445},{"text":"Um, the reason why is that...","width":151},{"text":"this is one of the things that is different this semester, but there's another thing that is very different this semester is that we accommodated as many as student as was possible to get into the class, those who really needed to take the class to graduate or for some other reasons.","width":1119},{"text":"Um, therefore, we really literally didn't have physical seats in labs and we have to be rigid.","width":536},{"text":"About it.","width":36},{"text":"And Cinda told you about it before, during last lecture.","width":272},{"text":"So what's gonna happen next?","width":137},{"text":"Wednesday, Thursday, Friday?","width":156},{"text":"If you come there, you'll be given a test, it'll have two sets of problems, one is multiple choice another one is live programming.","width":772},{"text":"You'll have to write your program and we'll see if it compiles and runs.","width":278},{"text":"You'll be able to test it as well.","width":184},{"text":"It'll begin closed notes closed books, but also closed local files, closed internet, kind of test.","width":642},{"text":"How is it different from generations of students that took this class for the past 10 years?","width":433},{"text":"Well, instead of an exam like you have, they had evening four hour exams, three times in the semester.","width":548},{"text":"It would be Tuesday evenings, from 7 to 11.","width":223},{"text":"So that was quite stressful, and that is a paper exam, which means that when you write your code, we'll have to figure out that what will we'll have to figure out and evaluate, assess the reason why you, say, didn't put a a semicolon.","width":1110},{"text":"Is it just because you really forgot about it, or just because you didn't...","width":361},{"text":"didn't even know that that is important?","width":136},{"text":"Will not compile.","width":103},{"text":"Um, so obviously there are benefits of testing you on the machines live, right?","width":418},{"text":"How many of you have already had um...","width":188},{"text":"an interview?","width":82},{"text":"With coding questions?","width":153},{"text":"Do they ever ask you anything on paper?","width":185},{"text":"Or do they ask you to write live code?","width":115},{"text":"Live code, right?","width":72},{"text":"So it's..","width":47},{"text":"it's very beneficial way of doing the exams because it not only allows us to assess your knowledge better, but it also prepares you for interviews so this is pretty cool.","width":687},{"text":"I believe it's the right thing to do, and this is how we're going to try it.","width":296},{"text":"The thing is that, unfortunately for you, we're going to be trying it on you.","width":418},{"text":"Which means that, logistically, there may be problems that we not even..","width":267},{"text":"we don't even know about.","width":143},{"text":"But here's the deal: that first exam next week is going to be only for positive credit.","width":664},{"text":"So there's no way...","width":204}],
//   [{"text":"and returns whatever needs to be returned indicated by the function signature in return statement returns it back into the caller function.","width":636},{"text":"So main function loses control for a little bit and this shortlived function does something with local variables and returns the control back.","width":753},{"text":"So, in this particularly case, how do I pass my parameters?","width":253},{"text":"So I want to ask you some questions about this since you already watched.","width":202},{"text":"How do you pass parameter b?","width":130},{"text":"By what?","width":131},{"text":"By value, right.","width":84},{"text":"And we know that because we look at the function signature and see what?","width":606},{"text":"We see that the parameter that is passed has the same type and no pointer or no other flag indicating to the compiler that it has to be passed in some other way.","width":872},{"text":"So if by value that's the default way and you don't have to put any flags and this is our slide how parameter passing by value is done.","width":585},{"text":"The next 2 slides will be 2 other ways of passing parameters and they usually have a little different syntax.","width":561},{"text":"Ok, so let's start with passing by value and as I said my setup is slightly different.","width":357},{"text":"So lets go through what's going on here.","width":206},{"text":"My main function first declares variable a of type student and you can see the type student is defined as a user-defined typed and its a struct.","width":912},{"text":"So what's struct?","width":244},{"text":"It's a class in which everything is public.","width":255},{"text":"It is similar to C.","width":271},{"text":"Who knows C here?","width":71},{"text":"You know, if its similar, is it the same thing or not?","width":411},{"text":"In C, structs would not be able to have functions.","width":319},{"text":"Here, struct is really just syntactically absolutely equivalent to class, where everything is public, which means that it can have functions.","width":837},{"text":"Ok?","width":14},{"text":"So it's not the same thing as C.","width":148},{"text":"C is struct.","width":47},{"text":"Ok, that's cool.","width":42},{"text":"So I can put structures there, I can put functions there, it will be fine.","width":328},{"text":"And my class has a name, like PNG, something like your MP2 and an integer age, ok?","width":451},{"text":"And I'm going to populate, so I declare variable a.","width":339},{"text":"Its going to be on the stack or on the heap?","width":297},{"text":"What's initial values for name, face and age?","width":354},{"text":"Garbage.","width":29},{"text":"That's why I have this lines here that I didn't specifically write but they do initialization.","width":530},{"text":"So can I initialize it to Anna, that's me, and I'm happy today, and this is my favourite age.","width":511},{"text":"The question will be I will not be prying on your personal information if we will have to indicate what's the favourite age of a person.","width":658},{"text":"Mine's 27.","width":110},{"text":"Ok, so let's see what happens next.","width":372},{"text":"The next line says that its an assignment statement.","width":421},{"text":"So the assignment statement, the system will be handled in the following way.","width":355},{"text":"The right hand side is evaluated first, the left hand side next and the assignment is being performed to the variable on the left with the value on the right.","width":763},{"text":"So, the right hand side calls for birthday, which means that the control is now given to birthday function and a is passed by value to s.","width":827},{"text":"Upon that passing, a local copy, do you remember local copy?","width":384},{"text":"Is it on the stack or on the heap?","width":185},{"text":"On the stack, because it has a name.","width":172},{"text":"On the stack, a local copy will be created.","width":202},{"text":"And how is it going to be populated?","width":123},{"text":"What's the default copying mode in C++?","width":444}],
//   [{"text":"member-wise copy, okay?","width":233},{"text":"So the name, the strings, know how to copy themselves, and Anna is going to be copied.","width":488},{"text":"PNGs hopefully know how to copy themselves and if they do, they are going to do it pixel by pixel.","width":455},{"text":"And if I submitted some very high resolution picture, say a terabyte, that is going to be slow, right?","width":517},{"text":"So this is slow and this passing is exactly the slowest moment of this program, okay?","width":462},{"text":"So the moment I pass by value and do memberwise copy, unless I copy my copy constructors which is jumping ahead, unless you do something extra, it's slow.","width":787},{"text":"You don't want to do extra copying.","width":214},{"text":"Okay, so this local copy of Anna with the name s is created, it's also on the stack so we don't have any variables on the heap.","width":587},{"text":"So let's see what the program does.","width":215},{"text":"It goes line by line, it increments s's age, so it becomes 28 in the local scope of this function.","width":720},{"text":"Then we print out birthday and then we return the age of s, which is 28, which means this is the last line of the execution of the program.","width":815},{"text":"We are going to clean up the stack.","width":238},{"text":"Local variables are s.","width":278},{"text":"So s is gone.","width":101},{"text":"It was a short-lived variable.","width":161},{"text":"We did all of that copying for very little reason, right here.","width":352},{"text":"So s, cleaned up, it goes out of scope, but the value 28 is returned as the right hand side because that is what we are returning, fine.","width":957},{"text":"And new_age becomes 28.","width":163},{"text":"So next line, if I want to print out a's age, what's that going to be?","width":507},{"text":"27, right?","width":128},{"text":"So it's kind of strange.","width":93},{"text":"The whole purpose of this program seems kind of weird, right, like why did we pass an a to a birthday function that clearly was supposed to increment the age and it didn't do it.","width":799},{"text":"And the reason it didn't do it is because, well kind of, my question is, is this good or bad?","width":445},{"text":"Is this a good idea to write these kind of functions and pass parameters to them like that or not?","width":437},{"text":"And if it's a good idea, tell me why.","width":142},{"text":"And if it's a bad idea, tell me why.","width":225},{"text":"[inaudible].","width":378},{"text":"It's slow, so bad because it's slow, any other reason?","width":610},{"text":"Slow.","width":105},{"text":"Now we are creating a copy and trying to work on it without actually affecting.","width":342},{"text":"So unless it's really worth it for some other reason, which there is no reason to do it here.","width":603},{"text":"So, modifying local variables only.","width":728},{"text":"Which are short-lived, only during the execution of that function.","width":324},{"text":"So, in this case there is no reason to do that.","width":287},{"text":"So, we don't want to do that, we want to fix it best.","width":154},{"text":"In this case, if I didn't know that there are other ways of passing parameters that will fix the problem, how would I fix it here, how would I update a's age now to be 28 after all this work.","width":992},{"text":"Since I saved new_age, I could just fix it like this.","width":343},{"text":"But it's a very contrived example, right?","width":358},{"text":"It's just a bad code.","width":119},{"text":"So we don't want to write it like this.","width":128},{"text":"Instead we will learn how to improve it, maybe.","width":256},{"text":"So get rid of this slow copying through another way of passing the parameter.","width":485},{"text":"So the next type of passing is called by pointer", "width":463}],
//   [{"text":"The order of operation is first to take, by default if you don't put parentheses, it will try to still take the member variable of s, which doesn't exist, and then dereference that, which would be very wrong.","width":913},{"text":"So we have to explicitly put parentheses to say that, \"First dereference and then take its age.\" Okay.","width":824},{"text":"Fine.","width":22},{"text":"So let's increment...","width":137},{"text":"let's dereference s and increment Ben's age to six.","width":276},{"text":"Question?","width":160},{"text":"Yeah.","width":4},{"text":"[unintelligible question] Dot is for member access so whatever you take a dot of has to be of user defined type.","width":727},{"text":"[unintelligible question] Oh, equivalent syntax, sorry.","width":498},{"text":"That's what I wanted to say here, too.","width":266},{"text":"Equivalently the same thing you could write s->age and these are two equivalent ways of writing the syntax.","width":779},{"text":"Saying that s is not a student.","width":241},{"text":"S is not of user defined type.","width":151},{"text":"S is a pointer, dereference it first and that will be student and take that member variable, age.","width":656},{"text":"Okay, it's just syntactically equivalent thing to do.","width":414},{"text":"So we incremented the age, we printed out birthday, we're gonna return, and let me put asterisk here again just to remind you that there's a lot of passing by...","width":848},{"text":"by pointer means a lot of asterisks.","width":260},{"text":"So now the function stopped executing it's gonna remove all of the local variables.","width":400},{"text":"What are the local variables?","width":242},{"text":"S is gonna be gone.","width":241},{"text":"So s gone, but we return the value six, right.","width":351},{"text":"That's the return that we're...","width":111},{"text":"return value integer value and assign it to new_age.","width":421},{"text":"Question.","width":60},{"text":"What's gonna be the printout of b.age?","width":370},{"text":"Compiler error, first of all.","width":189},{"text":"Right?","width":29},{"text":"B is a pointer, so let's fix that again.","width":179},{"text":"And then what's the output?","width":232},{"text":"Six.","width":122},{"text":"So what's good about it?","width":534},{"text":"It allows you to modify that data without copying it, which could be good or bad.","width":445},{"text":"You really have to be careful about it.","width":107},{"text":"Do you really want that function to have the control over your data?","width":269},{"text":"So that's something to keep in mind but in this case it's good.","width":294},{"text":"What else is good about it?","width":154},{"text":"Fast.","width":42},{"text":"It's fast.","width":52},{"text":"What's bad about it?","width":375},{"text":"Yeah.","width":94},{"text":"Can I say that sometimes you'll have pointers and you'll have nothing...","width":235},{"text":"no way around it, but bad thing is, what about writing all these asterisks?","width":727},{"text":"Some memory access.","width":88},{"text":"A lot of memory...","width":95},{"text":"um, sometimes could be slower than keeping that on the stack.","width":234},{"text":"However if you already had data on the heap, you would have to do it.","width":329},{"text":"So, but syntactically, syntactically, syntax complexity, which sometimes is unavoidable, but in this case, we could do better.","width":1008},{"text":"Anything else that bothers you?","width":184},{"text":"S is a pointer, b is a pointer.","width":313},{"text":"What could could go wrong there when I dereference pointers?","width":389}],
//   [{"text":"The order of operation is to t", "width":16190}],
//   [{"text":"it could segfault in case a pointer is what?","width":429},{"text":"NULL, or something is bad with pointer.","width":221},{"text":"So let me see, I'm a client, say, sorry, I'm a sub-contractor, and I'm writing this function, and I don't really know what is the intention of the user is.","width":647},{"text":"I'm just gonna write the function and maybe, for some reason, maybe for some reason right here, let me write it in the green code, in the green, um, color.","width":794},{"text":"Right here, right before the return statement, I wanna do the following.","width":278},{"text":"I wanna say delete s and I wanna say s equals to NULL.","width":644},{"text":"You know, I wanna clear out this memory.","width":473},{"text":"I don't know what the reasons would be here, but, I don't know.","width":436},{"text":"Why would you want to, you know.","width":149},{"text":"You want to let that memory to go to better place for some reason, I don't know.","width":247},{"text":"Maybe it's not a a birthday, right, something worse.","width":171},{"text":"Anyway, you get that memory back to the system, you NULL the pointer.","width":436},{"text":"What's bad about it?","width":276},{"text":"Yeah?","width":12},{"text":"[It doesn't point to anything] Yeah.","width":230},{"text":"There is no way- so if that's the intention, it's for some reason this function...","width":432},{"text":"I've, I've been to the funeral on Monday, so that's why I have, like, really bad ideas about relating this code to something, but what if for some reason, you know, that's...","width":683},{"text":"that's the end, right, and you want that memory to be gone, okay.","width":404},{"text":"So maybe you really want to do this, you want to free this memory, and you want to make that pointer to NULL because for some reason that person doesn't exist anymore.","width":708},{"text":"So, what can go wrong?","width":112},{"text":"And that's really wrong to do it.","width":149},{"text":"What could go wrong?","width":169},{"text":"What happens on the exec- Yeah?","width":759},{"text":"[Response] So, the, the reason is that, the moment we do it, let's trace it.","width":307},{"text":"We delete S so we give the memory back to the system it can reuse it, do, create, celebrate, other birthdays, right?","width":509},{"text":"Um, S is set to Null, that's good, dereferencing S would give us a, um, a segfault which is really good, but we could return 0 in that case because we could check if s is NULL.","width":938},{"text":"Once we're getting out of the system and we want to ask what happened to b, b is still pointing to that memory; b is not NULL.","width":734},{"text":"There is no way to set b to NULL from the inside of the birthday function if you a pass a pointer by value.","width":443},{"text":"There is no way to do that at all.","width":146},{"text":"There is no access to b at all, which means it's a really bad setup if you really wanna renew the pointer or set it to NULL.","width":590},{"text":"That's not the way to do that, and the thing is you'll have to do it later in the course when you work with trees.","width":502},{"text":"You'll have to reset sub trees to NULL and you will not do it by referencing pointer, eh um referencing parameters by pointers, you'll do it by referencing parameters by reference.","width":916},{"text":"Which is the passing parameters by reference which is the next slide.","width":223},{"text":"Okay, so let's write down what we learned.","width":169},{"text":"Bad thing is syntax complexity, also, um, deleting memory from called functions won't work.","width":1490},{"text":"So you need another mechanism.","width":131},{"text":"However the good news is it's really really fast.","width":153},{"text":"This is fast.","width":57},{"text":"We will not copy images, PNGs, at all.","width":365},{"text":"So the next method really combines all of the good things from the previous two and not have any of the bad.","width":590},{"text":"Um, yeah?","width":97},{"text":"[question]", "width":232}],
//   [{"text":"or by reference.","width":338},{"text":"And how you could indicate, or declare it to the system, that you intended to do that, well if it's by value just put the type.","width":658},{"text":"If it's by pointer by value you could type with an asterisk, that's how you tell it to the system, and if it's by reference, you put the type with the ampersand.","width":1001},{"text":"That's just, a flag that says it's gonna be, just copy it in as another name to the right hand side.","width":539},{"text":"And let's go through the first one, and it's, it's very interesting, it's created some reaction last time.","width":619},{"text":"I really ask you to write this down if you have your computers just type it in, and I want to know your outputs are gonna be.","width":499},{"text":"So the main question is, what's gonna be the output here and here?","width":303},{"text":"So you can go ahead and try to do that.","width":193},{"text":"So this is gonna be returning by pointer by value.","width":455},{"text":"Because we've done returning by value in all of the previous examples.","width":290},{"text":"So let's look at it.","width":91},{"text":"I have a student b, who lives on the stack.","width":377},{"text":"And I populate, I initialize the values to Bill and the age 20, and then I declare a pointer, which lives (it's d) so it lives on the stack originally points to some garbage or whatever location may be it's valid but it's not a location to follow because we don't know what it is.","width":1350},{"text":"We didn't ask for it, so instead so we're gonna assign, or initialize d through this assignment statement, which will be the assignment statement will be calling b and trying to implement the h.","width":1001},{"text":"So we're gonna pass b how do we pass b into s this time?","width":338},{"text":"By what?","width":119},{"text":"By value, which means a local copy on the stack of b is gonna be created.","width":414},{"text":"And I'm gonna go through exercise to show you it's two fold exercise.","width":345},{"text":"To show you how dangerous it is to not have control of memory, which you'll see what happens here, as well as just a reminder that copying is just so, slow.","width":735},{"text":"Because I'm gonna be doing a lot of copying here.","width":310},{"text":"So s is gonna get the value of b, local copy member wise.","width":372},{"text":"Then I'm declaring a student y on the stack initialized to garbage.","width":688},{"text":"Both values garbage fine.","width":166},{"text":"Now student y and, sorry, student w, and you'll have a question, why did I have it assume y.","width":465},{"text":"And you'll see why, it's weird.","width":181},{"text":"Student w is copied member wise from s, so it's Bill again, and the age is twenty.","width":702},{"text":"Now I'm gonna increment w's age so it becomes twenty one.","width":565},{"text":"I'm gonna print out it's birthday, Bill's birthday, and I'm gonna return the address of w.","width":624},{"text":"So whatever that w student is stored in the stack, its address is gonna be returned.","width":449},{"text":"Is there any type mismatch?","width":248},{"text":"Am I returning what I promised I'd return?","width":359},{"text":"Pointer, an address, so it's fine.","width":186},{"text":"Is the right hand side of the return statement the same as the left hand side?","width":330},{"text":"So across the assignment there is no type mismatch.","width":149},{"text":"That means there's no problem right?","width":82},{"text":"There should be no problem.","width":111},{"text":"So what happens upon the termination?","width":186},{"text":"Local variables are removed so what are the local variables?","width":300},{"text":"Let's remove them.","width":143},{"text":"W, y, s, but the address of w is returned as the new value for d here.","width":654},{"text":"So d now is pointing now to an address, it's not something unknown, it's very well known, that the problem is is what?","width":583}],
//   [{"text":"[gibberish] It's not there.","width":131},{"text":"The system doesn't have control, that's that memory is free for use for other variables.","width":513},{"text":"So the question is, what's gonna be the printout here then?","width":189},{"text":"What's the b's age?","width":229},{"text":"20.","width":35},{"text":"B hasn't been changed.","width":145},{"text":"What's the d's age?","width":261},{"text":"What kind of garbage?","width":239},{"text":"I wanna run it, and show you that it's gonna be very interesting kind of garbage, depending on what, on what I'm gonna actually do.","width":1002},{"text":"How my stack in that local function I'm gonna be using, depending on that, will be a different kind of garbage.","width":479},{"text":"So let me compile this.","width":508},{"text":"Ah, where is it, ah, sorry.","width":536},{"text":"So my compiler is nice.","width":160},{"text":"What it actually said, and we usually suppress these warnings for you, so that you have to figure it out.","width":432},{"text":"That you can suppress warnings like that, that tells me, \"Hey, you're returning a memory of a local variable.\" So probably something's gonna go wrong.","width":564},{"text":"So I was warned, I've been warned but I'm gonna run it anyway.","width":467},{"text":"It's 10.","width":253},{"text":"Why's it 10?","width":38},{"text":"Because whatever's gone on the stack has gone on the stack.","width":251},{"text":"Now an interesting question: what if I don't have that variable y?","width":287},{"text":"I put it there just to mess up my stack.","width":281},{"text":"So alright, let me clean it up, let me comment it out, compile it.","width":543},{"text":"It's 20.","width":77},{"text":"Because there's less work that's done upon exiting and cleaning up the stack, and probably that memory was reused in a different way.","width":833},{"text":"So one more thing.","width":163},{"text":"What if I actually didn't even do w, and did s all along, because that's still a local variable, so it's still a wrong thing to do.","width":746},{"text":"Let's see if my stack is affected in a different way.","width":339},{"text":"Now it's 21, because there's almost no work done, so it actually still had that untouched double e s, with 21.","width":663},{"text":"It's called undefined behaviour, right?","width":126},{"text":"Clearly, that's a demonstration of that.","width":486},{"text":"Sorry for the...","width":77},{"text":"yeah.","width":277}],
// ];
//
// if (typeof module !== 'undefined') {
//   module.exports = videoCaptions;
// }
