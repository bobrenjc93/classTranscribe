// Data structure that holds captions for the videos
var videoCaptions = [
  [],
  [{"text":"Yes, we're working out kinks, but guess what? It is 190% better this semester than it was last semester in this room at this time.","width":832},{"text":"Umm, there are some hidden problems you don't even know about. For example, guess what color that ink is? Red. It is red ink.","width":742},{"text":"So we'll figure all this out. And we're not wireless so I cannot play frisbee with my laptop, that's the dream we'll be working toward that.","width":640},{"text":"Umm, and it's a whole new ecosystem for me so patience is good.","width":576},{"text":"Alright so any good parties start off with introductions. SoÂ I'm Cinda, I'm not doing this alone this semester.","width":131},{"text":"Well I never ever do it alone but this time I actually have a co-teacher, he's actually new to campus sort of, his name is Mattox Beckman.","width":969},{"text":"I'm going to introduce him right now, and it turns out that Mattox and I should have been friends decades ago because our time working on our PhD coincided almost exactly on this campus but we only knew of each other by reputation, we didn't actually know each other.","width":1162},{"text":"He's the new lecturer in this department, and he's going to bring a lot of new energy and ideas.","width":384},{"text":"The next introductions I want to do are not for details but purely for magnitude.","width":576},{"text":"I want you to see the sheer magnitude of the course staff we have available to you.","width":320},{"text":"So I invited all of course staff to come introduce themselves at the start of the hour and about a fourth of them showed up.","width":640},{"text":"So, here's my challenge to you.","width":320},{"text":"Do better at class attendance than course staff did at coming to introduce themselves.","width":832},{"text":"This is fun when almost all the seats are full.","width":448},{"text":"Alright so anyway, I want them to tell you who they are very quickly, because I want you to hear the variety of places they come from and years that they are in school.","width":704},{"text":"So tell me your name, your year in school and your major.","width":256},{"text":"Hi, I'm Bol, I'm a first year grad student, I did my undergrad in civil but now I'm starting CS.","width":512},{"text":"Wow, that's exciting, nice to meet you too.","width":192},{"text":"I'm also meeting some of these people for the first time.","width":192},{"text":"Hi, I'm George, I'm a second year in CS.","width":222},{"text":"George, I knew you when you were this tall.","width":355},{"text":"Hi, I'm Laura, I'm a senior in CS.","width":191},{"text":"Hi, I'm Andrew, I'm a sophomore in CS.","width":195},{"text":"Hi, I'm Mosa, I'm a junior in computer engineering.","width":192},{"text":"That means this building is his home.","width":128},{"text":"We're visitors here.","width":128},{"text":"Some of the rest of us are visitors here.","width":192},{"text":"I'm Shi-shen, I'm a junior in CS.","width":192},{"text":"I'm Flora, I'm a junior in CS.","width":211},{"text":"How long have you been a computer scientist, Flora?","width":192},{"text":"A computer scientist, since high school but...","width":328},{"text":"A computer science major?","width":59},{"text":"A computer science major since last Thursday.","width":128},{"text":"And we're very happy about it.","width":192},{"text":"We got her!.","width":64},{"text":"Hi, I'm Adya, I'm a junior in CS.","width":256},{"text":"Hi, I'm Justin, I'm a junior in CE.","width":128},{"text":"Oh, another one.","width":64},{"text":"(laughter)","width":128},{"text":"I'm Chase, first year grad and CS.","width":192},{"text":"I'm Rohan and I'm a junior in CS.","width":320},{"text":"I'm Terry, I'm an english PhD and now just won't be teaching you. I'll be helping Beckman.","width":512},{"text":"He's actually going to read all your emails before I do.","width":192},{"text":"So, when you compose something to me, you're going to send it some place Terry sees first, so if you're mean to me, he's going to change all the wording. Because that's what he does.","width":768},{"text":"And you know, you can be as mean as - no way.","width":192},{"text":"That's wrong.","width":64},{"text":"Hi guys, I'm Asma, second year PhD in CS.","width":384},{"text":"I TA'd 125 last semester.","width":128},{"text":"I can see some of my students here so, really exciting!","width":320},{"text":"Hi guys, I'm Chaitanya, second year grad student in CS.","width":320},{"text":"Again, I TA'd with Asma, and I can see couple of people here.","width":418},{"text":"We get all the good ones, eventually!","width":256},{"text":"I'm Roy, I'm a first year grad in CS.","width":128},{"text":"Where you an undergrad here?","width":64},{"text":"Yes, okay.","width":128},{"text":"So, one thing we really like - did everybody get to introduce themselves? - one thing I really like is that our undergrads tend to stay for grad school.","width":686},{"text":"Chase was an undergrad here too.","width":124},{"text":"So they know the course, they know what's going on.","width":114},{"text":"Okay, so that's us.","width":64},{"text":"You guys can do whatever - oh, I have a task already.","width":192},{"text":"Could you pass somebody - volunteer to pass out handouts?","width":256},{"text":"The printer died halfway thru so, maybe divvy those up and kinda do them by rows.","width":550},{"text":"First official task.","width":192},{"text":"Okay, but we're not done with introductions because there is that awkward moment where you know us but we don't know you.","width":527},{"text":"So, first of all, I'm always curious about majors.","width":256},{"text":"So raise your hand if you're  a CS major.","width":128},{"text":"Okay, so everybody see that? So what we're doing here is building histograms over the room.","width":384},{"text":"You can tell density of things by looking around the room, we do this all the time.","width":320},{"text":"Raise your hand if you're a Comp E.","width":192},{"text":"Look at that, about half and half!","width":128},{"text":"About half and half for this semester.","width":128},{"text":"How about EE?","width":128}],
  [{"text":"Oh, a third a third, a third. ","width":122},{"text":"Ok. Raise your hand if your major is none of the above.","width":348},{"text":"Ok. A fourth, a fourth, a fourth.","width":233},{"text":"Raise your hand if it is not the above and you would like to be a cs minor or you're intending to be a cs minor.","width":559},{"text":"Ok. Alright. So somebody who is uh..one of the not of the aboves volunteer to have a little conversation with me.","width":552},{"text":"So raise your hand if you are willing to have a public conversation with me about your major. ","width":288},{"text":"Anybody willing to do that? Ok. Ohh...we're in this huge room. Oh,  Tim you are gonna save me. Thank you. Ok. ","width":448},{"text":"So, what's your major? Economics. Ok. So how are you using computer science and economics? What's your intention?","width":577},{"text":"I have no idea. Ok. That's perfectly fair. Now. What I really..so that was all superficial right? That's what you'd..exactly. What dorm do you live in kind of stuff. But here is the meaningful thing. Ok.","width":704},{"text":"Tim, did it hurt you to speak into my microphone to all these people? ","width":300},{"text":"Oh no. Not all all, right? Ok! So my challenge for each one of you is to do that sometime during this semester, to have a little bit of dialogue with me or with whoever who happens to be teaching cuz it's a little bit weird to talk in this room for the first time for most people.","width":1280},{"text":"But is there somebody else over here who is willing to have a conversation? Okay.","width":234},{"text":"What's your major? ","width":111},{"text":"I am a jazz studies.","width":227},{"text":"Is it music? ","width":70},{"text":"Yea. Ok.","width":64},{"text":"Are you? So are you a performer? Well it could be dance? Come on.. it could be dance? Are you performer?","width":384},{"text":"Uh..I guess I am, but I cannot dance.","width":182},{"text":"Ok. And did this experience hurt?","width":239},{"text":"No, it did not. I mean, a little bit.","width":128},{"text":"But..","width":41},{"text":"It hurt a little bit?","width":67},{"text":"Alright. So we are not going to spend any more time getting you used to the feel of the room, but I would really really like for you to make it a personal goal to be brave enough to like..","width":576},{"text":"raise your hand, offer an answer, its..its..we need it. Alright. So.","width":384},{"text":"Moving beyond that. Ok. So what I want to know are, is your year in school approximately. ","width":384},{"text":"Ok. So if you are a freshmen or sophomore, raise your hand.","width":320},{"text":"Ok. ","width":125},{"text":"I'm thinking two-thirds. We'll give that a guess. If you are a junior or senior, raise your hand. ","width":448},{"text":"Yea, ok. About a third. And what if you're..how about a grad student? Anybody a grad student? ","width":403},{"text":"here..a few grad students. Ok.","width":156},{"text":"Alright. Let's see. Anybody else have a question? I have a puzzle for you. Somebody think of a question that you believe will divide the room in half.","width":640},{"text":"Divide the room..","width":64},{"text":"Hang on..","width":83},{"text":"Divide the room in half.","width":159},{"text":"Yes? You have a question you think will divide the room in half?","width":232},{"text":"Ok. I should have traveling mics.","width":416},{"text":"Yes?","width":64},{"text":"Are you male?","width":128},{"text":"Oh..that is wishful thinking on your part.","width":264},{"text":"On my part too..","width":134},{"text":"I can riff on inclusivity and diversity for a really long time.","width":386},{"text":"And probably throughout the semester, some issues will come up.","width":356},{"text":"You know I think it doesn't divide the room in half. Should we try it?","width":188},{"text":"Yea..Ok.","width":64},{"text":"So raise your hand if you identify as male?","width":152},{"text":"This is putting people on the spot, huh..sorry.","width":192},{"text":"You don't have to answer this one. Raise your hand if you happen to identify as female.","width":320},{"text":"Yea ok. Let's fix this. Ok?","width":192},{"text":"Let's work together to fix it. It's no one person's issue. Computing is cool and it's a shame when it's only few people doing it.","width":578},{"text":"Ok. Another question that divides the room in half. Yea?","width":225},{"text":"Can you yell? Just yell, so I don't have to run. I'm getting tired.","width":256},{"text":"In the what?","width":384},{"text":"the what? the thursday lab discussion..","width":192},{"text":"Thursday? Thursday lab discussion? People with lab discussions on Thursdays?","width":384},{"text":"This is a good one because...ok. Fine.","width":256},{"text":"Friday lab discussions?","width":192},{"text":"And yea that pretty much divides it in half? Wednesday night lab discussions?","width":320},{"text":"How cute. They're doing this. They're doing this thing. Ok. There are few. Ok. How about this? Cubs or Cardinals? ","width":448},{"text":"Cubs?","width":128},{"text":"Cardinals?","width":128},{"text":"I haven't been to the zoo lately?","width":256},{"text":"I don't know what you're talking about? ","width":240},{"text":"Ok. ","width":82},{"text":"Among people in central Illinois, the issue of Cubs and Cardinals divides neighborhoods. Ok. Baseball to Baseball thing. ","width":450},{"text":"Umm..","width":108},{"text":"Ok.","width":64},{"text":"Do you know that we are effectively at the geographic center of Indianapolis, St. Louis, and Chicago? Which make means that everybody in town should be a Packers fan instead of a Bears, Colts, or Rams fan, but you know unfortunately those are few and far between.","width":1283},{"text":"Ok. Um..Anything anybody else wants to tell me ","width":284},{"text":"about you guys","width":128},{"text":"Oh I know one. ","width":128},{"text":"Late night versus early morning? Hi, Sylvia.","width":223},{"text":"Late night versus early morning? Ok. I consider myself a night owl.","width":384}],
  [{"text":"I love the early mornings","width":291},{"text":"Okay","width":109},{"text":"Alright, nice, we will have o, we will have office hours early in the morning.","width":320},{"text":"You can tell how they will be populated versus the evening one.","width":252},{"text":"Its wise to rise with the birds, carninals haha.","width":292},{"text":"Okay. Alright, we need to get rolling cause I actually intend to talk about c++ today rather than just riffing on the joy of college.","width":618},{"text":"So, we should work.","width":128},{"text":"Anybody wanna tell me anything else?","width":208},{"text":"Okay","width":74},{"text":"So, all you need to know. Okay this is gonna be the thing.","width":448},{"text":"Will be.","width":256},{"text":"Here","width":64},{"text":"I haven't actually our site to the official site yet.","width":320},{"text":"But, all of the logistic details of the course will be at the course website.","width":404},{"text":"Including all information on this stuff.","width":192},{"text":"We haven't connected the pieces together, but that should be your first stop for questions that you have about course infrastructure.","width":631},{"text":"And that's pretty much all I am gonna say about it.","width":176},{"text":"I am not gonna talk about the details of grading at this point.","width":256},{"text":"I am not gonna talk about the details of MPs, Machine Problems.","width":338},{"text":"The only thing I am going to tell you is that lab sections meet this week.","width":620},{"text":"So, when you registered for this course, you registered for lab section.","width":289},{"text":"This first week I request that you please go to the one for which you are registered.","width":320},{"text":"In subsequent semester, or in subsequent weeks, you may be able to flip around if you need to.","width":373},{"text":"But for this first week, while we are getting a grip on who's actually in the class.","width":292},{"text":"Please go to the one to which you are registered for.","width":319},{"text":"Okay, any questions about that?","width":155},{"text":"Okay.","width":244},{"text":"So, everyday, so you can almost think of this moment as the first moment of lecture","width":415},{"text":"Everyday, we will start the lecture with the series of announcements.","width":246},{"text":"Those announcements will tell you uh oh","width":334},{"text":"don't know what I did. Where did the magic guy go.","width":312},{"text":"I didn't do anything.","width":367},{"text":"Ian save me.","width":342},{"text":"Okay. So, these announcements will tell you what is going on with the course in terms of due dates.","width":704},{"text":"I.. I don't know","width":603},{"text":"Yeah Okay I'm gonna keep going Oh good see.","width":293},{"text":"Okay","width":163},{"text":"So the announcements today are we are gonna give you your first assignment later this afternoon.","width":359},{"text":"Also your first programming assignment later this afternoon","width":174},{"text":"So you want me to hurry up, so we get c++","width":256},{"text":"Classes are cancelled on Monday because of Labor day.","width":296},{"text":"And that's this Monday right? the Next monday","width":432},{"text":"Is that right? the first Monday?","width":256},{"text":"Oh brother.","width":128},{"text":"That's actually this noon nifty font.","width":192},{"text":"This is this new nifty font that makes 7s look like 1s","width":448},{"text":"Thats all.","width":189},{"text":"Okay","width":74},{"text":"So we have class on Monday.","width":178},{"text":"Okay, fine we are good.","width":320},{"text":"I think we are good We'll see. I'll figure this out.","width":254},{"text":"I need a calendar in front of my face.","width":235},{"text":"Mattox you helping me here?","width":192},{"text":"Labor day is","width":192}],
  [{"text":"Yes","width":640},{"text":"No it isn't.","width":128},{"text":"Because this is the magic of that fun","width":64},{"text":"You gotta gonna flip a coin.","width":128},{"text":"And decide which one it is","width":128},{"text":"everytime","width":64},{"text":"Here is what we are gonna do","width":512},{"text":"for our debug you brain","width":128},{"text":"As long as I try, not everything in the lecture is clear. ","width":192},{"text":"So what we are going to do is after every lecture out there for now ","width":832},{"text":"will probably do it right out side this room","width":64},{"text":"until it is too crowded","width":128},{"text":"find a conference room","width":64},{"text":"We are going to hold follow up","width":128},{"text":"or debugs your brain","width":128},{"text":"or debug your lecture exprience","width":64},{"text":"right out side that room","width":192},{"text":"for now ","width":128},{"text":"right after this lecture will mostly be Mattix","width":192},{"text":"doing that I will do the one after the next lecture","width":192},{"text":"that's gonna a little bit of flux","width":64},{"text":"say when you get out of class there will be resources available","width":128},{"text":"and those constitute our open office hours even if you don't come to class","width":256},{"text":"Â  Â who will do that","width":384},{"text":"you have access to us in that lobby","width":384},{"text":"kind of meat day on Monday Wedesdat Friday","width":192},{"text":"Ok","width":192},{"text":"go to section this week","width":64},{"text":"they talk about the they  specifically talk about the protocol ","width":192},{"text":"the infrastructure of this course","width":256},{"text":"and the way you check out","width":128},{"text":"do and checking for your homework assignment","width":64},{"text":"so","width":192},{"text":"so that session make the rest of the semester a lot smoother","width":64},{"text":"have another announcement ","width":384},{"text":"for which I do not yet have a room ","width":64},{"text":"but on Wednesday will have a room ","width":192},{"text":"if you are not comfortable using Linux or Unix system in general ","width":128},{"text":"then we have a tutorial ","width":384},{"text":"available to you","width":64},{"text":"from 8/27 or 8/28","width":768},{"text":"you sure Monday...oh it's August","width":64},{"text":"Linux tutorials","width":384},{"text":"7-9pm","width":384},{"text":"that's being run by the ACM","width":64},{"text":"we just don't have a room yet","width":128},{"text":"so far","width":64},{"text":"before we even announce ","width":128},{"text":"the Facebook event actually have 245 tanbes","width":320},{"text":"We are looking for","width":64},{"text":"a big room","width":128},{"text":"Alright oh look","width":64},{"text":"it looks red","width":64},{"text":"sorry","width":128},{"text":"When do that happen","width":64},{"text":"let's make it look blue","width":192},{"text":"Alright any question","width":576},{"text":"about announcements ","width":64},{"text":"we don't know what room it is yet","width":384},{"text":"We will be all announced it on Wendnesday","width":128},{"text":"We don't have a room yet, it might be here","width":128},{"text":"We don't know","width":256},{"text":"Alright","width":128},{"text":"so what's this course about","width":64},{"text":"I have some metaphors ","width":128},{"text":"for you","width":64},{"text":"there is the stadium","width":320},{"text":"that's our stadium","width":128},{"text":"raise your hand if you have not yet been to a ILLINI football game","width":64},{"text":"you have a another goal for you this semester","width":384},{"text":"because the pageant tree is kind of cool ","width":192},{"text":"Umm go to a ILLINI football game","width":128},{"text":"it's kind of fun","width":128},{"text":"it's like a phenomenon ","width":128},{"text":"I will be going on October thirteenth","width":256},{"text":"because I grew up in Nebraska","width":128},{"text":"go big red","width":192},{"text":"sorry","width":128},{"text":"alright so I count you to go","width":64},{"text":"because it is just fun","width":192},{"text":"Now here is my question","width":128},{"text":"what you have is this stedium","width":192},{"text":"and I wanna know","width":64},{"text":"Where is Tom Bogue","width":128},{"text":"what are your idea for finding Tom Bogue","width":258},{"text":"there is the stadium ","width":71},{"text":"is filled with tens of thousands of People","width":64},{"text":"How I am gonna find my friend Tom Bogue","width":128},{"text":"who is a course staff","width":128},{"text":"for since who wasn't here","width":192},{"text":"I am actually looking for him","width":64}],
  [{"text":"Where's Tom? He's kind of unlikely to be in the stadium.Â ","width":256},{"text":"Darnit. Where's Tom Bogue? How are you going to find him in the stadium? How are you going to find him?","width":576},{"text":"You can raise your hand, and I'll talk to you. Yes, what's your idea to speak very loudly.","width":192},{"text":"Get on the loudspeaker. And ask him to meet you where you are right? Share your location with your iPhone right? Say come here right now.","width":896},{"text":"Okay, so get on the loudspeaker, so this is a technology that allows for simultaneous broadcast to everybody in the stadium. ","width":448},{"text":"Well guess what, what happens if the loudspeaker is broken? How are you going to find Tom Bogue?","width":192},{"text":"Can you yell loud enough from over there so I can hear you. Oh, call him or text him on his phone right? Yo Tom, meet me at the... Alright, so there's technology there that makes that possible, what's that? What is the detail that makes that possible? His cell number, that's right. So you have a unique identifier you can use to find him directly, not unlike a hash table I'd say.","width":2432},{"text":"Alright, now guess what, Tom doesn't have a phone. How are you going to find Tom Bogue? Oh, so you're going to trust that Tom has not scalped for his ticket, and that the official ticket sales office, has connected Tom to a particular seat yes? Yes, that's one way of maybe doing it. ","width":1664},{"text":"So there's some potential for fault in the system there. In an ideal world, that should work perfectly, good idea. Of course, you'd need to have access to that proprietary data, but you know, we're optimistic here. Okay, anything else? So we don't have access to the proprietary data, and Tom scalped his tickets. Yeah? ","width":1792},{"text":"I could go look for him. That would be my favorite thing. Okay so let's pretend you guys are the stadium and I'm going to look for him. Are you Tom Bogue? No, oh okay. Are you Tom Bogue? Are you Tom Bogue? You guys should stop me.","width":1472},{"text":"Are you Tom Bogue? Are you Tom Bogue? You guys should collectively stop this. Yeah, yeah okay. Why? Why? Why stop it?","width":640},{"text":"It's inefficient. That's right. You're sitting there going, \"She's an idiot.\" Right? That's dangerous to do, but okay. Yeah, because look, the amount of time it was going to take to go all the way through this room, and find out that Tom wasn't here, was proportional to the amount of time it took me to talk to each one of you. That's no good. Especially if we have a complete conversation right? So what else could we do in that scenario? Yeah?","width":2048},{"text":"Yeah, yeah, yeah, that's like broadcasting right? Yeah? I could, oh, oh that's kind of cool, that broadens the bandwith of things. He said to ask individual people if they had seen him. So I could ask, that person right there if they'd seen him, and they would go, oh I didn't seem him. ","width":1792},{"text":"I could ask that person over there, and so instead of talking to every last person, I could maybe talk to every ten perhaps? Okay, fine. Yeah?","width":576},{"text":"Okay, very good, okay. Look at this. So, are you Tom Bogue? Okay, so what I would really appreciate is if you would everybody around you if they are Tom Bogue, and repeat this process with them. Okay? Alright, so do you have a mental image of what would happen if we did that?","width":1472},{"text":"What does it resemble? Don't tell me a tree, we're in a football stadium. It resembles.., you can get this, see this is why you guys need to go to a football game. It resembles a wave, that's right, we could do this. ","width":1280},{"text":"That's right, okay. So that kind of connects the story back and forth. And it turns out, it's not quite right, but it's close, it turns out that effectively we could examine the whole room in approximately the amount of time it would take me to talk to just a few people. You can imagine it spreading diagonally here. Now, the actual way that it would spread, well that's what we're gonna talk about later in the semester.","width":1920},{"text":"Actually quantifying the difference between the two algorithms or techniques for investigating the data, that's what this course is about. In fact, we're going to have arguments about which approach would be better. I might not trust that somebody else can ask the question. I might need to rely on this me asking every last person, that would be being a control freak. Alright, so in any case we're ","width":1920},{"text":"going to have those arguments and discussions. That's what this course is about. Any questions about it? Or comments? Alright, beat that one to death. Here's yet another metaphor. Here's yet another metaphor for what this class is about. And yet another question that helps me get to know you.","width":896},{"text":"Raise your hand if your closet looks more like the upper left.","width":320},{"text":"","width":64}],
  [{"text":"Raise your hand if your closet looks more like the lower right.","width":256},{"text":"I assert that there's actually a lot of correlation between night owls and upper left.","width":384},{"text":"and morning person and lower right","width":128},{"text":"but we won't investigate that. That's a question for another time.","width":320},{"text":"Alright, let's do it again. Upper left? Lower right? Ok. Raise your hand if you didn't raise your hand in the last minute.","width":704},{"text":"Why? Why didn't your choose between them?","width":384},{"text":"It's about half and half.","width":384},{"text":"Ah, ok so there's a grey area between the two and that probably where most people are.","width":256},{"text":"How about it I asked you which one you'd like it to be?","width":256},{"text":"Not the left.","width":128},{"text":"Ok. Alright. Did that hurt? And you weren't ready for that at all. We didn't talk about that ahead of time. I don't even know your name.","width":640},{"text":"Alright. Ok so the metaphor here, in case you're missing it, is that not only can we be clever with the mechanism","width":1088},{"text":"we use to search our data. We can be clever with the mechanism we use to arrange our data in the first place.","width":576},{"text":"Now the real question is if you're looking for your purple long sleeve button down.","width":448},{"text":"Would you rather look for it in this closet or in this closet?","width":384},{"text":"Yeah, obviously.","width":512},{"text":"Alright, all you do is go the the button downs and it's right there. Right?","width":192},{"text":"Where this one you do your back linear search.","width":256},{"text":"Alright so, our algorithms and our arrangement of data in memory are two things.","width":512},{"text":"And it's the whole course. Any questions or comments?","width":320},{"text":"Ok what's it like? Eh, you can read that later.","width":320},{"text":"It's a puzzle solving course. My goal every day is to have you go \"Oh, that's cool\" once. Just once during the day.","width":704},{"text":"That's what I want from you. I want you to go \"Oh, cool!\" just one time.","width":384},{"text":"And that's the thinking part of it. Where you're thinking broadenings. Has that happened yet today?","width":448},{"text":"Eh, ok. I don't want to know. Alright.","width":384},{"text":"Where did you come from? So I think that many of you can raise your hand if your introductory course, your prerequisite course is 125. ","width":576},{"text":"That corresponds a lot to the CS majors a probably minors.","width":192},{"text":"Raise your hand--ah this is so hard. I cannot remember what the prerequisite course is for ECE. Which one is it?","width":576},{"text":"Did that hurt?","width":128},{"text":"To talk to me? Ok.","width":128},{"text":"Alright. And what's your name? Matt, ok. Thank you.","width":320},{"text":"Alright. So it is 220. Good alright. That's the prerequisite course.","width":512},{"text":"Now the amazing thing is that you guys in 220. You people in 220 learn everything you need to know about C.","width":576},{"text":"And that means things like pointers and memory and being responsible with your memory.","width":768},{"text":"And if you came from CS 125 it means that you know everything that there is to know about objects.","width":768},{"text":"Well guess what, in this course we seek to unify. And so we're going to use C++. And the dated version for a very deliberate reason.","width":640},{"text":"We're gunna use C++ and the cool thing about it is that there is a little something in for everybody.","width":512},{"text":"C++ has pointers, that is we control our memory at a lower level.","width":512},{"text":"But it's also object oriented. ","width":384}],
  [{"text":"Now, if you know everything there is to know about pointers, I'd still suggest that you use that as a springboard to learn, perhaps a little bit new, how C++ deals with memory a little differently, at least syntactically, from C. So you will still not want to disengage, you will still want to be disengaged with the idiosyncratic differences between C and C++.  And now, in the previous sentences replace pointers with objects and the same is true for those of you who came from 125.  Even if you already know about objects, you will find new idiosyncratic things in C++ that you should learn about. So, these two things even though parts of them are familiar, as a whole they will be slightly different.  My take will be, my emphasis will be to differentiate C++ from your previous experiences.  So I'm going to assume that you know for loops, variable assignment, function calling, I really am going to assume that you have had the introductory course, cruise right on past that basic stuff (conditionals, what) cruise right on past that basic stuff and into the ways that it differs, and the ways that it will serve us in learning about data structures.  Any questions?  Alright.  Let's work.  So, the first c++ - and I have 15 minutes - can we find - 13 minutes - we're going to get a ton of stuff done. Because you already know a lot of what I'm about to tell you.  You already know it.  You already know that when you declare and define a variable in your prerequisite language that it has the following characteristics.  You might not have thought about it explicitly before.  But I'm pretty sure it won't surprise you when I tell you every variable has a name, and a value, and in our languages of choice, it has a type, and they have memory locations.  That is the value of this variable is stored someplace.  Okay?  Any of that surprise you?  Alright.  So, uh, like these other languages C++ has some primitive types.  These are things that you can look up.  We make a declaration in c++- for completeness you can look them up.  We make a declaration in c++ in a way that won't surprise you.  If I want a boolean I'm gonna call it a bool.  Cat.  Like this.  Okay?  So I declare the variable - what's the variable name?  Cat.  What's it's type?  Boolean.  What's its value?  This is tricky.  What's its value?  Okay.  Anytime you ask what's its value and there isn't an automatic known everybody answers the same thing we're all sure we're all on the same page, then what you have to think is it is garbage.  It absolutely has no value.  Now, it's true, that some c++ compilers will stick in, you know, a default value for you.  But, we're never going to rely on that.  We're always going to assume it is garbage until we give it, until we explicitly give it the value that we want it to have. so, oftentimes, these primitive types will be accompanied by an assignment statement much like this.  So that statement is equivalent char rating; rating = 'E';.  We can do them both in one go.  Any question about it?  Okay, fine.","width":5120}],
  [{"text":"so bad it's, uhh. So bad... It's good. Okay, The key thing to notice there is sometimes if you don't include your decimal to reinforce the fact that you're not dealing with integers, the compiler will yell at you.","width":1280.4},{"text":"So, you know, that is the shortcutting a ton of ridiculous debugging time right there. ","width":320.4},{"text":"All right, any questions about that?","width":192.4},{"text":"No. Here is what I think. I think you should be sleeping. Kuhh, we had known about variable declaration for at least a semester now. ","width":576.4},{"text":"So, here is where things get a little bit more interesting. ","width":256.4},{"text":"It turns out that the set of primitive types of things we can use to declare variables is not enough.","width":384.4},{"text":" In many many almost all circumstances, in fact, we want to define our own types to use as the bases for declaring variables.","width":704.4},{"text":"Okay? In C that was structs; in JAVA it was classes and in C++ it is classes.","width":384.4},{"text":"Alright, so here's what we gonna talk about next.","width":192.4},{"text":"User defined types in C++, those are classes.","width":512.4},{"text":"Okay? And I will show you the syntax for defining a class in just a minute because I wanna start with how do you use a class once it is defined and available to you.","width":704.4},{"text":"Well, you use it.","width":128.4},{"text":"This is different. This is different than in JAVA.","width":128.4},{"text":"You use it just like you do a primitive type and, in fact, a software engineering principle says that when you write a class, you create a type that can be used just as if it is a primitive type.","width":960.4},{"text":"It is sort of one of the standards for completeness.","width":128.4},{"text":"Okay? Alright, so if it's just like a primtive type and if my class name is sphere, then I declare a variable of type \"sphere\" using this statement.","width":896.4},{"text":"Any question about it? ","width":64.4},{"text":"So now I have a sphere. ","width":64.4},{"text":"We don't yet know what a sphere is.","width":192.4},{"text":"We gonna define the class later on.","width":256.4},{"text":"For now, I just want you to see how to declare one. ","width":192.4},{"text":"Okay, so, a class is a group of two things...","width":704.4},{"text":"It is a group of a variables and functions.","width":512.4},{"text":"Now, these two words, which I will refer to as variables and functions, in other languages may have different ways being refer to.","width":704.4},{"text":"So, we may have fields, here sometimes instead of variables.","width":320.4},{"text":"We might call them member variables and I will always do that actually, almost always do that if I rememering that they are called member variables.","width":512.4},{"text":"Uh,  and functions, functions are always refered to as... methods, very good.","width":768.4},{"text":"And for those of you who came from C, the classes is not very different from a struct except for this part.","width":960.4},{"text":"Okay? a class is not very different from a struct except for this part.","width":192.4},{"text":"Any questions?","width":128.4},{"text":"And I will show you how to use that part very soon.","width":128.4},{"text":"Not quite yet, I don't think","width":128.4},{"text":"One of the things that ran wrong this morning was that the printer was broken and so, I don't have my class notes.","width":512.4},{"text":"So we are a kind of winging it.","width":64.4},{"text":"you've probably noticed.","width":192.4},{"text":"Alright, so here we go.","width":128.4},{"text":"Let's define a class.","width":64.4},{"text":"Okay?","width":128.4},{"text":"Now, here is the skeleton, here is the skeleton.","width":192.4},{"text":"Uh, we simply define class \"sphere\" [use] opening and close brackets to declare a block of code and what is different from what you've seen before is that we do have to include a semicolon in this case after the class definition.","width":1344.4},{"text":"And the reason for that is because there is a field right there that we don't use.","width":256.4},{"text":"Okay? But it exists in the language definition and so we have to end that statement.","width":384.4},{"text":"There's like this \"ghost\"  statement here.","width":128.4},{"text":"Okay?","width":64.4},{"text":"So, another common mistake to make is to forget that semicolon because it feels redundant.","width":384.4},{"text":"Feels like I put a closed bracket there and it must think I'm done with my class definition but you are not.","width":384.4},{"text":"Okay, so, well, uh, here we go.","width":384.4}],
  [{"text":"hello there!","width":218},{"text":"hi hi hi","width":171}],
  [{"text":"Hello? There we go. Ok I had to turn it on.","width":2368},{"text":"So, RP is Reflections|Projections. It's like a conference where we have speakers come in and there's a job fair.","width":384},{"text":"And there's also something called Mechmania which is a coding competition from friday to sunday.","width":462},{"text":"And every year they make up an entirely new game that you kinda work your way through.","width":320},{"text":"Every year we have a Mockmania before the event where people try out the game and make sure there aren't any bugs","width":384},{"text":"Trying to get it ready for the actual thing. So if you're interested in being in Mockmania you should come and be a part of that.","width":704},{"text":"You can sign up at acm.uiuc.edu/mockmania","width":832},{"text":"And if you come there might be prizes if you find some really good bugs. And there might be food. There probably will be food.","width":832},{"text":"Yeah, Mechmania is the actual event and the Mockmania is just the trial. We'll probably have it in the next week or so.","width":576},{"text":"Ok. My turn. I didn't have bug free slides last time and probably the most critical piece of information","width":1792},{"text":"I have for you is just plain flat out wrong. I believe with 99% certainty that that is actually the course website.","width":640},{"text":"So everything you need should be there. I am aware that the lecture slides are not yet uploaded, they will be.","width":448},{"text":"That's like highest on my priority list to do after I get back to my office.","width":384},{"text":"It's a process.","width":128},{"text":"If you have general questions, even if they are one-to-one questions between you and course staff, please post to Piazza with those questions.","width":1088},{"text":"You can post privately. Right now all of our email boxes are way too full.","width":448},{"text":"And I think I have about a 50% hit rate on actually seeing all of the email that's coming to me.","width":576},{"text":"If you post to Piazza you have at least 40 sets of staff eyes on your message.","width":448},{"text":"I was asked a question right before class. Gosh I've already forgotten what it was.","width":384},{"text":"I suggested to be posted to Piazza so this is the perfect example. Does anybody have any questions?","width":640},{"text":"What is your question?","width":192},{"text":"If we're currently taking CS 173 will we get the math from that in time for use in this course?","width":768},{"text":"Ok, so I think that the consern came out of Homework zero.","width":384},{"text":"And sort of assess how much time we should spend on Homework zero.","width":384},{"text":"We've pretty much settled into the fact that 173 teaches you stuff in time for you to use it in this class. ","width":512},{"text":"There's like one day where it's kinda switched. One day when we're talking about induction it's kinda switched.","width":448},{"text":"But in the end it ends up being ok. So taking CS173 concurrently with this class is not bad.","width":512},{"text":"Now how much time should you spend on Homework zero if you're concurrently taking 173?","width":448},{"text":"I think Homework zero, at least parts of it, are kind of fun. And so use Google. Try to do it. Don't spend all week on it.","width":704},{"text":"If you kind of give your best effort and it doesn't flow but you are currently enrolled in 173 then you're ok.","width":640},{"text":"If you give your best effort and it doesn't flow, and you are not in 173 then you may consider adjusting your schedule for this semester.","width":768},{"text":"Does that make sense? Does that cover all the issues? Yes ok.","width":320},{"text":"Alright so more details for that discussion could happen on Piazza.","width":448},{"text":"I think lots of people are interested in that issue.","width":512}],
  [{"text":"Due date ... right there and proficiency ","width":192},{"text":"exam sign up instructions","width":192},{"text":"so if you have had a data structures class and you did well in it","width":384},{"text":"and you don't want to be in this room,","width":64},{"text":"you're welcome to take the proficiency exam, and I'll tell you that the pass rate is pretty low","width":320},{"text":"Umm... and that uh, in fact very few people even take the CS225 proficiency exam.","width":384},{"text":"Some people take it and still enroll.","width":192},{"text":"Some people pass it and still enroll in the class, so I don't know what the deal is.","width":512},{"text":"The information for signing up if you think you'd like to take is that I certainly don't intend to discourage anyone from taking it.","width":384},{"text":"You are all welcome to take the exam.","width":38},{"text":"Alright. Any other questions, any questions about the announcements?","width":256},{"text":"Okay, so I left you hanging in the middle of last lecture; completely hanging. ","width":296},{"text":"In fact, we had started to define our first class. ","width":351},{"text":"In our first class","width":192},{"text":"We were defining class sphere.","width":256},{"text":"The reason why we wanted to define a new class is because we wanted to declare things of type sphere, and low and behold, sphere is not a primitive type in C++.","width":832},{"text":"So my objective and my goal is, mmm, I'm not going to be fluent with this tablet yet, and I apologize, but I'm working on it.","width":474},{"text":"My goal is to be able to make a declaration of type sphere of a variable whos variable whose name is beach ball.","width":792},{"text":"For example, okay? Now the question is how do we make that happen? The answer is to define a class whose name is sphere.","width":640},{"text":"The details of defining a class are like this","width":256},{"text":"You understand that there is this public access system, but you don't necessarily know what that means","width":446},{"text":"And a private area in the class definition","width":192},{"text":"You don't know yet what that implies, and that's okay.","width":256},{"text":"Then you go to the drawing board and you think, okay, what kind of functionality do you want from a sphere and how do you represent a sphere.","width":704},{"text":"That is, what data do we need to umm keep about a sphere. So when we talk about the representation.","width":576},{"text":"What we're really talking about is what data will characterize anything of class sphere.","width":176},{"text":"So ... raise your hand if you have an idea of data that will characterize a sphere.","width":429},{"text":"Yeah? Whether it is round or not. Guess what? We're going to implement it so that it is round","width":459},{"text":"Okay? Sphere will be round","width":128},{"text":"Okay? That is just... we'll make that happen","width":182},{"text":"Yes, so if I tell you something is a sphere and I give you its radius","width":384},{"text":"You know what that sphere is, right?","width":192},{"text":"There is only one sphere that has that radius... well, sorta","width":327},{"text":"We're going to use ... uhhh ... radius ... oh wait","width":500},{"text":"Could I use diameter instead?","width":128},{"text":"Yes, could I use surface area instead?","width":407},{"text":"That would be crazy, but yeah, because you'd have to take square root.","width":549},{"text":"How about volume? Could I use volume instead of radius to characterize my sphere?","width":384},{"text":"Is there only one sphere with volume ... whatever?","width":338},{"text":"Now, again, we are in a design discussion. Why wouldn't I use those?","width":355},{"text":"Why wouldn't I use those other things?","width":192},{"text":"Yeah? Yeah, they induce time to evaluate, right?","width":512},{"text":"Like if the only thing I care about about a sphere is its volume, then I might use its volume","width":406},{"text":"But probably, for a general purpose sphere, I can most quickly get to what I want by keeping its radius, and doing simple arithmetic","width":667},{"text":"Simple arithmetic in every direction to get the data, or the information that I want from it.","width":394},{"text":"So I'm not going to keep... you're going to have to forgive all the slide switching. That is my fist on the ... thing.","width":502},{"text":"I'm going to keep the radius. Okay? That's going to be my representative. ","width":448},{"text":"Now, the reason why we keep the radius instead of the volume, say, is taking cube roots is expensive computationally. Okay? So that's the piece of it...that is... that's the piece of it that's hard. That's why we decide on radius","width":923},{"text":"Whereas cubing something ... not expensive at all.","width":320},{"text":"Who knew? You thought they were uhhh you thought they were inverses of each other. You didn't care. We care.","width":461},{"text":"Okay, so now we know how to represent this beach ball. We're just going to keep its radius.","width":407},{"text":"Do we need any other kind of representation? ","width":188},{"text":"Yes?","width":64},{"text":"Yeah, its location","width":154},{"text":"You are absolutely right. We would probably want to keep where this sphere is to","width":412},{"text":"but the real truth is what we're designing is a stupid sphere.","width":351},{"text":"We're only going to represent it via its radius.","width":465},{"text":"We're not going to try to keep track of where it is, but we could.","width":127},{"text":"We're just gonna keep things extremely simple","width":55},{"text":"So what I'm going to say here is plus more... probably.","width":406}],
  [{"text":"So, alright. We are going to keep sphere and denote it by its radius. What do we want to do with the spheres? So, once I have beach ball here, what do I need to be able to do with it? yeah? I might want to get the diameter from it. That's right. I might want to get information about it. I might want to get information about sphere. Anything else? I might want to do? yeah? I might want to change it. That's right. I might want to change information about it. I might want to change the radius. ugh, change it. OK? And, the last one is kinda implicit, and I already done it. We might want to create a new one. If you are coming from Java, this basically constitutes a collection of geters and seters right? We need to get information and change information. In C++, we do that ourselves explicitly. We don't just get ask for them. So, we are going to write the code to do it. Now, before we write the code to actually implement it, these things, we declare them. Now, here is the story, for the representation in practice, we are always going to put the declaration of the member variable, that's what those are, in the private section, cause we want to controll the access. Talk about that more in a second. So, in the private section of our class defination, I am going to write double theRadius. And now, I am going to use my functionality list, as essentially a checklist for the declarations of the functions I am going to implement. To declare the class defination. So, one two and three there are my checklist, and I am going to go through there, and start to declaring functions, achieve that functionality. OK? alright. So, the first thing I want to do is get information. If I am getting information from the thing, then I better have a return type. Better have a way to accepting the information. Ugh, what I am going to do is, oh, sorry, erasing, hmm. oh, no.. What I am going to do is, to have a function, with return type is double, whose name is get, probably one of these for radius,  diameter, volume and surface area. But the one I am going to use for an example is get diameter. There are no parameters to that function, and the declaration, ends with semicolon. And I will show you how to use that function that has no parameters in just a sec. Now, we are done with get information. Now, what does it look like when we want to chage one of these things? Well, we don't expect a return type, we might have a boolean in there to see weather we have been successful. The name of it might be setRadius(), and this time, we do want a parameter. We are going to pass setRadius, a double, whose name is newRadius. Hey, again, it is a declaration, and it ends with a semicolon. It is just a statement of my intend to imple","width":16384},{"text":"ment. ","width":64},{"text":"A statement of intend to implement.","width":128},{"text":"Ok, and now finally, we are going to talk later in the day,","width":320},{"text":"about creating new objects. ","width":256},{"text":"I am going to show the declaration","width":192},{"text":"of the functions will be deployed, so as to create objects, you are going to tell me what's weird about them.","width":384},{"text":"One of them that I am going to use, is simply this.","width":384},{"text":"and another one I am going to use to create new objects ","width":256},{"text":"is simply this","width":128}],
  [{"text":"I don't know what i called it","width":128},{"text":"I don't know what letter that is.","width":320},{"text":"I think it's supposed to be a T bubububububu trahhh","width":384},{"text":"there","width":64},{"text":"Okay","width":64},{"text":"what surprises you about the function declaration right now already","width":256},{"text":"two thing i should think should surprise you yes?","width":192},{"text":"It's this same they have the same name they are not the same function and i can tell because they have the different parameter list","width":512},{"text":"so you should yes if two funcitons have the same name but different parameter list,","width":320},{"text":"they are different functions.","width":128},{"text":"It's almost like you should look at that function sign","width":256},{"text":"and use it as part of the characterization of a function","width":256},{"text":"so good point same same different parameterization","width":256},{"text":"anything else surprise you by those two function declaration? yes?","width":256},{"text":"no return type that's right and the reason for that is because these are functions called contructors that the system deploys for you.","width":704},{"text":"you dont deploy them so you do not expect the return type. you are not writing code that's going to handle the return type","width":576},{"text":"so","width":64},{"text":"no function no return type in these function declarations","width":320},{"text":"theres one more thing that's a little bit weird about this. Yes?","width":256},{"text":"Exactly, it has exactly the same name as the class right?","width":384},{"text":"here's the same and there's the same and moreover woah","width":320},{"text":"yeah right there","width":128},{"text":"woah woah woah","width":128},{"text":"hmmm no...","width":64},{"text":"this is new","width":192},{"text":"haha","width":192},{"text":"he","width":64},{"text":"no problem","width":64},{"text":"moreover right here ohhh","width":192},{"text":"when we use the class when we use the class there is the same name again","width":512},{"text":"so this is all consisted with our idea of user defined type ","width":384},{"text":"okay any question about this?","width":128},{"text":"alright so now at this point at this point we have we have shown what a sphere implementation is going to look like","width":832},{"text":"we have not yet made it happen right?","width":256},{"text":"there is no assignment statement that actually changes he radius here","width":256},{"text":"so this can not be it and it isn't it","width":192},{"text":"But, i wanna point out that right now ","width":256},{"text":"if this is all we know about a sphere","width":320},{"text":"in fact it is. In fact all we know that we can already do stuff to sphere right?","width":384},{"text":"I can take my bball my beachball and I can do this","width":384},{"text":"so for those of you who have not worked with ooj language before this will feel new","width":320},{"text":"i'm going to invoke my member function on my object of type sphere simply by","width":576},{"text":"using a dot and a function name let's see","width":320},{"text":"I'm going to set radius ","width":256},{"text":"to whatever you like","width":192},{"text":"how big are beachballs","width":128},{"text":"they are like 11 inches in diameters","width":256},{"text":"something like 11inches in radius that would be nice sized one right?","width":320},{"text":"I would be a such a better teacher if right now if at this moment a beachball started its rounds in the room","width":448},{"text":"shoot you know if the big","width":256},{"text":"darn it","width":256},{"text":"next semester will be better I tell you","width":192},{"text":"maybe next hour where's madix I was you walking","width":128},{"text":"where is matt","width":128},{"text":"is there beach ball?","width":128},{"text":"oh you have a beach ball in your office?","width":192},{"text":"shoooot","width":128},{"text":"remind me ","width":128},{"text":"what","width":64},{"text":"ahhahahahaha","width":192},{"text":"that would have to change up everything","width":192},{"text":"okay sorry for the distraction","width":192}],
  [{"text":"has shown us, that we have a function called setRadius that takes a parameter that's a double. Okay? Any question about that?","width":1094},{"text":"And now I can do things like, I can do things like \"cout\".","width":640},{"text":"\"cout<<bball.getDiameter()\"","width":576},{"text":"No parameters. And I'm gonna send an \"endl\".","width":575},{"text":"Now, new stuff! This is new!;)  Right here.","width":576},{"text":"This is like in C, printout. This is C++'s mechanism for allowing you to send output to standard out","width":704},{"text":"or send data to standard out. Okay? ","width":128},{"text":"And, there are some other little things you have to do. You have to tell.","width":832},{"text":"You have to state your intention to do so in your code,","width":256},{"text":"but we'll talk about that in more data later.","width":192},{"text":"So, you're gonna see this. All it means is \"hey print this stuff for me\".","width":256},{"text":"So what would happen if I invoke this command, compile the code and ran it?","width":512},{"text":"What would the results be here? This would result in ---","width":256},{"text":"twenty - two, gotcha! Yes you would get 22. Okay? If we implemented this.","width":576},{"text":"Okay! Now the kicker is here is what I can't do. Hold on just a second I wanna answer your question,","width":512},{"text":"but I wanna see if I can answer it without via esp okay?  Alright.","width":320},{"text":"Here's what I wanna know if I can do.","width":320},{"text":"Can I do this?","width":512},{"text":"Can I do that?","width":448},{"text":"Wow, really? Okay. So speculate to yourself a little bit.","width":640},{"text":"No, I can't do it.  Why? ","width":192},{"text":"Yes! This is what private means.","width":320},{"text":"Anything in this private sections is not accessible via the object itself.","width":640},{"text":"So this thing is not allowed.","width":256},{"text":"Because the radius is private","width":384},{"text":"Alright I have a little piece of vocabulary to give you and that is the following.","width":512},{"text":"This code in the blue box is called client code. Anything that uses a class definition is referred to as a client.","width":768},{"text":"It doesn't mean that you could expect payment or anything. It just means, \"users\".","width":384},{"text":"So this is sphere class client code.","width":704},{"text":"And so now I can say the sentence: private members are inaccessible to client code.","width":640},{"text":"Private members are inaccessible to client code.","width":256},{"text":"Clients cannot use anything declared in the private session.","width":384},{"text":"Similarly the reason I can use these two is because they're public.","width":448},{"text":"We've laid them out there, right? Like this is permission.","width":192},{"text":"This is not friends, or family, or U of I. This is everybody. Everybody can use this.","width":448},{"text":"Okay. Use these functions. Any questions about this?","width":320},{"text":"Yes?","width":192},{"text":"Yes, exactly. We're gonna talk about that in just a second.","width":320},{"text":"So his question was \"can we access the radius via functions?\".","width":128},{"text":"Of course we can cause we have a function that allows us.","width":192},{"text":"\"setRadius\", right? So we have to go through setRadius to change the radius.","width":320},{"text":"Alright. Yes","width":320},{"text":"You don't need a constructor to create the object.","width":192},{"text":"The system will provide one for you, but it's a really really stupid one.","width":256},{"text":"So you probably want to create your own. Okay?","width":256},{"text":"Alright. Anything else?","width":128},{"text":"Okay. Here we go.","width":128},{"text":"Alright. So I've sort of replicated what I did before, because I was lying to you of course.","width":512},{"text":"The code on the previous page actually won't do anything because we have not created the implementation of each of those member functions","width":576},{"text":"So that's what we're gonna do on this page.","width":188},{"text":"And so I replicated the code from the previous page here so I can talk about how we actually make those functions work. ","width":448},{"text":"But, even at this point, something should surprise you.","width":107},{"text":"So when you look at what I've replicated here, two things should surprise you about this code.","width":65},{"text":"What are they?","width":10},{"text":"What do you see here that shocks you?","width":208},{"text":"Shocks I mean. Yes?","width":448}],
  [],
  [{"text":"I can't hear, you have to yell. Oh yeah, look at this, look at this. I just said 5 minutes ago, don't touch that, you cannot change the radius. ","width":960},{"text":"And yeah, here we are doing it, here is gonna allows it. ","width":192},{"text":"The fact that this says here allows me access","width":320},{"text":"This is a sphere class member function I have access and I need access to these private members","width":576},{"text":"OK? That's what we were doing here","width":256},{"text":"Yes? No, you cannot do this in a client code","width":320},{"text":"You don't want to do this in the client code","width":128},{"text":"This is all part of the sphere class definition","width":256},{"text":"OK, let's do getDiameter()","width":256},{"text":"I am gonna do this one for you because there is absolutely nothing about this code that will surprise you","width":192},{"text":"You can raise me if you want","width":320},{"text":"return 2 times the radius","width":320},{"text":"OK?","width":192},{"text":"Alright, Any question about that implementation? Yes?","width":320},{"text":"Yea, you don't in C++ yeah","width":576},{"text":"You never have to be object itself if you are coming from java","width":192},{"text":" The object there talking about is implicit. There is a this if it's a pointer to the current object","width":384},{"text":"But we are not talking about pointers yet","width":64},{"text":"OK, one last thing","width":1088},{"text":"What the heck is that const","width":384},{"text":"OK, so, noticed that, getDiameter() has no reason at all to change the radius","width":832},{"text":"Putting a const in that place is a promise that it will not change that radius","width":384},{"text":"So const placed at the end of the function signature is a promise that the private members will not be changed","width":1152},{"text":"by the function","width":384},{"text":"And the reason that's good is now I can hand you the getDiameter() signature and I can ask you to implement. ","width":1024},{"text":"And if you try to be in the furious. I am gonna change her radius to 52 every time. You can't. The complier will not allowed you to do that","width":576},{"text":"So it promises if I am asking for information nothing will be changed about the value of the object","width":640},{"text":"Alright, any questions about it, good?","width":64},{"text":"Did we cover everything there?","width":640},{"text":"Why do I wanna make , excuse me?","width":384},{"text":"OK, so the question is why would you wanna do that","width":256},{"text":"The short answer is you want to ask the compiler to help you to control access every time you can't. ","width":832},{"text":"Because the compiler put the code together before the client every uses it before every excecuted","width":704},{"text":"Before your code is ever executed. So every time you can bring control at compile time you want to do this","width":576},{"text":"Now, you do not want get diameter to change the diameter, that would be a bug. So we are trying to increase our integrity of our code enforced by the compiler, just to make it easier to maintain. To eliminate the potential bugs. ","width":1408}],
  [],
  [{"text":"What would you like to have happen when we declare a sphere? Yeah? I dont have to.","width":640},{"text":"So the suggestion was a great one","width":192},{"text":"This is a moment where I get ot go oh, we love C++","width":256},{"text":"He said you have to allocate memory and I'm gonna go,","width":192},{"text":"its youre lucky day! Was that you? That said that? Its your lucky day!","width":256},{"text":"You do not have to explicitly allocate youre own memory. You can just declare one ok. Its fine, its there for you on the stack.","width":576},{"text":"Yes? Yes! It should have a default radius. Thats right","width":384},{"text":"Lets set up the default radius","width":256},{"text":"I'm giong to assert that a good one is the unit radius.","width":448},{"text":"Ok? Is that alright with you?","width":192},{"text":"Ok","width":64},{"text":"Alright, fine. Uhh, there is alternative syntax for this in C++ and the reason I'm telling you this is becuse you will see it. People use it. It isn't quite as clear, its's a little bit weird becuase it really teaches you something new about the language. Alright, here is an alternative syntax for declaring a default sphere. or a no argument sphere.","width":1984},{"text":"I'm either gonna do the first one or this one. I'm going to use what's called","width":384},{"text":"the initialization line to declare  the value of my member variable","width":768},{"text":"And thenm this is  an empty code block. Nothing to see here. Move one.","width":1216},{"text":"It does not have semicolon","width":512},{"text":"Its not a class definition. It as a implementation and thats the code block. The only place you have to have the semicolon is here or at the end of a line. That's a good point. Yeah?","width":832},{"text":"Yesh, no. Its like a parameter. Ok? So this is correct syntax","width":832},{"text":"What is there to observe about this syatax. There is a colon. It's the name of the private member as if it is a function. as if it is a function kind of and then you sort of pass the value that you want to that variable. OK? There is a really good question.","width":1408},{"text":"Yes. There you go, that's it. That's exactly what I wanted you to ask. Ok. Have I been doing this class a long time or what? What if you have more than one member variable that you want yo initialize. And the answer is the folliwong. if this thing also has a color associated with it, you delimit them by a comma.","width":2112},{"text":"which is also unusual in our context","width":256},{"text":"I dont know what r is","width":192},{"text":"Oh, and there is no semicolon. dont let me put a semicolon there, there is nothing there","width":448},{"text":"Ok. So I show you this contruct. For two reasons One is because you will see other people use it and two is because when we talk about inheritance in C++ this actiually becomes important there are cases where we explicity call member functions of super classes.","width":1408},{"text":"Alright, any qustions about this? Yes?","width":448}],
  [{"text":"Are we or could we explicitly call?","width":402},{"text":"Okay so any time anybody ever asks a question in c++ that starts with 'can we', the answer if it fits the specification of the language is yes.","width":978},{"text":"But the more important question is because you can do crazy things with c++, you can hack to your heart's content.","width":512},{"text":"But the more appropriate question is should we?","width":330},{"text":"And so I'm gonna rephrase your question as 'should we explicitly call the constructor' and my answer is in most cases no.","width":832},{"text":"We should notÂ explicitly call the constructor we have define it for the system to use we're going to let it use it, okay? ","width":663},{"text":"Yes","width":286},{"text":"Okay so I'm gonna get there for just a second. ","width":142},{"text":"So that him asking that question is really saying alright move on and I will do so. So let's move on.","width":466},{"text":"Because we have this other constructor and I've just been kind of obfuscating it right, moving past it.","width":481},{"text":"Here's what it allows you to do. And you can tell me at the end if I don't really answer your question, okay?","width":320},{"text":"Umm here is what it allows you to do. It allows you to declare a I don't know what aball is, apple ball? I don't know how big are they, 4.7 something?","width":952},{"text":"It allows you to upon declaration give a value to the radius and the only reason that this constructor exist is because we declared it because we said it should.","width":834},{"text":"Now what does the code look like here? It looks like theRadius equals r.","width":663},{"text":"And we could say if r is grater than 0 do that, else theRadius equals 1.0, say.","width":803},{"text":"Okay? Alright any questions about that?","width":210},{"text":"Yes","width":379},{"text":"Very good question. The question is can we use the initializer list for this constructor the answer is yes and that syntax looks exactly looks like you would expect.","width":809},{"text":"That syntax, I'm gonna put it in a different color ink because it's alternative code, OHHHH, would look like theRadius and have an r in it.","width":892},{"text":"Okay you can refer to the parameters in that initialization list. Why wouldn't you wanna do that?","width":485},{"text":"You cant error correct it. That's right. You still have a question? Yeah okay.","width":450},{"text":"Errrrrr I don't know the answer to that. I think not. I haven't see it.","width":321},{"text":"Is it time to go is that why you're restless. It's not I have two minutes left!","width":285},{"text":"Okay so here's what I'm gonna say in those last two minutes.","width":448},{"text":"If you don't declare any of these, declare or define any of these constructors, the system will give you one. Okay?","width":510},{"text":"So that is point one about constructors.","width":252},{"text":"If you do not provide a constructor, the system will give you a no argument constructor so you can't do this little trick of instantiating the variable without defining yourself.","width":1280},{"text":"A no arg, okay? Now if you give one, if you give one constructor, the system will give you none.","width":666},{"text":"So if we just defined that constructor then and not any other ones we would not be allowed to that declaration, okay?","width":735},{"text":"So ahhhhhhhh, if you define any constructor, the system gives none.","width":1184},{"text":"Okay? And then the last important about constructor I've already made and that is to reinforce the idea that the constructor is a function that you write for the system to use.","width":789},{"text":"And you should think very carefully about why you're explicitly invoking it if you are ever tempted to do so.","width":547},{"text":"So the ctor is written for the system to use upon declaration.","width":1230},{"text":"You should not call it.Â ","width":384},{"text":"It is not called by client code.","width":448},{"text":"Okay that's it how far did I get in the slides? Look at that. Oh um.","width":192},{"text":"","width":64},{"text":"Okay and that's it how far do I get in the slide. Oh look at that. Whooo, er.","width":1743},{"text":"[interesting noises]","width":320}],
  [{"text":"Let's work. Let's work. Now you can hear me. Let's work. Did you groan when I said let's work?","width":1664},{"text":"Ah, all right, my watch says 11 o'clock.Ok, so ah, let us see, so ,good friendships are built on shared experiences, yes? Good friendship on build on shared experiences, so,","width":1344},{"text":"I wanted to step out this slides a little bit and create a shared experience for all of us.","width":576},{"text":"Now, i m a little nervous about it because i m the person with microphone. Um and so,","width":512},{"text":"and so um, i want, you guys are welcome to bring your own microphones if you like. Then we can , wait.","width":384},{"text":"That 's a distraction we do. HI,  i m sorry. Ok ,so i am yes im controlling the keyboard and yes i have the microphone clearly not controlling this screen at this point,","width":896},{"text":"Um but, i WOULD like input from you on how this go.","width":320},{"text":"Now, this experience is simply called review of what we've known so far, ok? the review of what we've known so far,","width":704},{"text":"Cauchy title huh? It's gonna be a 89 of rotten tomatoes, all right, so, here I am, here I am at my command prompt, ","width":768},{"text":"on my macbook, ok? So. I 've done nothing especially in stole your (simmity)? or while ago. ","width":384},{"text":"It s not even really my macbook. im kind of borrowing it from somebody else.And moreover it is like 3 years and a half years old. ","width":512},{"text":"So, there is really nothing special about the particular setup this going on here i dont even think i ve been installed the developer tools, now.","width":576},{"text":"The situation that we are in right now in this terminal winde could be replicated easily on any engineering work station machine.","width":768},{"text":"Either by ssh, that is  remote access to those machines or by sitting in the lab directly.","width":512},{"text":"Now the reason im not doing that is i actually prefer not be dependent on the network ,on the wireless network.","width":448},{"text":"And so , i'm doing it just locally on my machine so as to diminish the probability that something goes horribly wrong.","width":576},{"text":"Ok, so, uh i  am in my uh, fall 15 working directory i found that out and typing present working direcoty","width":704},{"text":"and im gonna list this contents of this, all right, the file that were going to be working on is demo.cpp would you like to see it ?","width":640},{"text":"are you dying to know what's in demo.cpp. All right, there it is, ohhhhhh. It is intended i have said it is going to be c++ files by it's extension.","width":1088},{"text":"Ok, and clang likes that it didn't like it when i had txt.","width":256},{"text":"Uh, all right, so fine, im going to try i've said this is in c++ file , let's see if clang likes it.","width":512},{"text":"ok,um, to escape from this is the unique thing that will be convinient. To excape from the current processes into the calling process.","width":576},{"text":"I did control+z and i'm going to bring it back that one that editing back to the four ground with fg, for four ground.","width":512},{"text":"So, ill be swapping back and forth with key strokes that my fingers learn decades ago.","width":448},{"text":"So, if it looks a little, um im not fast. OK? so , if it looks like, what the hack did she do there? Number 1, feel free to ask. Number 2, assume that it is  something simple","width":768},{"text":"All right, now ,  i have demo.cpp. It's being edited in the background but i've saved it, it has no content.","width":512},{"text":"And im going to ask our c++ compiler to make it into executable code for us. OK? we are gonna ask the c++ compiler to compile it.","width":768},{"text":"Oh, oh, doesn't like it .","width":384}],
  [{"text":"Hmmm.","width":64},{"text":"What do you think it doesn't like?","width":256},{"text":"What doesn't it like?","width":128},{"text":"Yeah?","width":128},{"text":"[student answers]","width":64},{"text":"Yeah, it doesn't have anything to do with the architecture it turns out.","width":320},{"text":"It turns out it doesn't have anything","width":64},{"text":"to do with the architecture,","width":128},{"text":"even though the error message says","width":192},{"text":"all of this stuff that I don't","width":128},{"text":"even know about my own machine.","width":64},{"text":"Ok","width":64},{"text":"What doesn't it like, yeah?","width":128},{"text":"That I have no curly braces at all","width":320},{"text":"and in fact,","width":64},{"text":"it doesn't like that I have no main function.","width":320},{"text":"So the C++ compiler wants","width":256},{"text":"something to compile","width":64},{"text":"and the thing it wants to compile","width":128},{"text":"is a function whose name is main.","width":192},{"text":"Ok, so let's fix that.","width":128},{"text":"I'm gonna type 'fg' here.","width":64},{"text":"It brings my previous process into the foreground again.","width":256},{"text":"And I'm going to go ahead","width":128},{"text":"and define a function whose name is main.","width":320},{"text":"Ok.","width":64},{"text":"And that's it.","width":64},{"text":"Now, uhh, is it gonna be happy?","width":320},{"text":"Well, cross your fingers, so","width":128},{"text":"clang requires an incantation","width":128},{"text":"before you invoke it.","width":64},{"text":"You have to cross your fingers,","width":128},{"text":"nod your head three times,","width":128},{"text":"and [gasp] yay,","width":128},{"text":"nothing yelled at us.","width":128},{"text":"Ok, alright, now how do we execute things?","width":320},{"text":"So clang took that C++ file,","width":192},{"text":"hold on, just, it was a rhetorical question that time.","width":128},{"text":"Usually I want an answer, but","width":192},{"text":"is it a question? Alright, hold on just a sec","width":128},{"text":"So the question I'm answering is...","width":128},{"text":"how... what has... what just happened there?","width":128},{"text":"clang took this C++ code, compiled it into,","width":256},{"text":"uhh, an exectuable, something that we could execute","width":192},{"text":"and, by default,","width":192},{"text":"it put it into a file called","width":192},{"text":"Now, the reason we saw that previously was","width":256},{"text":"because I had already been playing","width":64},{"text":"inside this umm inside this directory,","width":320},{"text":"otherwise that a.out would not have been there","width":64},{"text":"prior to this compilation.","width":128},{"text":"So, a.out was just created,","width":128},{"text":"or in this case updated,","width":64},{"text":"for us by the compiler. Any question about that?","width":192},{"text":"And then I'm promising you that","width":128},{"text":"it is an executable.","width":64},{"text":"Now, if it's an executable, ","width":128},{"text":"I should be able to execute it, right?","width":128},{"text":"[typing as well] a.out","width":320},{"text":"Hmm, darn it.","width":192},{"text":"Ok, everybody trips on this.","width":128},{"text":"Here's the thing.","width":128},{"text":"The system needs to know","width":128},{"text":"explicitly which a.out you're talking about.","width":192},{"text":"In fact, it didn't even bother to look","width":192},{"text":"in the current subdirectory","width":64},{"text":"because I haven't set...","width":192},{"text":"I have the paths setup to look","width":64},{"text":"in a whole bunch of other places.","width":128},{"text":"Ok, so, umm, and there are lots of a.out's","width":256},{"text":"so I have to tell the system","width":128},{"text":"which, explictly, which a.out to execute.","width":256},{"text":"Which one is the one in the current working directory?","width":320},{"text":"Ok, so this dot is shorthand. ","width":256},{"text":"It's merely a string substitution","width":192},{"text":"for, for the [current directory]","width":576},{"text":"Yay, I didn't have to type all that,","width":64},{"text":"I can just use dots.","width":128},{"text":"Ok, './a.out' specifies do this one.","width":448},{"text":"Oh.","width":128},{"text":"You know, it's always good when something","width":205},{"text":"doesn't yell at you, but nothing happened.","width":160},{"text":"Are you surprised by that?","width":192},{"text":"No, there's nothing surprising by that, right?","width":192},{"text":"Our main is empty. ","width":64},{"text":"There's no... we didn't instrument any kind of","width":256},{"text":"status update or anything like that.","width":128},{"text":"So ok, so let's go make this more interesting.","width":128},{"text":"Let's put something into main.","width":192},{"text":"Uhh, I'm going to assume that you can kind of","width":256},{"text":"get caught up and play around with","width":192},{"text":"primitive types, so what I'm going to do","width":192},{"text":"is try to declare... is to declare an apple.","width":256},{"text":"Ok, you like it?","width":128},{"text":"No. Will the compiler like it?","width":256},{"text":"Do you want proof of... raise your hand","width":64},{"text":"if you want proof that the compiler will not like this?","width":256},{"text":"Alright, fine.","width":128},{"text":"Control-z uhhhhhhh where's my clang.","width":256},{"text":"Uh-oh, it says exactly what you would expect.","width":256},{"text":"And clang is a little kinder than g++ was ","width":192},{"text":"and so it tells us 'unknown type name'.","width":256},{"text":"Alright, fine, we'll go fix it.","width":192},{"text":"It's called programming by trial and error.","width":128},{"text":"So that it's no longer true that it has no content.","width":128},{"text":"I'm gonna keep my, uh, ","width":320}],
  [{"text":"Okay, now will the compiler like it?","width":64},{"text":"Will the compiler like it?","width":192},{"text":"Raise your hand if you think yes.","width":128},{"text":"Raise your hand if you think no","width":256},{"text":"Okay somebody who says no tell me why","width":256},{"text":"Why won't the compiler like it?","width":128},{"text":"A semicolon ( ; ) that's right! Very good. Hopefully I left the cursor in the right spot. You will get caught by that bug!","width":512},{"text":"Somebody will get caught by that bug and post to Piazza. Okay? It's not unusual. So I'm going to save it, and then go compile it. Bang C.","width":896},{"text":"Bang C here just says, \"take my history, look at my history of commands and do the last one that's started with a C.\"","width":576},{"text":"Okay - \"Do the last one that started with a C.\" And so,","width":256},{"text":"That invokes clang++ demo.cpp","width":256},{"text":"Okay? Compiler liked it. There were no errors.","width":166},{"text":"*Gasp* We can declare a sphere that is vacuous. It has no data associated with it. It has no functions associated with it. It was perfectly fine.","width":564},{"text":"Okay? Any question about it?","width":128},{"text":"At all?","width":64},{"text":"Uhh what happens when we go... that!","width":384},{"text":"Nothing! All we did was declare something we don't expect to be able to see. Now, it is true that things did happen in memory and that's going to be the substance of the lecture slides today, but for now we're still in the experiential mode.","width":960},{"text":"Okay so now, let's go make a sphere class that does some things","width":256},{"text":"All right, I didn't think about this part","width":209},{"text":"too much","width":128},{"text":"But I do want to go ahead and uhh... umm. Tell me the name of that function?","width":704},{"text":"Constructor, that's right.","width":128},{"text":"You look at it and you go, \"It's a sphere, duh.\" But this one has a special, more general name called a constructor and I can tell that it is so because it has the same name as the class name. Um the only other function that I'm going to take the time to instantiate or declare here is... uhh getDiameter.","width":1280},{"text":"And it will return a double, it needs nothing and if you recall, we specifiied that it had to have a const.","width":555},{"text":"And then we uhh represented our sphere using theRadius.","width":384},{"text":"All right so I think that this should be okay, umm...","width":320},{"text":"So let's compile... okay? You ready to compile?","width":447},{"text":"All right.","width":149},{"text":"Uh, first before we compile... maybe I'll do this first. What happens when you have no constructor? Well, yeah we'll leave it like that for now.","width":640},{"text":"UUuumm...","width":256},{"text":"C okay? Syntactically, we're in good shape.","width":389},{"text":"Am I surprised by that?","width":320},{"text":"Are you surprised by that?","width":320},{"text":"Why are you surprised?","width":142},{"text":"How about this?","width":128},{"text":"How about this?","width":64},{"text":"Umm what if I now say, umm double b = apple.getDiameter();","width":833},{"text":"I was a little surprised by that, could you tell?","width":133},{"text":"I had to do a little debugging here","width":195},{"text":"Now, now I'm in danger zone kay?","width":182},{"text":"This is a true shared experience um because friendships are especially good when you have shared experiences, which are kind of tense","width":507},{"text":"And you have to like, you know, deal with a, deal with an unknown and uh","width":266},{"text":"that's this moment soo","width":75},{"text":"Raise your hand if you think the compiler's going to yell at me.","width":192},{"text":"Okay, raise your hand if you don't think the compiler will yell at me because after all ","width":304},{"text":"I haven't really changed things very much","width":128},{"text":"Okay, I'm not sure. Um, I hope it yells at me. Okay? uhhh...","width":448},{"text":"Ohh Yeess look, yay okay! Do you see what happened here?","width":487},{"text":"The compiler said, hey you tried to use getDiameter, you tried to use getDiameter and there is no getDiameter! It made for me no getDiameter so the lesson here is that you can declare a function without implementing it as long as, somebody volunteer to finish that sentence...","width":1319},{"text":"As long as?  Yes? Right","width":256},{"text":"Right you don't use it.","width":128},{"text":"Pretty much period. pretty much you never call it","width":192},{"text":"The way to finish that sentence in a meaningful way is \" in client code \" because that's another little piece of vocabulary. The code that uses this object is client code.","width":674},{"text":"For the moment, the only client that we have here is main, okay.","width":256},{"text":"Any questions about that?","width":68},{"text":"Are you good?","width":64},{"text":"It's Okay? All right","width":109},{"text":"Uhh let's go","width":90},{"text":"So that says boy we better implement getDiameter","width":301},{"text":"Let's do that very quickly","width":192},{"text":"Uhh I need to connect getDiameter to the sphere class. It needs to be specified as const and I've already forgotten my return type there.","width":909},{"text":"Okay...","width":128},{"text":"*typing return 2.0 * theRadius; under getDiameter*","width":512}],
  [],
  [{"text":"connecting it to the sphere class.","width":256},{"text":"and I am going to set the radius ","width":310},{"text":"equal to 1.0","width":140},{"text":"and thats it right?","width":154},{"text":"and I better get rid of my comment because I have declared my intent to","width":448},{"text":"define inside the class definition","width":155},{"text":"Alright, let's do this!","width":81},{"text":"Liked it!","width":156},{"text":"[pause]","width":106},{"text":"and it worked!","width":42},{"text":"[pause]","width":77},{"text":"Ok","width":18},{"text":"How about","width":100},{"text":"Alright, so any question about that?","width":128},{"text":"So, anytime the declaration has been made the definition can occur.","width":320},{"text":"Ok. Actually its much more about also where you call it. So the here,let me get it back.","width":512},{"text":"[pause]","width":256},{"text":"Ok. So...this happened after that was processed.","width":384},{"text":"So when the main is executed it goes an looks for type definition sphere.","width":384},{"text":"[pause]","width":46},{"text":"[pause]","width":10},{"text":"It has it and so its says ok I got a sphere class and then all those things are declared","width":512},{"text":"It wont reach out to get them until it needs them","width":192},{"text":"but, that this interface up here is a promise","width":256},{"text":"that these things will be implemented somewhere.","width":256},{"text":"and that somewhere can pretty much be anywhere!","width":192},{"text":"Ok so also long as the declaration exists.","width":256},{"text":"When. Im sorry. As long as the class definition exists, when the declaration is made","width":512},{"text":"Then the implementation can be in lots of different places. But you know what, I do not like it down there.","width":342},{"text":"Thats not what readers of my code expect.","width":256},{"text":"So, I am going to put it back up here.","width":192},{"text":"In a more reasonable place. ","width":76},{"text":"Ok. Alright any questions about all that so far.","width":250},{"text":"Yes.","width":25},{"text":"[pause]","width":348},{"text":"It, no bang bang is the pervious line that I wrote, bang c does the previous one that starts with a C.","width":320},{"text":"Ok yes anything else? yes!","width":223},{"text":"[pause]","width":300},{"text":"demo.cpp .. O I will show you. So you know what demo.cpp looks like right?","width":320},{"text":"So the compiler is a piece of software that takes this as input and produces... this as output","width":704},{"text":"Um..cat a.out. Are you ready?","width":256},{"text":"[screaming]","width":163},{"text":"[pause]","width":336},{"text":"[confused and angry at code]","width":171},{"text":"So this is the interpretation of the context of that code. content of the code in a way that it can be shown to the screen","width":576},{"text":"Ok. That code is executable code which means that which means that my operating system knows how to deal with it.","width":492},{"text":"Ok the operating system knows how to deal with it.","width":128},{"text":"My eyes and my head and pretty much nothing about me knows how to deal with it in this form.","width":448},{"text":"But my operating system does, and it likes it!","width":128},{"text":"Ok, does that make sense? So the complier is the software that converts from my language that I like which is C++ into a language that my operating system can understand.","width":768},{"text":"Clear","width":64},{"text":"Does it make sense Ok","width":128},{"text":"[pause]","width":134},{"text":"Could I name?O yes i can.","width":58},{"text":"is it dash O. To name is something else? Is it dash O to name it something else? OK!","width":320},{"text":"Alright, you do not like the a.out.","width":192},{"text":"O fine. So I can do this so pound C, replicates my previous command that started with a C and then I can add dash out demo. just demo. I will just leave it demo","width":1033},{"text":"uh oh! O clear O. O. duh bang C","width":448}],
  [{"text":"yeah.","width":128},{"text":"I'm doing this for no real reason.","width":320},{"text":"I shouldn't but I am doing it just to show off.","width":192},{"text":"that's working out real well","width":128},{"text":"you know what?","width":128},{"text":"so this is a teachable moment.","width":128},{"text":"so showing off, showing off almost always ends that way.","width":320},{"text":"and I'm gonna go ahead and make a general statement","width":256},{"text":"that as I was, I was kind of embarrassed by showing off, right, I did something wrong arose out of my showing off.","width":576},{"text":"so as computer scientists, I think we kind of like to show off.","width":128},{"text":"we can work magic the lot of the rest of the world can't work, right?","width":256},{"text":"The problem is, that when we kind of show off among each other,","width":384},{"text":"we put up barriers to participation, and barriers to participation creates barriers to progress.","width":448},{"text":"Now, the reason that that's so important is that progress is our currency. Right?","width":512},{"text":"We are the technologists, we are the people that are pushing forward on what the world looks like, and the instruments that are available to the world.","width":576},{"text":"So, this is an issue of equity.","width":192},{"text":"What I'm talking about here is I'm jumping on the opportunity to talk about issues of equity.","width":448},{"text":"if we're showing off, which sort of implies that we are not listening to people who might go \"Wait, wait, wait, wait, wait!\"","width":320},{"text":"then we're cutting off voices that might have a lot to contribute. So, that's just my exhortation to everybody in the room.","width":768},{"text":"That we do not show off, and that we be careful to listen and include everybody in our community.","width":512},{"text":"I really like our community, they have a cool community.","width":128},{"text":"Okay, so I was showing off, and it didn't work a little teeny tiny thing, my ego is not hurt by the fact it didn't work.","width":384},{"text":"But now we have something working. So this mean ban cla, the last time I started a command was cla, append -o demo, so this is just string substitution","width":832},{"text":"when I can't return right here, this command is what was instantiated and the compiler like it. There were no complaints between here and here","width":358},{"text":"and now, these are the files that exist in my current working directory.","width":512},{"text":"Any question about that? Alright, and now I should be able to go demo and why it doesn't know which demo I might be talking about, so I tell it.","width":960},{"text":"Alright, are you learning anything? My apologies if followup this is... you know.","width":448},{"text":"One more thing, I have been talking, when I look here, when I look at the list here, I've got everything in one big .cpp file","width":832},{"text":"Now suppose that my neighbor wants to implement something that uses a Sphere.","width":640},{"text":"I can go, \"Oh Virginia! I have a Sphere that I can give to you!\", but right now, my sphere is wrapped up in that cpp code.","width":1152},{"text":"It would be much more convenient if I can hand to her just the Sphere class.","width":640},{"text":"That we're creating this object and they might be useful for other code clients.","width":576},{"text":"So we want to de-couple the class from the client code. So let's see, my apologies, there may be faster way of doing this.","width":960},{"text":"But what I'm going to do is, copy demo.cpp into what I'm going to call sphere.h for now.","width":768},{"text":"And then, I'm going to vi demo.cpp","width":448},{"text":"And get rid of the sphere class definition and implementation here, and instead, I'm going to tell the system that I need it.","width":1024}],
  [{"text":"OK, so, effectively what happens very early in the process in that compilation process is that, the compiler sees that this pound include and it goes: OK, you want me to include in this file sphere.h, I will do that for you. OK, now, what should sphere.h looks like, oh let's go look.","width":1472},{"text":"Uhh, vi sphere.h. And it should contain only the class definition.","width":704},{"text":"And in this case we are gonna leave the implementation in there for just a minute. OK? You good? Alright, so now, I can still just compile this thing...I think... Yeah? The part of the compiler that's saw the code saw exactly the same code that I saw before. OK?","width":1600},{"text":"The pre-processer took the file and put it in here. Alright, and yet I had decouple the two. Any question about it? Yeah? Uh-huh? (Student asking question).","width":1216},{"text":"So, things are not happening top-to-bottom , exactly, they are happening inside out from main. OK? So, Um... when sphere is seen, when the sphere is seen as a type, the system goes and check: \"OK, do I have a class definition.\". And the class definition is Uh... is only complete. You can only use the thing in the class definition when all of the Uh...when all the implementation are seen, but they are all written into the memory at the same time.","width":2048},{"text":"So it's already there even if we happen to put it beneath in a linear order. Does that make sense? Does that...so the file is written at the same time. OK? It's just, and there is no linear dependency top-to-bottom. It's when sphere type is used, the class definition that will be there. OK? And it's when getdiameter(), for example, is used, the getdiameter() implementation that will be there. OK? Same for the constructor, just the system always provides you a constructor if it doesn't yet see it. OK? Alright, yes? (Student asking question).","width":2368},{"text":"Yeah, but don't. I did that just to make the point. It works if you do that but you can't do what I just did here. Right? I separate it out, the class from the client. So then...yeah. Yes, right.","width":1024},{"text":"OK, oh the class decoration. Yes, that's right. Yeah, you're right. OK, Uh, let's see, Umm...where are we here? Oh, we are not quite done. Oh my gosh! I have some new staff for you. Umm, but we are not quite done, because, sphere.h is intended to be, it's intended to be just a communicate, effectively communication device. It's intended to be just a picture of what the class looks like, not an exposing of the implementation details. So I'm gonna do the same thing again, I'm going to copy, Umm...sphere.h into sphere.cpp.","width":3328},{"text":"Think this will work, and I'm going to edit sphere.h, oh, abort for ground, OK.","width":704},{"text":"Get rid of the implementations. There are couple of different things I can do here, Hmm...","width":640},{"text":"Get rid of the...get rid of this. I'm gonna do this kind of hacky for the moment, I'm gonna do this in kind of hacky way for the moment.","width":768},{"text":"The non-hacky way is what Umm...your makefiles give you, OK? Then inside the...yeah, I think I will do it really bad. Actually, Hmm...","width":1152}],
  [{"text":"Hmm... okay. ","width":128},{"text":"Typically when you have a implementation file, you're going to include the header file so that the those declarations can be seen.","width":640},{"text":"Okay?","width":256},{"text":"And now, in order to get the code that I want in place","width":768},{"text":"I'm going to put cpp here. *Groans*","width":365},{"text":"Cuz I don't wanna deal...","width":128},{"text":"...I don't wanna deal with it","width":128},{"text":"Okay.","width":192},{"text":"Any question about that?","width":128},{"text":"The reason I called this a hack is because the following.","width":512},{"text":"Remember my friend Virginia?","width":256},{"text":"She just wants the sphere class.","width":113},{"text":"The cool thing is that I can compile the sphere separately, and give her ","width":256},{"text":"that compiled version","width":192},{"text":"together with the header file.","width":128},{"text":"And she can use it.","width":64},{"text":"Your makefiles will make that happen, okay?","width":192},{"text":"But it's a two-step process and I don't wanna do a make file here. ","width":256},{"text":"You're supposed to do that in lab, okay?","width":128},{"text":"So","width":64}],
  [{"text":"Linux. Linux workshop at DCL 1320 tonight at 7pm. Did anybody go last night? The room screw up was totally my fault. It was not the organizers fault. There is no room screw up for tonight. Did you learn things last night. That is all we wanted to know.","width":2560},{"text":"Okay, so here is what I think you should be good with. You should be good with the idea of class definitions, class function implementation with the scope resolution operator, constructors and when they are used, and client code, and what it means to use a user defined type and class. Especially after spending all day today on it. But there is some vocabulary that we have not yet seen.","width":2240},{"text":"One way of characterizing object-oriented programming languages is by 3 words you might have heard before but never thought about deeply. Those 3 words are inheritance, encapsulation and polymorphism .... Okay, this is interview prep. They are going to try and trip you up. they are going to see if you have seen this moment. How are object oriented programming languages typically characterized? Now what you will know is that there a lot of different ways of characterizing object oriented programming languages. But what they are looking for is those 3 words. And if you can reel off inheritance, encapsulation and polymorphism, they will go 'Oh wow, this person knows what they are talking about.'","width":3584},{"text":"But, in case they dig a little more deeply into your understanding of C++. Despite the fact that this is not a C++ class, I want to tell you specifically how we describe the ways in which C++ supports the idea of encapsulation. Now what is encapsulation besides an E-word?","width":1600},{"text":"It is a separation of the interface of the class from its implementation. Now there are 2 ways that C++ does this. One is that the private region of the class definition protects the data associated with the object. ","width":2240},{"text":"And so you as the designer, because you believe in this idea, this is what you do in C++.","width":1024},{"text":"Secondly, this is purely by convention, you already saw today that you don't have to do this, but by convention we separate the .cpp file, the function implementation, from the header file.","width":1408},{"text":"We separate the function implementations.","width":1088}],
  [{"text":"Any questions about that? Okay that's just vocabulary. So the same two things. Listen just a minute and do another sort of high level view. So, these circles represent code for a class definition, consider a single class at this point, we've already said that we separate into a header file and implementation file. So the example is sphere.cpp and sphere.h and the vocabulary we use for that .h is interface because I can give you a .h file and you know how to use the class, you don't need the .cpp to get everything you need from the .h file. Now what are all these little blue bubbles? That one is my neighbor Virginia. Here is the main that I happen to use. Maddox came to my office, said hey you got a sphere I can use? I said sure, here's the idea. HEre's what encapsulation gets for you. It allows you to make it so that all these clients can do their business looking only at the interface and it can build a wall , demands that a wall is build between the clients and the implementation. The client can see everything they need to know about the interface and don't need to worry about the implementation. Any questions? It streamlines the communication about these classes at exactly the right level of abstraction. The substance of today is actually memory. If you came from CS125, most of what we've done is pretty much familiar. But it's probably very new if you came from the CE engineering prereq. If you came from the ECE department, you have a pretty good handle on memory. We do talk about this stuff and should be comfortable for CS majors and ECE majors but DO NOT click out because there will be a few things about the wa C++ refers to memory that will surprise you even if you have seen it. So there are some things here that are importa","width":14208},{"text":"If the memory that you choose when you buy a new machine you decide how much RAM you're gonna pay for. The memory at the system's disposal when it's executing your code and processes it and producing results.","width":1600},{"text":"All of the software sits as it executes mostly sorta. It can be a constraint on the performance of your machine if there isn't enough of it. ","width":1088}],
  [{"text":"Into a .cpp file. Okay?","width":171},{"text":"Alright, any questions about that?","width":128},{"text":"Alright, that's just vocabulary.","width":156},{"text":"Okay, so I wanna do this ","width":326},{"text":"Those same two things","width":261},{"text":"are here","width":153},{"text":"Lets spend just a minute and do another sort of high level view.","width":199},{"text":"It's okay. We are fine. We are gonna be fine for this semester.","width":158},{"text":"Wouldn't do another high level view.","width":194},{"text":"So, these circles represent called for a class definition.","width":446},{"text":"So consider a single class. The example that you have is this sphere class at this point.","width":344},{"text":"We've already said that we seperate into a header file.","width":504},{"text":"and an implementation file.","width":454},{"text":"Okay, so the example is sphere.cpp and sphere.h","width":664},{"text":"And the vocabulary we use for that h is interface.","width":506},{"text":"because I can give you a .h file and you know how to use the class.","width":341},{"text":"You don't need the .cpp.","width":110},{"text":"You can get everything you need just from the .h file.","width":175},{"text":"Now, what are all these blue bubbles.","width":150},{"text":"Well I'll tell you. You know that one is my neighbor Virginia.","width":280},{"text":"Here's the main that I happen to use.","width":195},{"text":"Mattox came to my office the other day and said.","width":143},{"text":"Hey Cindy you got a sphere that I can use and I said sure.","width":262},{"text":"Here is the idea","width":80},{"text":"Here is what encapsulation tells you.","width":64},{"text":"What encapsulation gets for you.","width":256},{"text":"It allows you to make it so that all these clients can do their business","width":550},{"text":"looking only at the interface ","width":200},{"text":"and it can build a wall, build a wall, it demands that a wall is built rather","width":503},{"text":"between those clients and the implementations.","width":187},{"text":"So, the client code can see everything they need to know about the interface.","width":254},{"text":"and they do not need to worry about the implementation.","width":259},{"text":"Any question about that?","width":128},{"text":"That's really nice","width":64},{"text":"because that streamlines the communications.","width":128},{"text":"Could say communication about these classes that exactly the right level of abstraction.","width":414},{"text":"Okay That's not what we are talking about today.","width":216},{"text":"The substance of today is actually memory.","width":283},{"text":"Alright, so if you came from, if you came from cs125, most of what we have done is","width":583},{"text":"except for the fact that it's c++, pretty much familiar.","width":225},{"text":"but it's probably very new if you came from the computer engineering prereq class 220, if you came from 220.","width":529},{"text":"a.k.a KL, a.k.a 190, a.k.a AHH","width":283},{"text":"But, vice versa, if you came from the ECE department.","width":480},{"text":"You have a pretty good handle on memory.","width":207},{"text":"Wait which way is it","width":92},{"text":"I don't know what I said before.","width":91},{"text":"Okay, we just talked about the stuff that should be kind of comfortable for CS majors we're about to talk about the stuff that should be pretty comfortable for ECE majors. ","width":543},{"text":"But, do not click out.","width":192},{"text":"Because there will be a few things about the way C++ refers to memory","width":361},{"text":"that will surprise you even if you have C in your backpocket. Okay?","width":303},{"text":"So, there are some things here that are important","width":164},{"text":"Okay, so we are gonna talk about memory","width":176},{"text":"Here's the memory we are talking about","width":125},{"text":"It's the memory that you choose when you buy a new machine","width":192},{"text":"When you decide how much RAM you are gonna pay for.","width":203},{"text":"That's the memory we are talking about","width":64},{"text":"The memory at the system's disposal when it's executing your code.","width":467},{"text":"When it's bringing data in, process from the derived, processing that data and producing results.","width":446},{"text":"It's where all of the software sits, as it executes, mostly, sort of.","width":415},{"text":"And, it's, you know, it can be a constraint on the performance of your machine","width":444},{"text":"if its excuse me if there isn't enough of it.","width":256},{"text":"So what is this?","width":128}],
  [],
  [],
  [{"text":"Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  You need to post to Piazza to figure out who that is. Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Yes. No it's not right. Alright, so I am going to make this joke again. Alright, everybody sit down please, let's get started. I'm going to make this joke again, so if there's anybody in this room with a stapler, now's a good time to um make a lot of money, because there are people up here who need stables and you can say I'll staple your homework for 5 bucks.","width":16894},{"text":"Um, I would prefer they be stapled. If you don't um, if you are unprepared to turn these things in, um, you need to make arrangements with your section leader to do so. I think we're fairly accommodating on homework zero, and moreover I apologize for the sort of lack of smoothness here. We admit that our system is bad but it's only one homework. So it's only bad twice a year. ","width":1492},{"text":"We aren't putting a lot of resources into it. Let's see. What else was I going to announce? Don't know.  ","width":896}],
  [{"text":"Oh I know.","width":277.666666},{"text":"So we have as I think you're all aware we have not yet posted the semester calendar for open lab hours.","width":529.666666},{"text":"Um which is a problem because mp1 is due tomorrow night.","width":422.666666},{"text":"Now here's our plan.","width":160.666666},{"text":"We want to set an open lab schedule in stone and have course staff commit to it through the semester and it's taking us a while to settle in to exactly what that schedule looks like.","width":804.666666},{"text":"So my recommendation for mp1, we'll get this straightened out don't worry.","width":767.666666},{"text":"My recommendation for mp1 is to go to the piazza and look for course staff availability over the next 36 hours.","width":767.666666},{"text":"Go and look and if course staff says they're gonna be available then they should be.","width":559.666666},{"text":"They're committing to it, and your process for getting their help on debugging your code is to go to chara.cs.illinois.edu","width":1279.666666},{"text":"and put your name on the queue and be sure and put the room number in which you can be found because course staff will wander all over the basement of Siebel looking for you as long as you tell them where you are.","width":743.666666},{"text":"Ok, any administrative questions or comments?","width":319.666666},{"text":"Our intention is to return these to you in lab next week.","width":971.666666},{"text":"We're probably not gonna get them to you this week.","width":146.666666},{"text":"Just in all honesty here.","width":137.666666},{"text":"Ok, let's work.","width":263.666666},{"text":"Last time, yes?","width":383.666666},{"text":"The lab section leaders eventually will be on the website too, but we're still finalizing those so the best thing to do is post to the piazza asking.","width":565.666666},{"text":"Say who's in charge of section blah...","width":240.666666},{"text":"And they will answer.","width":76.666666},{"text":"It's not a huge, you know, we'll work it out even if you get in the wrong bucket we'll grade it and find you.","width":493.666666},{"text":"It'll be ok.","width":63.666666},{"text":"All right, any other questions, administrative issues?","width":191.666666},{"text":"Ok, so let's start. Last time we were here.","width":346.666666},{"text":"We talked about declaring and initializing variables of primitive type.","width":601.666666},{"text":"And we made special note of the fact that all that happens is that this system-administered process for setting your variable up in memory takes care of finding where your variable should go.","width":1240.666666},{"text":"I'll put it here.","width":127.666666},{"text":"Um, connecting the name of your variable to its memory location,","width":531.666666},{"text":"keeping track of its value,","width":307.666666},{"text":"and also keeping track of its type.","width":313.666666},{"text":"Ok?","width":217.666666},{"text":"And that was all just done for you upon a statement like this.","width":215.666666},{"text":"Now, all of that is still true for user defined types.","width":356.666666},{"text":"So we can say sphere y; and the system says \"Oh! I've got plenty of memory for you. I'll set that up.\"","width":831.666666},{"text":"And all of this then is set up to denote a sphere.","width":447.666666},{"text":"What's the value of the sphere at this point?","width":232.666666},{"text":"This is a trick question.","width":255.666666},{"text":"In what case is it garbage?","width":426.666666},{"text":"If you don't have a constructor that's right.","width":300.666666},{"text":"So you can use the constructor here to initialize that variable to have meaningful data.","width":703.666666},{"text":"","width":895.666666},{"text":"Ok. any questions about that?","width":191.666666}],
  [{"text":"Yes. That's right, that's right. That invokes the no argument constructor.","width":383.666666},{"text":"That line invokes the no argument constructor.","width":284.666666},{"text":"Ok?","width":45.666666},{"text":"Either the default one that's provided to you or the one that you have written.","width":299.666666},{"text":"Now the default one that's provided to you will still set up theRadius and what other variables, but those values will be garbage.","width":831.666666},{"text":"Unless theRadius is the kind of thing that has a constructor.","width":319.666666},{"text":"Ok, but that's not what we're talking about today.","width":211.666666},{"text":"So, suffice to say the system will still take care of setting up and administering the use of memory. ","width":538.666666},{"text":"That is, it will detect when you're done with the variable and give the memory back to the system for somebody else to use.","width":447.666666},{"text":"So nice that way.","width":148.666666},{"text":"All right, now there is another kind of variable, so this is primitive-type user-defined types and there's another kind of variable that you may not have seen before.","width":767.666666},{"text":"That kind of variable is a memory location.","width":361.666666},{"text":"Explicitly a memory location and here's how we declare one.","width":319.666666},{"text":"I would say \"int pointer p\"","width":477.666666},{"text":"Ok, now what happens is the system says \"Oh I see what you want here, you need a memory address,\"","width":511.666666},{"text":"Oh, I don't know a52, p, its value is not known here, its type is the memory address of an integer.","width":805.666666},{"text":"Now, I said the words memory address of an integer.","width":299.666666},{"text":"But what I'm going to write is this.","width":191.666666},{"text":"So these things are equivalent","width":255.666666},{"text":"memory address of an int is equivalent to int pointer type.","width":1087.666666},{"text":"Ok?","width":37.666666},{"text":"Any question about that?","width":75.666666},{"text":"So just symbolic substitution there.","width":157.666666},{"text":"All right, fine.","width":123.666666},{"text":"So among these, from everything you see here, what's a valid value to go here? What could go here?","width":631.666666},{"text":"What's the only thing given this diagram, yeah?","width":263.666666},{"text":"","width":127.666666},{"text":"Yeah, so the memory location associated with x","width":319.666666},{"text":"Because x is an integer is the only valid thing that you can put in this spot.","width":419.666666},{"text":"Now, hmm, how do we make that happen is the next question.","width":227.666666},{"text":"Any questions before I go on? Yes?","width":191.666666},{"text":"Oh boy, we're gonna spend about the next 2 weeks seeing uses of this ok?","width":511.666666},{"text":"Excuse me?","width":63.666666},{"text":"Bit shifting?","width":345.666666},{"text":"Maybe","width":62.666666},{"text":"In some contexts.","width":75.666666},{"text":"But there are others that come immediately to mind and I'll give you a heads up.","width":365.666666},{"text":"Here's the heads up: ","width":107.666666},{"text":"Data itself is huge.","width":255.666666},{"text":"Pointers or memory addresses are small.","width":255.666666},{"text":"So when you have a big chunk of data like a photograph or a movie or something and you don't wanna be passing it around, passing all that data around, you can use its memory address to refer to it from all kinds of different places.","width":1078.666666},{"text":"Ok, so that's kinda the biggest thing to keep in mind as we go forward and talk about these things.","width":417.666666},{"text":"Ok?","width":17.666666},{"text":"Does that help at all?","width":61.666666},{"text":"But that's way foreshadowing, that's like Wednesday's lecture, ok?","width":511.666666},{"text":"The question is, the question is how do we give p value?","width":365.666666},{"text":"We all agree that our intention here is for p to point to, to contain you know a20 here.","width":852.666666},{"text":"I should connect the dots, but I'm not going to because that's the mystery.","width":328.666666},{"text":"The question is how do we assign to p?","width":175.666666},{"text":"Well, what do you think of this?","width":191.666666},{"text":"What do you think of that?","width":127.666666},{"text":"Maybe I can give p x's memory address simply by having x on the right-hand-side and the system's smart enough to go \"Oh, I know what you mean.\"","width":675.666666},{"text":"Is it?","width":63.666666},{"text":"No.","width":85.666666},{"text":"Ok, how do you describe what's wrong here?","width":164.666666},{"text":"What gives you heebie jeebies about this assignment statement?","width":304.666666},{"text":"Type mismatch, that's right, the thing on the left is an integer pointer, the thing on the right is an integer.","width":374.666666},{"text":"That should be coursing through your veins as you read code.","width":255.666666},{"text":"So this is a type mismatch.","width":285.666666},{"text":"Can't do this, it's a type mismatch.","width":255.666666},{"text":"","width":217.666666},{"text":"Ok, fine.","width":127.666666},{"text":"Maybe what you do then is simply explicitly assign like 0xa20 there.","width":575.666666},{"text":"What do you think of that?","width":127.666666}],
  [],
  [{"text":"It's an asterisk, somebody last hour called it a splat. I thought that was awesome. Its a splat. And, here's what happens when you deploy it. I can say something like c out the value of p; and what happens is p is found and its pointer is followed and the value of that is returned. That gives me a five. Ok, any question about it? ","width":2496.181818},{"text":"Is it ok? If this is new to you, you know, its a, its a level of indirection right? It plays with your brain a little bit so, to battle that, I want to give us a lot of practice. All right any question so far? Yeah? ","width":1152.181818},{"text":"Do you use the dereference operator and the address operator together? (?) The question is can I use the dereference operator and the address operator together and the answer is sure. K umm because uhhh lets see you tell me what am i going to get if i have well you tell me the truth of this statement","width":1472.181818},{"text":"Is this going to be true or false","width":448.181818},{"text":"True or false. Raise your hand if you think true. Raise your hand if you think false. Ok. So this says follow p and give me the address of that spot. Allright? Which should be the same as x's address.","width":1920.181818},{"text":"Ok is it ok? heres another one. Heres one for you. What i want is I want to know Its a little different than youre asking for","width":832.181818},{"text":"Uhhhh ","width":320.181818},{"text":"uh oh","width":63.181818},{"text":"what the heck is that","width":128.181818},{"text":"look up there","width":64.181818},{"text":"A pointer to a pointer","width":447.181818},{"text":"an integer pointer","width":64.181818},{"text":"is that ok?","width":63.181818},{"text":"Sure, this thing is just a type right? I want the I want to create a variable whose type is a memory address of something that is a ","width":832.181818},{"text":"Integer pointer so if i were to say r equals something, what can i say?","width":576.181818},{"text":"What can i say?","width":320.181818},{"text":"yeah?","width":63.181818},{"text":"Yeah the address of p","width":192.181818},{"text":"good","width":64.181818},{"text":"ok thats a little extra","width":192.181818},{"text":"Yeah?","width":63.181818},{"text":"Sure, sure I can all right so here's R","width":320.181818},{"text":"this is fun","width":64.181818},{"text":"heres r, right, its just a pointer type the kind of thing that it needs to point to i","width":448.181818},{"text":"an integer pointer","width":127.181818},{"text":"the only thing that i have thats an integer pointer is p","width":256.181818},{"text":"alright?","width":192.181818},{"text":"is that alright? alright anything else? yeah?","width":256.181818},{"text":"Yes exactly the number of those indirection see the number of those arrows are pointers is the same as the number of stars every time","width":960.181818},{"text":"You'll get used to reading it if you've never seen it before yes?","width":128.181818},{"text":"Ohhh man. Pointers to pointers really really really is that useful?","width":703.181818},{"text":"Turns out it is","width":63.181818},{"text":"Yeah we'll see it we'll see it a lot","width":320.181818}],
  [],
  [],
  [{"text":"ask about the inverse assignment","width":576},{"text":"Ok, fine, this first page is warm-up","width":192},{"text":"Ok, I think, I think we should be able to kinda crank(?) through this based on what we have already seen","width":384},{"text":"Ok, so what type is q? raise your hand if you think it is a pointer type","width":384},{"text":"you know, you would hope right? but it turns out the asterisk actually modifies the variable","width":448},{"text":"So,  in this example, q is an integer . If you want it to be a pointer, you have to say int pointer p pointer q","width":896},{"text":"and this changing is fine, it just sort of, this is a little, idiosyncratic thing that you need to know about","width":192},{"text":"Ok, so lets do this next one really quickly , I am gonna draw the pictures, it is very similar to what saw","width":576},{"text":"integer pointer p is declared , integer x is declared ","width":448},{"text":"p is the address of x, makes p points to that space, the value of p, so we follow the pointer p got 6","width":960},{"text":"now what happens when we output x?","width":192},{"text":"it is a 6 right, we have changed the memory associated with x underneath it","width":512},{"text":"Alright, what if we output p, what would I get, I am outputing p, the next line, oh man I don't even want to know what I get","width":1664},{"text":"ok, this is a terrific hex number which represents the memmory address of p","width":704},{"text":"Alright,  write the statement whose output is x using variable p, I am gonna do this one really quickly, you could race me if you like","width":832},{"text":"asterisk p, that \"endl\" is just a new line, yes?","width":512},{"text":"Emm, did I say memory address , I mean dereference, em, sorry c out the value of p","width":640},{"text":"write the output whose value is x, oh, yeah, sorry","width":1024},{"text":"you catch, I'd like to say I did that one purpose , giving you a chance like engage but that would be a lie","width":704},{"text":"Alright, good,  how would I , how would I output the memory address of p, how would I make that correct , oh I should thougt of this","width":576},{"text":"I don't know what you are talking about , and I would have done what","width":192},{"text":"yeah, the & p.  c out & p gives you  address of p , ok","width":896},{"text":"Alright, any surprises? Anything on this page surprising, now lets get to some ...........","width":768},{"text":"Alright, so I have these two pointer variables, you can probably go all the way down to here, lets meet here, I will do it and I will talk aloud, but you can tune me out if you would ilke to think seperately from me ok?","width":1024},{"text":"So, this code says make me a pointer p and a pointer q","width":512},{"text":"give p an integer and point to it, make q point to the same space, using q to give value 8 there, and now output the value p, what will we get","width":1216},{"text":"8? yeah, ok. I strongly encourage you to trace these on your own ","width":448},{"text":"ok, now.  lets do down to       ...........  here, go ahead, go ahead and trace down to here","width":1216},{"text":"So, now q gets a new integer , and assign to it, and the value of q is 9","width":640},{"text":"ok, so you should have the same picture","width":128},{"text":"p and q each have their own memory avaliable to them, they are not shared the piece, new , yes","width":832}],
  [{"text":"P equals q.","width":256},{"text":"Yeah, cause q currently has garbage, right, yeah.","width":64},{"text":"He asked about the inverse assignment.","width":256},{"text":"Okay, fine. This first page is warm up.","width":256},{"text":"I think we should be able to kind of crank through this based on what weâve already seen.","width":317},{"text":"Okay so what type is q?","width":128},{"text":"Raise your hand if you think it is a pointer type, q is a pointer type.","width":128},{"text":"You know you would hope right, but it turns out the asterisk * actually modifies the variable.","width":576},{"text":"So in this example q is an integer.","width":384},{"text":"If you want it to be a pointer you have to say, âint pointer p, pointer q.\"","width":320},{"text":"And this chaining is fine, it just sort of, itâs a little idiosyncratic thing you need to know about.","width":448},{"text":"Okay so letâs do this next one really quickly.","width":320},{"text":"Iâm going to draw the pictures itâs very similar to what we saw.","width":256},{"text":"Integer pointer p itâs declared.","width":128},{"text":"Integer x itâs declared.","width":64},{"text":"P gets the address of x, makes p point to that space.","width":640},{"text":"The value of p, okay so we follow the pointer p, get six.","width":512},{"text":"Now what happens when we output x?","width":192},{"text":"It is a six.","width":320},{"text":"We have changed the memory associated with x underneath it.","width":256},{"text":"What if we output p?","width":960},{"text":"What do I get?","width":192},{"text":"Iâm outputting p, the next line, oh man I donât even want to know what I get.","width":512},{"text":" This is a horrific hex number which represents the memory address of p.","width":640},{"text":"Alright now write a statement whose output is the value of x, using variable p.","width":576},{"text":"Iâm going to do this one really quickly, you can race me if you like.","width":320},{"text":"Asterisk * p","width":192},{"text":"That end line is just a new line.","width":256},{"text":"Did I say memory address I meant dereference of, sorry, cout the value of p.","width":704},{"text":"Write a statement whose output is the value of x.","width":576},{"text":"Oh, oh yeah sorry.","width":384},{"text":"Good catch.","width":256},{"text":"Iâd like to say I did that on purpose giving you a chance to like engage, but that would be a lie.","width":448},{"text":"Alright, good. Good. Good. Good.","width":256},{"text":"How would I output the memory address of p, how could I make that correct?","width":256},{"text":"Aww I should have thought of this.","width":192},{"text":" I donât know what youâre talking about, and then I would have done what?","width":192},{"text":"Yeah the ampersand & p.","width":256},{"text":"Cout ampersand & p, gives you address of p.","width":448},{"text":"Okay, good. Alright, any surprises?","width":448},{"text":"Anything on this page surprising?","width":192},{"text":"Okay now letâs get to some nitty gritty.","width":192},{"text":"Okay.","width":128},{"text":"Alright, so I have these two pointer variables.","width":512},{"text":"You can probably go all the way down to here.","width":128},{"text":"Letâs meet here.","width":128},{"text":"Iâll do it and Iâll talk aloud, but you can tune me out if you would like to think separately from me okay.","width":192},{"text":"So this code says","width":192},{"text":"Make me a pointer p and a pointer q","width":256},{"text":"give p an integer and point to it","width":576},{"text":"make q point to the same space","width":256},{"text":"use q to give value 8 there","width":256},{"text":"and now output the value p","width":192},{"text":"What do we get?","width":128},{"text":"8?","width":64},{"text":"Yeah. Okay.","width":128},{"text":"I strongly encourage you to sort of trace these on your own.","width":192},{"text":"Okay, now letâs do down to here.","width":128},{"text":"Go ahead and trace down to here.","width":768},{"text":"Add on.","width":128},{"text":"So now q gets a new integer","width":320},{"text":"and is assigned to it","width":192},{"text":" and the value of q is 9.","width":192},{"text":"K, so you should have the same picture.","width":192},{"text":"p and q each have their own memory available to them","width":384},{"text":"they are not shared at p's new","width":192},{"text":"Yes.","width":192},{"text":"","width":64}],
  [],
  [{"text":"okay alright so uh","width":448},{"text":"the question on the board is","width":256},{"text":"what happens if you have two pointers","width":320},{"text":"that point to the same thing like this heres the set up","width":320},{"text":"you delete the memory through one of them and this is a to be continued","width":576},{"text":"dun dun dun","width":339},{"text":"its tru;y a cliff hanger because this is insidious","width":384}],
  [{"text":"Can you hear me? ","width":6244},{"text":"Can you hear me in the back? Can you hear me in the back? ","width":214},{"text":"Can you hear me in the back?","width":1694},{"text":"Can you hear me in the back? ","width":310},{"text":"Can you hear me in the back? ","width":484},{"text":"Can you hear me in the back? ","width":201},{"text":"If you could hear me in the back, stand up ","width":192},{"text":"You're not the back. Ok. I think this is good, do you agree this is good? The back row, the back row, you speak for the trees. Alright","width":896},{"text":"So last time we were talking about pointers and their behaviors in C++. And we're going to continue that discussion","width":576},{"text":"Right now, I want to show you a little bit of code that I think will surprise you","width":384},{"text":"Oh and I have a present for you, are you ready? ","width":192},{"text":"Ready for my present? Woah. Not sure I like the color scheme but I mess with my, I mess with my config file. So you should find the code a little easier to read.  ","width":832},{"text":"Okay, so draw yourself a little picture. Process this code, it's got pointers which we learned all about last time. Draw yourself little picture about of what's going on here. I think you should have at least one question, but I also think you can guess at the answer to the question and you will be right.","width":1024},{"text":"Oooh. We are speaking mysteriously here. And then we'll talk about this a little bit, so, you're going to have a question, guess at the answer, and of course, guess at the output here","width":960},{"text":"Alright. Draw yourself a picture. Draw yourself a little picture and guess at the output of this. ","width":768}],
  [{"text":"Okay, turn to a person sitting next to you and see if they drew the same picture you did.  ","width":1024},{"text":"And ask them what they think the output will be.","width":448},{"text":"[Talking to students] Up there.  Yep.","width":704},{"text":"Yes so I haven't started the node stuff yet.  I might end up replicating them.","width":640},{"text":"Alright somebody speak for the crowd what you think the output is going to be?","width":448},{"text":"Somebody tell me... Yes? [Student answers] 25 for the first one and... how about that second one? Garbage for the second one.","width":640},{"text":"Ill tell you right now that that would be good news because the intention here is clearly to be done with that memory right?  That is kind of what we are saying when we say delete p we are saying we are done with p now.","width":1024},{"text":"We can use the memory assosciated with p, but heres the problem.  uhhhhhhhh","width":704},{"text":"Ready.  Ready for this. Ohhhhhhhhhhhhhh","width":1088},{"text":"Okay.  So look at your picture you have p and q pointing to 25 right.  And you basically, when we said delete p, all you did was make that memory available for the system to use again. ","width":1216},{"text":"You did not pull back the pointers effectively.  The pointers still point to that space and that space for the moment still holds 25. Any questions about that?","width":896},{"text":"So I could do this as well.  I could do even after I delete p, I can ask for its value.","width":1088},{"text":"(talking to herself) My hands are shaking today I do not know why.","width":192},{"text":"And still I can access it.  Yikes! Yes?","width":576},{"text":"[Student asking a question]","width":704},{"text":"Thats a really good question.  Um so any other application can also use it at that time, but for our purposes we do not need to think about it very much.  It depends on the virtual machine that is set up around that memory. Okay.","width":1024},{"text":"Alright so but for our purposes you do not really need to think about other processes because you dont even have to its broken anyway.  Watch this, let me see if I can make this happen.","width":704},{"text":"Alright so we deleted p which means we gave it back to the system to use. For example I can say q equal new int.  What value should we put in there?","width":832},{"text":"5 okay.  Fine.  And now when I say... uhhh the value if I ask for the value of p.","width":896},{"text":"So I am going to change this to a new hue.  Lets see what happens.","width":1216},{"text":"[output on screen]  before del p: 25, after del p: 25, after new q: 5","width":448}],
  [{"text":"how did that work?","width":336},{"text":"what happened there?","width":186},{"text":"do you need a picture?","width":184},{"text":"yeaaaa!","width":45},{"text":"this is insidious!","width":92},{"text":"lets look at code again because this is just nasty","width":303},{"text":"look look","width":83},{"text":"i shouldn't being using p's and q's","width":173},{"text":"they look to much alike right?","width":64},{"text":"i ask for the value of p? the only thing, the only thing that has a five in it is...?","width":510},{"text":"is Q and that should be brand new space, right?","width":256},{"text":"the problem is p is still poiinting to where it was before","width":292},{"text":"and the system happened to, happened to reuse that space","width":410},{"text":"okay so lets draw a picture?","width":311},{"text":"Ill do it on my slides in a minute in a similar context","width":212},{"text":"we'll do it here for now","width":112},{"text":"here is p","width":86},{"text":"here is q","width":96},{"text":"ok?","width":64},{"text":"we originally set things up like this","width":271},{"text":"so that p is pointing to this space ","width":244},{"text":"and q is pointing to this space","width":212},{"text":"ok?","width":96},{"text":"now we deleted p which mean't we gave back this memory for this system to use","width":576},{"text":"and then we didnt pull back this pointer we reassigned this pointer","width":513},{"text":"we said okay i want a new q","width":243},{"text":"ideally I wouldve been able to draw aÂ ","width":214},{"text":"seperate box here","width":119},{"text":"but guess what space the system used?","width":256},{"text":"it used the one we had just freed","width":448},{"text":"it happened to have chosen to give us that very same space which we initialize to have value 5 ","width":640},{"text":"but think about P right? its like returning to the earlier part of the story, p still happens to refer to that space","width":576},{"text":"we didnt pull back the pointer","width":128},{"text":"so now when we ask for p we get 5","width":381},{"text":"not because p was ever assigned to 5 or was intended to point to memory that we were using to have value 5","width":417},{"text":"but because we left that pointer dangling into space","width":246},{"text":"and it got reused","width":128},{"text":"okay? yes?","width":207},{"text":"so that was, I was actually gonna do that so the question is","width":517},{"text":"would the space be reused again, what would happen if we used a different data type that is if that box didnt fix quite so neatly","width":576},{"text":"lets try that out","width":64},{"text":"because i dont want to do it incorrectly","width":201},{"text":"so lets a declare a new thing","width":451},{"text":"uhmuhmhm","width":1},{"text":"and lets declare a new thing a double r and let Â new double","width":537},{"text":"doubles are different sizes and we'll make it 5.0","width":455},{"text":"and well see what happens okay?","width":252},{"text":"did i screw something up?","width":256},{"text":"its not a pointer ","width":330},{"text":"you all have that and i didn't did you see it did you see what i did","width":272},{"text":"i didnt make it a double pointer","width":128},{"text":"so new handed a double back","width":64},{"text":"or a pointer back","width":161},{"text":"and thats a type mismatch across the assignment to r","width":374},{"text":"okay","width":320},{"text":"so it didnt preserve, oh it still worked tho","width":384},{"text":"okay so it changed memory in such a way","width":325},{"text":"its not 5","width":139},{"text":"and its not 25 and its not ","width":227},{"text":"you know we still ask for an integerÂ ","width":327},{"text":"so","width":64},{"text":"the moral of this story is the systems kind of using memory","width":384},{"text":"as it sees fit","width":64},{"text":"and so you have to be concious all the time of where you're pointer is pointing","width":369},{"text":"the safest thing to do is once you delete space be sure to set all the references to it that could be pointing to it to NULL","width":782},{"text":"so we can fix this if we had set p to NULL","width":545},{"text":"up here delete p, p = NULL","width":425},{"text":"and then whats gonna happen","width":244},{"text":"then what will happen","width":127},{"text":"Â yea right","width":192}],
  [{"text":"Phew","width":128},{"text":"Ok, any questions about it?","width":320},{"text":"I'll be happy to indulge any of your questions. ","width":448},{"text":"You had a question when you came in? Oh, you did. Did this get at the question you had when you came in?","width":704},{"text":"Ok, what was your question. It was a good one. [Student responds]","width":768},{"text":"Oh, ok good. We'll try that one too. Alright, so let's go a different example.","width":512},{"text":"Here you don't want ... you don't want to even initialize the value, right?","width":1088},{"text":"You wanna try that?","width":128},{"text":"[Compiles code]","width":576},{"text":"[Segmentation fault] [Modifies code]","width":1200},{"text":"Alright, so do you all see his question? He said what happens if you try to give p value before asking for heap memory to be associated with it. And the answer is, look, you didn't ask for memory and yet you asked for p to be dereferenced so as to assign a value.","width":1426},{"text":"That moment right there is a seg fault, that's where you're trying to access memory that doesn't belong to you.","width":576},{"text":"Alright, so the upshot of that lesson is, before assigning values, to be sure to ask for heap memory to be associated with your variable.","width":640},{"text":"Any questions about it? Good good. Ok, yes? [student asking question]","width":1088},{"text":"[Opening other example to answer student question]","width":1422},{"text":"Alright, so you are asking me, after I set this to NULL... Oh, I never ran this one, did I? What are you asking me? Go ahead and ask again, sorry.","width":1984},{"text":"This one right here? Yeah, ok, so why doesn't it print NULL there? So the pointer is a variable with a type and that's a pointer type, it's not a string type. If it had said the word NULL, it would be reflecting the fact that the contents of the variable was a string or something that we could represent as a string whose value was NULL. ","width":1934},{"text":"Now, in this context, you might find that more helpful, but in fact, NULL isn't a string that's spelled N-U-L-L.","width":512},{"text":"It is a memory location that we happen to represent by that word. Moreover, it is a memory location that cannot be dereferenced. It cannot be followed. There's no place to dereference it to.","width":1344},{"text":"And so the error message if you tried to do that is a seg fault.","width":256},{"text":"Because you're trying to dereference something that isn't yours. Ok? Alright, yes? [Student question]","width":960},{"text":"No, very very very good question. And that makes me think you're ready for the next slide, because we're going to talk about that. So, her question is, are p and the thing it points to two separate variables?","width":1216},{"text":"When you give back the memory, when you say","width":320},{"text":"delete p, does that variable still exist for reassignment? And the answer is yes, watch this.","width":448},{"text":"I can in fact say here p equals new int and ask for a different piece of memory to use p to point to.","width":832},{"text":"This gets it, right, at her question. And then I can ask for the value of p.","width":640},{"text":"No, what'd I do wrong. Ok. [exasperated sigh]","width":1110}],
  [{"text":"OK. umm. OK, here we go. ","width":960},{"text":"So I redirected the memory and reassigned it to work perfectly fine. ","width":640},{"text":"Alright, yes, you're free to ask questions now  ","width":320},{"text":"That's right. Q no longer has as it's same target, P. It's still pointing off to where it was before, it didn't follow along.","width":640},{"text":"Okay? That's actually a really good point. Let's draw this picture really quickly","width":640},{"text":"That's actually a totally valid point.","width":320},{"text":"Alright, so, P = new int","width":448},{"text":"We delete P.","width":576},{"text":"Set P = null. Nice.","width":320},{"text":"And now we reuse P. So now, we say \"Okay we changed our mind, we'd like to use P again\"","width":512},{"text":"And we're going to put 42 in there. Q still points over here.","width":384},{"text":"Q is still just a pain in our side. Kay? So. How do we solve that?","width":320},{"text":"This should be a gimme at this point. How do we solve the Q pointing there? q = null, that's right.","width":448},{"text":"And a reasonable place to do that would be at exactly the same place we said P = NULL","width":384},{"text":"So, the minute you couple the two variables via an assignment, you want to keep note of that fact. Yes?","width":512},{"text":"Oh, geez, then it's working for no good reason!","width":384},{"text":"Right? So, then your things are tangled up still, but they happen to work correctly ","width":448},{"text":"So this issue of being responsible with your memory is actually quite deep.","width":448},{"text":"Yes?","width":64},{"text":"","width":512},{"text":"Yeah, you can, so you can mess up your friends, yes.","width":192},{"text":"And this is a security flaw, this is a common... when people are looking for exploitation of C code this is the kind of thing they look for.","width":704},{"text":"Access to pointers that haven't been cleaned up.","width":192},{"text":"Yes.","width":64},{"text":"","width":384},{"text":"Yep. Because then they're just sitting there and they're both separate.","width":192},{"text":"","width":256},{"text":"Then that couples them back together","width":256},{"text":"Oh! If P is equal to.. is q already null?","width":256},{"text":"","width":128},{"text":"Yeah, that's fine. That sets q equal to null.","width":256},{"text":"So then they're decoupled.","width":64},{"text":"Right, that's right.","width":128},{"text":"NULL breaks everything. NULL breaks all association. It is a perfect place to start and end with your pointer variables. Yes?","width":576},{"text":"","width":576},{"text":"Yep","width":64},{"text":"Yep","width":64},{"text":"Yep, so from the start you're kind of toasting yourself. Oh! And this is a good reason...","width":576},{"text":"Novice programmers, new programmers like to assign extra variables for everything.","width":576},{"text":"Like \"Oh I don't have something pointing to that, I'll just make one.\"","width":192},{"text":"And the danger in doing so is that you do lose track of the way that things are coupled. ","width":384},{"text":"We test you on this in MP3. MP3 has a crazy confusing function in it that is really only crazy confusing if you give yourself 150 extra variables","width":1216},{"text":"and it's very tempting to do so, but you don't have to. ","width":128},{"text":"So, using fewer references or pointer variables is a good idea.","width":384},{"text":"Use the ones you have. Understand what they're for. Don't do gratuitous variables just because you think you might need them.","width":448},{"text":"Okay","width":64},{"text":"Yes?","width":64}],
  [{"text":"what null does","width":64},{"text":"um ok","width":239},{"text":"yea its the zero memory location you can think of it as the zero memory location","width":293},{"text":"zero x","width":213},{"text":"um so if you alright","width":492},{"text":"alright","width":87},{"text":"so null","width":64},{"text":"is ","width":64},{"text":"you can think of as ","width":128},{"text":"um","width":128},{"text":"p's variable","width":128},{"text":"has this","width":64},{"text":"ok in it that's its memory address","width":192},{"text":"ok","width":64},{"text":"its the zero memory addres","width":128},{"text":"on memory","width":61},{"text":"","width":128},{"text":"on the chip in memory","width":64},{"text":"that is the spot that belongs to the system","width":187},{"text":"ok","width":128},{"text":"so if you dereference it ","width":128},{"text":"if you ask for this variable to be","width":320},{"text":"expanded to ask you what its pointing to","width":320},{"text":"number one it's not yours","width":128},{"text":"number two it's never going to be pointing anywhere","width":192},{"text":"ok","width":128},{"text":"does that make sense","width":64},{"text":"so if I ask for ","width":64},{"text":"what is sitiing here","width":192},{"text":"so p's value is this","width":64},{"text":"so if i dereference itÂ ","width":192},{"text":"im folowing this","width":64},{"text":"it's memory that doesnt belong ito me","width":192},{"text":"it's belongs to the system","width":64},{"text":"ok","width":64},{"text":"yes","width":396},{"text":"no it won't","width":87},{"text":"so the question is","width":64},{"text":"if you dont iniitilaize your pointer","width":106},{"text":"will it alwyas initialize to null","width":128},{"text":"the answer is that it doesnt","width":91},{"text":"it'd be nice if it did and some compilers might do that for you","width":137},{"text":"but you cant count on it","width":128},{"text":"you should always ","width":64},{"text":"initialize it or atleast understand how it is initalized","width":256},{"text":"ok","width":64},{"text":"alright","width":64},{"text":"ok lets go to the slides","width":192},{"text":"and talk about some of this stuff","width":256},{"text":"really quickly","width":64},{"text":"i think the most important thing wil lbe","width":251},{"text":"that you draw the right pictures","width":128},{"text":"for a lot of it","width":64},{"text":"please connect","width":2612},{"text":"ok so your only announcement for the day is that","width":282},{"text":"um","width":64},{"text":"mp2 is available","width":128},{"text":"umm due in two weeks","width":151},{"text":" now i don't think we ever explained to you the extra credit policy in much detail","width":320},{"text":"there is an early deadline","width":148},{"text":"for the first part of the assignment","width":192},{"text":"and it is worth one full point towards your final grade","width":384},{"text":"so this is ","width":64},{"text":"uh oh","width":64},{"text":"why","width":1701},{"text":"why","width":37},{"text":"tell me why","width":64},{"text":"i know why","width":66},{"text":"i know why","width":64},{"text":"i got it","width":225},{"text":"ok","width":966},{"text":"so this is one point of extra credit","width":250},{"text":"it truly is extra credit","width":187},{"text":"its pure grade inflation","width":128},{"text":"we do our final grading lines","width":128},{"text":"before we give you those points","width":128},{"text":"and um and its approximately ","width":256},{"text":"half of the mp","width":128},{"text":"so this is our attempt to give you incentive to start early","width":384},{"text":"on your assignment","width":128},{"text":"ok","width":320},{"text":"any questions about that","width":106},{"text":"and thats in about a week","width":64},{"text":"its also","width":64},{"text":"our attempt to ","width":192},{"text":"its our attempt to distribute the responsibility for ","width":256},{"text":"the course staff over the two week window","width":320},{"text":"yes","width":64},{"text":"do you have a question","width":64}],
  [{"text":"No, it shouldn't we have run into that bug before, but it shouldn't. So I believe the question was, well what if you do the whole thing beforehand","width":512},{"text":"","width":10},{"text":"do you still get the extra credit, does it compile separately, is it tested separately? The answer is yes, our intention is yes. In the past there was this bug, where if you started on 2.2, it messed you up on 2.1, but I think we fixed that. I promise you we will do the fair thing for sure. ","width":1390},{"text":"Do you have a question? [Question being asked]","width":467},{"text":"Yes, the auto grader will run every night after the extra credit deadline, so the extra credit deadline happens in about a week. And then we will fully grade your mp every night between that intermediate deadline and final deadline and moreover, because we recognize if you get Â an 85 on the night before it's due, you're gonna scramble to fix it. And in the process, you break it completely. We take the highest of the last two submissions. ","width":2946},{"text":"So you don't have to worry about that night before crisis","width":317},{"text":"[Video Playing]","width":320},{"text":"So I saw a miraculous thing last night. Raise your hand if you were in the lab last night on the MP, because I want to talk to you. Was it crowded in the lab last night? Not really? This is a strange phenomenon. In the past, on the night things are due. There are like 80 people on the queue, and the course staff is going out for dinner. And so it really like a fruitless thing Â to wait until the last minute, because Â if you run into problems, it is very difficult to get help. But last night there were only 3 people and 4 course staff. For those of you who do not know what I am talking about with the queue and the office hours. What you are going to do is go to chara.cs.illinois.edu. And put your name on the queue and the course staff will come find you. Our intention is to staff office hours everyday of the week from 9am-9pm.","width":8235},{"text":"Choose a box, each one of you choose one box to examine carefully with someone sitting next to you, simultaneously while you're working on your one box, I will try to work on all four boxes. Then we'll come together and spend 2 minutes summarizing things.","width":1308},{"text":"So, you go work on a couple of these boxes, I will too. And then we'll summarize.","width":442},{"text":"[Video Playing](Memory Leak Practice)","width":5568}],
  [],
  [],
  [{"text":"We get faster execution. Right. One on the right really does have extra work being performed . Any questions? ","width":668},{"text":"So, we prefers stacks memory when we can. ","width":320},{"text":"Alright Let's keep going.","width":130},{"text":"So the most of what we have been talking about today refers to primitive type. So I want to spend a couple of minutes talking about pointer as it relates to user-defined types. ","width":768},{"text":"So I created a new little class appear. it has three private variables. Name Picture, and Boolean function to indicate if it gets done or not. I don't even know what that means","width":896},{"text":"I guess I could ask you. Are you done? Tim are you done today?","width":327},{"text":"You are done attribute is true. But we are not done So I am gonna keep talking","width":605},{"text":"Alright So now, question is what is the behavior when we are talking about objects. Let's review that happens if there is not pointers. Here is a little bit of summary.","width":820},{"text":"We have face A and face B declared. And I am going to initialize B. Raise your hand if your name starts with B","width":768},{"text":"Okay What is your name?","width":128},{"text":"Brian. Okay . B is Brian","width":433},{"text":"Your picture, Are you smiling Brian? YES now he is. ","width":418},{"text":"There is a picture. Brian are you done? So true..","width":320},{"text":"Now What we are curious about. what happens when we do that assignment statement.. In C++, it's so awesome","width":926},{"text":"A member-wise copy is made of the object. ","width":704},{"text":"So, ","width":64},{"text":"Each of these members are copied as it knows how to copy itself. So string knows how to copy themselves. Part of string class definition, we will talk about it later.","width":1216},{"text":"And so Brian's name is copied to the space","width":283},{"text":"P and G knows how to copy themselves.","width":448},{"text":"Know every pixel associated that P and G copied over presumably that is how it is done","width":417},{"text":"Similarly, copy booleans are super easy.","width":303},{"text":"And now when we refer to a dot set name. We are referring to that memory location. ","width":640},{"text":"Presumably, we can change A's name and Brian look alike, but they are not.","width":707},{"text":"Any question about that? Anything surprising or issues?","width":320},{"text":"Let me ask you this. How long does this take. Do you like this?","width":465},{"text":"You know, it is kind of unavoidable. But copying pictures might take awhile","width":453},{"text":"So there is that issues. But otherwise, that is just fine. Let's contrast it if we have things to do declare pointers instead","width":743},{"text":"So we have face pointer C, and face point D. Raise your hand if your name starts with D","width":512},{"text":"What's your name? David. So we are going to initialize the value of D, David and are you happy?","width":836},{"text":"Yea, you are happy and you are wearing glasses. Okay. And are you done?","width":547},{"text":"Yes, you are done. And that means D's values are pointing to it. ","width":631},{"text":"So presumably D equals new face. ","width":172},{"text":"* dot set name david is etcetera","width":412},{"text":"Now we are going to do C equals D","width":304},{"text":"So C's pointer points to same thing D does. ","width":320},{"text":"C gets the value of D","width":256},{"text":"And now, when we say C set name to Carlos.","width":576}],
  [],
  [],
  [{"text":"","width":428.666666},{"text":"To begin, that when I sent this email last night, I was surprised to send it to only 700 students","width":410.666666},{"text":"So I think there are actually must be room in this class","width":163.666666},{"text":"so if you know of people who have been trying to get in and they given up, you should let them know that I think there must be seats available","width":543.666666},{"text":"Hmm by Friday 5pm today is the add deadline is","width":211.666666},{"text":"Nooo?","width":63.666666},{"text":"I dont know","width":134.666666},{"text":"Alright","width":213.666666},{"text":"cause you know really what's the difference between 700 and 750","width":645.666666},{"text":"Ok, let's work I have no announcements for you except to say you may find weekend office hour to be useful","width":639.666666},{"text":"But I wanna encourage you to check the calendar before you actually go to weekend office hours","width":372.666666},{"text":"cause Im not gonna demand that course staff be quite as religious about attending. They are gotta be allowed to change their weekend office hour","width":711.666666},{"text":"More so than they will be allowed to change to change their weekly office hour","width":333.666666},{"text":"so before you go to office hours especially on the weekend, you should check the calendar on the course website which is now updated with all of the office hour information","width":767.666666},{"text":"ok?","width":55.666666},{"text":"Are there any administrated question before I actually start here today?","width":304.666666},{"text":"Questions, issues, complaints that you'd like to make publicly ya?","width":305.666666},{"text":"Will there be office hour Monday? Ya, I believe we are committed to staffing the office hours like","width":552.666666},{"text":"9, do you mean open lab hours? Like to get help with your MP or do you just mean you want somebody to talk to?","width":465.666666},{"text":"Ya, I believe there will be office hour 9am to 11pm everyday going forward","width":507.666666},{"text":"with a few gaps here and there","width":127.666666},{"text":"Oooooooooh, Monday is Labor Day","width":499.666666},{"text":"I don't know the answer for that, I haven't asked them","width":216.666666},{"text":"You might ask them on the Piazza: Hey Monday is vacation, is anybody gonna be there","width":447.666666},{"text":"Sorry","width":120.666666},{"text":"Ok","width":63.666666},{"text":"Lets work!","width":96.666666},{"text":"C++ academic calendar","width":127.666666},{"text":"Ok, hmm..","width":217.666666},{"text":"So you know this class will not be very interesting if we didn't have a","width":383.666666},{"text":"way of re-configuring memory into contiguous blocks that we completely understood","width":447.666666},{"text":"so contiguous blocks that we have a model for are called arrays","width":370.666666},{"text":"so programming gets a lot easier when you have an iterative way of referring to","width":360.666666},{"text":"pieces of memory","width":89.666666},{"text":"so that's what we are gonna talk about today! Finally, we finally got to this point ","width":333.666666},{"text":"Now arrays in C++ are not so straightforward as say might be in Java","width":430.666666},{"text":"say you have an array class and you just make it","width":161.666666},{"text":"Hmm, eventually we will get to the point where arrays are handled gracefully on our content","width":423.666666},{"text":"but I wanna pull back that the current the curtain a little bit and show you what you speculate on kind of","width":497.666666},{"text":"how arrays are actually implemented","width":191.666666},{"text":"Ok so arrays fundamentally there are fundamental kinds of arrays, the first one we are going to talk about is static array","width":511.666666},{"text":"when I say static array  I mean","width":249.666666},{"text":"that once the code is compiled, that array, that specification for that array is not going to be changed","width":545.666666},{"text":"there is nothing dynamic about it","width":174.666666},{"text":"the minute you say you want your array to be size 5, you are signing a contract for it effectively ","width":465.666666},{"text":"it's a commitment to using memory of that size","width":191.666666},{"text":"OK, so here's what happens","width":255.666666},{"text":"In stack memory, and there's the syntax right there, the type and the square brackets that you tell the number that you want","width":615.666666},{"text":"In stack memory a sequence of that memory variable is set up","width":380.666666},{"text":"so I am gonna do this by you know","width":156.666666},{"text":"grabbing 5 pieces of memory, all of them are integers","width":447.666666}],
  [{"text":"Okay. They have a location. Chosen for you by the system. Location is always chosen for you by the system. ","width":703},{"text":"In the stack, it sort of next available space. And the name is there explicitly given. X zero , X (1) , x(2). Do I need to keep writing?","width":1269},{"text":"Upto X(4). Okay Of course, their values are garbage. ","width":755},{"text":"Alright, any question about that? ","width":233},{"text":"Okay, Now, again. That memory, the size of the memory cannot be changed.","width":615},{"text":"So, it must be known at compile time. If you do not specify a size.","width":821},{"text":"Or if your size isn't in the variable, system cannot figure out. Some big block will handed to you that is irresponsible request of the system for your stack.","width":1216},{"text":"So, you want, if you are using static memory, if you are intending to array on stack, you need to be able to specify how big it is. Don't let it be flexible because it will be too big and you won't know how big it is.","width":968},{"text":"So you won't know how to walk, how to avoid walking end of its iteration. ","width":589},{"text":"So, nice small arrays are perfectly reasonable to do only if you know how big it should be.","width":464},{"text":"Now, think of all situation where you don't know how big array should be.","width":448},{"text":"Any time the size of data is changing, can change, you don't necessarily know how much memory you are going to need, or contain needs.","width":1056},{"text":"So, we have this contrasting idea of a dynamic array one which you can resize to whatever size you need","width":816},{"text":"Here's how this works.","width":341},{"text":"You set up x as in integer pointer in the stack, so ops","width":469},{"text":"X is somewhere in the stack. It's an integer pointers so it has something that needs to be allocated and then","width":704},{"text":"when you ask the system for a memory. you say, YO, I need three integers from the heap","width":585},{"text":"And the system goes out define you just a right amount of space. Just right amount of space. Returns memory address","width":768},{"text":"which is then what stored in X.","width":320},{"text":"Now, Here is the cool thing","width":256},{"text":"Here is the cool thing: the syntax referring to the memory, is exactly what you expect any old array that is square brackets find the right element.","width":1050},{"text":"For example, I can execute for loop that says take i from zero upto size. ","width":640},{"text":"And put i + 3 in position in sub i. Now where is X sub of i in each case?","width":780},{"text":"This one is x zero, this one is x one, this one is x two.","width":483},{"text":"So we end up here, here is three and four and five.","width":385},{"text":"Any question about that?","width":250},{"text":"Alright, I want to give you another thing hang onto. Another thing to justify is to use of pointers, as the way creating things.","width":832},{"text":"Look at the syntax for second. Here is how to think of it. The square bracket is like a D-reference So X de-reference and then i steps forward","width":1280},{"text":"Okay, Got it? So it's x de-reference i steps foward and that binds you the memory location","width":866},{"text":"Wondering if pointer arithmetic applied here, Yes you can use pointer arithmetic to find your element of array. But code would be unreadable and go head and use square brackets.","width":1280}],
  [{"text":"Any Questions, About it? Alright, Alright fine.. ","width":384},{"text":"Then to remind the system to tell the system that uh you want to free or get rid of or ","width":448},{"text":"I would give back to the system for reallocation","width":256},{"text":"a block of memory, you put the square brackets here","width":192},{"text":"ok... I believe the compiler catches if theres incompatibility","width":320},{"text":"If you used square brackets up here but you didnt use them there, I believe clang catches it","width":384},{"text":"Yes?","width":256},{"text":"Sure? What?","width":384},{"text":"Yup you can still use square brackets, yup, if you've used square brackets in your declaration or in your request for space","width":576},{"text":"If you've used square brackets in your new statement, you can use square brackets  to find your elements of your array, Yes?","width":502},{"text":"Um, if you go passed it, probably a segfaultÂ ","width":640},{"text":"okay?","width":64},{"text":"Its not as, it doesn't know exactly what you're trying to do, but you probably going to access memory that isn't allocated there, okay?","width":512},{"text":"Yes! ","width":128},{"text":"Ahhhhh okay, so the question is, well that looks kind of static right? We said how big we wanted it to be and we asked for it and how do we change that and the answer here is we explicitly are going to ask for the larger space, so if all of a sudden we decided we needed 3000 of these integers instead of 3, our algorithm- and well talk about this explicitly later- but our algorithm is going to be to ask for 3000 copy the values over and then we've got 2997 extra okay? So that's, that's our  algorithm here, there is","width":2368},{"text":"We don't use a graceful way of extending the space cause we don't know what the heap looks like, we don't actually know if there is space to extend. Right?","width":640},{"text":"Alright, uhh, lets see, one more thing I wanna say here, umm, that will get at your reasoning about this, My question for you is simply","width":704},{"text":"What happ, jeez, you guys are gonna like get whiplash, ouch","width":448},{"text":"Uhh, what happens if you say cout, uhh, the value of x","width":448},{"text":"What're you gonna get? Yeah?","width":384},{"text":"Ohh, you would wish","width":192},{"text":"right?!","width":64},{"text":"You wish it prints the whole array!","width":192},{"text":"Optimistic soul, thats a rep reflection of an optimistic soul","width":320},{"text":"What do you think it does? What?","width":192},{"text":"No. Yeah?","width":192},{"text":"Yeah? Only the first value, thats right! If I covered up","width":384},{"text":"If I covered, If we weren't talking about arrays and I covered up all of this, then this cout statement would say, find your variable x of integer pointer type, right? deference it","width":960},{"text":"and show me the value thats there, the value thats there is 3! So thats what we would get","width":576},{"text":"Now, would we ever do this? That would be weird, instead we would do","width":384},{"text":"Cout << x[0]  << endl because after all it is an array","width":640},{"text":"Okay? Any Questions? Yes!","width":512},{"text":"Where? Here? Oh! So his question is, his question is, you don't have to dereference x, x is the pointer. And my response is I did dereference it, I did dereference it! That Square bracket is a dereference and 0 steps forwards","width":1152},{"text":"Okay? So, yes I do have to have dereference it, I did!","width":192},{"text":"Okay? Alright, did question, any other questions? Yes?","width":384},{"text":"What does the delete statement do? What do you hope it does?","width":256},{"text":"Gives back the entire array to the system to be used for future allocation! Okay? So the next time somebody asks for some, yes?","width":832},{"text":"Ahan, what did you say? ","width":448},{"text":"If I had 2x as the address of x[1], oh boy so that would be, ummmmm, ","width":512},{"text":"The address of x[1], like this, probably","width":384},{"text":"You don't usually have a reason to do that, You are usually interested in the values on the heap, okay?","width":448},{"text":"But, That is what you would do its still just a way of referring to that block of memory","width":448},{"text":"Okay? Alright, how are we, yes?","width":256}],
  [{"text":"in the what?","width":384},{"text":" um","width":128},{"text":"no","width":128},{"text":"Those are static variables","width":128},{"text":" those are stack variables","width":64},{"text":"they're all ","width":128},{"text":"I mean","width":64},{"text":"you know they are memory addresses","width":128},{"text":"going on all over the place","width":64},{"text":"but it is not instructive to think about","width":128},{"text":"these guys as memory addresses","width":128},{"text":"they are stack variables","width":128},{"text":"they are not going to have memory on the heap","width":192},{"text":"that keeps track of them","width":128},{"text":"ok>","width":64},{"text":"right","width":256},{"text":"its still... right right","width":128},{"text":"there is no explicit pointer","width":64},{"text":"it's ..... Yes, thats right","width":192},{"text":"yes","width":128},{"text":"it just keeps track","width":448},{"text":"it keeps track of how much memory is..","width":192},{"text":"it keeps track of size of x basically","width":64},{"text":"it keeps track of amount of memory associated with that","width":256},{"text":"so somebody who speak C","width":192},{"text":"tell me","width":64},{"text":"what 3 does","width":192},{"text":"what parameters are associated with 3","width":128},{"text":"what parameters are associated with the three statement","width":384},{"text":"cuz this is like malloc free right?","width":128},{"text":"ok nevermind","width":64},{"text":"it keeps track of amount of memory for you","width":256},{"text":"uh hum yep","width":256},{"text":"there is a lot of steps going on behind the system","width":192},{"text":"the scene","width":256},{"text":"a lot of stuff behind the scene","width":64},{"text":"we clearly speaking something that is almost English right?","width":192},{"text":"and the processor doesn't understand anything close to that","width":320},{"text":"yes?","width":64},{"text":"so the question is what happens if we just do delete x here","width":448},{"text":"I believe","width":128},{"text":"that clang catches that for you at compile time","width":192},{"text":"I think thats true","width":64},{"text":"it used to be that if you say delete x there only that first one would be free","width":448},{"text":"but think now it is detectable at compile time","width":192},{"text":"alright. yes?","width":128},{"text":"no malloc doesn't","width":448},{"text":"But","width":128},{"text":"but Null does. NULL and free do","width":128},{"text":"yeah you know C still works here","width":448},{"text":"you can still ask for the size of your variable","width":128},{"text":"yea Yes","width":128},{"text":"yes yes yes","width":512},{"text":"so if you speak C++ already","width":128},{"text":"if you familiar with the C++ standard library","width":192},{"text":"what we are talking about now is","width":64},{"text":"under the hood of the vector class","width":128},{"text":"yes yes","width":320},{"text":"yep yep yep","width":128},{"text":"vectors live in the heap","width":128},{"text":"yes","width":128},{"text":"so the question is if it is possible to partially delete the block of memory","width":512},{"text":"and anytime anybody asks me questions in C++ starting with is it possible to","width":320},{"text":"the answer is yea probably","width":192},{"text":"but the more relevent question is should you","width":192},{"text":"and the answer is probably not","width":128},{"text":"so it was a ...","width":128},{"text":"we thought it was a straightforward conversation","width":128},{"text":"but it is always kinda (knew oddsed??)","width":192},{"text":"right?","width":64},{"text":"yes","width":128},{"text":"do you need to set the values to NULL before you delete ","width":384},{"text":"no\\","width":64},{"text":"is it a good idea to do this","width":128},{"text":"?","width":64},{"text":"after you delete ","width":128},{"text":"Yes","width":64},{"text":"yes","width":256},{"text":"but you know when you are talking about values","width":192},{"text":"no problem","width":384},{"text":"dont get cocky with your Microsoft device","width":320},{"text":"thats just crazy I'm sorry","width":128},{"text":"okay","width":192},{"text":"if you are talking about","width":320},{"text":"reinitializing these values the answer is no you don't really have to","width":320},{"text":"you don't have to clean them up","width":192},{"text":"they are just going to go back to memory","width":128},{"text":"and the next allocation is responsible for initializing them the way they want them to be","width":384},{"text":"okay?","width":64},{"text":"alright. can we move on","width":64},{"text":"is that ok?","width":64},{"text":"yes","width":64}],
  [{"text":"What do you do if you want to copy a static array?","width":238},{"text":"You just assign","width":119},{"text":"do the assignment","width":64},{"text":"Okay","width":83},{"text":"What do you do if you want to copy this array","width":128},{"text":"Oh we're gonna talk about that a lot","width":202},{"text":"Okay so","width":64},{"text":"I'm not going to spend a lot of time talking about this","width":192},{"text":"problem","width":64},{"text":"I want you to make sure you understand how to do this ","width":320},{"text":"because I think you can puzzle it out.","width":200},{"text":"I would love to see a discussion of this problem, um, on the Piazza, so here's the setup:","width":597},{"text":"I have declared, I have declared a double pointer of flowers, so I want you to assume that flower is a user defined type","width":600},{"text":"You can imagine how that would be true, I've defined class flower","width":216},{"text":"and I'm defining a double pointer to them","width":290},{"text":"Now","width":64},{"text":"I'll give you the first one here","width":128},{"text":"This could be a pointer to a pointer to a flower.","width":703},{"text":"Right? So it could be the memory address of the memory address of something that is a flower type.","width":510},{"text":"A box that contains a flower","width":429},{"text":"Or, what else could it be?","width":143},{"text":"Somebody give me one other thing it could be","width":286},{"text":"now that you know another use for pointers.","width":320},{"text":"Very, uh, close","width":250},{"text":"It could be a pointer to an array of flowers","width":512},{"text":", right, because it's the array part that eats up one of those pointers.","width":449},{"text":"I don't know how to make flowers.","width":192},{"text":"There.","width":64},{"text":"Those are flowers.","width":137},{"text":"Yes, yes.","width":128},{"text":"Oh it could be a two dimensional array right.","width":169},{"text":"So here's what I want you to do, I want you to figure out the other couple of these, and moreover, I want you to write a few lines of code that look about like this that set up that memory, that ask for heap memory.","width":1073},{"text":"Okay? I want you to think about what it looks like both to allocate and delete,free up, put away, finish using memory that is declared like this.","width":907},{"text":"And I'll give you a hint about this. ","width":131},{"text":"This is actually an important exercise because one of them - the array of flower pointers - is actually the substance of MP2.","width":704},{"text":"It's probably the hardest thing to wrap your head around in MP2.","width":320},{"text":"Alright, any questions about this?","width":172},{"text":"Yes","width":426},{"text":"So the way to think about this is that this one is a pointer and the rest of this is an array of flowers.","width":782},{"text":"No, an array of flowers.","width":111},{"text":"If it's a pointer to an array of flower pointers, I need three asterisks, three splats, who taught me splats?","width":988},{"text":"Three splats","width":140},{"text":"I'm gonna let you puzzle over it. you need to and you will and you'll unwrap your own model for this, okay?","width":448},{"text":"And we'll talk about it more, but not right this second.","width":157},{"text":"So I'm not gonna say the words 'Are there any questions'.","width":246},{"text":"There're supposed to be questions.","width":137},{"text":"Alright, so we're gonna move on.","width":256},{"text":"And this is actually the beef of the day.","width":248},{"text":"This is the beef of the day.","width":128},{"text":"So C++ handles parameter passing in important and different ways than you might be accustomed to if you come here from just about any other language on the planet, okay?","width":768},{"text":"So we're gonna spend a good amount of time talking about parameter passing.","width":332},{"text":"Now what do I mean by that?","width":127},{"text":"I mean when you have a very simple little piece of client code, like this.","width":544},{"text":"What happens when you declare a student, make a function call, so I have a function call, when the parameter gets passed into the calling function and then executed upon, what happens?","width":1215},{"text":"What happens in memory, k?","width":142},{"text":"Now, the discussion of what happens when control is passed back to the calling function is a discussion about return type and I don't think we're gonna get there today.","width":826},{"text":"I think that's a discussion for next time, k?","width":214},{"text":"Alright any questions about that? Is it clear what we're gonna be talking about?","width":301},{"text":"Alright I think that you should have a question about this slide, cause I think that there's something new there.","width":422},{"text":"For some of you at least","width":86}],
  [{"text":"Yes","width":255.857142},{"text":"here? not that's not. that's not printed then printed, the code is  intended to be pretty simple","width":1151.857142},{"text":"what the hack is the struct? ","width":255.857142},{"text":"that's right","width":127.857142},{"text":"notice here","width":63.857142},{"text":"oh","width":127.857142},{"text":"oh","width":127.857142},{"text":"what is it look lot like?","width":191.857142},{"text":"if you kind of squeeze you eyes, what does it look like?","width":447.857142},{"text":"the struct is a class","width":63.857142},{"text":"struct by C++ compiler, struct is interpreted is a class where all the members by default is publioc","width":1023.857142},{"text":"exactly the same thing, why did I choose struct in this case? because I want to save screen space","width":319.857142},{"text":"and I only have data associated with it, I have no function, and so it will be familar to somebody who speaks C","width":831.857142},{"text":"yes you can, you can define functions, the c++ compiler will do the right thing with it","width":319.857142},{"text":"so if you take c code and you put it in C++, you know, you can mess with it","width":447.857142},{"text":"nathan?","width":127.857142},{"text":"speaking somethinbg","width":511.857142},{"text":"em","width":383.857142},{"text":"a boy using typedef because you are using a class oh yeah you can just use it directly, but you can use in C too, right?","width":767.857142},{"text":"ok","width":255.857142},{"text":"I will look at it and make sure I answer correctly","width":127.857142},{"text":"but suffice to say you can do this it's fine and use it just like a class","width":319.857142},{"text":"ok","width":127.857142},{"text":"alright","width":63.857142},{"text":"any other question about this?","width":255.857142},{"text":"ok","width":63.857142},{"text":"alright","width":127.857142},{"text":"we will look at the details of what's happening here","width":127.857142},{"text":"this is largely replication of, look at you flip the page, we are like flying through the lecture today","width":511.857142},{"text":"all the knowledge","width":319.857142},{"text":"so this is largely replication of the examples of previous page","width":319.857142},{"text":"and I an gonna tell you some vocabulary associated with parameters passing in C++ by default","width":639.857142},{"text":"parameter passing is pass by value","width":255.857142},{"text":"so","width":63.857142},{"text":"default C++ is passing by value","width":575.857142},{"text":"and here is what that mean","width":255.857142},{"text":"it means when you set up student A","width":319.857142},{"text":"they have a name","width":127.857142},{"text":"they have a picture","width":255.857142},{"text":"and they are not they are gonna be initialized to be not be printed","width":575.857142},{"text":"ah","width":255.857142},{"text":"ok, here is what happens when we make a function ncalls","width":639.857142},{"text":"we gonna make a function call to print student one of A","width":191.857142},{"text":"look inside the function, A is interpreted as s","width":447.857142},{"text":"here is what really happened, s is also set up like the local variable on the stack and value of A is copy in to the new space on the stack allocated for s","width":895.857142},{"text":"so string know how to copy themselves so n gets copyed over, PNG knows how to copy themselves","width":1023.857142},{"text":"and boolean know how to copy themselves","width":319.857142},{"text":"so we have completely independent copy of A in the stack for s on which to operate","width":447.857142},{"text":"we can write code looks like this, if its not the case s is printed, then output the name and here is what ","width":1151.857142},{"text":"em","width":63.857142},{"text":"here is what we cannot do","width":255.857142},{"text":"we could do s.printed","width":255.857142},{"text":"= true","width":127.857142},{"text":"here","width":63.857142},{"text":"what's the problem with that","width":255.857142}],
  [{"text":"what","width":128},{"text":"thats right","width":121},{"text":"thats right","width":128},{"text":"i only set the one in the fucntion","width":192},{"text":"right","width":64},{"text":"so i have made note of the fact that we printed s","width":168},{"text":"yay","width":64},{"text":"good job","width":64},{"text":"and then ","width":128},{"text":"we go we return","width":128},{"text":"um the control back to the calling function","width":153},{"text":"and s goes off the stack","width":256},{"text":"so we have no record of the fact","width":128},{"text":"that we had printed it","width":128},{"text":"thats why","width":64},{"text":"in this code","width":64},{"text":"we return a true and we grab it","width":233},{"text":"on the outside","width":64},{"text":"and if we had hoped to change it","width":241},{"text":"we have to change it in the scope in which it exists","width":256},{"text":"alright","width":39},{"text":"any questions about that","width":128},{"text":"is that clear","width":29},{"text":"and thats default behavior","width":150},{"text":"ok","width":64},{"text":"and thats passed by value","width":128},{"text":"no questions you're good?","width":128},{"text":"ok","width":56},{"text":"lets do something different","width":249},{"text":"so this time","width":282},{"text":"instead of a student i have a student pointer","width":206},{"text":"b","width":64},{"text":"im going to set up b in memory","width":192},{"text":"so in this case","width":166},{"text":"right here","width":64},{"text":"i have for sure b=new student","width":320},{"text":"somewhere","width":64},{"text":"and maybe theres a param i dont know what constructors exits for this puppy","width":347},{"text":"bu I have set up b so its has value","width":192},{"text":"ben a","width":64},{"text":"smiley and not printed","width":256},{"text":"now","width":89},{"text":"when i when i make a function call here","width":415},{"text":"to be or with b as a parameter","width":256},{"text":"print student 2","width":192},{"text":"has to take what what kind of thing must if take","width":317},{"text":"a pointer thats right","width":211},{"text":"the types have to match","width":100},{"text":"so this has to be a pointer ","width":192},{"text":"in that case what happens is ","width":256},{"text":"the variable s is set up on the stack as a pointer ","width":256},{"text":"and b's value is copied into it","width":175},{"text":"b's value is copied into s","width":432},{"text":"if you had this slide what would you draw","width":256},{"text":"to reflect that","width":192},{"text":"b's value is copied into s","width":128},{"text":"yup very good","width":256},{"text":"so s now ","width":128},{"text":"draw an arrow pointing to the very same memory laocation","width":256},{"text":"because their value is at the same memory location","width":192},{"text":"ok","width":64},{"text":"you good","width":64},{"text":"and now","width":128},{"text":"we operate on s","width":128},{"text":"i want you to spend about thirty sec finishing that code so that","width":382},{"text":"the output of this function call is ","width":192},{"text":"a ben","width":128},{"text":"so spend about thirty sec filling in the blanks effectively","width":412},{"text":"that would ummm make this thing print out ben","width":192},{"text":"oh","width":320},{"text":"you can","width":128},{"text":"yeah","width":64},{"text":"like i have there so ","width":177},{"text":"you need to finish that code or debug it if you want to use a different syntax","width":307},{"text":"youu're asking me exactly what im asking you","width":256},{"text":"ok","width":64},{"text":"to fix up this code yea","width":320},{"text":"yes","width":768},{"text":"yup","width":384},{"text":"yup","width":64},{"text":"but not for static arrays","width":169},{"text":"static arrays are all in the stack","width":192},{"text":"do you want to use them for smaller things","width":642},{"text":"ok how you doing","width":142},{"text":"alright","width":80},{"text":"so what should the conditional look lilke","width":129},{"text":"what should the conditional look like","width":128},{"text":"i left a space there","width":85},{"text":"whats goes in it","width":128}],
  [{"text":"","width":10},{"text":"can someone raise their hand and talk to me?","width":128},{"text":"I'm feeling kind of lonely....","width":128},{"text":"YES, what goes there?","width":128},{"text":"[someone answers inaudibly ]","width":173},{"text":"yea, good. splat is splat. I'm gonna use splat on the exam","width":320},{"text":"yea..","width":100},{"text":"k","width":46},{"text":"and i'm gonna do this to be explicit","width":161},{"text":"k...","width":60},{"text":"I probably don't need to but, ima be do that to be explicit","width":192},{"text":"so... de-reference S, and then I can get at it's value","width":268},{"text":"um as......asssssssss","width":188},{"text":"you might have noticed","width":137},{"text":"heeeeeeeree, you could equivalently use S","width":251},{"text":"printed..... to accomplish the same thing","width":304},{"text":"k, it's exactly the same just different syntax ","width":241},{"text":"Okay! What else do we need to do?","width":159},{"text":"how do I print out the name?","width":224},{"text":"de-reference, good, thats all- i just needed to hear somebody \"de\", and I was good","width":320},{"text":"ok fiiiiiiiind","width":128},{"text":"and theeeeeeeeen","width":192},{"text":"yea, guess what I can do","width":267},{"text":"I can do, S printed","width":320},{"text":"is true here","width":213},{"text":"and this changes to true","width":365},{"text":"YEA","width":171},{"text":"and am I done?","width":151},{"text":"I should probably return, just to let people know that I know I'm finished ","width":320},{"text":"K, any question about that? Yea?","width":192},{"text":"[someone asks a question]","width":192},{"text":"um because of, so the question is","width":226},{"text":"why don't I have to write return true? and the answer is because this function has a different signature","width":383},{"text":"here it returns void","width":98},{"text":"my purpose for returning true last time was passing back the result of the computation","width":338},{"text":"here I didn't have to","width":93},{"text":"k? alright yes!","width":128},{"text":"[I guess someone is asking a question]","width":320},{"text":"uhuh...........yahuh","width":230},{"text":"[mumbling]","width":178},{"text":"uhuh....... yea","width":314},{"text":"...............um, they are if you use parentheses correctly and there is a complexity in the mp because of the overloaded parenthesis ","width":523},{"text":"so for the png class, it's a little wierd","width":219},{"text":"and we kinda want you to, we kinda leave that there on purpose","width":289},{"text":"just to have you, have you untangle it","width":144},{"text":"sorry... OKAY! so are we done here?","width":241},{"text":"are we done?????","width":64},{"text":"............. Yes????","width":228},{"text":".............. very good!. okay!","width":256},{"text":"so notice that ","width":151},{"text":"we cannot forget that what we are dealing with here is a pointer","width":296},{"text":"what we're dealing with here is a pointer","width":167},{"text":"so this needs to be de-referenced","width":232},{"text":"here as well","width":94},{"text":"kay?... now let's contrast","width":216},{"text":"the previous slide and this slide","width":179},{"text":"kay? who's..... so this is a popularity contest ","width":256},{"text":"who's speed do you like better?","width":256},{"text":"who's speed do you like better? which is faster?","width":253},{"text":"previous slide by value? or pointer by value, sorry this is pointer","width":398},{"text":"still by value, it's still, it's just pointer by value","width":287},{"text":"which one do you like better?","width":128},{"text":"speed wise?","width":64},{"text":"[space]","width":107},{"text":"pointer by value. thats right! passing a pointer no big deal","width":192},{"text":"it's this little teeny tiny representation of a memory location right?","width":274},{"text":"whereas in the previous case","width":148},{"text":"that picture, copying that picture around, bad idea","width":276},{"text":"kay, even if you..... even if it's super fast","width":207},{"text":"So! this is FAST","width":256},{"text":"alright fine. who's syntax do you like better?","width":428},{"text":"who's syntax do you like better?","width":256},{"text":"this one? or this one?","width":174},{"text":"it's like an eye test, left, or right?","width":256},{"text":"[pause to let people laugh]","width":304},{"text":"yea, le-hehehehehehhe","width":143},{"text":"right!... wait, left","width":188},{"text":"okay so the syntax here is better","width":217},{"text":"this is cleaner code but","width":256},{"text":"uh, so this is a comment on syntax","width":208},{"text":"but!... here's the thing... it's also safer to be dealing with; your less likely to make memory mistakes","width":730},{"text":"if you can refer to things that live on the stack","width":192},{"text":"so actually the stack variables","width":192},{"text":"make your code less likely to be buggy","width":224},{"text":"so it's much much much more than a pretty dress","width":192},{"text":"it's the substance of the quality of what you, what the code you create","width":389},{"text":"so code that uses fewer pointers is less likely to have memory errors","width":363},{"text":"kay? any question about that? so I'm going to say it as safer here","width":384},{"text":"especially for us","width":128},{"text":"mkay.... alright any question about that?","width":168},{"text":"is that good? so which one better?","width":143},{"text":"[pauses for dramatic effect!]","width":235},{"text":"probably the second.......","width":128},{"text":"[silence].... sighs","width":311},{"text":"well somebody is paying you according to how fast your code works","width":192},{"text":"well here's the thing, in C++ you don't have to make a compromise between the two","width":448},{"text":"so let's look at","width":128},{"text":"the third way that parameters can be passed","width":256},{"text":"this is called, pass... by... reference","width":256},{"text":"[silence]","width":448}],
  [{"text":"Okay, so let's trace this code for just a second.","width":256},{"text":"um, notably, I'm declaring a student.","width":256},{"text":"I am declaring a student, raise your hand if your name starts with C.  Yes, what's your name?  Crystal.","width":704},{"text":"Is that how you spell Crystal?  That's one of my- you know how everybody has a word that's hard for them to spell?  Shouldn't there be an h in there somewhere?  But no.  Okay.","width":832},{"text":"Yeah. No.  Like Christmas, it's almost like Christmas but not. Okay.","width":576},{"text":"'Cus that's gonna be on a test.  Alright.","width":256},{"text":"Uh, Crystal you're happy and you have not yet been printed, yes?  I'm sorry to impose emotional status on you but there we go.","width":512},{"text":"Okay, alright, so now this is a student in the stack and we give it value just like we normally would for this thing.  However that user defined type allows us to do so.","width":768},{"text":"In this case, it would just be c.name = Crystal, etc.","width":320},{"text":"Alright, so now let's trace this, we're going to call a function whose name is print_student3.","width":448},{"text":"It has as its parameter a student reference.","width":448},{"text":"Okay.","width":256},{"text":"Slightly different.","width":64},{"text":"Now, here's what we mean by that.","width":359},{"text":"We mean ","width":142},{"text":"take wherever s is set up","width":256},{"text":"wherever s lives, whatever s is, and rename it","width":391},{"text":"to I'm sorry - c - sorry - wherever c is","width":348},{"text":"okay, wherever c is take it and rename it as s","width":412},{"text":"okay, so give it another name which is s","width":289},{"text":"Okay?","width":320},{"text":"Now, when you write this code, if it's not the case that S is printed","width":512},{"text":"is it printed?  is S printed?","width":203},{"text":"No","width":72},{"text":"Then, uh, output it's name.  Can we refer to its name?","width":384},{"text":"Yes.","width":64},{"text":"That's Crystal.","width":128},{"text":"And moreover","width":192},{"text":"we can use s to refer to the contents of c","width":256},{"text":"so we can say s.printed = true here","width":339},{"text":"Change this to T.","width":117},{"text":"Okay?","width":287},{"text":"And when we get back out here what do we get?","width":362},{"text":"True","width":192},{"text":"Alright.","width":148},{"text":"Any questions about it?","width":192},{"text":"Yes?","width":192},{"text":"yes.","width":254},{"text":"And usually we will actually.","width":140},{"text":"Okay, there's not the uh there are software engineering issues here with changing the value of the variable","width":524},{"text":"underneath it within a function but we're not talking about that here","width":178},{"text":"we're talking about mechanics","width":72},{"text":"Yes?","width":128},{"text":"It's an ampersand before the s, yes","width":220},{"text":"that's right","width":79},{"text":"yes?","width":64},{"text":"Why don't we have to ampersand c?","width":240},{"text":"c is a student","width":95},{"text":"c is a student","width":143},{"text":"okay raise your hand if you feel uncomfortable with this","width":192},{"text":"because you feel why can somebody articulate why very precisely why","width":273},{"text":"you feel uncomfortable with this.  yes?","width":146},{"text":"Yeah, so it looks like","width":448},{"text":"a","width":64},{"text":"type mismatch right?","width":192},{"text":"it looks like a type mismatch. so","width":256},{"text":"two things to say.  number one the ampersand used in this context is not","width":341},{"text":"the address of argument","width":141},{"text":"you should not think of it that way, okay?","width":160},{"text":"you should think of it as a flag passed by reference","width":298},{"text":"number two","width":103},{"text":"the apperance of a type mismatch","width":182},{"text":"is to be overcome","width":109},{"text":"so take a few minutes","width":100},{"text":"and do some meditation","width":141},{"text":"and get rid of the of that feeling of type mismatch okay","width":319},{"text":"because in this context it's just a flag","width":230},{"text":"now","width":64},{"text":"what's really happening","width":127},{"text":"I shouldn't even tell you, right?","width":128},{"text":"yeah I don't want you to clutter your mind with it, but I will tell you. Yes?","width":240},{"text":"is it functionally different than passing by pointer","width":321},{"text":"that was exactly what I was going to say and the answer is no","width":206},{"text":"it's the same effectively effectively you are pasing a pointer but it's the way you refer to that variable","width":415},{"text":"thats different","width":74},{"text":"okay","width":54},{"text":"so the speed the cost of passing by reference is the same as the cost of passing a pointer by value but the syntax of it is completely different","width":733},{"text":"and so you're much less likely to induce bugs","width":192},{"text":"imposed by ","width":87},{"text":"the use of pointers when you write code like this","width":178},{"text":"okay","width":41},{"text":"any questions about that","width":97},{"text":"so","width":54},{"text":"this is ","width":80},{"text":"as fast as pointer passing","width":320},{"text":"but without the syntax complexity","width":448}],
  [{"text":"Â  Â  Â  Â  Â Â Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  There's already an important typo on them. So we'll leave it in red. This MP is due the 15th (tuesday night)","width":12804},{"text":"Ummm and thats really my only announcement at this point. And then otherwise the errors in the slides are going to be minor, so I'm gonna go with it","width":582},{"text":"Okay. Let's see. So I haven't seen you in a really long time. Are there any administrative issues? Did anybody get a grade report from the extra credit last night? Have you looked at your SVN and it was there? Okay I have reports that some people didnt, so I'll look into that. If you expected an extra credit report from last night and there isnt one in Svn the first thing I would recommend is to go and refresh the page and otherwise I will also be looking into it to make sure that the entire run went successfully. I think it has to if anybody gets it everybody should My best advice is to reload the page.","width":3556},{"text":"MP1's rerun: I'm not sure whether that happened last night. We were going to rerun MP1 one last time and I don't know when we;re going to do it, but suffice to say it'll happen at the end of the semester. Raise your hand if you're going to the career fair today? Yeah look at that. cool.","width":1536}],
  [{"text":"Its a good one I like it its fun I see lot of alums when I go there. ","width":459},{"text":"I do not go very often because I have a job.","width":192},{"text":"Alright","width":64},{"text":"[pause]","width":128},{"text":"So we were talking about code and C++ behavior upon parameter passing and we has just concluded last time by mentioning that all the cognitive that we talked about parameter passing where also true about returning control from a function to the calling function ","width":1728},{"text":"So what we are talking about here is what happens so take a look at this client code, what happens when that call is made. Last time was all about the parameter passing and this this time its going to be after the function concludes what happens when you pass control back to the calling function.","width":1792},{"text":"Now there was some keywords that come about in the discussion of parameter passing that sort of described the different ways that were interesting.","width":576},{"text":"We can pass parameters and that was O those forget that this says return by and remember back to pass by.","width":768},{"text":"and the words are the same. So what were the different ways of passing parameters?","width":384},{"text":"Do you remember?","width":64},{"text":"Value. Good!","width":128},{"text":"Value","width":128},{"text":"Reference ","width":192},{"text":"and pointer by value. Now that whole discussion was kind of a bridge between passing by value and passing by reference because the behavior of the system and whats happening behind the scenes is the same as passing by reference but reference gives you simplicity and some cleaner ways of stating your intentions.","width":1856},{"text":"So this is a pointer by value","width":320},{"text":"Ok","width":128},{"text":"and you should kind of review the implications of each of those and syntax.. OK","width":640},{"text":"well like I said all the same things are true for parameter passing is return value and we are going to spend the first part of today discussing some issues there and kind of reminding our selves what those terms mean.","width":1088},{"text":"OK","width":64},{"text":"So here again we have a little class a student and we are going to do some similar things like we did last time.","width":576},{"text":"Here is some client that is code that uses a student and it makes a function call","width":448},{"text":"one thing that guess I never said but now is a good time to say it, is that in C and in C++ , you can write functions in the global scope","width":768},{"text":"That is functions do not have to be class memebers","width":384},{"text":"They do not have to be associated with the class.","width":128},{"text":"And suppose all of these examples have exploited that fact. ","width":320},{"text":"Ok","width":64},{"text":"So we are going to initialize a student C and we are going to set up a student C in the stack and declare a student pointer D. ","width":960},{"text":"So I am drawing the wrong picture for C.","width":192},{"text":"Look I learned something new.","width":192},{"text":"When I initialize a student C, it has some fields associated with it....[pause]","width":768},{"text":"Cat.and the Cat looks like that. and the cat has not been printed. ","width":512},{"text":"and then what I am to do is print C and return a value.","width":320},{"text":"Ok so send C to the print student function and return a value from it who's type is a student pointer.","width":448},{"text":"Ok","width":64},{"text":"Alright so let's go and do this.","width":320},{"text":"When you pass a parameter in its by value so this one is called C and this one called now called S and it copy is made ","width":768},{"text":"Looks just the same","width":115},{"text":"Furthermore when we declare another student here there is a lot of gratuitous nonsense here.","width":445},{"text":"I understand that but its kind of to make a point","width":1224},{"text":"the next line student w. declaareds a w and assigns the vlaue of s to it","width":18447},{"text":"not yet printed","width":384},{"text":"ok and then we are going to process it like we did last . has w been printed? No so we cout the name and change this to true and then what are we returning?","width":1536}],
  [{"text":"The address of w. okay? The address of w and then, so, this right here, this eventually becomes the address of w.  This function call is sort of replaced by return value. Right? In the flow of the program. Then we assign it the value of d. Is this syntactically in type wise correct?","width":726},{"text":"Is work okay type wise? Yes, it does. 'd' is a student pointer 'w', this is the address of the student, those are the same thing. So type wise this works fine.  But let me ask you this.  What happens to 'w,' the second we leave the function? What happens to 'w'? Yeah? That's right!  The system does you a favor.  It clears the right off the stack.  Boom boom done.  Right? So 's' and 'w' are effectively gone because they were local to the function.  So what about the address of 'w'?  How do you feel about the address of 'w' out here in the calling code? Daaah!  Right? It's no longer valid!  Now will it work? Will this code work?  Most of the time, maybe? It's probabilistic thing.  You are rolling your die here.  So, the point of which this assignment is made, the point of which this assignment is made relies on the 'w' that is no longer in scope.  So, but, 'w' is not in scope.  So this is a horrific bug.  Why is it horrific?  It's worse than insidious.  Why is it horrific?  Because it might work a lot of the time you probably won't get a seg fault.  Another parts of, other times, you might get a seg fault, other times you would just get a value that you don't understand because that stack has been reassigned to be something else by some other process. Okay?  Alright.  So what was the error here?  What did we do wrong?  What did we do wrong here?  Yes?  We used stack and we returned what from the stack?  A memory address of something on the stack.  That's right.  We returned the memory address of stack variable.  Now returning that thing by value would have been fine.  Returning 'w' by value would have been perfectly fine.  So if 'd' were instead just a student and we had just returned 'w' here, then things would have worked fine.  That's returning by value, yes?  So the address is memory address.  It's the location in memory.  And, we returned it because there's nothing that says we can't return something of pointer type.  Right? We returned it pointer type.  So that types match up across this assignment statement.  This is pointer, this is pointer.  No problem.  Right?  Except that the thing that we instantiated that pointer with that, is, ephemeral, kind of.  Alright, any question about it?  Is it okay?  Alright.  That's the, that's the warning.  Don't return a local variable memory address, local variable's memory address.  Okay fine.  Uh, let's do something else.  Return by value would've worked fine here.  Returning a student would have worked fine.  Let's do something else.  Uh, let's talk here about... How would you describe that?  What have we done here in this function?  Are we returning a student?","width":1826}],
  [],
  [{"text":"","width":640},{"text":"Ok, got it, ok, any questions about that? ","width":320},{"text":"This is really all we're going to discuss int he context of return value, these two warnings.","width":512},{"text":"Um, on honestly you are not going to see returning by reference very often.","width":512},{"text":"Because you can't return a local variable by referece, you can't return a parameter by reference, because that's kind of the same, I cannot say return s because it's the same issue s is going to go out of scope","width":1024},{"text":"So what can you return by reference? ","width":320},{"text":"What could you return by reference.","width":128},{"text":"","width":347},{"text":"What could you return by reference, does anybody see it? it's a little puzzle","width":256},{"text":"","width":256},{"text":"Yeah? You could return a global variable, hmm","width":320},{"text":"You COULD. Do we know how to refer to global variables at this point? ehhh I don't know!","width":512},{"text":"yes, you could return a global variable there because that memory address, that reference is not, that memory that it represents is not going to go away, so anything in the xternal scope you could. ","width":768},{"text":"y","width":259},{"text":"So if something in the heap you could return it' by reference, the problem is that often times we don't have a name for those things, we don't actually have a name for the values in the heap","width":1088},{"text":"So it's a little harder ok?","width":220},{"text":"","width":448},{"text":"The parameter as it is is like a local variable, ok? But there's a big hint there","width":435},{"text":"The parameter as it is is like a local variable, that means it gets cleared off the stack too","width":448},{"text":"","width":256},{"text":"Very good! So if I pass something in by reference, if I pass ","width":448},{"text":"If i pass something in by reference, then it becomes another name for the value in the outer scope, and so I can pass that one back","width":896},{"text":"By reference, here, because then that would mean we're basically referring to c","width":384},{"text":"ok? any questions about it? is it ok?","width":320},{"text":"Alright.","width":128},{"text":"I think reading this and becoming comfortable with references requires just a little practice and the more code you see and the more code you write, you'll become more fluent with it. I remember looking at c code","width":960},{"text":"And not being able to figure out type information. Just not being able to do so, and now I'm like boy!","width":448},{"text":"It's not that bad!","width":256},{"text":"Yes! right, so the error is basically non existent","width":320},{"text":"you're only lucky if you get an error, otherwise it's just unreliable","width":384},{"text":"yeah","width":320},{"text":"","width":512},{"text":"So the question is, when I return w though that reference, what's left on the stack? and the answer is c","width":576},{"text":"Basically, the stack is keeping track of it's top and anything below it is valid and when you pass control back ","width":640},{"text":"the top of the stack is moved down. Anything above it is moved down below the local variable, so anything above it, any of the local variables are basically invalid memory","width":704},{"text":"alright yeah?","width":256},{"text":"","width":192}],
  [{"text":"Um in this current example yep right now if I change s.  If I change s to true here so I have an s dot printed equals true.  And I refer to c out heres c value will be changed.  That is partly what pass by reference gets you.","width":1600},{"text":"Alright any other questions about this?  Alright.  So these are the warnings. Okay.  So we talked about constructors in enough detail to be dangerous.  But when we did so we didnt have a very sophisticated understanding of memory so the kind of objects we made couldn't be very complex.","width":2048},{"text":"Remember that the fundamental role of a constructor is to answer the question, what do you want the object to look like when you declare it, and in this case rather than a sphere with a radius we are going to talk about what we want the object to look like when we have a richer sphere.","width":1664},{"text":"So take a look at this sphere.  We still have the radius.  What do you think this business is?  You can use the diagram on the page as a clue.","width":1088},{"text":"If somebody said hey whats atts?  What type is atts?  How would you describe it?  There are a lot of right answers here.","width":768},{"text":"Yeah its a pointer to a string.  Okay fine.  What else can it be interpreted as? An array that is right. So remember that when you are looking at variables, if you see something that is a pointer it may be initialized to an array rather than just a value.  Okay.","width":1664},{"text":"So and in fact that is what we intend here.  We intend to use that string pointer as an array in our structure.  Okay so let me show you what I would like a default sphere to look like.  And you can help me write the constructor that makes it so.  It is a perfect review of what happened last time or 2 times ago?","width":1728},{"text":"Okay so when I declare sphere A here is what I want it to look like. I want it to have a radius of 2 inches and I want it to have 3 attributes.  I am just going down this list checking them off.  And I want those attributes to be a sequence of strings that are red and juicy and crunchy.","width":1984},{"text":"The default sphere is an apple.  Okay.  Yay!!! Alright.  So how do we make thatn.  Yeah.happe","width":960},{"text":"Do I need an array of arrays?  No because this whole thing is going to be A.  This part is not intended to indicate an array.  This part is just going to be a list of these variables. Okay","width":1152},{"text":"But yeah this yellow part is an array.  That is right.  And we have to use the constructor to make that happen.  I am going to remind you of some syntax here.  So we are going to right this constructor.  I am going to remind you of some syntax.","width":768},{"text":"You can use the initializer list to instantiate some of the variables.  Since we are not using user input here for this default behavior it is pretty safe.  We do not need to do any error checking.  So we can say the radius is 2.0 and more over it is safe to say num atts","width":2496},{"text":"Sorry it is a little weird to say that word.  Num atts is 3 so they would actually be up on the same line.  Initializing this array though would be a little bit more complex.","width":832},{"text":"[continues writing on screen]","width":384}],
  [{"text":"What is atts? What's the next character I'm going to write?","width":450},{"text":"Say what letter I'm going to write next, what's the next letter I'm going to write?","width":512},{"text":"Yeah?","width":81},{"text":"New, very good","width":99},{"text":"Att's equals new string, how many of them do I want?","width":384},{"text":"numAtts, very good","width":380},{"text":"Now notice these are not string pointers","width":152},{"text":"new returns a pointer and that's what type of thing we need","width":383},{"text":"This is not a double pointer here. This is simpler than MP2","width":300},{"text":"Alright, so now I have this pointer instantiated with this memory address","width":448},{"text":" Where this block starts in memory","width":186},{"text":"And I have this much preserved","width":175},{"text":"Each of them for strings","width":146},{"text":"But they don't yet have the values I would like. How do I give them the values that I would like?","width":508},{"text":"What's the next character I'm gonna write?","width":384},{"text":"A, good","width":268},{"text":"Oh I did the square bracket for you, okay","width":168},{"text":"@ zero equals \"red\"","width":375},{"text":"K","width":43},{"text":"Can I do dot dot dot yet?","width":262},{"text":"K","width":128},{"text":"But I like to write 'Juicy\"","width":208},{"text":"K","width":98},{"text":"Alright, any question about this, and that's our constructer","width":312},{"text":"So, when I declare A, the system says, \"do you have a constructor you would like me to deploy?\"","width":650},{"text":"We have said, \"Why yes we do have a constructor we would like you to deploy\"","width":393},{"text":"And then the system deploys that code","width":258},{"text":"It sets the radius equal to two, numAtts equal to 3, and then it allocates and intializes that array to contain the strings we wanted","width":1282},{"text":"Umm, so the question is, \"What's the difference between putting something inside the constructor explicitly","width":397},{"text":"Like, \"the radius equals 2.0\"","width":196},{"text":"vs putting something in the initializer list","width":122},{"text":"And the answer is essentially nothing","width":126},{"text":"Using the initializer list is a little bit faster","width":245},{"text":"There's a little bit less memory manipulation, but that only matters in very rare circumstatnces","width":494},{"text":"The reason I did it like this was to remind you that the initializer exists because we're gonna be using it when we talk about inheritance","width":1036},{"text":"Take a look here and tell me if anything surprises you","width":387},{"text":"What are each of those things?","width":911},{"text":"So this is the constructor we just wrote","width":183},{"text":"This is one, that allows you to adjust the size of the apple","width":375},{"text":"I dunno, because...","width":207},{"text":"Maybe you have a sequence of things that you can change based on the user input","width":351},{"text":"What the heck?","width":363},{"text":"So tell me as many things as you can that are weird about that","width":295},{"text":"First of all do you believe it's a constructor","width":189},{"text":"Why do you believe it's a constructor","width":175},{"text":"Same name as the class, no return type","width":170},{"text":"That's a constructor","width":136},{"text":"What else surprises you?","width":158},{"text":"Two things about the parameter list, I think, should surprise you","width":362},{"text":"Yeah, it takes a sphere as an argument and the argument is passed by reference, that's a salient point. Const? What the heck is const doing there.","width":2064},{"text":"That thing, that constructor is called the copy constructor, and it's what we're gonna talk about for the rest of the day","width":919},{"text":"So, what do we need the copy constructor for?","width":360},{"text":"The last time, or two times ago, you let me get away with some language, almost","width":506},{"text":"I think somebody called me on it","width":330},{"text":"You let me get away with saying a copy is a made between the calling function","width":760},{"text":"and the parameter","width":145},{"text":"You let me get away with saying, \"oh look, when we pass a into s, a copy is made\"","width":617},{"text":"Right there at that instant, the copy constructor is invoked for you","width":576}],
  [{"text":"Okay, now if you don't write an explicit copy constructor the system will provide you one, and I'm going to tell you a narrative about what the default one give you in just a second.","width":768},{"text":"Okay, so one location where the copy constructor is called is when you pass parameters in, that's how by value happens, that's how pass by value happens.","width":832},{"text":"Another case that it happens is like this. You are allowed to declare a sphere and then to declare another sphere to be a copy of that one.","width":1088},{"text":"Okay, so maybe in here you would change a somehow. And this b, the declaration  of b with another sphere as an argument is as close as we come to explicitly invoking the copy constructor.","width":1418},{"text":"Okay, any question about that?","width":496},{"text":"Okay, there is a third use that merits a complex discussion.","width":448},{"text":"That third use actually occurs in the first example perhaps. Ah I cannot change my pen color, I'm so sorry, things are kind of broken here.","width":704},{"text":"So the question is what happens when you say return s?","width":576},{"text":"We sort of implied that the execution is the same between passing a parameter and returning a parameter.","width":768},{"text":"But in this case, actually, that copy constructor may not be called, it may not be called.","width":614},{"text":"The system will decide whether or not it knows what you mean and in certain circumstances the copy constructor will not be called.","width":613},{"text":"So you cannot rely on the copy constructor being called upon returning by value.","width":448},{"text":"So let's see, where can I write that? This may or may not call the copy constructor.","width":704},{"text":"And the reason for it is simply that when you're returning a value, if you can maintain the data in memory some place, making another copy of it ends up being like an extra copy.","width":1024},{"text":"So you're code actually executes faster if it doesn't have to make extra copies all over the place and so where it can it will avoid invoking the copy constructor.","width":768},{"text":"Alright, any question about it? We'll talk about it more later. We say that the return copy is elided, if you wan't vocabulary associated with it.","width":896},{"text":"Okay, so we need a copy constructor and I said the system provides one for you. Let me show you what it does by default.","width":576},{"text":"Okay, so let's assume that we have an apple a set up in memory, a red, juicy, crunchy, and we pass a to a function.","width":960},{"text":"Here's what happens by default, the parameter gets a new version of a and a member wise copy is made.","width":896},{"text":"Now, that's fine, because doubles know how to copy themselves and it's fine because integers know how to copy themselves, they have valid copy constructors essentially.","width":1088},{"text":"And it's also fine because pointers know how to copy themselves, what does that mean?","width":1216}],
  [{"text":"The address is copied.","width":256},{"text":"now","width":64},{"text":"i am pretty sure","width":256},{"text":"when you pass by  value","width":128},{"text":"that is not what you intend. YOu do not intend to have your onjects kind of be tangled together","width":640},{"text":"THe possibliyt of this entablement is why we specify a custon copy concstructor]","width":576},{"text":"lets take about what type of value we want instead","width":384},{"text":"we want the radius to be copied, and the number of attri","width":448},{"text":"we want new memory to be allocated","width":256},{"text":"and then the values to be copied","width":256},{"text":"so that was a checklist","width":320},{"text":"that was one, two, three","width":384},{"text":"that gives you the boxes","width":192},{"text":"and then four for the values i want you to write thouse lines of code and attempt to","width":640},{"text":"work with somebody around you to write those few lines of code in that green box","width":512},{"text":"Ill wtrite is slowly here to.  YOu are welcome to peek","width":768},{"text":"Ill race you","width":128},{"text":"Actually oh no i can do this","width":448},{"text":"who wants my tablet who wants to write their solution on my tablet","width":512},{"text":"you want to try it okay","width":128},{"text":"its okay. Oh be sure to do it a little bit wrong because debugging is a critical skill","width":832},{"text":"He writes way faster than me","width":832},{"text":"anybody have questions","width":640},{"text":"its an array","width":768},{"text":"but the way you specify an array is via a pointer","width":320},{"text":"does that make sense","width":128},{"text":"so this means its a pointer but we are going to build it into an array","width":448},{"text":"any questions or anything","width":576},{"text":"this is stil bad","width":2176},{"text":"no audio","width":3776}],
  [{"text":" thats called abdication. You abdicated. Was it fun?oh no no one will ever do it again. Ill erase it so youll have it. Okay so while we were doing this somebody asked me a really good question and that was actually there were two questions. Im going to ask them in reverse order. ONe of them was why did he use an arrow on the left side and a point on the right side. period on the right side","width":3392},{"text":"this is a pointer to the current object.Okay it is not the current object. It is a pointer to the current object or the memory address of the current object. In C++ we dont have to write it inside member functinos. SO i get to erase all of this and i dont know what you guys think but i think the code is more readdable the less text that is there. So that is the style that course staff like to read","width":3328},{"text":"Now all that is correct we have to explicity assign all of the member variables. Then we have to do some for loop for int i equals zero, i less than num, atts i plus plus. atts sub i equals orig.atts[i]","width":2880},{"text":"any questions? excellent questions i am glad  you brought it up. Look what he noticed. We have got a function refering accessing a private member of the sphere class. surely that should be forbidden but no because this right here says sphere because we are writing a spere class member function we have direct acces to the private members","width":3328},{"text":"it is worth pointing out that if we are writing a sphere class member function we have direct acces to the private variables","width":1024},{"text":"Any time a parameter is passed by value. that code is invoked. Okay. We are not done. OH shoot i think we have to be done. This is such a bad place for a cliff hanger because we have created new memory and we have no mechanism for cleaning it up. Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â SO we are just going to leave ourselves in a mess until firday","width":2688}],
  [{"text":"ssil","width":175.181818},{"text":"<silence>","width":14477.181818}],
  [{"text":"Is the mic working?","width":1},{"text":"Ok. I have no new announcement except that is Friday","width":2048},{"text":"How about the volume now","width":128},{"text":"It's still","width":256},{"text":"Can you hear me now?","width":192},{"text":"Ok","width":64},{"text":"I think this is good","width":192},{"text":"Alright, so I have no new announcement","width":192},{"text":"So let's just start working","width":128},{"text":"Last time we were talking about","width":256},{"text":"bad thing, bad one right there, I try jump roping last time for the first time in like two decades","width":576},{"text":"Cuz my child got a jump rope felt delighted","width":320},{"text":"You know, how little generator in I handle thing, and I kind of thought I would gonna die after jump roping. ","width":576},{"text":"So I wish I could leave and point to that function signature right there, but you are gonna save me from having to do that ","width":512},{"text":"Cuz you are gonna tell me what that is the function signature of, what is that","width":320},{"text":"So copy constructor, right, how do you know that is a copy constructor, what did you check in your mind","width":448},{"text":"yea, the parameter is that an object of a special type or not of the very sin class","width":576},{"text":"So the of sphere in that function signature what tells you it is the copy constructor","width":640},{"text":"OK, I have one question for you. Why is the copy constructor's parameter, first of all, what is that pbr stand for?","width":320}],
  [{"text":"Did you giggle?","width":128},{"text":"You get it right?","width":64},{"text":"Are you from Nebraska?","width":128},{"text":"Okay.","width":128},{"text":"Who else giggled at the PBR?","width":192},{"text":"You got it too?","width":192},{"text":"Are you from Nebraska?","width":128},{"text":"Okay.","width":64},{"text":"I don't know.","width":192},{"text":"Pass by reference right?","width":192},{"text":"Who's from Nebraska?","width":64},{"text":"Do you get PBR?","width":128},{"text":"It's the beverage of choice.","width":256},{"text":"I don't know why.","width":384},{"text":"Yeah you go home. I'm from there actually. It might be the beverage of choice here, I don't know. It's like a fancy beer in Nebraska.","width":1216},{"text":"That's because it's kind of close to this one.","width":128},{"text":"Oh man, we don't have time for this. I am so sorry.","width":256},{"text":"But here's why. It's close to that and if you're from Nebraska that has meaning.","width":448},{"text":"Go Big Red.","width":64},{"text":"Right?","width":64},{"text":"And it's football season.","width":128},{"text":"Okay.","width":256},{"text":"Alright, so why is the copy constructor parameter passed by reference. Why is it passed by reference?","width":448},{"text":"Not passed blue ribbon.","width":192},{"text":"Yes?","width":64},{"text":"Exactly, very good.","width":192},{"text":"So, think about it.","width":128},{"text":"The alternative to pass, oh here we go, I have a brain. The alternative to pass by reference is pass by value.","width":704},{"text":"What happens when you pass by value is the copy constructor is invoked for you.","width":448},{"text":"But that what's we're defining here, so there's sort of recursive definition problem that exists if we try to pass my value in this context.","width":768},{"text":"I encourage you all to go write your own little class and it can even be simpler than this.","width":576},{"text":"I don't think you need any data members.","width":192},{"text":"Define your own copy constructor and see what happens if you try to pass by value.","width":448},{"text":"Why is the copy constructor parameter passed by reference? Because the alternative is passed by value.","width":1600},{"text":"Peanut butter value.","width":192},{"text":"And pass by value invokes the copy constructor.","width":640},{"text":"Which is what we're trying to define.","width":384},{"text":"So I encourage you to go test it out and see what happens when you try to set up a copy constructor pass by value.","width":1472},{"text":"Okay, another question. What does it mean that the copy constructor's parameter is constant. So I'm asking you exactly about the present of that constant there.","width":768},{"text":"I think we talked about it really really briefly. What does it mean in that context? Yes, the parameter very good. This promises that the copy constructor and the function in general will not change that parameter.","width":320}],
  [{"text":"Ok, so orig is effectively constant. Ok, um, last time we saw the, um, we saw that parameter used here. What's the difference?","width":832},{"text":"What's, I mean it's not a parameter, that keyword used there instead. What's the difference between using it at the end and using it in the parameter list?","width":576},{"text":"Do you remember what it meant when we used it at the end?","width":256},{"text":"I'll put a little question mark, here. Do you remember what it meant? Yeah, Nathan?","width":576},{"text":"Right, so this time, this time, if you put it here it means that the function will not change those guys, the data members associated with the class.","width":640},{"text":"So, it's still a promise that something will be held constant and it's just an issue of which thing will be held constant. Ok?","width":576},{"text":"Now, i wanted to spend a second and just tell you how I Â happen to read that parameter list in, um, in, uh, English.","width":640},{"text":"I read it like if you asked me, \"What is orig? What type is orig?\" I would say it's a reference to a constant sphere. A reference to a constant sphere. Ok?","width":896},{"text":"So, orig is a reference to a constant sphere. You will also see in your programming journey, you will see that keyword const here, and in that case, the English makes more sense. We just read it backwards.","width":1024},{"text":"Reference to a constant sphere. They're just different syntaxes. Uh oh. What's the plural of syntax? Syntaccc . . . I don't know the plural of syntax. They're just syntactically different ways of expressing the same, uh, the same functionality. Syntactically different ways of expressing the same functionality. Alright.","width":1856},{"text":"That's kind of a meta thing, right? I found a syntactically different way of saying syntaxes. Alright, any questions about it? Alright, so, const will come up. You'll see it in code that you maintain and read. Um, we will also kind of gradually ask you to use what we call const correctness.","width":1472},{"text":"Now, as, as we ask you to write code. Now, what does that mean?","width":256},{"text":"It means that you, as a software designer, should be aware of what you expect to allo-allow to be changed.","width":640},{"text":"So, for example, as I define a copy constructor, I'm pretty sure, that making a copy of something shouldn't do something crazy to it like change it to 42 or something, right?","width":896},{"text":"And, so, this is a way of promising inside the code, no matter how you implement the copy constructor, that the original value will not be changed. Ok, that's called const correctness. Yes?","width":1472},{"text":"Though, right, so the, so functionally you could eliminate the const and then just, you know, be a good steward of the code, right? Well, I'm not gonna write any code to change that. But, here's the thing. ","width":896},{"text":"This construct allows for, um, delegation of code construction responsibilities, right? So, I can now give it to you to write the code and you are not allowed to write bad code that will change that, that, um, the value on the left hand side. So it's a matter of security, actually. Ok?","width":1600},{"text":"Now, it sorta fails in some context. This is purely an aside, so, if this does not interest you then it's ok to kind of turn down the volume a little bit. Um, but, it's not a pure, um, it's not a pure security measure, because, you know what? Sometimes, we want to use the copy constructor to count how many times a copy has been made, say.","width":1728},{"text":"So in that case, and we might want to store that with the object. And, so, that level of, but, but if you make it const you can't allow for it because you can't, you can't record the state change within the object.","width":960},{"text":"So, you know, in effect, it ends up being functionally limiting, but it's ok. For our purposes, const for the input parameter. ","width":704},{"text":"Um, and in fact, there are many style guides, software engineering style guides, that will tell you that all reference parameters should be const.","width":704},{"text":"Ok, so, if you go work for Google, they're gonna tell you that, and you're gonna go, \"*Gasp* What?\"","width":384},{"text":"But, but, um, uh, we don't make that constraint here. But, there are principles involved in the use of const. Ok, any questions about that? That was too much for a bridge on my part. I apologize.","width":896},{"text":"Alright, here's the big kicker though. We spent all this energy talking about this, um, copy constructor. Whereas, the first thing I said to you was, you know, the system provides one.","width":768},{"text":"What was wrong, in this case, what was wrong with the system provided copy constructor, and in general, how would you be able to diagnose for a class whether a custom copy constructor was necessary?","width":960},{"text":"So, what about this particular class demanded that we had to define a copy constructor? Yes?","width":832}],
  [],
  [{"text":"Yes! right, because those go off the stack, those are free","width":320},{"text":"for you, yes? ","width":256},{"text":"Um yeah because it's an array. ok you need the brackets because it's an array,  if it were just a pointer,","width":448},{"text":"if we had instantiated this, as just a string pointer, a pointer to a word","width":576},{"text":"then, you wouldn't need the brackets, you would just delete it, ok so in general, ","width":384},{"text":"you're delete should match your news. whatever kind of new statement you use to create the thing, usually in your constructor, you're gonna use a similar thing in your destructor","width":768},{"text":"any questions about that? is it good?","width":192},{"text":"","width":128},{"text":"it's called right after the return, it's as this um execution completes, and control is passed back to the calling function","width":832},{"text":"alright","width":128},{"text":"any questions? you good?","width":254},{"text":"","width":131},{"text":"oh my gosh, there is so much book-keeping going on for you, we are so lucky, right? like your grandfather, my parents, I shouldn't have said that. Look at me do that! your grandparents in computing my parents in computing, um, they think that life is way too easy for us","width":1728},{"text":"Actually, it's probably my grand parents, your great grandparents, but they think that computing is way too easy for us when in fact, you know, the fact that we don't actually have to keep track of what variables we're using, ","width":1024},{"text":"ourselves, is just ugh. we're not authentic programmers, so the early days of C were pretty harrowing, so there's a ton of book-keeping going on, and part of what they keep track is what amount of memory is associated with each variable","width":1195},{"text":"Alright, and you'll learn about it in future classes because of course that's what generations do, we need to inflict the pain of the pervious generations ","width":702},{"text":"alright, um, anyt questions about it? you good? ok, I have another story to tell you here. I'm gonna take you through another little piece of code, ","width":640},{"text":"Here's how this piece of code goes. ","width":256},{"text":"this time, I'm going to declare a sphere pointer b","width":448},{"text":"So here's b, and i'm going to ask for a new sphere ","width":384},{"text":"Now, we've made a constructor for a sphere, we made a constructor for a sphere, that sets up a default sphere to look like this","width":806},{"text":"so when I say new sphere, that constructor is called for us. so at the end of this statement, it's perfectly reasonable for me to draw this picture","width":896},{"text":"Making note of the fact that the sphere constructor was invoked for us. ","width":449},{"text":"not the copy constructor, the no argument constructor,","width":384},{"text":"any questions?","width":584},{"text":"Ok, now, let's look at what happens when we say delete b. ","width":491},{"text":"What do you hope happens when you delete b? When you say delete b what do you hope happens? by default. ","width":576},{"text":"what do you hope happens? All of this memory, all of this memory is given back to the system, right? by default, without the destructor, only this part is given back","width":1024},{"text":"no dynamically allocated memory, no memory allocated with a new, is given back","width":448},{"text":"so again, we're responsible for writing a destructor that makes that happen, this is the same destructor, it's just used again","width":595},{"text":"so if you rememebr that code looked like, this","width":256}],
  [{"text":"And it is responsible for clearing up the dynamic array. The rest of it is taken care of. Alright, so I at least, found this a little bit confusing at first, because all of this is the result of a delete statement on a sphere pointer, right? But that delete statement invokes a function that also uses a delete statement. So there are kind of two levels of abstraction going on here. Alright, here's the secret, here's the secret, it's probably the case, so each of these things is a string. How do you think a string is implemented? What do you think the string class looks like? It's a type it has a class, it's just standard. Yeah? Yes, a character array, that's right. Is it a static array or dynamic array? Is it on the stack or the heap? It's a heap, it's a dynamic array. So inside this string class is a dynamic array, or we don't really know, it's encapsulated away from us, but we have every reason to believe it is a dynamic array. So how come I don't have to worry about that dynamic memory? Well I write this, why don't I have to say, \"Oh wait I have to clean out my strings?\" Why? Who's they? So the people who implemented string, that's right. Exactly. So strings clean up after themselves. And look what we have done, we have written it so that spheres clean up after themselves. Right? Now, if you have a class that wants to make a dynamic array of spheres, they never need to worry about it, because when spheres go out of scope, they're just gone. When you call delete on a sphere, it's all gone. No big deal. Okay? So there's multiple layers here of things that work. Alright any other questions about this? Alright, fine. Here are some sort of summery information about destructors. We don't call the destructor, we provide it for the system to use in two situations, when a variable goes out of scope, and when delete is called on a pointer to an object of type \"x\".","width":12544},{"text":"And so it's when a variable of type \"x\" goes out of scope. And it's x's destructor is never called. ","width":1152},{"text":"Okay any question about that? So, it's referring to a class, some class. Alright so now, how do we know if we need a destructor? And the answer is, if your constructor allocates dynamic memory, or if any other member function allocates dynamic memory associated with the object. So it's not just the constructor, but if any, if your object has dynamic memory associated with it, you need a destructor. ","width":1984}],
  [{"text":"And allocates dynamic memory. Heap memory is equivalent there. Okay any question?","width":613},{"text":"And then as we saw, a destructor typically consists of the sequence of delete statements, which means, and the way you handle that is basically to go through your private members and go \"Hey! Do I need to delete that?\" No. The answer is no. \"Do I need to delete that?\" No. \"Do I need to delete that?\" Yes.","width":1361},{"text":"So you go through each of the data members and ask yourself whether or not you have used dynamic memory. It's just a checklist.","width":392},{"text":"Okay, questions? Is it good? Okay.","width":323},{"text":"One more problem. Let's trace a little bit of code. I'm going to declare a sphere a and sphere b. ","width":647},{"text":"Okay so here's a, and here's b. And I'm gonna give 'a' value. That is, I'm gonna instantiate 'a' to be something.","width":753},{"text":"4.8, 3, and \"black and white\", \"bouncy\", and how would you characterize a soccer ball? Yeah all spheres are round, but okay fine.","width":1418},{"text":"Whatever, not worth the time. Alright, so now the question is \"What happens when we do that statement?\"","width":716},{"text":"What do you think happens when we do that statement?","width":536},{"text":"A member-wise copy. That's right. The assignment operator is by default member-wise. So again we have this groaner of a situation where 4.8 is copied appropriately, 3 is copied appropriately, and the pointer value is copied appropriately.","width":1674},{"text":"Okay so the problem is assignment.","width":384},{"text":"Okay so the problem is, assignment is member-wise by default.","width":516},{"text":"Okay, so how do we fix it? We redefine what assignment means. We solve by redefining what assignment that.","width":1056},{"text":"That symbol. Okay if haven't ever seen operator overloading before, I assert that this is not new to you.","width":744},{"text":"Even if you have not heard the phrase operator overloading, I assert that you will not be surprised by it because here is what I think.","width":900},{"text":"I think that if I write code that looks like this. If I say int a, b, c, like this and then I initialize a and b so a equals 37, b equals 63.","width":1402},{"text":"If I say that then that code at the bottom is fine, right?","width":532},{"text":"Yes?","width":133},{"text":"Good.","width":219},{"text":"And moreover, I think you will take an alternative. I think if I say double a equals 37 point something, double b equals 63 point something, you're okay with that too. Right?","width":1417},{"text":"So now, you know that what goes on behind the scenes when that operator is invoked is different in each of these cases. Right? It's a little bit different because doubles are implemented differently than integers, so this plus has to behave differently.","width":1337},{"text":"And it didn't freak you out at all. Right? You're like \"Why is she even talking about this?\"","width":326},{"text":"Well here's another thing that I think won't freak you out. I think it's true that I can say string a equals cat, and string b equals dog.","width":1380}],
  [{"text":"What do you think happens?","width":64},{"text":"","width":64},{"text":"Here?","width":64},{"text":"","width":128},{"text":"What do you think happens there?","width":64},{"text":"","width":192},{"text":"Cat dog is right","width":64},{"text":"","width":64},{"text":"what a minut? how come it doesn't line up arrays, take the character values and line does up?","width":256},{"text":"","width":64},{"text":"that would be kind of a legitimate way of","width":128},{"text":"","width":64},{"text":"doing addition as well. right? so how does it know","width":256},{"text":"","width":64},{"text":"that in c++, how is it true?","width":192},{"text":"","width":64},{"text":"that addition","width":128},{"text":"","width":64},{"text":"is concatenation?","width":128},{"text":"","width":192},{"text":"rather than some kind of numeric operation","width":192},{"text":"","width":64},{"text":"how does it know?","width":64},{"text":"how does it know that the plus is different there?","width":256},{"text":"The plus is defined to behave differently for strings. And it is just a function.","width":576},{"text":"So in this case the + is a function that takes to arguements and does something to them. In the case of integers it adds them up. In the case of strings it concatenates undefined. So you already use operator overloading all the time","width":960},{"text":"k. Now the question is and and that is implemented in the string class. It's part of the string classes responsibility to implement  addition.","width":704},{"text":"","width":64},{"text":"K it decided it would","width":128},{"text":"Okay fine.","width":64},{"text":"","width":64},{"text":"What about this?","width":128},{"text":"","width":192},{"text":"sphere a(5)","width":128},{"text":"","width":64},{"text":"sphere b","width":64},{"text":"","width":192},{"text":"eight","width":64},{"text":"","width":64},{"text":"Let's go back to our stupid spheres. K let's go back to the spheres where there is only a radius.","width":384},{"text":"","width":64},{"text":"How should that work?","width":128},{"text":"","width":320},{"text":"Yeah?","width":64},{"text":"[mumbles (you need to find how spheres are....) of a student speaking]","width":256},{"text":"that's right","width":64},{"text":"","width":64},{"text":"We haven't defined how it should work. right? What we've got now is a is a sphere and b is a sphere. We kind of want to add them to eachother. The way we make that happen is to declare a sphere class member function.","width":1088},{"text":"","width":64},{"text":"Who's name is operator+.","width":256},{"text":"","width":64},{"text":"k so this a ...","width":128},{"text":"","width":64},{"text":"this right here is the function that implements this symbol","width":448},{"text":"So we can do it no problem. Alright let's have a design moment. Lets have a design moment. What should it mean/ What should it mean for to spheres to be added to one another...together? What should it mean?","width":1024},{"text":"","width":320},{"text":"What do you think? Yeah?","width":128},{"text":"","width":64},{"text":"Oh let's just add the radii right? let's just add the radii. We could like find the volume and add that together. Kinda makes sense but...but for the sake of illustration we are going to design an addition operator for spheres that simply adds the radius together. Kat so let's do that... OH and ","width":1472},{"text":"can you speculate on what this thing is for? Can you speculate on what that return value is for?","width":576},{"text":"","width":128},{"text":"You have to return one that is the sum. Right?","width":192},{"text":"","width":64},{"text":"Okay. And it's by...we're going to return a sphere so we're gonna declare","width":320},{"text":"","width":128},{"text":"sphere t","width":64},{"text":"","width":64},{"text":"or return","width":64},{"text":"","width":320},{"text":"Kay","width":64},{"text":"","width":64},{"text":"Amd then we can say","width":128},{"text":"","width":64},{"text":"t dot ","width":64},{"text":"","width":64},{"text":"theRadius","width":64},{"text":"","width":192},{"text":"equals uh oh what do we have","width":192},{"text":"","width":64},{"text":"what do we have here? We've got... we're defining what happens here.","width":256},{"text":"","width":64},{"text":"This one is the parameter so this one is s","width":256},{"text":"","width":64},{"text":"so its","width":64},{"text":"","width":64},{"text":"s","width":64},{"text":"","width":64},{"text":"dot the Radius","width":128},{"text":"","width":128},{"text":"plus","width":64},{"text":"","width":128},{"text":"this one is the current object","width":192},{"text":"K so this plus","width":192},{"text":"","width":64},{"text":"is the member of the sphere class so it will be called on the sphere class object","width":384},{"text":"and so","width":128},{"text":"","width":64},{"text":"the current one is a. So it's just s dot theRadius ","width":384},{"text":"","width":64},{"text":"","width":64},{"text":"plus","width":64},{"text":"","width":64},{"text":"the Radius","width":64},{"text":"","width":256},{"text":"and then we're gonna retururn t","width":64},{"text":"","width":256},{"text":"Okay?","width":64},{"text":"","width":256},{"text":"Yes","width":64},{"text":"","width":384}],
  [],
  [{"text":"No, it means it's a reference to a constant sphere. Okay, it's a constant sphere by reference.","width":512},{"text":"So you cannot change the sphere, so b cannot be changed, and if we didn't want to change a we'd put a const right here.","width":512},{"text":"So you can never change the reference, reference can never be changed, once it's associated you can never change it.","width":704},{"text":"Okay, let's see, I want to keep going, it turns out addition and assignment are not the only things you can overload.","width":576},{"text":"That as of C++ 03 was the list of operators that could be overloaded. I, in my experience, in my programming lifetime, which is, you know, not all that extensive have only overloaded a very few of these.","width":1152},{"text":"This, certainly, assignment we're going to do, these are pretty common, these IO operators are very commonly overloaded.","width":768},{"text":"But generally, you know, you really have to know what you're doing when you overload many of these things. We'll talk about overloading this one also.","width":640},{"text":"I don't know, other than that. Okay, but you may see code that overloads all of those things.","width":704},{"text":"Okay, what time is it? Oh we have plenty of time.","width":384},{"text":"Okay, so we're going to go back now, now that you're comfortable with operator overloading, we're going to go back and revisit the issue of the assignment operator in the context of dynamic memory, okay?","width":768},{"text":"The assignment operator in the context of dynamic memory. Alright, let's see, so just to remind you this is the code that we were trying to implement and it is this assignment operator that we want to fix.","width":960},{"text":"The way you declare, the way you declare the function that we're going to overwrite is to say sphere.","width":640},{"text":"It turns out that in this context it's okay to return it by reference but we won't here because that will freak you out, freak me out, freak us all out, so we won't.","width":832},{"text":"And now the question is, what does the parameter list have to look like? Well we want to promise that we won't change this thing on the right hand side..","width":960},{"text":"So we're going to pass back a constant, I mean, sorry, we're going to accept a constant sphere reference and we're going to call it right hand side. And that's it.","width":896},{"text":"We'll talk about what goes here in quite a lot of detail, eventually. Okay, any questions?","width":576},{"text":"So that's what the function signature looks like, here's what the implementation needs to be.","width":384},{"text":"Okay, so what we're trying to do, what we're trying to do is implement b gets the value of a.","width":512},{"text":"So here's a, and here's b, and in the end we want b to look like it's own copy of a.","width":541},{"text":"Okay, so how can we prepare to do that, sorry, how can we prepare to do that?","width":384},{"text":"What do we need to do to make b look just like a if this is b and this is a? We don't get to call the copy constructor, that would be nice, but we don't get to.","width":768},{"text":"What do we need to do at a lower level, what commands do we need to run? Yeah?","width":832},{"text":"Very good, very good, so in the end we're going to want b to look just like this, right? Which means that I better get rid of this one.","width":918},{"text":"Alright, so let's clear up b, we're going to clear up b and then things can feel a lot like the copy constructor.","width":960},{"text":"Okay, we, you know, copy a's value over, copy a's number of attributes over, okay now I need an array that is that long.","width":896},{"text":"And then copy these values over, okay. So at that point, at that point it looks like a lot like the copy constructor. Okay, perfectly fine.","width":704},{"text":"What would be the consequence of not giving back this memory, before we make that copy?","width":512},{"text":"A memory leak, that's right. Because the minute we reassign that pointer to point to this space, this memory would just be sitting there, it would have nothing pointing to it.","width":896},{"text":"Okay, fine, here's another question for you. Given that, what we have said, is clear the left hand side, clear the left hand side and copy","width":1216}],
  [],
  [],
  [{"text":"Okay, let's get started.","width":256},{"text":"Can you guys in the back hear?","width":85},{"text":"Yes, no?","width":136},{"text":"No?","width":215},{"text":"How about now, now, now, now?","width":195},{"text":"Can't have it be a multiple of three","width":151},{"text":"Okay that's good","width":64},{"text":"Alright, um sooo MP2 is due tomorrow night.","width":320},{"text":"Um, there have been grading runs every night, for the past, you know, five days or so.","width":373},{"text":"Um, it's looking like things are going really well. ","width":287},{"text":"Um, the only thing is I get an autograder, an autograder message from last night.","width":448},{"text":"Did anybody get a result from last night? Yeah?","width":384},{"text":"Okay, alright so I didn't get the message.","width":192},{"text":"Maybe I'm just not done with my MP","width":128},{"text":"Um, alright and then I want to rest assured, I want to rest you, I want you to be rest assured that, um, if you don't get 100% on tonight's run, and you try and make a change and you get a 0 for whatever reason, some compile error, we're taking the maximum of tonight's and tomorrow night's.","width":1558},{"text":"So, you can, you don't have to stop tonight with your 92, you can keep trying to perfect it if you like, k?","width":448},{"text":"Are there any questions about grading for MPs at this point?","width":320},{"text":"Okay","width":64},{"text":"So um an MP3 is going to come out pretty much immediately.","width":506},{"text":"If I had to assess a relative difficulty of MP3 over the whole semester, I'd say it's not conceptually the most difficult, but you are likely to spend the most time debugging on it.","width":963},{"text":"So, prepare to spend more time on MP3 than you might spend on some of the other MPs of the course.","width":640},{"text":"Okay, we were talking about, will you remind me what were we talking about?","width":384},{"text":"What's a concise way of stating what the subject was last time, last Friday when we met?","width":529},{"text":"Operator overloading and in particular, we were going to overload, operator overloading is what I was going for, and in particular we are going to overload the blank operator.","width":818},{"text":"What's blank?","width":91},{"text":"Assignment operator, very good, okay so","width":192},{"text":"for example, if I do something like declare, oh I'm just not going to be friends with technology - look I got nothing.","width":601},{"text":"Here.","width":335},{"text":"Okay, if I were to declare, ugh, ack.","width":718},{"text":"d here.","width":366},{"text":"My family watched ghostbusters last night on the way home from Chicago.","width":271},{"text":"I'm thinking that like, I like set up some poor karma between me and ghosts everywhere.","width":408},{"text":"So if I declare spheres 'a' and 'b' and create 'a' to be something interesting perhaps.","width":512},{"text":"And then make the assignment 'b' gets the value of 'a', then what the things that you told me last time that I need to be sure to do, are to free up the space previously occupied by 'b', the dynamic part of the space previously occupied by 'b',","width":1589},{"text":"and then explicitly copy over the values, oh oops, of 'a', k?","width":600},{"text":"And that means, that means that I need to allocate new space that in the end looks just like 'a' space.","width":848},{"text":"K, any question about that at all?","width":190},{"text":"I'm going to separate that out into two, uh, sortof subtasks.","width":406},{"text":"There's the clear task and the copy task. ","width":347},{"text":"Now the clear task should feel a lot to you like another function that you've written, which one is it?","width":479},{"text":"The destructor, that's right.","width":108},{"text":"The clear task should feel a lot like the destructor, and the copy task should feel a lot like the copy constructor, that's right.","width":670},{"text":"Now, do you just call those functions? ","width":130},{"text":"No you do not, but we'll talk about that in a minute.","width":192},{"text":"Alright so there're these two tasks: there's clear and there's copy","width":386},{"text":"Okay, now there are some little teeny tiny, and we're gonna write the assignment operator to do these two things, but there are some additional considerations that would really only occur to you during debugging, but which we're going to be explicit about, k?","width":960},{"text":"So now what I wanna know is what happens upon assignment if 'b' and 'a' already refer to the same memory address?","width":768},{"text":"Now this can happen in lots of different ways.","width":131},{"text":"It can happen because we've passed something by reference or it can happen because 'a' is a dereference of some pointer that has another name.","width":636},{"text":"So there're, there're several different ways where two things can be referring to the same memory address; can be names for the same memory address, k?","width":721},{"text":"So now what I want to know is what's the problem?","width":218},{"text":"What's the problem here, remind me, I think we got this far, but I want you to remind me.","width":320},{"text":"K? yeah?","width":128}],
  [{"text":"Very good.  So remember that our two tasks are clear and copy.Ok? So letâs do that.  b gets the value of a.  So we clearâ¦..","width":1039},{"text":"And there is nothing to be copied anymore. ","width":184},{"text":"So we basically invalidate our algorithm here, invalidate our data here. We are gonna solve that in the code we write  for the assignment operator by protecting against self assignment.","width":1277},{"text":"Ok? And then the other thing that we need to do is to implement this behavior. ","width":765},{"text":"So C-based languages tend to let you chain together assignment operators.","width":416},{"text":"ok?  And all we are doing by creating the , writing the assignment operator is a single chain right here. ","width":744},{"text":"I am gonna draw a pair of parentheses and see if that helps you come up with a suggestion that we might use to create a chain assignment operator. ","width":934},{"text":"How could we implement that. How could we make it so it is ok to return values. ","width":486},{"text":"I am sorry. To assign chain values. I just said the whole thing. I have no brain. ","width":313},{"text":"Ok, so I said the answer that I was hoping you would say. So sorry...","width":301},{"text":"Alright. So notice this is a function call. Right? This is just like b.operator=(a). ","width":675},{"text":"If it were to return a value and then that value could be the right hand side of c's assignment statement. Right?","width":826},{"text":"So effectively, what we want is c.operator=(b.operator=(a)).","width":768},{"text":"How do we achieve that? Well we have a return value out of the assignment operator.","width":491},{"text":"And I am just gonna describe that as return a helpful value.","width":587},{"text":"Ok? Any questions about it ? Alright. So let's make some plans. ","width":567},{"text":"Here is what the function signature looks like. We are gonna just sort of make a list of things that we are gonna need to do when we actually write the code.","width":704},{"text":"Ok. Make a list of things we need to do. First things is:","width":300},{"text":"We need to protect against self assignment. ","width":641},{"text":"And that's a conditional. That says if the things already don't refer to the memory address then we are going to clear out the left hand side.","width":981},{"text":"Then we are gonna make a copy of the right hand side. ","width":388},{"text":"And then in the end we are going to return a helpful value. ","width":878},{"text":"Ok? We will talk about that in a minute when we write code. ","width":266},{"text":"And any questions about it? Ok? ","width":175},{"text":"So this is our list right? This is a list of what code needs to look like. ","width":300},{"text":"Writing  code this way is really common. You know. Do your comments first and then fill in the blanks. Because no one of these is going to be Â particularly complex.","width":830},{"text":"And here we go. Alright. So how do we protect against self assignment? ","width":707},{"text":"How could we ask the question of whether or not being \"A\" refers to the same spot in memory.","width":593},{"text":"Yes?","width":256},{"text":"So if this is no the same as right hand side it's almost correct.","width":780},{"text":"Help me debug it.","width":256},{"text":"What is the right hand side? ","width":256},{"text":"What kind of thing is right hand side?It's a sphere. ","width":279},{"text":"What kind of thing is this? I think I have only mentioned this very quickly once. ","width":256},{"text":"So I will write it again here. \"this\" is a pointer  to the current object. ","width":768},{"text":"Ok? And in this case that's the left hand side. ","width":768}],
  [{"text":"Very good. So remember that the two tasks are clear and copy, so lets do that. B gets the value of A. So we clear, then theres nothing to be copied anymore, so we basically invalidated our algorithm. We invalidated our data here. We're going to solve that in the code we write for the assignment operator by protecting against self assignment. And then the other thing that we need to do, umm, is implement this behavior. So C based lanuages tend to let you chain together assignment operators. And, all we are doing by creating the assignment -- writing the assingment operator is a single chain right here. I'm going to draw a pair of parentheses and see if that helps you come up with a suggestion that might be used to create a chain assignment operator. How could we implement that? How could we make it so that its okay to return values? I have no brain. So I said the answer that I was hoping you would say, so sorry. So notice this is a function call. Right? This is just like b dot operator assignment operator a. If it were to return a value then that value could be the right hand side of C's assignment statement. So effectively, what we want is c dot operator equals b dot operator equals of a. How do we achieve that? Well, we have a return value out of the assignment operator. And then I'm just going to describe that as return a helpful value. Any question about it? So let's make some plans. So here's what the function signature looks like. We're going to just make a list of things that we need to do when we actually write the code. Yeah... okay. Make a list of things we need to do. First thing is we need to uhhh protect against self assignment. And that's a conditional that says if these things already don't refer to the memory address, then we're going to clear out the left hand side. Then we're going to going to make a copy of the right hand side. And then in the end we're going to return a helpful value. And we'll talk about that in a minute when we write the code. Alright, so this is our list of what the code needs to look like. Writing code this way is really common. Do your comments first and then fill in the blanks. Because no one of these is going to be particularly complex, and here we go. Alright, so how do we protect against self assignment? How can we ask the question whether or not b and a refer to the same spot in memory? Yes? So if this is not the same as right hand side is almost correct. Help me debug it. What is the right hand side? What kind of thing is the right hand side? It's a sphere. What kind of thing is this? I think i mentioned this very quickly once. This is this is a pointer to the current object. In this case that's the left hand side.  ","width":20864}],
  [{"text":"okay. Alright, fine, so help me debug this","width":192},{"text":"Couple different ways you can debug it","width":192},{"text":"I think","width":64},{"text":"It would be relevant","width":192},{"text":"Clearly, there's a type mismatch","width":192},{"text":"Right?","width":128},{"text":"Yeah?","width":64},{"text":"Right that's right. So we want to be looking at the memory address, right? The location in memory, the only time this is really truly broken is if they refer to the same location in memory","width":960},{"text":"So, we're gonna say, the address of the right hand side, so this is not the same as the address of the right hand side","width":512},{"text":"We'll talk about that in a little bit","width":128},{"text":"Ok, we're going to clear out the left hand side, gee, we have written this code before","width":384},{"text":"So I'm gonna go head and do it, we're just going to delete ","width":320},{"text":"The attributes","width":192},{"text":"Do I need to go through that array and free up the space associated with the string? ","width":448},{"text":"No, because they're just strings. They are not string pointers that we allocated the memory for, they're just strings","width":576},{"text":"each string might have dynamic memory associated with it, but it's not our responsibility to deal with it","width":512},{"text":"The string class can deal with it","width":128},{"text":"Okay? Any questions about that?","width":64},{"text":"Alright, fine, and now we need to copy the right hand side ","width":320},{"text":"So let's see if I can do this, um, the radius ","width":320},{"text":"equals right hand side","width":320},{"text":"the radius","width":128},{"text":"yes somebody told me about that","width":320},{"text":"woah","width":192},{"text":"numAtts equal right hand sides","width":704},{"text":"numAtts ","width":128},{"text":"atts equal new ","width":704},{"text":"string ","width":64},{"text":"how many of them do I want","width":192},{"text":"Good","width":128},{"text":"and then, for i int equals zero","width":512},{"text":"less than numatts, I don't know why I am narrating this","width":384},{"text":"Okay. Yes? ","width":960},{"text":"You write it faster than I did?","width":192},{"text":"Haha","width":192},{"text":"Okay","width":128},{"text":"So, while I was doing this, I had that feeling that you should have when you write code and you're writing code that you have written before","width":576},{"text":"If you're writing code that you have written before, you should be going, why am I writing this again? Why am I doing this again? And you should make for yourself a function that you can invoke in each case","width":704},{"text":"In fact, we're going to do that here. We're going to ","width":320},{"text":"Go ahead and pull this out, and put it into a member function called copy","width":576},{"text":"Uh, who's return value what kind of return value do we want for it? ","width":512},{"text":"Nothing. We don't need anything. ","width":256},{"text":"And it's code is merely this, ugh, that code ","width":384},{"text":"So this goes right in here","width":128},{"text":"Now, I have a question for you.","width":128},{"text":"Okay? Any questions about it? ","width":128},{"text":"Yes","width":64},{"text":"I don't know what you're talking about","width":1024},{"text":"Alright. Any questions about it? Is it okay? I have a question for you","width":704},{"text":"So this is a sphere class member function, which means when we actually do the implementation we're gonna scope it to the sphere class, much like those are. Now if this is a sphere class member function, it means that it needs to be declared inside the sphere class itself","width":1088},{"text":"Is it public or private","width":128}],
  [{"text":"okay, private is correct. Okay, private is correct and the reason for that is... It's only used by other sphere class member functions right","width":1152},{"text":"It's only created so as to simplify our internal implementation of the class","width":512},{"text":"So, clear here is a private member function. Any question about it?","width":704},{"text":"Alright, of course I have this feeling while i was doing this part as well. This one needs a member function","width":576},{"text":"It's not gonna return anything. It's going to be void copy this time it does have a parameter. I'm going to go ahead and pass through the right hand side","width":960},{"text":"As a constant sphere reference ","width":256},{"text":"Uh, right hand side. ","width":384},{"text":"It's implementation is going to be exactly that . And again it's going to be private","width":512},{"text":"Any question about that all all? Yes?","width":256},{"text":"That's a good thing to notice. ","width":640},{"text":"Yeah, no . You can not. His question is, Why are we doing this?","width":704},{"text":"We already have the destructor and the copy constructor. We have those ? Why aren't we just calling those here.","width":576},{"text":"The reason is because in principle. You are writing those functions for the system to use. They aren't yours","width":640},{"text":"You can't just call them willy-nilly","width":192},{"text":"The indication that is this true. There is no return type. The compiler is expecting you to be calling a function that yields a return type. There is no return type for the destructor and the copy constructor. So you as the coder have no business calling them. On the other hand, you are going to back and change your code for the destructor. The new shiny code for the destructor is simply going to be a call to clear","width":2368},{"text":"The new shiny code for the copy constructor is going to be a call to copy. Okay so, i agree that we shouldn't have the same code in multiple places. I disagree where we should stash it. Yes?","width":1536},{"text":"Um, so the question is.. Whether or not we should. How we should. Wait whether or not we could check for equality instead of inequality. If they are the same then do what. Nothing. So you want the other side. Or whether it wold be single or double assignment operator. If it is a logical question then it is double. I assert that you really don't want to do that. Then you are being explicit about the else. And then there wouldn't be anthing to do otherwise. We will run into this later in the class such that if something is true then we will do nothing","width":3904},{"text":"Alright, let's return a helpfull value ","width":448}],
  [{"text":"What kind of thing do I need to return?","width":259},{"text":"A sphere, right?","width":136},{"text":"So what I'm going to return","width":187},{"text":"is","width":73},{"text":"oh, you're not going to like this","width":527},{"text":"I'm choosing that one, in principle at this point I should be able to choose b or a","width":301},{"text":"the right hand side or the left hand side","width":154},{"text":"choosing the left hand side so that i can return by reference","width":192},{"text":"because nothing is going to happen to \"this\"","width":230},{"text":"in the execution of that function","width":225},{"text":"Alright! Any questions about it?","width":256},{"text":"OK. Now, guess what, if you replace","width":293},{"text":"that rectangle with a call to clear","width":152},{"text":"and this rectangle with a clear to copy,","width":178},{"text":"except for type information, we have just written","width":256},{"text":"every single assignment operator you're ever going to write.","width":391},{"text":"You should just go, and cut and paste from this.","width":335},{"text":"Any questions about it?","width":129},{"text":"If you should decide to be creative, you are still responsible","width":244},{"text":"for all these parts","width":156},{"text":"you still need to check for self-assignment","width":192},{"text":"you still need to clear out","width":128},{"text":"you still need to make a copy, and you still need to return","width":315},{"text":"but, yes, you can do those in different order if you want,","width":256},{"text":"but I wouldn't, why? Ok! Any questions about it?","width":408},{"text":"Yes?!","width":280},{"text":"I'm not returning by value, I'm returning by reference. I could","width":196},{"text":"return by value if I wanted to","width":119},{"text":"but it would be slower to do so","width":121},{"text":"so I'm going to return by reference.","width":127},{"text":"I know that \"this\" is not going off the stack, right?","width":274},{"text":"I know that this is not going anywhere because","width":192},{"text":"if it were, I wouldn't even have the function, so this is fine.","width":320},{"text":"\"this\" exists in the outer scope.","width":161},{"text":"in the calling function","width":128},{"text":"OK, so I can return the value of 'this' by reference.","width":585},{"text":"Alright, so this is what it looks like in the end,","width":190},{"text":"and like I said, except for type information, every single assignment operator you ever write","width":364},{"text":"just like this.","width":95},{"text":"I have a question for you though, and it's on the board,","width":333},{"text":"(Repeating student's question) Process it? What does it mean?","width":128},{"text":"(Iterating question) What's the difference between it, and what we did?","width":984},{"text":"Yeah? Yeah!","width":289},{"text":"Very good.","width":51},{"text":"Instead of referring to the memory location","width":178},{"text":"labeled by this","width":128},{"text":"on the right hand side","width":60},{"text":"we're referring to its value","width":119},{"text":"right?","width":34},{"text":"The information that they hold.","width":128},{"text":"In this thing","width":151},{"text":"So we're checking to see","width":109},{"text":"if the value of each side of the assignment statement","width":231},{"text":"are already the same.","width":96},{"text":"It's kind of reasonable, right? Why not? Why wouldn't we do that?","width":377},{"text":"Why would that be a bad idea?","width":365},{"text":"It takes longer time, good. Why?","width":415},{"text":"Yeah, you have to go down and look at everything, right?","width":205},{"text":"I'm going to use that as the second one of these bullets.","width":210},{"text":"So, it might take significant time","width":832},{"text":"to check equality","width":338},{"text":"ok, fine.","width":128},{"text":"Why else?","width":195},{"text":"I could've put it first, there's no real reason. It's not like to other one is that much more expensive. It's kind of dependent.","width":546},{"text":"Yeah?","width":236},{"text":"Very good, very very good.","width":203},{"text":"This operator right here,","width":287},{"text":"has on its left hand side, a sphere","width":208},{"text":"and on its right hand side a sphere","width":183},{"text":"So the only way that that is going to work is if","width":152},{"text":"that operator is overloaded","width":194},{"text":"so, operator","width":166},{"text":"not equal","width":128},{"text":"must be implemented.","width":128}],
  [{"text":"I don't know about you, but if I could avoid doing that I think I would like too. Ok. ","width":358},{"text":"And the last one, the last point is kind of subtle.","width":338},{"text":"There is a software engineering principle that says that you should leave the decision of whether to reassign to the client. ","width":935},{"text":"Ok. So leave the decision of whether or not a reassignment should happen to the client. So yes, they might both be the same, but they might do an assignment anyway and maybe that's to avoid a conditional maybe we do not know why.","width":1088},{"text":"But what we do know is that when we when we check to see if they're the same, we are essentially doing the same amount of work as an assignment anyway.","width":718},{"text":"So because you have to you know we have to look at every last thing, so we are not going to presume that we are allowed to take that time here.","width":627},{"text":"So the short way of saying all of that is leave the decision ","width":607},{"text":"to reassign ","width":384},{"text":"to the client.","width":320},{"text":"so that when they say 'a' equals 'b' they want it to happen and the only time we are not going to let it happen is if it is a destructive maneuver.","width":691},{"text":"Ok. Ok. Alright, I think that is all I wanted to say here.","width":923},{"text":"Alright. We've been talking for about two and a half days now.","width":256},{"text":"About things that all feel kind of the same.","width":223},{"text":"They are all about responsible use of memory and sure enough we have the rule of the big three.","width":651},{"text":"A rule of the big three simply goes if you have reason to implement any one of the copy constructor","width":576},{"text":"the destructor","width":285},{"text":"or the operator equals (operator=)","width":346},{"text":"then you must implement all three","width":177},{"text":"What I want to know from you is a concise statement about when is that.","width":281},{"text":"When is it that you need to implement them rather than rely on the system provided.","width":457},{"text":"When is it, when do we implement these things? Yea?","width":639},{"text":"That's right. When the object itself uses dynamic or heap memory.","width":384},{"text":"","width":857},{"text":"","width":419},{"text":"Now, umm... I guess I feel like that's a little bit inaccurate because if you use a string are you using heap memory ","width":512},{"text":"are you using string...are you using heap memory if you use a string ","width":576},{"text":"who knows is the right answer we don't know for sure but we might be and so what the real criteria here is not that it explicitly uses, but that it.. that the object itself explicitly allocates.","width":1024},{"text":"Ok. So not that it uses cuz we don't necessarily know, but that it allocates that is it says the new word.","width":640}],
  [{"text":"Alright, any question about that?","width":256},{"text":"The rule of the Big Three.","width":294},{"text":"Okay so, we're going to return for a bit to a object oriented programming.","width":352},{"text":"Because C++ has some idiosyncrasies and some distinctions from Java, in particular that you should know about. ","width":530},{"text":"And then many of you will have come here without a lot of experience in object oriented programming.","width":384},{"text":"So, historically, the objective for even creating objected oriented languages was two-fold.","width":704},{"text":"One was to create code that is smaller, that is to increase code reuse.","width":512},{"text":"And two, which sort of follows from that is to decrease the cost of maintaining such code.","width":640},{"text":"So, the idea that in objected oriented language should exist really arose out of the need to structure your code more efficiently.","width":704},{"text":"From a programmer's perspective, not necessarily from a code execution perspective.","width":512},{"text":"So from that understanding, from the understanding that we are trying to write less code and thereby make it more maintainable, these characteristics arose.","width":819},{"text":"So, encapsulation we already talked about.","width":233},{"text":"If you wanted a little quiz, you should sort of go back and make sure you know of two ways that C++ implements encapsulation.","width":611},{"text":"Or makes encapsulation easy to implement.","width":192},{"text":"Polymorphism we are actually going to talk about today. Suffice to say its definition follows its name.","width":576},{"text":"Basically, a function can behave differently depending on the type of the calling object. We will talk about that a little bit today.","width":384},{"text":"But the biggest thing we're going to talk about today is inheritance.","width":256},{"text":"And, without further ado, let's begin.","width":384},{"text":"So we have been talking about the sphere class.","width":448},{"text":"And now we have decided from a design perspective, that spheres are not specific to us.","width":448},{"text":"In fact, what we want is a named sphere class.","width":384},{"text":"A named, when I say named I mean sort of labeled, named sphere class but otherwise this thing should behave a lot like a sphere.","width":768},{"text":"I'm going to decide that I'm going to call this thing ball but of course I could call it anything I wanted to call it.","width":525},{"text":"Usually, it's the case that the name you happen to choose is a specification - is more specific - than the original thing.","width":640},{"text":"The original functionality, and we're going to set it up, we're going to define class ball,","width":512},{"text":"So that it is a - use language is a - public sphere.","width":576},{"text":"So this indicates inheritance.","width":320},{"text":"That colon is inheritance.","width":256},{"text":"Inherits from sphere.","width":384},{"text":"Now we have specific language in C++ to denote these things.","width":448},{"text":"We refer to sphere in this context as the base class.","width":320},{"text":"We refer to ball as the derived class.","width":320},{"text":"And this corresponds to superclass and subclass in Java.","width":704},{"text":"Any questions so far?","width":256},{"text":"So now, there's sort of an interesting little parallel between these two things that you might find kind of interesting.","width":704},{"text":"I have no english today, apparently.","width":256},{"text":"This word corresponds with this word.","width":320},{"text":"Is it just a happenstance that we chose the word public in each of those cases?","width":320},{"text":"And the answer is no.","width":128},{"text":"In fact, the inheritance type keyword can be the same as the access types.","width":790},{"text":"So we could have private inheritance as well, and in a minute we'll talk about protected inheritance.","width":427},{"text":"But, for this class, we're only ever going to have public.","width":320},{"text":"Okay so here's some - here's your first key fact.","width":384},{"text":"The access type - the access type - in the base class that is these public and private together with the inheritance type,","width":1099},{"text":"imply the access in the derived class.","width":434},{"text":"So I'm going to write that down in just a minute we'll talk about what it means.","width":226},{"text":"So the base access,","width":256}],
  [],
  [{"text":"Uhh, so the question is how come the ball class can access the radius. How do you know it can? Did you say can or can not?","width":576},{"text":"The ball class, the ball class member function can not access the radius.","width":576},{"text":"ball(double r string n). Where? There is just a comma missing there.","width":896},{"text":"OHOHOH, very good! We have to invoke the sphere class constructor in order to do that and it has to be explicit.","width":448},{"text":"So we can not, the constructor, that's really a good point actually, so what he detected and is really germane is that that ball class constructor has a problem.","width":896},{"text":"Right? It can not take a radius and set the radius because it doesn't have access to this.","width":384},{"text":"But what it will do and you'll see is it going to call the, explicitly call even, the sphere class constructor, OK? Does that make sense? Is that answer it? Sorry, I didn't...I don't think anybody ever pick that up before. Good job! Yeah?","width":1216},{"text":"Yep! Yep! The base class of , the base class member can certainly access the protected values, they are just like they're sitting in here.","width":576},{"text":"OK? Alright! Anything else about this? There is, there is a hint. Bye! See you later! (Laugh in the background). Mean mean mean.","width":1024},{"text":"OK, anything else about this? Yes? Yep! That's right! Yes, but it does exist, we are going to talk about that in just a second. So the question is kind of: \"OK, what's happening in memory?\" and I think that the following will clarify some of that. I can draw you some picture that will clarify some of that.","width":1664},{"text":"First of all, let's trace some code, OK? So, start with main here, start with main. We are just gonna declare a sphere, and it gonna has a radius and nothing is surprising about that, right? We can still, of course, use that base class to declare an object, there's nothing that says we can not, OK?","width":1536},{"text":"Similarly, we can declare a ball, now, subject to the constrain, that the ball class can construct a sphere, it does so and the way to think about it is in fact it builds a sphere first with all of it staff whenever it has, and then adds to it, it adds to it the string corresponding to the name in memory.","width":2176},{"text":"OK, so build the sphere class thing first and then it adds to it what it means to. OK so ball is a sphere with a little bit more added on to it to make it more specific.","width":896},{"text":"OK. Can I say b.getVolume()? Would you expect... first of all, what class member function is getVolume()? Sphere class, that's right. Its volume kind of thing, so its member functions are in the sphere class. Would you expect me to be able to do that?","width":1408},{"text":"YES, yes, yes, yes. That's what most of this is about, is access to the member function of the base class through the derived class, OK? No problem. What do you think happens here? Anything surprising about calling printVolume?","width":1280},{"text":"Is it OK?","width":192},{"text":"Anything surprising about PrintVolume there?","width":256},{"text":"Yeah? Yeah, you do. Right there. Yeah, yeah, yeah, good. I love the easy ones. (Laugh).","width":1024},{"text":"OK. Nothing surprising about it right? It all just talking about spheres. Yeah?","width":295}],
  [{"text":"This one, on the other hand, this one feels a little weird","width":512},{"text":"[laughter] this one feels weird","width":576},{"text":"What's weird about it?","width":256},{"text":"Yeah? Yeah that thing up there expects a sphere, right? And we're calling it with a ball","width":768},{"text":"Guess what? Whose copy constructor is invoked? is the question, right? It's passed by value, whose copy constructor is invoked?","width":832},{"text":"Sphere's copy constructor, that's right. And so that means, when that ball is sent to that function there is only a sphere inside of it","width":640},{"text":"But in this case, of course, that's fine, right? That's fine. There's a sphere, we needed a sphere","width":448},{"text":"So that's perfectly fine. Alright. So","width":128},{"text":"Sphere's copy constructor invoked even if it's the system provided one. Even if it's the one provided by the system and not our custom ","width":896},{"text":"One. Okay fine. Here's what I want to know next. I'm going to declare a base class thing and a derived class thing. Can I do that?","width":576},{"text":"[incoherent]","width":512},{"text":"Okay so this is - which one of these is larger? Which one of these things takes up more memory","width":640},{"text":"Tell me to stop when I get the larger one","width":192},{"text":"Yeah okay, this one","width":64},{"text":"I don't know if that was ever going to work. Okay. So is this assignment okay?","width":256},{"text":"The thing on the right hand side is larger than the thing on the left, is that okay?","width":256},{"text":"It does work! It actually works. It works; it compiles; and the result is that this thing is kind of sliced off to go here","width":768},{"text":"Okay so the base class thing can accept on its right hand side","width":256},{"text":"A derived class object - but it's sliced across","width":320},{"text":"This still is a base class thing","width":256},{"text":"Okay so this is okay... But b is still base or smaller","width":768},{"text":"How about this one?","width":128},{"text":"No, no way, compiler won't let you do this","width":512},{"text":"It says \"woah, woah, woah, you didn't give me enough information on the right hand side to create one of these\"","width":448},{"text":"Okay, so the compiler actually does not allow that","width":256},{"text":"Disallowed by compiler","width":384},{"text":"Okay... [talks to student]. The question is what happens here","width":640},{"text":"What happens when we're talking about pointer instead","width":256},{"text":"And we'll start there next time","width":256},{"text":"I want to be the one that tells you","width":512}],
  [{"text":"Okay. My clock says it's eleven o'clock so let's get going.","width":5627},{"text":"You haven't even asked for it yet, but I'm giving you an extension on the extra credit portion of MP3.","width":641},{"text":"On the website it says it's due on the 22nd and I just I said on the slides it was due on the 25th so we'll go with the 25th that's fine.","width":653},{"text":"Yea right, yayyy.","width":168},{"text":"Oh you're so welcome. You're so welcome.","width":211},{"text":"I'd like to say anytime but that's not quite true either.","width":372},{"text":"We have more print outs coming so if you don't get a print out they will be there.","width":402},{"text":"I swear I always print out enough and they just disappear.","width":277},{"text":"I don't know who's taking these print outs. Who wants them.","width":243},{"text":"Maybe it's sabotage.","width":222},{"text":"Let's see. Oh, ok. So MP2 was due last night. Yes?","width":476},{"text":"Ok. Yea it was, it was.","width":291},{"text":"Does anybody know how long the queue was?","width":303},{"text":"Ok. Six people. Sixty six. Six hundred sixty six.","width":448},{"text":"Yea, no no. Ok. So that's like about 10% of the class was on the queue.","width":533},{"text":"Can you guess how I feel about that?","width":303},{"text":"Yea. So what that says is what what it says to me is that you know 10% of people were working on the problem and got stuck.","width":739},{"text":"So that means even an even huger proportion of the class was working on the MP at the last second.","width":532},{"text":"So that just breaks my heart. ","width":361},{"text":"Cause it's so fun. You want to do it early. So here's the thing.","width":381},{"text":"I cannot promise you that the queue wait times will improve.","width":491},{"text":"I can't promise you that.","width":203},{"text":"Now do you see how meta that was?","width":231},{"text":"Cause if I say I can't promise you the queue wait will improve then you won't count on it and you'll go earlier in the week and spread out your requests.","width":697},{"text":"And then the queue times will improve.","width":277},{"text":"So there's this kind of thing going on there. So","width":274},{"text":"So I refuse to promise that the wait on the queue on the last day will improve. There should be huge incentive to start early finish early. I think course staff is most broadly available at 9 o'clock in the morning, 10 o'clock in the morning.","width":1193},{"text":"Think about your fellow students schedules and plan accordingly.","width":441},{"text":"It's this interesting problem, right? Like, the crowd. The flow of the crowd.","width":360},{"text":"Uhm, alright. Uhh.","width":185},{"text":"We do try, but sixty people on the queue's an awful lot of people.","width":481},{"text":"It was bad monday night too.","width":183},{"text":"Oh, the other thing. Course staff actually asked me to tell you was that you have now had two labs whose focus was","width":572},{"text":"debugging.","width":208},{"text":"They, they are exorting you. Encouraging you to try to be a little more independent. When you run into a problem instead of just putting your name on the queue go ahead and you know.","width":893},{"text":"Be a little more tenacious then you would've been a month ago in trying to figure it out yourself. ","width":360},{"text":"That's gonna be a valuable skill as you go forward.","width":256}],
  [{"text":"Okay, let's work shall we?","width":128},{"text":"We were talking about inheritance and we are still talking about spheres.","width":384},{"text":"Maddox, the other instructor for the course came up to me this morning and said, \"You do love spheres, don't you?\"","width":448},{"text":"I don't know, we all love spheres. Who doesn't love spheres?","width":448},{"text":"But we're almost done. We're almost done talking about spheres.","width":320},{"text":"Alright, so we had two classes last time.","width":384},{"text":"One of them was the sphere class. One was the ball class.","width":256},{"text":"Do you remember the way that we described the sphere class in the context of inheritance in C++?","width":448},{"text":"Base class, that's right. So the sphere class is the base class,","width":320},{"text":"Base class... and how about class \"ball\"? It is referred to as the derived class, good.","width":896},{"text":"And, the key thing to observe here is that basically we are exercising code reuse.","width":512},{"text":"That is, if we already have a sphere class, then we can avoid re-implementing a lot of these functions if we just say we intend to use them via inheritance.","width":896},{"text":"So this is largely an issue of code reuse.","width":256},{"text":"Okay, let's see... so there are a few little behaviors that we should talk about.","width":448},{"text":"We talked about them in here a little bit last time, but I didn't get to them for the other class and so I'm going to review them for you as well.","width":704},{"text":"Oh, the other thing that I intended to say here is... from a design-- I want to talk about these two classes in particular from a design perspective for just a second.","width":896},{"text":"Notice that the ball-- a ball-- is a more specific sphere. So it's a sphere with more information.","width":896},{"text":"And furthermore, observe that the functions that are associated with the ball are concerned primarily with that added information.","width":832},{"text":"So from a design perspective, it's reasonable to think about, \"Okay, what's the functionality of the ball as it relates to the data??","width":576},{"text":"That is, what functions do I need in order to make that data accessible, usable, et cetera?","width":448},{"text":"And leave to the sphere class all the functionality that every sphere might need.","width":512},{"text":"And most of those have to do with its data. So it's just sort of a little-- I just wanted to bring it up because there's this little design checklist going on where you can ask yourself, \"Okay I need this function to go here or here\".","width":1024},{"text":"Largely, that decision is made on what kinds of data each of the classes hold.","width":448},{"text":"And how general the use of the function itself is.","width":192},{"text":"Okay, that said, let's be more concrete here. I'm going to declare a sphere, declare a ball. ","width":576},{"text":"Okay, you know what that means. It's certainly okay to declare a sphere because that's just our stupid sphere class that we've been talking about since day one, right?","width":704},{"text":"So it's okay to just declare one of these. Declaring a ball-- also perfectly fine. This is not unlike the image class and the PNG class from MP2, for example.","width":832},{"text":"Alright, now, this assignment statement-- what do you think. Do you like it?","width":384},{"text":"Assume the assignment operator is well-defined. So even if there were dynamic memory associated with these things, know the dynamic memory would be handled responsibly. So assume that generally, each of these has a well-defined assignment operator, okay?","width":1408},{"text":"That being the case, whose assignment operator would apply here?","width":384},{"text":"Sphere","width":64},{"text":"That's right, so it's sphere's assignment operator. So what is the result here?","width":448},{"text":"S stays a sphere, right? S is a sphere. It is as if and it's value is exactly like b's value except...","width":768},{"text":"This part isn't there, okay? So it's the sphere part of b. Any question about that? So this works, this is fine.","width":768},{"text":"S is the sphere part...","width":576},{"text":"...of b, okay?","width":256},{"text":"Now, how about this one?","width":256},{"text":"So now I have the b...","width":320},{"text":"I have a ball, and I want to assign to it the value of a sphere.","width":576}],
  [{"text":"the problem is we can't instantiate all of the ball from the sphere's data","width":448},{"text":"We can't take this spere, it doesn't give us enough information to fill out this ball","width":320},{"text":"So the compiler will say hey, you are being to ambigious with me , i can not process this","width":448},{"text":"So this is the dissallowed","width":192},{"text":"Can't write there. You have to write it yourself ","width":640},{"text":"Somebody is going to ask me what did I learn this semester and my answer is going to be I learned how to use powerpoint","width":1088},{"text":"By the compiler ","width":320},{"text":"Now, Someone out there , someone out here, is wanting to ask can you cast that sphere to be a ball?","width":1216},{"text":"So that the types would match","width":192},{"text":"Five people were wondering if you could force that sphere to be a ball","width":832},{"text":"You could, but... anyone anybody who read your code would go ughhhhhhh","width":512},{"text":"It is a hacking way, an ineloquent and an insecure way of achieving type agreement.","width":768},{"text":"So, don't do it","width":320},{"text":"Unless you absolutely have no choice","width":256},{"text":"Don't do it because it is the easier thing to do, only do if thought carefully about all the other options, and you know it's not going to break things","width":768},{"text":"Oh i don't know, that means that the only thing you can ever assign to a ball is a sphere. is that what you wanted?","width":1344},{"text":"oh, then the parameter ,i don't know","width":320},{"text":"uhhhhh, so you know i don't claim to know everything , but if you are doing things that I don't know","width":576},{"text":"Then you at least better document it very well, and very carefully. Not only what you are doing but why you are doing it","width":576},{"text":"Right simple code. People like to read simple code, right. Simple code right, simple code","width":448},{"text":"Except in MP3, haha. ","width":320},{"text":"Alright, let's work, come on I'm sorry","width":448},{"text":"Oh i have a typo here. I left my old variable names here","width":448},{"text":"We need to keep moving","width":128},{"text":"Alright, this is now what i intended","width":256},{"text":"I intended s=b and b=s here","width":256},{"text":"Alright, so now though we are going to declare pointers instead. I want you tell me what you think happens","width":576},{"text":"I am going to declare a pointer s and b. And I'm going to instantiate   them with something.","width":576},{"text":"Instaniate a sphere with a sphere, but it will be a less stupid sphere. It will be a smart sphere. and ball is like a sphere but it also has a name associated with it","width":1280},{"text":"Now, Question is can I do this. Is this one okay, What's the consequence of doing this in the picture","width":896},{"text":"Means that s points like this","width":384},{"text":"that alright?","width":128},{"text":"yeah?","width":128}],
  [{"text":"Okay","width":64},{"text":"but","width":64},{"text":"the fact that each of those words has an opposite","width":448},{"text":"or sort of an opposite","width":64},{"text":"static opposite is dynamic early","width":320},{"text":"opposite is late","width":64},{"text":"compile time well sort of the opposite is run time","width":192},{"text":"the fact that each of thsoe words has an opposite","width":256},{"text":"and this is just the default","width":128},{"text":"means you should probably suspect there is an alternative","width":128},{"text":"okay","width":128},{"text":"alriht","width":64},{"text":"so almost it's almost certainly true","width":128},{"text":"that this behavior is not","width":192},{"text":"what's intended","width":128},{"text":"it's almost certainly","width":128},{"text":"true","width":64},{"text":"that if we were to put effort to make this a ball","width":256},{"text":"then we intended for the pointer to behave like a ball","width":448},{"text":"and so","width":64},{"text":"um","width":64},{"text":"we have a programatic mechanism","width":192},{"text":"for making that hapen","width":64},{"text":"now","width":64},{"text":"why does c++ do it like this by default","width":320},{"text":"and the answer is","width":64},{"text":"that","width":64},{"text":"this assignment","width":64},{"text":"could be","width":128},{"text":"inside a conditional","width":128},{"text":"right?","width":64},{"text":"in fact","width":64},{"text":"you could assign any derived class to a sphere pointer","width":320},{"text":"because of that, you can even necessarily figure out until runtime which","width":576},{"text":"of all the different options are necessary","width":192},{"text":"so at compile time they all have to be expanded into machine code","width":384},{"text":"now the cost of that is huge","width":192},{"text":"it makes for larger and a thereby slower executables","width":384},{"text":"so uh by default you know c++ imagines itself a racehorse","width":512},{"text":"it'ts trying to do everything fast","width":256},{"text":"so by defaut its choice is to use early binding which says okay","width":256},{"text":"im just gonna go with the declared type information as the only type information","width":448},{"text":"okay?","width":64},{"text":"any questions?","width":128},{"text":"lol","width":64},{"text":"yeah!","width":192},{"text":"silence","width":64},{"text":"silence","width":128},{"text":"um","width":256},{"text":"oh we're gonna talk about that","width":192},{"text":"i have a whole slide on destructors","width":192},{"text":"is what you're asking about right?","width":128},{"text":"like what happens in thsi world with a destructor","width":256},{"text":"very astute of you to notice","width":64},{"text":"and we have a whole slide on it","width":256},{"text":"alright","width":64},{"text":"so how do we fix the problem","width":192},{"text":"and the answer is","width":128},{"text":"we use keyword virtual","width":128},{"text":"chirp","width":128},{"text":"chirp","width":64},{"text":"silence","width":64},{"text":"wheeee","width":128},{"text":"so the virtual keyword means tha the function may be overwritten in a derived class","width":576},{"text":"more silence","width":128},{"text":"yawn","width":128},{"text":"pull out your pillow","width":64},{"text":"like actually","width":192},{"text":"there's like 5 more seconds of silence","width":384},{"text":"wheeee","width":192},{"text":"jk there's more","width":128},{"text":"chirp chirp chirp","width":128},{"text":"ok","width":64},{"text":"alright!","width":128},{"text":"and so","width":64},{"text":"now","width":64},{"text":"and so now","width":128},{"text":"this code","width":128},{"text":"will work just fine","width":128},{"text":"k?","width":192},{"text":"i put things in a conditional","width":128},{"text":"and the rigt kind of display will happen","width":256},{"text":"based on which of these assignments occurs","width":256},{"text":"k?","width":64},{"text":"so now you can imagine instead of a=0","width":192},{"text":"who knows what a is","width":64},{"text":"here","width":64},{"text":"you can imagine any conditional here like if","width":256},{"text":"the left button is pushed or the right button is pushed","width":320},{"text":"or if the temprature is over 75 degrees","width":256},{"text":"this can be any conditional","width":128},{"text":"and we can still attach at run time any kind of thing that we want","width":448},{"text":"and still get the display that we like so in the in this example","width":448},{"text":"in the case that a is 0","width":192},{"text":"we get sphere","width":192},{"text":"otherwise","width":192},{"text":"so a!=0","width":128},{"text":"we get","width":64},{"text":"ball","width":64},{"text":"k?","width":128},{"text":"that","width":64},{"text":"is polymorphism","width":128},{"text":"spooky","width":64},{"text":"because","width":64},{"text":"it we change the behavior of display based on the type of uh uh they type of uh the object","width":576},{"text":"yeah?","width":64},{"text":"oh","width":64},{"text":"there's two of you","width":64},{"text":"let's see if i stand way over here","width":320},{"text":"then you're in different palces","width":128},{"text":"places*","width":64},{"text":"very good question","width":128},{"text":"um","width":64},{"text":"um","width":64},{"text":"the question is","width":64},{"text":"do you need the virtual in both places?","width":192},{"text":"and the answer is nope","width":128},{"text":"you dont","width":64},{"text":"once the function is virtual, it will always be virtual","width":320},{"text":"k?","width":64},{"text":"so","width":64},{"text":"it's superfluous","width":128},{"text":"for me to say that","width":128},{"text":"but because code is communcation, I'm always going to say it just to remind uh future derived classes","width":640},{"text":"that display will be overwritten or can be overwritten k?","width":320},{"text":"you guys should jsut talk to eachother!","width":320},{"text":"wait","width":64},{"text":"wait then they'd be completely","width":192},{"text":"wait","width":64},{"text":"what","width":64},{"text":"huh?","width":64},{"text":"k","width":64},{"text":"don't talk to eachother","width":192},{"text":"what","width":64},{"text":"alright","width":64},{"text":"any questions about that","width":128},{"text":"so once a function is virtual","width":128},{"text":"it is virtual throughout the inheritance hierarchy","width":256},{"text":"but we are awlays diligent about writing it jsut as a reminder","width":192},{"text":"yes","width":64},{"text":"whee","width":64},{"text":"am i done yet?","width":64},{"text":"woo hooo!!!","width":128}],
  [{"text":"so the question is does the sphere pointer also now have access to b's attribute?","width":180}],
  [{"text":"Okay and that is really the only time I feel like it's accurate to say we call the constructor.","width":896},{"text":"Other than just letting the system invoke it for us, okay.","width":283},{"text":"Any questions about that first example so that's the ball class constructor we need to instantiate the name.","width":413},{"text":"But we also need to instantiate the sphere part of it and to do so we invoke the sphere class constructor. Yes?","width":1036},{"text":"So umm, so let me if I got your question correctly. So by invoking that sphere class constructor it's gonna go lay out its memory.","width":652},{"text":"In the way that it wants to, right?","width":175},{"text":"So that's how you get it for the ball class.","width":281},{"text":"Now the ball class might have its own dynamic memory but that would happen inside the ball class constructor, okay?","width":576},{"text":"Does it help?","width":211},{"text":"Yes, on top of, below actually is how I think of it but it might be on top of. I don't know how memory does it. Yes.","width":694},{"text":"Yes yes yes, very good. That was the next thing I was gonna say.","width":235},{"text":"So I explicitly called the no argument constructor of the base class here.","width":380},{"text":"If you don't do it, the system will do it for you.","width":213},{"text":"But that's the only one, that's the only one it will ever do for you.","width":252},{"text":"So if you don't invoke a constructor. The no argument constructor is made for you","width":344},{"text":"But I assert you already knew this.","width":219},{"text":"When did you experience this behavior?","width":277},{"text":"Image class, that's right, this is what is going on in the image class, right? For mp2.","width":331},{"text":"You declare a image and the system says okay i'll make you a PNG with this additonal functionality.","width":481},{"text":"Okay so this happens by default.","width":694},{"text":"Okay and if the system provided one the system provided one will be used if there's a custom one the custom one will be used.","width":505},{"text":"Okay but those are kind of boring constructors. Let's talk about this more sophisticated one that takes not only a name but also a radius.","width":750},{"text":"Okay so here, here we really do want this is the behavior you wish you had for the image class.","width":587},{"text":"It would be nice to be able to invoke the PNG constructor that allows you to give it a size.","width":448},{"text":"But we didn't tell you about this yet.","width":134},{"text":"Alright so all you have to to invoke that sphere class constructor is essentially make a call to it in the intialization line.","width":758},{"text":"Right?","width":103},{"text":"And so object itself then looks like you know the sphere with radius r.","width":608},{"text":"theRadius and its value is r and it has name whose value is n.","width":731},{"text":"Okay any question about that?","width":194},{"text":"Yes?","width":286},{"text":"So the question is can you move it out of the initializaiton line. ","width":345},{"text":"Anytime somebody says can you in c plus plus I'll go oh probably.","width":301},{"text":"But number one I don't know how to and number two the expectation is that it will be there so somebody's looking at your code and you're wondering what constructor you're using. That's where they gonna look for it, if you hack something...","width":832}],
  [{"text":"melts (I'm not sure) together. There gonna go I don't know what the heck he's doing. They're gonna throw your code away.","width":263},{"text":"","width":16},{"text":"So","width":10},{"text":"","width":21},{"text":"and that's like the biggest insult right?","width":111},{"text":"","width":45},{"text":"biggest insult possible, if you right code and give it to sombody else and they go AAH","width":248},{"text":"","width":61},{"text":"throw it away","width":38},{"text":"","width":70},{"text":"Alright","width":32},{"text":"","width":86},{"text":"Let me see if I was going to say something else here. Um...","width":198},{"text":"So I sort of implied this. I sort of implied this","width":360},{"text":"","width":207},{"text":"and","width":199},{"text":"we're gonna talke about it more on the next slide but","width":123},{"text":"","width":91},{"text":"The way these things are constructed goes in order from","width":291},{"text":"","width":10},{"text":"base","width":37},{"text":"","width":11},{"text":"through the derived classes so we can have lots of derived classes but they go in order from the base through the derived classes. So it really is constructed to think about it as the base class with additional things tacked on.","width":1000},{"text":"","width":29},{"text":"as you navigate the derived hierarchy","width":176},{"text":"","width":33},{"text":"and such that's the order the constructors are effectively invoked","width":420},{"text":"","width":10},{"text":"Kay. So the constructors","width":159},{"text":"","width":195},{"text":"are invoked","width":95},{"text":"","width":106},{"text":"base class","width":95},{"text":"","width":169},{"text":"first","width":44},{"text":"","width":154},{"text":"followed by","width":47},{"text":"","width":107},{"text":"derived class","width":70},{"text":"","width":167},{"text":"and notice that there's sort of a","width":110},{"text":"","width":18},{"text":"there's sort of a recursive, there's sort of a recursive description here because that derived class could also furthermore be a base class. So you could have this sort of chain of... um...","width":909},{"text":"","width":37},{"text":"chain of","width":52},{"text":"","width":33},{"text":"inheritance. Okay.","width":158},{"text":"","width":39},{"text":"Ummmm... Let's do next slide. I love this slide. Love it.","width":360},{"text":"","width":89},{"text":"Always excited for this point in the semester yes?","width":172},{"text":"","width":267},{"text":"uh huh","width":18},{"text":"","width":256},{"text":"oh no, just the first one.","width":82},{"text":"","width":31},{"text":"just the...justs the...just the one above it","width":134},{"text":"","width":143},{"text":"Yep","width":12},{"text":"","width":87},{"text":"yes","width":20},{"text":"","width":111},{"text":"no","width":13},{"text":"","width":29},{"text":"no","width":18},{"text":"","width":30},{"text":"just calls balls because what's balls going to do?","width":148},{"text":"","width":76},{"text":"yeah","width":10},{"text":"","width":26},{"text":"right","width":23},{"text":"that's right","width":32},{"text":"so, his question was a good one and that is. is this like a makefile? It ...um if you have three, say a basketball. This example is a good one. If you have a basketball which is a derived class of a ball, does the constructor for a basketball have to call the sphere class constructor and the answer is no","width":1387},{"text":"The answers no. You could just call the ball class constructor which in turn will call the sphere class. kay?","width":404},{"text":"","width":59},{"text":"All right, I've given you some code here. Now this code is for illustrated purposes only. It's barebones a couple of class definitions and basically I want to know what the system does when I execute this. I want to know which constructors are called when and which destructors are called when. So the code is this, It's a base class pointer but I'm going to instantiate it with a derived class thing. So that's fine.","width":2416},{"text":"","width":66},{"text":"So ba...base class const...I'm sorry base class pointer instantiated with a derived class thing","width":546},{"text":"","width":122},{"text":"and then I want to clean up memory","width":185},{"text":"","width":82},{"text":"Kay I'm gonna clean up V","width":188},{"text":"The question is","width":163},{"text":"","width":70},{"text":"what's the output of.... what's the output of main? Go ahead and talk with the person sitting next to you and write down what you think the output of main is. And I'm gonna give you thirty seconds to do this","width":903},{"text":"","width":153},{"text":"Maybe 45","width":79},{"text":"","width":1920},{"text":"","width":64}],
  [{"text":"Okay ready?","width":832},{"text":"Ready?","width":128},{"text":"Alright","width":64},{"text":"So I'm executing this code and the first thing I do is ask for a new derived class thing.","width":448},{"text":"What is the first output that I see?","width":256},{"text":"Constructor of...?","width":64},{"text":"What order do constructors go in?","width":384},{"text":"Constructor of...?","width":192},{"text":"Base!","width":128},{"text":"Good. So the result of the first statement is constructor of base","width":384},{"text":"And then because its a derived class thing, the next thing I see is.....","width":576},{"text":"Constructor of dervied","width":192},{"text":"Now the interesting things begin","width":320},{"text":"I'm doing two colors of ink here and the reason for that is because","width":512},{"text":"I'm going to go with what you hope. What do you hope happens here?","width":192},{"text":"So what you hope is....somebody say..somebody volunteer","width":960},{"text":"What do you hope happens here?","width":128},{"text":"Ok so what you hope happens is...Dtor:D and Dtor:B","width":832},{"text":"Anybody strongly disagree with the hope here?","width":128},{"text":"That feels like it would be responsible right?","width":384},{"text":"Guess what really does happen","width":256},{"text":"Which one? Only one of them goes by default","width":448},{"text":"Raise your hand if you think its derived goes....","width":384},{"text":"Raise your hand if you think its base goes....","width":192},{"text":"Okay so 50/50","width":64},{"text":"So what I take from that is that collectively we're guessing","width":384},{"text":"What goes is Dtor:B","width":512},{"text":"The question is...how do we make Dtor:D go...","width":1280},{"text":"and the answer is the we make the base class destructor virtual","width":320},{"text":"and then the right thing will happen","width":704},{"text":"Thats what causes Dtor:D","width":384},{"text":"and thats it! That just how it works!","width":512},{"text":"If only Dtor:B was printed...think about what that means if there was dynamic memory associated with it.","width":768},{"text":"There would be a memory leak","width":64},{"text":"The question is...do we need the virtual keyword in front of the derived class destructor","width":1088},{"text":"I believe that implicitly its there but I'm not sure so yes you should put it there","width":256},{"text":"Anytime you are creating a class that might be a base class","width":320},{"text":"just make your destructors virtual","width":128}],
  [{"text":"can't clean up after itself","width":126},{"text":"right? aughhh","width":67},{"text":"that's almost not certainly what you intend","width":128},{"text":"alright any other questions about this?","width":128},{"text":"kay.... alright","width":292},{"text":"uhh.... take a look at square in the upper left hand corner","width":274},{"text":"and tell me what's interesting about it","width":147},{"text":"[people telling Cinda what is interesting about it]","width":256},{"text":"tell me what is different","width":128},{"text":"it's the flower class, what is different?","width":151},{"text":".......... this is an easy one","width":134},{"text":"[waiting]","width":225},{"text":"what is draw blossom?","width":161},{"text":"its just a.....","width":168},{"text":"function right? it's just a function happens to be virtual so we get the idea","width":329},{"text":"that this is intended to be a base class.","width":169},{"text":"so what's weird about it is","width":192},{"text":"that assignment statement","width":192},{"text":"here is what that assignment statement is","width":256},{"text":"its... its.. its...it means that","width":244},{"text":"draw blossom is a pure, virtual, function","width":424},{"text":"kay so....pure..... virtual.... function","width":408},{"text":"and what does that mean?","width":128},{"text":"it means a function that is not","width":192},{"text":"implemented here","width":128},{"text":"but will be implemented in some derived class","width":293},{"text":"kay? so a pure virtual funtion","width":199},{"text":"is a function not implemented.................","width":448},{"text":"in the base class........................","width":342},{"text":"but rather................","width":188},{"text":"in a derived class","width":126},{"text":"[pauses for dramatic effect]","width":220},{"text":"k? ....alright..............","width":250},{"text":"so here's the cool thing about it","width":128},{"text":"basically in the base class, the base class now is prescribing what the derived classes have to look like","width":539},{"text":"if you want to implement a flower","width":192},{"text":"you HAVE TO, or i'm sorry, if you want to, uh, derive from flower you have to implement draw blossom","width":512},{"text":"function.... kay?","width":81},{"text":"so it ends up being a prescription for the functionality of the derived class or effectively an interface ","width":398},{"text":"uhhhhhhhh let's see, so an abstract base class is the name we give to any CLASS","width":384},{"text":"that has at least one pure virtual function","width":200},{"text":".............. any class..... containing..... greater or equal to one","width":590},{"text":"pure ... virtual... function","width":303},{"text":"......k? any question about that?","width":256},{"text":"yes..................yep yep that equal zero is sort of like","width":512},{"text":"i'm i'm intid- it's an indication that i'm intending not to implement here","width":306},{"text":"right? it's equal nothing","width":101},{"text":"function is nothing","width":112},{"text":"alright! any other questions about this?","width":192},{"text":"yes????","width":52},{"text":"[listens to question]","width":640},{"text":"yep","width":64},{"text":"maybe put it on piazza, a question like that, cuz i dont really know java that well","width":320},{"text":"i might not be able to answer anyway","width":128},{"text":"so any other questions about this?","width":115},{"text":"...... okay! yea?","width":128},{"text":"[]","width":184},{"text":"uhuh","width":41},{"text":"[asfasfasdfasdfasdf]","width":120},{"text":"yep.....multiple, right, multiple derived classes all have to implement draw blossom","width":488},{"text":"so look at this. I've got, in fact we've done that here","width":256},{"text":"we've got class, daisy","width":237},{"text":"and it implements draw blossom, draw stem, draw foliage ","width":256},{"text":"but.....","width":128},{"text":"we could have, we could have, uhh, class rose, or class tulip, class Astor. we could have any of those flower classes and they would all have to implement","width":616},{"text":"um, draw blossom. I have one more thing to say though!!!","width":320}],
  [{"text":"You're so sweet. :)","width":64},{"text":"Um, what I'm gonna say is,","width":64},{"text":"I want you to look at this and tell me what you think of this for next time,","width":192},{"text":"that's where we'll start next time.","width":320},{"text":"Kay, so respond to each of these","width":384},{"text":"for next time.","width":64},{"text":"[Student] Um, on the previous slide...","width":384},{"text":"Yeah?","width":64},{"text":"[Student] Er, you said, well, first you go to print(?) B","width":192},{"text":"Yup. [Student] 'Cause the virtual was not there.","width":192},{"text":"Right. [Student] So if we add virtual here...","width":192},{"text":"It will do all four.","width":64},{"text":"[Student] All four. [Cinda] Yup. [Student] Ok.","width":192},{"text":"[Student] Um, so what do you mean by having more than one?","width":384},{"text":"[Student] 'Cause in the previous lectures, the class didn't -","width":384},{"text":"Right. They didn't - we've never seen an abstract base class til today.","width":192},{"text":"So this one - this one is our first abstract base class.","width":320},{"text":"[Student] So every abstract base class will contain...","width":256},{"text":"Yes. At least one.","width":64},{"text":"Any. That says, any class containing","width":256},{"text":"greater than or equal to one pure virtual function is an abstract base class.","width":256},{"text":"Ok?","width":64},{"text":"[Student] So all you have to do is type virtual infront of this, or what else-","width":256},{"text":"Yup. Yup, that's it. Mhm? [Student] And what does that change?","width":192},{"text":"It tells the system to look for additional destructors.","width":320},{"text":"[Student] Um ok, so it's gonna say, like, if it's a derived class","width":256},{"text":"[Student] that it's gonna call the base - er, no, sorry -","width":320},{"text":"[Student] the derived class and what if it's like the base","width":128},{"text":"[Student] class it won't care [Cinda] Yup.","width":64},{"text":"It doesn't care for it. For the functionality of the base class, it ignores it basically.","width":320},{"text":"[Student] All you need to do is add virtual to the class. [Cinda] Yup.","width":64},{"text":"[Student] So the virtual class destructors call all of the superclass destructors?","width":320},{"text":"Erm, no, the sub- ones.","width":192},{"text":"[Student] All of the sub- ones.","width":64},{"text":"You put it on the base class. That is- it's kind of - [Student] Oh, ok right.","width":256},{"text":"[Student] So then, here, when we change","width":192},{"text":"[Student] when we put virtual in front of here - ","width":128},{"text":"It was this one. We did it in front of this one. [Student] Right.","width":107},{"text":"[Student] So then it will print - it will call both of these destructors","width":256},{"text":"Yup. [Student] whenever we want them. [Cinda] Yup. Yup, exactly.","width":128},{"text":"[Student] We don't have virtual here so we are only triggering - [Cinda] Yes. ","width":256},{"text":"[Student] Is it just not so - a drastic impact - I mean ","width":256},{"text":"Is it what? ","width":96},{"text":"[Student] Is not - we like, we like always(?)","width":166},{"text":"Right, we probably don't - we probably don't want that action.","width":256},{"text":"Like if you had written something that had invoked a constructor","width":320},{"text":"You want it's destructor, just in case.","width":152},{"text":"'Cause you dunno what the constructor did, so you want its destructor too.","width":171},{"text":"So back - [Student] This is bad(?)","width":192},{"text":"Yes. So right. Back here...","width":192},{"text":"This - this was - destructors can and should be virtual.","width":256},{"text":"[Student] Oh. [Cinda] Ok. What's up?","width":128},{"text":"[Student] Don't they already inherit those functions,","width":128},{"text":"[Student] so why would it be important to have them?","width":128},{"text":"Um, they're not implemented here.","width":192},{"text":"So it's admitting, in the base class,","width":256},{"text":"that those functions probably have to be different in all the derived classes.","width":320},{"text":"They're gonna mean - they'll explicitly mean something different.","width":256},{"text":"In each of the derived classes.","width":128},{"text":"Like, drawing a blossom is going to be a different process","width":192},{"text":"for a carnation, than, for whatever, right? [Student] Yeah.","width":256},{"text":"They're just very different. And, so,","width":192},{"text":"And there is no default flower, right, like","width":192},{"text":"there is no flower that you could draw","width":128},{"text":"and implement in drawBlossom that is","width":192},{"text":"like the average flower or something, like it kinda doesn't make sense.","width":256},{"text":"[Student] So you wouldn't execute(?) this function if you wouldn't","width":128},{"text":"[Student] call on like, just from its base class.","width":151},{"text":"That's right, right. And in fact, um,","width":128},{"text":"what we're gonna start with next time,","width":128},{"text":"is that box where I've declared a flower,","width":192},{"text":"(whispering) and you're not allowed to do that.","width":128},{"text":"There is no flower class.","width":128},{"text":"The flower class actually needs","width":192},{"text":"derived class, it does.","width":64},{"text":"That's right.","width":108},{"text":"But it doesn't have those functions.","width":99},{"text":"[Student] Why couldn't this be just an empty class?(?)","width":128},{"text":"It is essentially an empty class.","width":128},{"text":"I - well, no it isn't, it might","width":139},{"text":"have data associated with it it might","width":86},{"text":"have a string that it's name, it might, you know","width":169},{"text":"it might have data associated with it","width":153},{"text":"but we can't draw anything about it because we don't know what it looks like","width":192},{"text":"So, so yeah, I mean","width":290},{"text":"it can be a full - in fact, we could have all of them except the blossom","width":273},{"text":"we could have all the functionality except the blossom","width":192},{"text":"but you still can't declare one.","width":128},{"text":"Nope, it has to be more specific.","width":128},{"text":"Ok?","width":171},{"text":"[Student] You said that initally that for the definition of pure virtual functions","width":431},{"text":"[Student] That means that in one of it's derived classes that it's defined, like","width":192},{"text":"[Student] This function is gonna be defined. [Cinda] Yes. Yes.","width":128},{"text":"[Student] But even if somebody else asked, they said, ","width":128},{"text":"[Student] that, suppose you say, a rose,","width":109},{"text":"[Student] and then you say, daisy, and each one of","width":96},{"text":"[Student] these, it has to be defined. So","width":128},{"text":"Yes. No, no. Yeah, so it's","width":128},{"text":"greater than or equal to one that isn't implemented here - [Student] Oh -","width":256},{"text":"and that","width":64}],
  [{"text":"You're so sweet","width":63.666666},{"text":"Hmm, what I'm gonna say is I want you to look at this and tell me what you think of it for next time, that's where we will start next time OK? So respond to each of these for next time.","width":959.666666}],
  [{"text":"OK, alright, let's get started. So guess what's coming up in two weeks? Yes! The exam, very good. But also wait a minute, this is a problem actually, the exam comes first, then we have reflections projections, the coolest student run experience I have ever seen, closely followed by Hack Illinois, which is later. Yeah so we're well represented here. So Jessica and Victoria want to talk to you about opportunities for, um well, to tell you about reflections projections and how you might participate. Hi I'm in Victoria I'm the chair for reflections projections this year. We have a lot of cool speakers coming in this year between the first and the fourth of October. We also have a programming competition so if want to come build an AI we have awesome prizes, including an Oculus Rift in those. So if you want to come compete and try to win that we'd love to have you. It's October 1 through 4. The programming competition is between the second and third. We have a puzzle competition going on over the course of the event. We also have speakers all of Saturday and some scattered throughout the rest of the event. Two job fairs, one is on Thursday, one is the big job fair on Friday. So if you want to come meet recruiters, see speakers, and maybe compete in a programming competition, come to RP. And here's Jessica to tell you how you can get involved and volunteer. So yeah in addition to experience the event itself, we would love it if some of you or all of you would come help us our during the event. So there is a sign up URL for that, it's www-s.acm.illinois.edu/rpvolunteer. Essentially it's the ACM URL slash rpvolunteer, no special cases, no spaces, just rpvolunteer. If you go there and sign up we will get you fitted for a time slot. And if you volunteer you will be fed, you get food. And you get a free t shirt! Who doesn't love free t shirts. Also food is free for the entire weekend. And it's always good food. OK thanks guys, are you coming back for the next hour? OK nice to see you both. Let's work! Seriously, when I go to reflections projections, I walk out of the talks going \"oh I'm so glad I'm with computer scientists.\" It","width":16064},{"text":"It's really inspiring to hear all the huge variety of cool things that people are doing. And the most interesting thing for me is that the speakers tend to be kind of younger, so there's this generation between you and me kind of, and those tend to be the people who come to speak. So I'm always very excited. ","width":1600},{"text":"So I want to work, and so unfortunately I'm going to have to erase all of this. I know, I know, erasing all the fun. There shall be no fun. ","width":960}],
  [{"text":"OK, so last time we were talking about inheritance and we really truly left things hanging because we basically had. We basically had.","width":768},{"text":"Talked about the existence of abstract base functions, I'm sorry, abstract base classes, ABC, and we said abstract base classes are classes in which some of the functions are not defined. That feels to me like, you know, we left it on a cliffhanger. Well, if they're not defined, where are they?","width":1536},{"text":"Where are they? Well, we did talk about the fact, I guess, that they are implemented in derived classes.","width":640},{"text":"That is the only place. OK? So here's the example, we have this abstract base class, you can tell because it has these pure virtual functions. Just reminding you of the vocabulary.","width":960},{"text":"Here, there it is, pure virtual fun-ction. I better put it there, that's just too, too weird. OK. Pure virtual function","width":704},{"text":"Um, there's the example, and here is a a derived class. Here is a derived class. Now, the point is, and you can see that the implementation is done here. The point is that I could not declare a class rose that neglected to implement any one of those things.Â This serves as","width":1664},{"text":"a prescription for implementation. Any question about that? Is that clear? So the base class serves","width":448},{"text":"as a prescription for the functionality and implementation of a derived class. Should I write that down? OK. ","width":448},{"text":"Alright, I will. Alright, so the abstract base class serves as a prescription for the functionality of any derived class. ","width":1856},{"text":"OK, so in our previous example, where, you know, that we talked about the fact that, uh, we talked about polymorphism. Like a ball could have a display function, but a planet could have a display function as well.","width":1152},{"text":"um, this is a way of saying that every derived class must have a display function and we'll see in a minute, um, an example where that is pretty cool.","width":704},{"text":"Alright, any questions about what you see here neglecting this blue box, the next thing we're gonna talk about is this blue box, so anything, yes?","width":576},{"text":"Uh-huh. Uh-huh. Yes. No, you do not have to use any kind of keyword to overwrite it, you're already saying. Keyword overwrites? No. No.","width":1472},{"text":"No, no, no, no. I do not have to. This is a straightforward simple, nothing else is necessary, OK. Alright, anything else about this?","width":704},{"text":"Yes? Right, yeah we don't have to here. That's right, right. That's right.","width":512},{"text":"OK. Uhh, let's see. So lets talk about how we use this then. You can imagine, well, let's talk about how we use this. Can we use this? Can we declare a flower? No we cant. There shall be no more flowers and the reason for that is simply that","width":1216},{"text":"flower is not a complete class name. Flower is not a finished class. Can we do this?","width":512},{"text":"Sure, of course, right. This is. Now we have all the functionality we need, so this is fine.","width":448},{"text":"How about this one, can we do this. OK? We can still do this one so that might be a little counter intuitive. We can't have a flower, but we can have a flower pointer and the reason for that is we already said that a declaration like this OK.fptr equals new flower.","width":1536},{"text":"And it looks like I only have a default constructor there. OK? Any question about it? Yes?","width":832}],
  [{"text":"Um, so we already, we yes. There's a jump here. You didn't know when I first talked about inheritance why I was telling you that it was ok to have a pointer type on the left. A base class pointer on the left and a derived class pointer on the right. You didn't know where I was going with that, but we did talk about the fact that that was ok. So this assignment is ok because the thing that we're making is a flower. We're building a flower at this point. Right here, I'm sorry, this is wrong. This is wrong, that's why. I almost broke your brains. I am so glad you asked that question! What could I have said that would have not been confusing here? Daisy, very good. Oh my gosh. the whole point of the whole slide was the word that I wrote here, and I screwed it up. Great. Come back next hour, that mistake will not be made, or maybe it should be! maybe I should do that on purpose. Just to see if people are as awake as you. Alright. So, everything I just said is true still, it's still ok to declare a flower pointer, cuz there is no flower constructed there. It would not be ok to say new flow, because we can't build a flower, but we CAN build a daisy. Alright, any questions about this? You should have a question I think. There's no slicing, so we make a daisy, right? Right, so the thing is though, the problem is that once we do this daisy, we don't have access to the daisy specific functionality, but you do have access to any polymorphic function, so when you prescribe what functionality it should have, they're all going to have it anyways because it's virtual, so we can reach it through the flower pointer. Because the functions are declared in the flower. Let's talk about it later, and i encourage you to go experiment. So here's the thing about inheritance, you see it about twice in this class, well maybe three times. We're doing it mostly because you're going to see it in your life, not because you'll see it a lot in data structures in this concert. We're trying to increase your curiosity about it, a little bit of functionality, but not a while lot. I have a question for you, what if i had done this? No, the presence of that = 0 does the same thing. If there's one of the =0, then it is an abstract class. Can I add an equal 0? can I do that? Yes, I can, but the I have no daisy. What this says is that I derive from the daisy class, well is it a Gerber daisy or a freeway daisy?This demands that we be specific about the kind of stem that we draw, apparently. Any questions about it? There may be some sort of reduncy there, in fact I don't think the compiler will let you say =0 without putting virtualÂ Â f","width":17258}],
  [{"text":"You only use virtuals if there is a chance that it is a base class.","width":960},{"text":"Furthermore, if your class is available, you do not really know whether it is going to be a base class or not because that is a part of the design. ","width":768},{"text":"Where you can strongly argue that virtual is not necessary, you should eliminate it because it will make faster code.","width":640},{"text":"So use it judiciously. Anyway, so here is an example that I think is really cool. I am going to declare a farm, it is not unlike a garden, but it is a collection of animals. Notice what I can do here. I can use this pointer to represent an array. When I instantiate it I can declare it with square brackets to make a dynamic array.","width":2432},{"text":"And I can let every element be of type animal pointer, each of which can then be instantiated with a different derived animal. ","width":832},{"text":"So, when I actually fill in the value of farm sub k I say new animal sub whatever or animal whatever.","width":512},{"text":"So, new pig, new horse, new cow.","width":192},{"text":"Alright, notice what this is. It is an array where the things are not necessarily the same. So this is the way that you would implement what is called a heterogeneous array in C++","width":1024},{"text":"So this is a heterogeneous array.","width":384},{"text":"in C++","width":256},{"text":"Not all elements have the same type.","width":576},{"text":"But it gets cooler than that, because it means we can do things like this. The polymorphic behavio","width":832},{"text":"The polymorphic behavior and the ability to insist that that function be defined means that we can demand that each of those classes has a speak function and that they are instantiated in a class specific way. So what happens for this for loop? You get 'barf, oink, nay, moo, quack'.","width":1664},{"text":"Alright, so we already talked a little bit about the fact that inheritance gives you this polymorphic behavior at the significant cost to performance, because at compile time the system has to look at the code and see what kinds of things might require this polymorphic behavior, and it has to build the machine code for all of it. So that makes for bloated machine code. Now that is called dynamic polymorphism, where you might not know at the compilation of your code what kinds of things this will be instantiated with and you do not need to know it. So that comes at a performance cost.","width":4928},{"text":"There is another kind of polymorphism that because of this performance issue was introduced into the language a little bit later. It is implemented via this construct called templates.","width":1152},{"text":"And it is a kind of polymorphism where all of the type dependent information is known at compile time. So there is no ambiguity and there is no need to build in this flexibility at compile time.","width":1216},{"text":"So that is our next topic. Templates. I have some code. Here is my main. I am using some integers and some characters and I have got these two functions that swap them. There are my two functions. What do you notice about the code. There are 2 germane points to be made.","width":2048}],
  [{"text":"Yes?","width":201},{"text":"Yes very good.","width":96},{"text":"So err the code is identical except for type information.","width":857},{"text":"Okay what else do you notice about this code? Yeah. You.","width":664},{"text":"Very good. Yep. It actually doesn't do anything!","width":384},{"text":"Neither function actually does anything.","width":760},{"text":"Okay and how could I fix that. I will fix that one first. How could I fix that? Pass by reference. Very good. Don't say pointer to me.","width":692},{"text":"Alright, good.","width":247},{"text":"So let's talk about the first point in a little bit more detail.","width":405},{"text":"So this is fine, right, to have these two functions that do pretty much the same thing. ","width":323},{"text":"In fact if somebody were asking you to include these two functions in an mp you go 'oh yay they're about the same I can cut and paste'. ","width":489},{"text":"I can cut and paste my solution from one and I got the other one done. Yes, right?","width":299},{"text":"The problem is that then you have to go back through and kinda check and make sure that your type information is updated correctly.","width":576},{"text":"Now the compiler's gonna help you mostly with those kinds of bugs but it's still a pain in the neck.","width":384},{"text":"And in fact if somebody, if somebody came down and said 'there is new technology for swapping'.","width":629},{"text":"Okay? Unlikely to happen but it could. ","width":218},{"text":"Somebody came down and said there is new technology for swapping.","width":258},{"text":"Drawback of doing it this way is that you have to go find all of these little swap functions and change them, right, to take advantage of this new swap algorithm.","width":881},{"text":"Okay. Yes it's artificial but. Alright so code reuse is important for maintenance and incremental improvement of codes. Okay?","width":829},{"text":"And we admit here that look they are about the same.","width":165},{"text":"So how on earth are we going to unify those two functions into one thing but still allow for type information to be err recorded in the code?","width":907},{"text":"And the answer is that c++ provides syntax for passing as a parameter hah my gosh type information, type information into the function.","width":919},{"text":"Okay? Alright, so how does this work?","width":273},{"text":"I have my same main except that I'm writing a single swap function.","width":504},{"text":"The way we, the way we tell the system exactly how we want swap to work is we have this alternative syntax for, alternative syntax for parameterizing type,","width":1085},{"text":"and we put it between angle brackets.","width":108},{"text":"So first you have the type parameters and then you have the value parameters, okay?","width":377},{"text":"Similarly here we would do char.","width":264},{"text":"And I'll tell you right now that if you forget to do this, when the compiler can it will infer it for you.","width":599},{"text":"So sometimes it's not the case that you'll see those angle brackets even for a templated class.","width":453},{"text":"Okay so the system can infer it , it will.","width":181},{"text":"Okay.","width":64},{"text":"So now that's how you use these template functions, how do you define them?","width":326},{"text":"Well you prepend the function signature above the, above the first line it becomes the first line with this keyword template.","width":695},{"text":"This is a keyword.","width":237},{"text":"Class which is also a keyword but it could be typename instead.","width":742}],
  [{"text":"... and you will see type name. And, the reason I put class there is because of pure character. And that's what I am optimizing for sometime on the slides. So template class T or type name T, and then T is effectively a type variable. So every place you see T in the code, especially when it is in the type location. The type variable T is replaced with whatever you give to the function through the template parameters","width":11772}],
  [],
  [{"text":"Welcome to the rest of the semester.","width":179},{"text":"Er, how do you do that syntactically?","width":128},{"text":"Much like you do for functions, you","width":161},{"text":"preface the class definition","width":243},{"text":"with a template syntax, ok you warn it(?).","width":256},{"text":"And then anywhere you see a T","width":238},{"text":"inside, anywhere you see a T inside the class","width":268},{"text":"it is replaced with whatever you happen to put in.","width":192},{"text":"K? Alright, so let's look at this code in a little bit more detail.","width":320},{"text":"Right, so I'll pull out my list so I don't forget anything important and it's been a while.","width":384},{"text":"So...","width":64},{"text":"My notes are fantastic. They tell me","width":420},{"text":"\"Start with the blue code\"","width":167},{"text":"Yay, okay!","width":124},{"text":"I'm gonna start with the blue code.","width":118},{"text":"Ok?","width":52},{"text":"Er, so I'm declaring one of those things","width":192},{"text":"and I'm recognizing that it needs a type.","width":192},{"text":"Now you can tell from the name that it's a pair of integers.","width":256},{"text":"Ok?","width":64},{"text":"The variable","width":128},{"text":"is - so this is the variable name, so","width":163},{"text":"variable twoNums has type ezpair of integers","width":393},{"text":"What is this? What's going on here?","width":192},{"text":"What's going on here?","width":192},{"text":"I'm - right. I'm using a constructor.","width":207},{"text":"Right? I'm using a constructor.","width":120},{"text":"So I should look up here and go, oh yay,","width":128},{"text":"the ezpair class has a constructor that accepts these two things.","width":384},{"text":"Now at this point I think, you can probably guess what that constructor does","width":320},{"text":"it simply, takes the two arguments and","width":256},{"text":"uses them to instantiate all the member variables.","width":256},{"text":"Ok? That are right here.","width":117},{"text":"So this, comes from there. And the constructor. Any question about that?","width":256},{"text":"So far.","width":64},{"text":"I think you will have questions, but let's keep going.","width":192},{"text":"Alright, so now we also have declared getmax.","width":320},{"text":"What does this version of getmax return?","width":256},{"text":"What does it return?","width":192},{"text":"A T? It's not a T.","width":192},{"text":"This code doesn't know anything about Ts.","width":320},{"text":"Right? It doesn't know anything about Ts. So what does it return?","width":256},{"text":"An integer. That's right.","width":192},{"text":"That returns an integer.","width":241},{"text":"Ok. Er... let's see...","width":146},{"text":"So I wanna emphasise that point.","width":320},{"text":"That this code, once you instantiate the template,","width":361},{"text":"you don't have to use that again.","width":128},{"text":"Right? You've already told the class that you want an ezpair of integers.","width":320},{"text":"It is as if, now,","width":192},{"text":"this is the name of the class.","width":192},{"text":"You don't have to keep reminding it that you're talking about integers","width":256},{"text":"It's like this is the name of the class.","width":192},{"text":"If we had said ezpair char,","width":128},{"text":"that would have been the typename","width":174},{"text":"and if I had said getmax","width":128},{"text":"and this was an ezpair char there would have been no ambiguity.","width":256},{"text":"K? Just like display, there would have been no ambiguity. Yeah?","width":320},{"text":"Um, so I think the compiler, so","width":256},{"text":"if you just said ezpair here the compiler would infer","width":320},{"text":"what you mean so you wouldn't have had to do this","width":229},{"text":"but I actually - when I read code it helps me a lot","width":292},{"text":"to have that there.","width":88},{"text":"So yes, it's optional for functionality,","width":164},{"text":"but it's, erm it's important for maintainability.","width":232},{"text":"K?","width":64},{"text":"Alright, so lets see... So let's talk about","width":320},{"text":"getmax. So if you execute this code what do you get?","width":192},{"text":"You execute this code what do you get?","width":192},{"text":"Take a look at what getmax - oh, getmax is funky","width":384},{"text":"What would you expect if you couldn't see that code up there what would you get?","width":312},{"text":"A hundred that's right. Now lets go look","width":192},{"text":"Now let's go look at the code.","width":115},{"text":"Alright. So getmax is implemented","width":165},{"text":"to return an integer, right or","width":192},{"text":"to return whatever the parameterized type is","width":204},{"text":"and, er, it sets up a value for return","width":252},{"text":"What is this?","width":64}],
  [{"text":"Yeah we refer to it as a yes you wanna tell me instead of me telling you? Say it loud.","width":400},{"text":"It's an if statement, that's right. That saved me three lines of code right there which is important here.","width":510},{"text":"Oh I don't what I intended for this but it feels like it was important.","width":312},{"text":"Actually the reason I did this is because I want you to see it, right. I want you to know that it exists.","width":401},{"text":"This is called a ternary operator and it effectively in very very simple cases replaces a conditional.","width":562},{"text":"So this is a shorthand conditional.","width":608},{"text":"Okay so it says if this then return a, otherwise return b and then assign that by return value across the equal sign to retmax and then return retmax.","width":934},{"text":"Okay there's something that should bug you about this code.","width":449},{"text":"It's very very subtle.","width":365},{"text":"And the way to think of it is think of all the things that come in pairs.","width":405},{"text":"When I say name something that comes in pairs, what's the first thing you think of?","width":384},{"text":"Shoes, okay, okay fine.","width":219},{"text":"It feels like then that we should be able to instantiate ezpair with shoes right? The shoe class.","width":591},{"text":"Right? What would happen for getmax if we did that?","width":375},{"text":"Yeah?","width":385},{"text":"That's right, very good, so did you here him?","width":174},{"text":"He said he made note of the point, I don't know what greater than means for shoes.","width":465},{"text":"I know what it means for integers. I can guess what it means for characters. I have no idea what it means for shoes.","width":413},{"text":"Um and so the implication of that is in order for that code to work on the shoe class, we would have to have overloaded the greater than operator.","width":902},{"text":"So the greater than operator must be implemented in any class using, wait, any class passed to is the right way to say it, ezpair.","width":1624},{"text":"Okay? Alright so it feels like a restriction but it's okay and the really good news about it is when the mistake is caught.","width":784},{"text":"Okay so if we tried to use ur ezpair on the shoes, who would tell us NO NO NO you can't do that? Who would do it?","width":744},{"text":"The compiler, that's right. The compiler would say I know you want to use ezpair on shoes but you can't.","width":397},{"text":"You need to define a greater than operator in order to do so.","width":256},{"text":"Okay? Any questions about that at all?","width":179},{"text":"So is a compiler demands that er this exist.","width":768},{"text":"So the compiler has to be able to look at all of the code, all of the code and determine exactly what functionality it means. Yes?","width":822},{"text":"twoNums, it's an variable, this is a variable.","width":334},{"text":"It could be frog, it could be Alex, it could be... It's just a thing that holds two numbers.","width":513},{"text":"Yeah, sure!","width":124},{"text":"What about it surprises you?","width":384}],
  [],
  [{"text":"[Silence]","width":256},{"text":"Question is, where do you need the angle brackets?","width":256},{"text":"[Video Playing]","width":320},{"text":"Template, class T, ezpair T, here is the only place you don't need it, in the function name itself.","width":640},{"text":"[[s","width":256},{"text":"Const, ezpair T reference, what do we call it? Copy constructor, so it's orig.","width":768},{"text":"Raise your hand if you happened to get that right","width":192},{"text":"[Video Playing]","width":384},{"text":"How do you declare a dynamic array of mypairs of integers? So this part down to this line, challenge 1 is related to lecture for today. These two are review because you have this exam coming up.","width":704},{"text":"How you declare a dynamic array of mypairs of integers. So this is a declaration, not a definition, not an instantiation. So I want to declare this thing, what should we call it. It's a declaration so it needs a name. ","width":1344},{"text":"[Video Playing]","width":128},{"text":"Dynamic array, I'm gonna call it \"ma\", my array","width":384},{"text":"[Video Playing]","width":189},{"text":"I want a dynamic array of mypairs of integers","width":512},{"text":"[Video Playing]","width":100},{"text":"How do we do that?","width":64},{"text":"[Video Playing]","width":320},{"text":"I think this should be ezpair","width":128},{"text":"[Video Playing]","width":960},{"text":"Alright, the dynamic part gets an asterisk, and ezpair of integers, is the kind of thing you're gonna put into it","width":1024},{"text":"[Video Playing]","width":384},{"text":"So, now you've got this array we declared. I guess this is not review. And inside is 2 integers. 175, each one of them has a pair of integers in it.","width":1152},{"text":"Alright any questions?","width":256},{"text":"Okay, how do you allocate memory if you want that array to have 8 elements?","width":256},{"text":"So, \"ma\" equals, I know I want \"new\", I know the last thing is going to be 8.What goes inside?","width":576},{"text":"[Video Playing]","width":384},{"text":"Ezpair, int","width":192},{"text":"[Silence]","width":640},{"text":"Any questions? ","width":128},{"text":"[Question being asked]","width":1024},{"text":"It does, it doesn't point to it, it contains it, it contains an ezpair","width":448}],
  [{"text":"Alright, you ready to work? ","width":1664},{"text":"Okay, I think I'm ready to work, let's do it","width":704},{"text":"Um","width":128},{"text":"Okay, so today's the first official day that I'm announcing next week's midterm. ","width":1152},{"text":"Um, it's on Wednesday night. So, those of you who have sections on Wednesday might be a little confused. Should I go to section or should I go to the exam. ","width":704},{"text":"I think you should probably go to the exam. Um, and what we're going to do, what we're gonna do for you is um, give you a attendance, the people for whom there is this conflict, if you go to the exam instead, we'll give you credit for attendance of the lab. The lab will still be due, there will still be work due on Sunday, just like every week. Um, but you just won't you know be able attend the lab section to do it. You are welcome to attend any other lab. ","width":2112},{"text":"Um, this is kind of a new thing for us, we don't know how this feel this yet. We always do our exams on Tuesday night, but the room, the space wasn't available, so we couldn't, we couldn't do it like we usually do.","width":768},{"text":"Um, so, let's see. So there are additional things that go along with this. ","width":384},{"text":"Um, class is canceled, so the, the lecture","width":512},{"text":"is canceled that day. ","width":192},{"text":"Lab, moved, okay. You can go to any other lab you want and we'll give you attendance automatically","width":640},{"text":"Um, and there will be review sessions going up to it","width":256},{"text":"In fact, the first review session that you should know about, the review sessions are these","width":576},{"text":"","width":59},{"text":"There's one that meets at 11 AM","width":64},{"text":"And, one that meets at noon","width":384},{"text":"Uh, can you guess where?","width":192},{"text":"Yeah, here","width":64},{"text":"On the day of the exam, yeah, cause we have to cancel class, but we figure that it's a good time to just meet anyway optionally","width":768},{"text":"Um, we'll do other reviews too, that's kind of just a little joke, right? Class is cancelled, but we're gonna work on anyway","width":512},{"text":"Alright. Uh, any questions about the exam? There are sample exams posted I believe, I'll have to double check and make sure that's true. Um","width":640},{"text":"So for years, the format of the exam has not changed","width":320},{"text":"But, we're writing all new, all new exams, and we're gonna have new exam procedures, things are going to be a little different this semester, so i actually don't know exactly what the exam will look like yet, um I think it will probably be similar format though, so multiple choice questions, some short answers that are based um on lectures, some short answers that are based on labs, some short answers that are code, largely coming from the MPs.","width":1920},{"text":"So, that's kind of what these exams are like. Uh, alright, any questions","width":384},{"text":"At this point. Yes. ","width":128},{"text":"The rooms are TBA, um, cause we have this script that we run that allocates people into rooms, and we just haven't run it yet, so it will be announced on the website and on the piazza","width":960},{"text":"Okay? Any other questions about that? ","width":128},{"text":"What","width":64},{"text":"What's the giggle","width":64},{"text":"Oh yeah, exactly, pretty much","width":320},{"text":"You can figure it out, you figure out where to go","width":192},{"text":"If you didn't do the second lab you're toast.","width":192},{"text":"Okay","width":64},{"text":"Um, let's talk about templates","width":192},{"text":"Everybody good? Monday is monday, you know? This is tough here","width":384},{"text":"It's tough crowd today","width":192},{"text":"Talk about templates","width":192},{"text":"Alright. So I think at the end, so last time we were talking about um templates, and we got pretty much through the material, um there are a couple little details that I want to talk about, and we're gonna revisit them and a sort of rich, use for them in another week or so","width":1216},{"text":"So, we're gonna leave C++, and, and moreover","width":320},{"text":"templates are our last C++ topic. C++ specific topic","width":384},{"text":"So, today is the day, today is the day, we actually start the data structures portion of the course. Yayy","width":640},{"text":"The day of celebration for me, but we have some loose ends to tie up. Not that I don't like C++, but. ","width":448}],
  [],
  [{"text":"There we go, ok? And it's executable code. ","width":192},{"text":"Ready to be linked with anybody who would like to use it.","width":256},{"text":"Alright, fine. Well, I know somebody who would like to use it.","width":320},{"text":"This main would like to use that compiled code.","width":192},{"text":"All that has to be done, is sphere.h has to be included, oops.","width":448},{"text":"Sorry. #include, sphere.h here. And then these two, are effectively compiled together.","width":1024},{"text":"Into main.o. And, how do we get sphere and main linked?","width":512},{"text":"Yeah, the linker does it for us. ","width":384},{"text":"So, it's the linker that creates the union between main and sphere.","width":320},{"text":"Ok? And, that whole process is sort of orchestrated for you by the makefile.","width":704},{"text":"That's the whole point of the makefile.","width":64},{"text":"So, that you could do all that seperately, and then put it all together.","width":192},{"text":"And, not have to type it out every time. ","width":128},{"text":"When you're trying to compile your code. ","width":192},{"text":"Now, the world is a little bit different.","width":256},{"text":"In the case of compiling templates.","width":128},{"text":"So, again we've got sphere.h and sphere.cpp and main.cpp.","width":512},{"text":"But, if you noticed on the previous page, the compiler detected.","width":384},{"text":"The compiler could detect.","width":128},{"text":"That it didn't have a plus operator for integers and strings.","width":448},{"text":"And what's going on there.","width":448},{"text":"Is that the compiler needs to know ahead of time,","width":256},{"text":"exactly how, and so you got a compiler error.","width":320},{"text":"The code for the addEm function, was not created.","width":384},{"text":"Now, the reason that that happened is because,","width":256},{"text":"The code for all of the use of your template functions,","width":384},{"text":"Must be visible to the compiler, all at the same time.","width":320},{"text":"That means that, main cannot be compiled separately from sphere.cpp. ","width":640},{"text":"And more importantly sphere.cpp cannot be compiled separately from main.  ","width":512},{"text":"More importantly sphere.cpp cannot be compiled seperately from main. ","width":320},{"text":"Because, in order to make the sphere class. You need to know how spheres are used.","width":448},{"text":"The type of thing that you're passing in to spheres.","width":192},{"text":"To use for its radius, I don't know.","width":128},{"text":"The parallel falls apart a little bit here. ","width":192},{"text":"Ok, so what do we do?","width":128},{"text":"The main principle is that we do not expect different behavior from the client codes.","width":384},{"text":"The client code is still going to say #include sphere.cpp, ok?","width":512},{"text":"H!","width":384},{"text":"Geez, sphere.h. We don't want the client to have to change.","width":512},{"text":"So, the client is still going to say sphere.h.","width":256},{"text":"But it can't just be sphere.h, it also has to be the implementation.","width":448},{"text":"So, how are we going to do that? What are we gonna do here? ","width":192},{"text":"Hmm....","width":128},{"text":"When we compile this, we have to compile it all together, and the code has to be all visible.","width":320},{"text":"And we don't want to client to change code, change behavior.","width":576},{"text":"Yeah?","width":64},{"text":"Yeah.","width":320},{"text":"Look at this.","width":64},{"text":"The only thing we're including is sphere.h. So that's the only code we get.","width":320},{"text":"So the only way that that include statement can include all the sphere class definition.","width":512},{"text":"Is if we say, #include...","width":192},{"text":"sphere.cpp at the bottom of sphere.h.","width":320},{"text":"And now when you do this #include sphere.h, you actually get all the code.","width":448},{"text":"And then, you compile main.cpp, and all the compilation happens at once. ","width":576},{"text":"There's no use for the linker, in this case.","width":64},{"text":"Yes?","width":64},{"text":"Because the declaration of the class has to come first. ","width":384},{"text":"So you have to have the class declaration, the implementation of the member functions, and then the client code that uses them.","width":384},{"text":"Ok?","width":64},{"text":"Alright, yes?","width":128}],
  [],
  [{"text":"List item type, ok?","width":175},{"text":"So LIT there, list item type.","width":251},{"text":"You saw it as class T before.","width":144},{"text":"Alright, any question about that?","width":307},{"text":"Ok. Yes?","width":348},{"text":"Why not?","width":87},{"text":"This is C++ we're speaking here. Ok? So the c++ compiler will look at that struct and go oh I know what a struct is.","width":475},{"text":"It's just a class where everything is public.","width":185},{"text":"It's exactly the same thing and you can put functions in there too.","width":218},{"text":"Guess what? You can even put a private section in there if you wanted to.","width":243},{"text":"You can store dat- I mean you already do store data.","width":174},{"text":"You can put functions. It's exactly like a class, ok?","width":204},{"text":"Why did I do struct? Exactly so that you would ask me that question.","width":377},{"text":"Thank you.","width":142},{"text":"Ok. Yes?","width":353},{"text":"Uhm, oh you tell me. I'll tell you right now that this is a declaration.","width":335},{"text":"So what does it mean when you have a variable declaration?","width":183},{"text":"You've got a type, you've got a name. You might a param- an initialization parameter.","width":294},{"text":"It's just the name of my variable. Ok?","width":166},{"text":"So, you know if I were drawing this out.. here's nln.","width":293},{"text":"It's not a keyword, it could've been frog. Which at that point sounds sort of like a keyword.","width":399},{"text":"Alright, any question about it?","width":133},{"text":"Yes?","width":205},{"text":"Yea.","width":185},{"text":"Excuse me?","width":181},{"text":"Nope. No no no.","width":206},{"text":"Except to keep in mind who you're communicating with.","width":196},{"text":"If people expect a class you should use a class.","width":285},{"text":"If people expect a struct you should use a struct.","width":178},{"text":"That's really it.","width":127},{"text":"Yes?","width":235},{"text":"Yea. Yep.","width":165},{"text":"Alright, uh, or at least mostly so that it is.","width":253},{"text":"I mean maybe it's kind of convenient to not if you're making things with everything public.","width":296},{"text":"It's just, I don't know. It's class where everything's public.","width":250},{"text":"Ok, uhhh. Let's see...","width":240},{"text":"Here's what I want instead.","width":156},{"text":"I don't want this uhhh stack variable nln just sitting here.","width":492},{"text":"Instead I want this.","width":211},{"text":"Write me the line of code that you could use to create this in memory.","width":498},{"text":"Ok? So..","width":186},{"text":"Instead I've got a pointer. Do you want me to give you a name for this?","width":311},{"text":"Ok, call it yum.","width":121},{"text":"I used yum a little this weekend so it's on my mind.","width":578},{"text":"Ok. Anybody want to write it on my tablet?","width":511},{"text":"You can. You want to try?","width":160},{"text":"Oh, mine's terrible too. It's kind of a pain actually.","width":276},{"text":"Sure.","width":417},{"text":"It's fun isn't it?","width":359},{"text":"He say's it's intoxicating.","width":650},{"text":"Good.","width":96},{"text":"Good. Anybody want to comment at all?","width":192},{"text":"","width":148},{"text":"Yea I would be explicit probably the system will infer it but I would be explicit.","width":326},{"text":"So I would've put an int right here. That's all.","width":199},{"text":"Ok?","width":58},{"text":"Alright, any other questions about this? Good job. ","width":150},{"text":"Alright, now why did we do this? Why do we do this?","width":231},{"text":"We're going to admit that... this thing holds on to future ones of these.","width":472},{"text":"Ok? And we're going to consider a unit to be we're going to consider a unit to be the pointer together with the data in a sense.","width":652},{"text":"Together with this last box.","width":177},{"text":"So a unit in our structure is going to be one of these things.","width":327},{"text":"And then notice that that's what we have hanging off here.","width":316},{"text":"It's a pointer to a box.","width":127},{"text":"Ok?","width":54},{"text":"So if we do this. If we make this like this. Then every list node...","width":409},{"text":"is effectively the same.","width":163},{"text":"Ok?","width":93},{"text":"Here it's kind of you, you'd have to you'd have this case where sometimes it's null and sometimes it points to everything else something else.","width":428},{"text":"And so we're not going to do that.","width":105},{"text":"We're going to... uhm, for elegance sake hold on to the first thing via a pointer.","width":457},{"text":"Ok? Now, here's what I want you to do next. I want you to change this in memory into this.","width":607},{"text":"So write the line of code or two lines of code or whatever you need to make yum now instead point to this where this is what yum this is what yum used to be.","width":1042},{"text":"Ok?","width":178},{"text":"It makes sense and you can work with the person sitting next to you to make it happen.","width":384}],
  [{"text":"Who got it?","width":640},{"text":"Want to do it? Somebody want to write it?","width":256},{"text":"Okay, I'm going to talk loud and do it, okay?","width":256},{"text":"So I need to make a new, I need to make a new list node here whose value is six and I know just how to do that. It's going to something very much like this line.","width":704},{"text":"So this is going to be list node pointer new equal new list node...","width":768},{"text":"Oh, int six.","width":320},{"text":"Okay, I'm going to give myself clearance here, okay? You're going to want to raise your hand a hundred times over the next few days and say, \"You forgot a template!\", okay?","width":832},{"text":"I hereby absolve myself from the responsibility for including every last template.","width":320},{"text":"If it looks like I need one here and here, please just pretend that I did it, okay?","width":512},{"text":"These are compiler errors at worst, so, you know. We're much deeper than compilers here.","width":448},{"text":"Okay, so I have list node pointer, I better not use-- that isn't \"new\", that is n-u-u.","width":512},{"text":"Alright, new... u-u. Okay, it isn't the word \"new\".","width":320},{"text":"Equals new list node six. Okay, so now what I have is something that looks like this...","width":576},{"text":"Right, and I have \"yum\" over here.","width":192},{"text":"So here's six, here's \"yum\" like this. Hmm... how am I going to do that?","width":384},{"text":"Hmm... this is n-u-u.","width":448},{"text":"Nuu dot next equals yum, good.","width":832},{"text":"And...","width":128},{"text":"No... what next?","width":320},{"text":"Good, and then yum equals nuu.","width":640},{"text":"Yeah? You like it? It's okay?","width":384},{"text":"Okay, because that means now nuu next, I'm going to do this in green.","width":448},{"text":"Nuu next equal yum, that means it points way over here.","width":320},{"text":"Right? And yum equal nuu, so... that means yum-- oh, wow! That was cool.","width":576},{"text":"Woah! That's really cool!","width":256},{"text":"Now yum points to nuu. And look! It looks just the same, right? Yum goes to there goes to back to where it used to be, okay? Any question about it?","width":704},{"text":"Alright, so if you have not started MP3 yet, MP3 is like... it is like a million of these kinds of puzzles in much more complex scenarios.","width":960},{"text":"Moreover, in MP3, instead of just having a next pointer, we also have a previous pointer going to the previous element in a chain of these things.","width":1024},{"text":"Okay, so let's write, let's write a little bit more code here.","width":256},{"text":"We did an exercise that we probably want to generalize and replicate. This inserting something at the front.","width":512},{"text":"Okay, so here's what I'm going to assume is the setup.","width":256},{"text":"I'm going to assume that I have a series of these linked nodes and I'm holding on to them by a list node pointer called head.","width":896},{"text":"Okay? Any question about that? Is that alright with you?","width":256},{"text":"Okay, and we've already somehow built these up, kind of like we put the two together on the previous page,","width":384},{"text":"Now what I want to do is to write a function that, given a chain of these things, will just insert one at the front, okay?","width":704},{"text":"Alright, so let's do that. Hmm...","width":256},{"text":"How does this go? Do you want to write it, or shall I write it?","width":448}],
  [],
  [{"text":"Just a sequence of assignment statements that are going to be the same every time we execute this code. Alright, any questions about it? Okay, fine. Here's another one. 8 4 2 6 3. So suppose we built up this list; suppose we built up this chain of linked memory and this one is we'll call it head and we'll pass it in. We want to printReverse(head). So what we expect out of this is the sequence of printed numbers. We want this to return 3 6 2 4 8. Any questions about it? About what we expect this hting to do? Alright, here's what we want to exploit in this code. We want to exploit the fact that this chain of memory all linked together is a listNode pointer instantiated with the listNode together with another chain that looks just the same, that is just a smaller instance of the original problem. This situation begs for recursion, that's right. Any time you can break a structure down into something that is smaller than the original but has the same characteristics of the original, you're talking about a recursively defined structure. Alright, so that's what we have here and that's what we're going to exploit. So suppose I can print the reverse of this, the rest of the list. Suppose I know how to print the reverse of the rest of the list. How do I assemble that into a print the reverse of the whole list?","width":9390},{"text":"Yeah? Very good, very good. So you print the reverse of... print, reverse of the rest of the list and then print the first node. Node's data, should be careful about that. Any questions about that? What's the base case here? Oh, we're in the world of recursion. No, that's right. What's the reverse of the empty list? Nothing right? There's nothing to be done. Alright, I think you just suggested all of our code here. So my code is going to look like this. If (curr != NULL) then I'm going to printReverse(curr->next) and then I'm going to cout <<  curr->data << endl.  ","width":6776}],
  [{"text":"Alright, and it better have this.","width":192},{"text":"And nothing happens if it's NULL.","width":180},{"text":"Okay. Any questions about it?","width":128},{"text":"You like it?","width":64},{"text":"Yeah?","width":64},{"text":"Do I? I was going to ask you that!","width":256},{"text":"He said do we need to pass by reference? What do you think?","width":448},{"text":"No, because we're not changing anything about this list.","width":256},{"text":"We're just sucking values off for printing.","width":128},{"text":"Okay? So we don't have to in this case.","width":128},{"text":"Alright fine.","width":128},{"text":"Uhhhhh...","width":64},{"text":"This comment is in the wrong place.","width":256},{"text":"Any questions about this code?","width":256},{"text":"Okay. Let's talk about the running time.","width":320},{"text":"Kay, now we can no longer say that there is no iteration and no exploration, right? Uh-oh, we got a problem.","width":768},{"text":"So let's look at this holistically. Well there is a couple of different ways of looking at it. ","width":192},{"text":"We will look at it holistically first","width":64},{"text":"So I'm going to parameterize the running time by... uhh...a function by n. Okay, so the running time is T(n)","width":768},{"text":"Function for the running time is T(n). Now I don't know how long this thing takes, but I do know","width":448},{"text":"that it takes time. But the amount of time it takes to print the rest of the list","width":384},{"text":"Plus some constant sum of time it takes to print a single node, the data from a single node, right?","width":576},{"text":"I also know that the time it takes a list of nodes of size 0, or the NULL case, is ","width":512},{"text":"some constant amount","width":52},{"text":"Kay?","width":64},{"text":"Alright","width":128},{"text":"So there is our first recurrence","width":200},{"text":"Ohhhhh","width":64},{"text":"Raise your hand if you did not take CS173 or a discrete, if you're doing this without the ","width":704},{"text":"discrete prerequisite. ","width":64},{"text":"No, you don't have to raise your hand. ","width":10},{"text":"If this is unfamiliar to you, find a friend. Kay?","width":192},{"text":"Because this is...this is part of the prerequisite of the course","width":384},{"text":"Okay! So one of your friends who has already done this, what is the solution to this recurrence?","width":448},{"text":"What's the solution to this recurrence?","width":192},{"text":"T(n) equals","width":128},{"text":"I think it's n times c plus d, yeah?","width":384},{"text":"Yeah, alright!","width":192},{"text":"n times c plus d","width":320},{"text":"I don't know about you, I don't know about you, but this back to algebra one ","width":384},{"text":"Where","width":64},{"text":"y equals m x plus b","width":384},{"text":"Alright? f of x equals","width":256},{"text":"m x plus b","width":128},{"text":"What is this thing?","width":128},{"text":"It's a line","width":64},{"text":"Right?","width":128},{"text":"And in fact, if we can express the running time of a function in these, in this line","width":364},{"text":"We call it linear","width":128},{"text":"So the running time is linear","width":192},{"text":"In the size of the data","width":192},{"text":"And in big O terms we express it as big O of n","width":454},{"text":"And we'll talk more about the definition of big O later","width":256},{"text":"but suffice to say that it also is prerequisite","width":192},{"text":"from 173","width":120},{"text":"Okay, any questions about that?","width":131},{"text":"You doing good, yeah?","width":274},{"text":"Oh boy","width":192},{"text":"I'm not in jogging shoes today","width":256},{"text":"","width":320},{"text":"","width":10},{"text":"Ahhh, so the question is.. oh this is excellent discussion. Let's talk about this code a little bit","width":397},{"text":"So he's really worried","width":64},{"text":"about...he thinks that base case should be","width":320},{"text":"curr next","width":64},{"text":"not equal NULL","width":128},{"text":"right?","width":64},{"text":"okay","width":64},{"text":"But here's the thing","width":256}],
  [{"text":"I said we said an empty list","width":279},{"text":"is our base case, right?","width":133},{"text":"And the only the empty list is the case where curr is equal to null,","width":354},{"text":"so the alternative case is that it is not equal to null.","width":246},{"text":"The general case is that it's not equal to null.","width":154},{"text":"So the list of length one","width":128},{"text":"is not the base case here.","width":159},{"text":"Even though, yes, it's true,","width":175},{"text":"even though yes its true the reverse of the list of length one","width":240},{"text":"is, you know, the list itself","width":192},{"text":"If I pull that off","width":128},{"text":"then I have to have two base cases,","width":159},{"text":"because if I'm allowing an empty list","width":161},{"text":"then I better handle it in the code.","width":140},{"text":"Right? Does that makes sense to you?","width":120},{"text":"Okay, so there something else I wanna ask.","width":254},{"text":"How do I know that this thing will not segfault?","width":275},{"text":"How do I know that this is okay,","width":167},{"text":"to call printReverse on the rest of the list, that there is a next,","width":278},{"text":"how do I know that?","width":255},{"text":"It's not null, thats right.","width":115},{"text":"We already checked as validation of the general case,","width":284},{"text":"the not base case,","width":128},{"text":"we already checked that it's not equal to null.","width":183},{"text":"Okay, so thats the sa-so dereferencing it is a safe thing to do.","width":280},{"text":"Alright, any other questions about this?","width":128},{"text":"Same with curr->data, you dont have to worry about dereferencing it","width":293},{"text":"Alright, uh, sorry for the scribbles and stuff there maybe the best thing","width":435},{"text":"the best thing for me to do is to go to the next slide. Okay.","width":421},{"text":"Alright, lets write this code too, really quickly.","width":230},{"text":"[pause]","width":337},{"text":"So this is going to end up being useful to us.","width":267},{"text":"This is going to end up being a useful function for us,","width":240},{"text":"because it turns out,Â ","width":98},{"text":"that walking around on these lists","width":169},{"text":"is a function that occurs anytime we're searching a list for anything.","width":320},{"text":"So the one that we're gonna want to write, the function that we're gonna write here","width":271},{"text":"is simply ","width":111},{"text":"given a position in the list, given a pointer to a position in the list","width":330},{"text":"walk k steps forward.","width":221},{"text":"Okay, walk k steps forward.","width":192},{"text":"Um, I'm gonna go ahead and write this code really quickly is that alright with you?","width":312},{"text":"Yeah? Okay.","width":108},{"text":"Let me get my notes so I don't screw it up.","width":246},{"text":"I dont have my notes I already lost them, I will screw it up -we'll screw it up together.","width":330},{"text":"Alright.","width":64},{"text":"[pause]","width":271},{"text":"So I'm trying to think how, okay,","width":128},{"text":"alright,","width":47},{"text":"so what is the ","width":128},{"text":"base case here?","width":128},{"text":"[pause]","width":256},{"text":"Yeah, k == 0, very good, or","width":226},{"text":"what if I called ","width":187},{"text":"find of, uh, on this list of 42","width":340},{"text":"[pause]","width":399},{"text":"Oh, and notice we're gonna return a pointer to the kth the node we get if we walk k steps.","width":474},{"text":"I should do this, look,","width":97},{"text":"this is how this works","width":89},{"text":"find on head","width":128},{"text":"pause","width":160},{"text":"of 3","width":128},{"text":"walks 3 steps,","width":128},{"text":"so theres 0 steps,","width":143},{"text":"1 steps,","width":82},{"text":"2 steps,","width":147},{"text":"3 steps,","width":74},{"text":"and returns","width":102},{"text":"that pointer.","width":80},{"text":"Okay so returns a pointer to that element.","width":295},{"text":"Okay, any question about it?","width":222},{"text":"Okay","width":128},{"text":"Walks three steps forward.","width":142},{"text":"Okay fine.","width":91},{"text":"So,","width":64},{"text":"I'm going to say","width":128},{"text":"if k is 0,","width":256},{"text":"or","width":64},{"text":"if curr","width":221},{"text":"is","width":64},{"text":"null,","width":185},{"text":"then I'm just gonna return my current position.","width":202},{"text":"And in the case where curr is null thats fine","width":192},{"text":"it's an indication that we have walked off the end.","width":192}],
  [{"text":"So that's either the current position that is when there are no more steps to be taken or it's an indication that we walked off","width":640},{"text":"Otherwise, it's the recursive case right?","width":256},{"text":"Otherwise, return the find of curr->next ","width":576},{"text":"and k minus 1","width":320},{"text":"You like it?","width":256},{"text":"Kind of boring.","width":256},{"text":"Why are we returning? Because I want a pointer to I mean I'm returning a pointer to I want to walk a pointer down k spaces in the list","width":896},{"text":"Because this one is going to return something","width":448},{"text":"Wait before you leave","width":128},{"text":"What's the running time for finding the kth thing in an array?","width":448},{"text":"What's the running time for finding the kth thing in an array?","width":384},{"text":"Right","width":128},{"text":"That is array sub k","width":256},{"text":"That's constant time","width":192},{"text":"Random access memory allows you constant time access to a particular place","width":448},{"text":"So that's a problem.","width":320},{"text":"Yeah","width":704},{"text":"","width":1216}],
  [],
  [{"text":"Ok","width":7360},{"text":"Alright, let's work","width":64},{"text":"I am both proud of you and dissapoint of you today","width":320},{"text":"I am proud of you for coming here","width":192},{"text":"But I am just a little-tiny-tiny-bit dissapointed in you for coming here giving how beautiful it is out side","width":384},{"text":"So","width":320},{"text":"I am pretty sure...","width":128},{"text":"I know I know I know I know I know I know thank you for coming here I understand how It might have been difficult to walk over here and like come in the doors.","width":576},{"text":"Like, I can't see outside so emm, my, eh, my admonishment to you is to find a way some time today","width":576},{"text":"To breath these breezes, look at some trees, play some frisby with some friends","width":384},{"text":"Skip some other classes","width":137},{"text":"Oh....","width":256},{"text":"Ok ok so the out side","width":256},{"text":"Emmm, alright, so here we are, yet here we are","width":320},{"text":"We have an exam coming up, if you have an academic conflict or you think you would like to convince us that your alternative conflict is worth discussing.","width":798},{"text":"Is something we should discuss, which I don't mean to trivilize it, no I shouldn't say it like that ","width":384},{"text":"It's always worth discussing","width":128},{"text":"If you feel like you have a conflict with the final or with the midterm 1 please send an email to Terry","width":576},{"text":"Emmmm","width":128},{"text":"That's his email address","width":412},{"text":"and please send it from your U of I account so that he has your netID, or at least be sure to include your netID in the email at the very least.","width":640},{"text":"Umm, so that's with conflict requests","width":320},{"text":"On Friday I should have a clear picture of the review sessions that are avaliable to you.","width":832},{"text":"One of our course stuff people want to do a review session tonight","width":640},{"text":"Like, that, it's too early","width":192},{"text":"We will try to do that in weekend some time, and if we dont please request them on piazza and then","width":512},{"text":"We will feel guity at least for not doing that ","width":128},{"text":"Alright, I think that's all I have, MP3 out there is due Friday night","width":577},{"text":"The early part of it will be on the exam.","width":115},{"text":"So you will be responsible for the material in the first part of MP3 on your exam","width":384},{"text":"Tell me your name one more time I think I know it but I don't wanna embarrasse myself. ","width":256},{"text":"Ahhh, really? ","width":192},{"text":"Does it start with an A?","width":128},{"text":"What is it?","width":128},{"text":"??? Oh it's ???? and sorry","width":256},{"text":"I'm sorry","width":128},{"text":"You maybe embarressed by self, go ahead","width":388}],
  [{"text":"um, yeah, the auto grader will still, will run on 3.2 begin","width":256},{"text":"Um, yeah, the auto grader will still, will run on 3.2 beginning on the 26th. Ok?","width":256},{"text":"No, i don't think so, i don't know, I don't know what actually got put into the grading scripts, ok?","width":576},{"text":"Yeah, it'll run for a week before the final due date. Ok, let's see, where are we, should we work on linked list? I think we should, Um, so ","width":768},{"text":"Um, so we had created this structure, we created this structure here of memory that is chained together","width":448},{"text":"ok, and I want you to think for just a second about this as simply that, memory that is chained together. Because this","width":704},{"text":"Designation of this thing as a linked list is merely sort of our culture's way of describing memory ","width":512},{"text":"Memory that is chained together, cause we don't like to say memory that is chained together every last time. Ok? Now ","width":384},{"text":"When you say linkedlist, you are not necessarily implying a particular implementation of a ","width":704},{"text":"Of a list, no, I'm sorry, that's exactly wrong. When you say linkedlist, you are implying a particular implementation of a  ","width":512},{"text":"list of thing. Ok? And that particular implementation happens to be this sort of chained together ","width":512},{"text":"Um, chained together pieces of memory, nodes of memory. Ok, we wrote this code","width":576},{"text":"last time, we wrote this code last time, and um it works like this, it works like this","width":640},{"text":"if I have a set of memory that is all chained together and","width":512},{"text":"Um i designate the first thing as a variable called head, the very first memory address, as variable called  ","width":640},{"text":"head, and if I say find k ","width":576},{"text":"On head, for, um, i don't know, two","width":640},{"text":"steps, find the second one effectively. What this mean, what I intend for this to mean is  ","width":640},{"text":"please, function, return me the pointer that points, that effectively walks me forward, this ","width":576},{"text":"meant steps in the structure, ok? So, head curr in this instance, in this case begins here","width":640},{"text":"And the one that I'm going to return is the one that constant to walking to forward in the list. So  ","width":576},{"text":"There's the pointer to something after taking one step, there's the pointer to something taking two steps, it is this one that   ","width":512},{"text":"I want return in that function call. Any question about that? So it's sort of if your consider yourself be in the first walk forward two steps, yeah? ","width":576},{"text":"Um, so right now, he's asking I think about  where this code go, right?","width":960},{"text":"Ah ha, ah ha, yes, right, so um the, I'm gonna say it again","width":704},{"text":"That I'm gonna change the vocabulary just a little bit, ok, so if function like this is useful to you in ","width":640},{"text":"your, in your mp, where this is not a function in the globe scope, but it's rather a function inside the list class","width":640},{"text":"then it is true you have to declare it inside the list class. See you have to add that function's declaration to the list ","width":640},{"text":"class. And we'll actually see that later today when we do the same thing here. So it's pretty astute observation to see ","width":512},{"text":"that what we have here is a function in the global scope, rather than member function of some class, like a list class, ok? ","width":576},{"text":"Alright, last time we got far enough in this section to actually write down","width":704},{"text":"clearly we didn't, for find K. Maybe we didn't get this far. I can't remember","width":448},{"text":"Here's what I want to know, I want to know what's the running time of this function. That's a general thing that I want to ask, a lot of time that's how I ask the question","width":640},{"text":"What it means is i want the asymptotic running time that means","width":768},{"text":"approximation on the running time for input of size, some parameter N, ok. So I'm gonna write that down ","width":512},{"text":"here, just because I don't ever want you mystified for it. So when I say running time","width":448},{"text":"when I ask for the running time, of a function, what I mean is the ","width":768}],
  [{"text":"asymptotic.","width":320},{"text":"asymptotic. that's not a p there.","width":256},{"text":"running time. that's in terms of big-O","width":256},{"text":"on a structure of size","width":512},{"text":"and now again I could write anything I want here. I could write k. I'm going to write n to differneitate it from k","width":832},{"text":"so I want. not asymptomatic but asymptotic running time. asymptotic here means big-O. ok","width":768},{"text":"uh","width":64},{"text":"running time, we'll write a function for that","width":256},{"text":"on input of structure of size n. ok","width":320},{"text":"alright","width":351},{"text":"so","width":64},{"text":"that means in this case, I'm asking if my linkedlist has size that we parameterize by n. my chained together structure has n elements.","width":640},{"text":"","width":64},{"text":"my chained-together structure has n elements","width":69},{"text":"what's the very worst case for the running time of this thing could be?","width":256},{"text":"big-O of the worst case is","width":320},{"text":"we might have to look every element, right.","width":384},{"text":"we might have to look at every element and so the analysis","width":384},{"text":"the running time is big-O n. ok","width":192},{"text":"O(n). you want to talk about that more or is it ok?","width":128},{"text":"the way to think about it is \"how much work do you do at every node?\" at every node, how much work do you do? well","width":556},{"text":"well, I look at it. and I evaluate whether or not I'm done and k is equal to 0.Â look at it and evaluate whether k is 0.Â look at it and evaluate whether k is 0. ","width":1152},{"text":"that's the same every time. there's no iteration or exploration at each node","width":320},{"text":"so each node is just a constant amount of work for all the elements is c times n","width":576},{"text":"ok. too much talking... it's too much talking","width":384},{"text":"raise your hand if you're kind of worried about k in this. you're a little bit worried about k. you're not worried about k at all?","width":320},{"text":"ok. alright. so k is. k is a particular input to the problem","width":704},{"text":"the very worst k that somebody could give you is no worse than n","width":320},{"text":"because this thing is going to bottom out at when uhhhhhhh current is equal to null","width":576},{"text":"it's going to stop at the end of the list","width":128},{"text":"so even though k could be 593,000,000 or a two element list, this thing is not going to run that far","width":640},{"text":"so it's bounded by n. n is the worst thing we need to consider","width":384},{"text":"ok. alright. uhhhh","width":128},{"text":"let's see. how long does it take to find the kth thing in an array?","width":384},{"text":"constant time","width":64},{"text":"we say it's constant time.","width":192},{"text":"and that's was random-access memory gets us","width":256},{"text":"that's what letting the computer figure out the memory address for our data does for us","width":512},{"text":"alright. I'm tired of this slide. let's move on","width":256},{"text":"it's a big moment. it's a big moment because we're going to look at our first abstract date type. ok","width":640},{"text":"now, the rest of this class is going to be the rest of this course is going to be an exploration of a sequence of abstract data types","width":768},{"text":"now, what is an adt? it's simply a description of the functionality of a data structure","width":6},{"text":"a description of the functionality","width":448}],
  [{"text":"of a data structure. And data structure is a little bit loosely used here, but its okay, You'll let me get away with it.","width":768},{"text":"Alright, so the first abstract data type that we are going to talk about is, dun dun dun, a list.","width":384},{"text":"Now, this is an abstract notion of a list. This is a list like your to do list for today which includes playing Frisbee outside.","width":768},{"text":"And doing your homework and studying for your exam and working and uh, I'm sorry for the stress of your lives.","width":668},{"text":"Alright, so this abstract notion of a list includes your list of things to do today, it includes your list of favorite movies, it includes, I don't know, your contact list, it includes any list that you might want to keep track of data in some ordered fashion.","width":1482},{"text":"Any question about that? Grocery list, the list of classes you go to, any collection of things where you care about their positions.","width":768},{"text":"Now, heres the cool thing about the abstract data type for the list class, and in fact for any abstract data type that we will study. C++ puts the abstract data type into the class definition, the public section of the class definition.","width":1280},{"text":"So, the cool thing is, if I asked you about the functionality of your general notion of a list, you could point to the header file, point to the class definition contained in the header file and say look, I can create you a list, that's part of its functionality, I can tell you the size of the list, you can insert new things into it in a particular spot, you can remove things from a particular spot, and you can return the data contained in a particular spot.","width":2496},{"text":"And that right there, this is the ADT for a general list. Operative word there is list. And the only reason i say general there is to distinguish it from what we thing of as a linked list.","width":1216},{"text":"This is not necessarily a linked list. Okay, notice that we can use this list, this abstract data type list, by simply looking at the public section for it, and I get to keep this secret. I don't have to tell you what data is associated with the list, i just have to promise you that i will fulfill that functionality.","width":1984},{"text":"that I will implement that abstract data type. Okay? Alright, so fine, lets get a feel for what these lists are by walking through a little bit of client code, designed to illustrate the fact that we can be functional without having to know about the implementation.","width":1280},{"text":"So the first thing we do is we initialize the thing, it is a list containing integers, that's good. And now I'm just going to use it. I'm going to insert into the first position number 4. Here is my list.","width":1280},{"text":"I'm just going to put it right here. I'm just going to put my list right here, the front of the list is on this side.","width":503},{"text":"And now I'm going to insert into the first position number 6 and now where is 4? The second position, right? You are moving things down. It's sort of like you have a list of favorite movies and you see a better movie, its not like your previous best movie disappears, rather it moves to your second best movie. And that's just how a list class is supposed to function.","width":1984},{"text":"And now I'm going to insert 8 into the front of the list. Okay. Then I am going to insert into the third position, value 0.","width":903},{"text":"Okay, so I think i put it right here. Yes? And then I will insert into the fourth position, the get item number 2, so in the end it should look something like this. And it should be sort of opaque to you what actually happened in memory when scratching out and moving around happened. That's all encapsulated away.","width":2321},{"text":"Alright, and then I want to Cout the size, we better get 5 here. I want to remove the second thing. And then i want to get the third thing, so this should give us 6. Okay?","width":1143},{"text":"So this list is really an ordered collection of items. Ordered...","width":821}],
  [{"text":"Tell me what that implementation is? Is you have to describe that implementation, what would you say? ","width":384},{"text":"It's an array, good. I even drew a little picture for you. Got any problems with that array?","width":576},{"text":"It can't get any bigger that's right. It's a static array and you know what? That one even won't hold your to-do list.","width":512},{"text":"Probably. It would hold my grocery list but it would not hold your to-do list. It's too small. ","width":320},{"text":"So this thing is a, the more appropriate name for it would be a short list. ","width":640},{"text":"Or a tiny list or something like that.Â ","width":128},{"text":"Okay, what is meant by size here is the actual number of elements in the list. The number of valid things in the list. ","width":704},{"text":"So what this implementation does is it sets up a potential slot but then it's intention is to, you know, put the first thing here, the second thing here, and ect..","width":832},{"text":"I'll go ahead and use your zero if you like, okay? ","width":192},{"text":"And that's the implementation. Any questions about it? ","width":320},{"text":"So notice what I'm neglecting here. I'm neglecting kind of what to do about the fact that some lists are longer. ","width":768},{"text":"We are gonna handle that in a couple different ways over the course of the next week or so. ","width":320},{"text":"But we that said, I want to talk about a little bit of a technical detail even if we used an array to implement an ordered collection of things. ","width":896},{"text":"Try to ignore for the moment the fact that this is a fixed size. We are still gonna look at the use of an array of any kind assume it's big enough in this context. ","width":640},{"text":"","width":960},{"text":"Oh because I made these an abstract base class. ","width":576},{"text":"Oh you know what I don't know what happens if you templatized type is in an abstract base class. I would have to think about that. ","width":640},{"text":"So it won't compile unless it","width":320},{"text":"So it could be an abstract base class. But that's tangling up in here templates, in a way that there are a hundred different ways of doing that and so it gets kind of ","width":1024},{"text":"Like you'd want to look at particular compilation procedures for handling that. ","width":320},{"text":"So I think you have a clear picture in your mind and I probably don't have it in mine. But it suffices to say it would be more complex. ","width":704},{"text":"But we are allowing for any old type here, so you can put any type here","width":448},{"text":"I can't go there right now","width":320},{"text":"Alright, we are we though? Let's talk about use of arrays for implementing lists in general","width":832},{"text":"Don't look at this code, but I want to talk about what it is. ","width":384},{"text":"So our process is that we need to be able to insert into a particular position in a list, and we need to be able to remove from a particular position in a list.","width":768},{"text":"Alright, I'm going to pretend that we actually.Well no I'm not gonna pretend anything. ","width":512},{"text":"Alright, I want to say insert into position 1, item I don't know. Let's put integers in because I'm not creative. ","width":896},{"text":"I wanna insert into position 1 value 3, where should I put it? ","width":320},{"text":"Zero that's fine. I'll do that. Now I want to insert into position 1 again value 4. Where should I put it?","width":704},{"text":"","width":64},{"text":"","width":512},{"text":"Position 0, okay. What should I do with the 3? Move it over. Okay okay. You are saying open up a hole for 4 and put it in right? So the 3 has to come over here ","width":960},{"text":"and the 4 goes here, yes?","width":256},{"text":"Okay, pretend that I do this a few times. Okay I'm gonna insert to postion 3 an 11, I'm gonna insert into position 4 a 5, I'm gonna insert into postion 6 a 9","width":896},{"text":"and now dot dot dot ","width":128},{"text":"I'm going to insert into position 1 a heart","width":384},{"text":"how do I do that?","width":256},{"text":"","width":192},{"text":"How do I do it?","width":192}],
  [{"text":"How is this one implemented?","width":64.4},{"text":"If you have to describe this implementation, how would you describe it?","width":320.4},{"text":"Somebody raise your hand and speak for the crowd, yes?","width":455.4},{"text":"It's a linked list, very good.","width":128.4},{"text":"Chained memory put together we are using it now to implement my List class.","width":320.4},{"text":"Is there anything special about it?","width":192.4},{"text":"Yes?","width":64.4},{"text":"Yeah, it's not like MP3. We do not have previous pointers here.","width":320.4},{"text":"A typical way of describing this you might have seen in your earlier class is a singly linked list.","width":576.4},{"text":" Okay, we will refer to this as a singly linked list implementation of a ADT List.","width":640.4},{"text":"Ok? Alright. Let's see what we have then.","width":192.4},{"text":"We have a way of holding on to the front of it.","width":256.4},{"text":"A number of element that it includes.","width":192.4},{"text":"This little Find function that we are going to find helpful; that will be helpful to us.","width":576.4},{"text":"Okay, and here is the implementation.","width":192.4},{"text":"Guess I changed the variable name but otherwise, lol, Ohhhhhh..","width":384.4},{"text":"Wow.. Okay, do you all see my little bug?","width":256.4},{"text":"The compiler will help me so I don't even feel guilty about it. But you see my little bug here?","width":320.4},{"text":"These things are... in the wrong order, you can handle that one.","width":512.4},{"text":"And then we have this class defined...","width":320.4},{"text":"I was thinking about this last night and I think I should've been explicit.","width":256.4},{"text":"When I demanded that our base cases been NULL, I should have actually assure you that we intended to have a no-argument constructor for the listNode class.","width":1024.4},{"text":"Okay? I should've assured you of that.","width":128.4},{"text":" Alright! So this is an implementation of the List class together with one helpful helper function.","width":768.4},{"text":"Now, I have a question for you that I don't know if you can answer yet.","width":320.4},{"text":"But I want you to think about it.","width":64.4},{"text":"OK?","width":64.4},{"text":"We put this helper function in the private section of the List class definition.","width":576.4},{"text":"The question is why?","width":256.4},{"text":"Why is Find in the private section of the List class definition.","width":448.4},{"text":"Find is in private, why?","width":512.4},{"text":"I am gonna point to something that might help you.","width":896.4},{"text":"Yeah?","width":448.4},{"text":"Right, so we don't want the user to know the implementation and look, this Find function completely betrays..","width":704.4},{"text":"Well, actually it only halfway betrays our implementation, right?","width":320.4},{"text":"It shows them, oh bud, you got a pointer-based structure.","width":320.4},{"text":"And you know, built of nodes, and furthermore, the way we have this set up, they can't access it.","width":832.4},{"text":"Why? Because look, listNode is also private.","width":192.4},{"text":"So this listNode class right here that is so important to navigating our implementation of List.","width":768.4},{"text":"It isn't even useful to client. ","width":256.4},{"text":"Right? but that's OK, they don't need it.","width":192.4},{"text":"They only need to know positions inside the list.","width":192.4},{"text":"Alright? any question about that ?","width":192.4},{"text":"So why is Find private? The answer is because it relies on the details of the implementation for its functionality.","width":768.4},{"text":"And that implementation is hidden away.","width":128.4},{"text":"from client.","width":64.4},{"text":"Alright. Anything else? Any questions about this?","width":192.4},{"text":"Ok, let's see if there is anything else I want to say on this page. Hold on...","width":448.4}],
  [{"text":"ok.","width":128},{"text":"alright","width":128},{"text":"let's write some more code. we can write this together","width":192},{"text":"alright. so umm if you notice","width":128},{"text":"one of the functions here is insert()","width":192},{"text":"um","width":64},{"text":"I want us to implement insert()","width":192},{"text":"ok.","width":64},{"text":"and that's what this slide is for","width":128},{"text":"I want you to write an implementation of insert()","width":256},{"text":"into the list","width":128},{"text":"now notice this is the interface for insert()","width":256},{"text":"this is the connection between the code that the client writes. they write insert()","width":320},{"text":"into position a value","width":256},{"text":"and then you're going to take that function call and actually put things into the linked list","width":384},{"text":"ok","width":64},{"text":"so go ahead and write this code really quickly. I will write parts of it too","width":384},{"text":"I'll write parts of it as well","width":256},{"text":"and I'll remind you we know how to create new list nodes","width":320},{"text":"because we did it last time","width":128},{"text":"so...","width":128},{"text":"let's see","width":64},{"text":"what I'm going to do is ummmm","width":384},{"text":"list node pointer new node","width":384},{"text":"equals new","width":256},{"text":"listnode e","width":192},{"text":"I'm going to","width":704},{"text":"find starts here","width":512},{"text":"maybe I should just talk aloud","width":128},{"text":"do you want me to just talk aloud","width":128},{"text":"alright sorry","width":128},{"text":"alright so what's going to be my process","width":192},{"text":"let's say somebody says insert into position 2","width":192},{"text":"ummm","width":64},{"text":"value","width":64},{"text":"oh. we have to have an integer 8","width":256},{"text":"ok","width":64},{"text":"insert into position 2 value 8","width":192},{"text":"now what do they mean by 2","width":128},{"text":"tell me when to stop when I'm underneath the position that it should be inserted","width":320},{"text":"ok. yeah, right","width":227},{"text":"they intend in the end that 8 will be between 3 and 6","width":256},{"text":"so that means that what we're going to want to see is an 8 here","width":256},{"text":"pointed to 6 and then this goes here","width":256},{"text":"alright","width":64},{"text":"alright","width":64},{"text":"now","width":64},{"text":"this would be easy if only we had a particular pointer.","width":512},{"text":"which pointer do we want. which pointer would make this easy?","width":192},{"text":"I'm changing this to 3. I'm sorry","width":128},{"text":"I need to not, like, ermmmmm. sorry","width":256},{"text":"changing this to 3","width":64},{"text":"ummm","width":64},{"text":"so that all of that discussion led up to here instead","width":192},{"text":"makes it more interesting","width":128},{"text":"k","width":64},{"text":"now","width":64},{"text":"where do you wish we had a pointer","width":192},{"text":"k this is what we want it to look like","width":192},{"text":"where do you wish we had a pointer?","width":128},{"text":"ok","width":64},{"text":"yeah, you wish you had that pointer. right?","width":192},{"text":"like ooooh how do we get that pointer","width":320},{"text":"?","width":64},{"text":"how do we get it. how do get a pointer to that place","width":256},{"text":"find!","width":128},{"text":"right. find will help us walk down the list.","width":256},{"text":"ok","width":64},{"text":"ok","width":64},{"text":"find()","width":64},{"text":"uh. we're going to find how many steps from head","width":320},{"text":"how many steps do we want to take","width":256},{"text":"location minus","width":704},{"text":"I started with 3 here","width":64},{"text":"how many steps do I want to take?","width":256},{"text":"I want to take one step.","width":320},{"text":"I started with 3","width":128},{"text":"so it's actually minus 2","width":64},{"text":"yes it is","width":192},{"text":"Noooooooooooo!!!!!!","width":256},{"text":"so that's the combined effect of you want a pointer to the thing before together with our list","width":448},{"text":"you know we're counting this thing by 0 steps","width":192},{"text":"by steps","width":64},{"text":"by the number of steps","width":128},{"text":"and you want it to the thing before","width":128},{"text":"ok","width":64},{"text":"alright","width":128},{"text":"so I want to go loc minus 2","width":128},{"text":"and then","width":128},{"text":"oh and I need to grab that thing","width":128},{"text":"oh my gosh what I mess","width":128},{"text":"I'm going to call this","width":128},{"text":"oh I can't call it curr","width":128},{"text":"how would you like to hold on to it. um temp ok","width":256},{"text":"temp equals this guy","width":128},{"text":"so now this is temp","width":64},{"text":"alright","width":192},{"text":"I am so sorry guys","width":128},{"text":"tmp uhhhhhhhh let's see","width":192},{"text":"I can do temp ahahahah","width":256},{"text":"I'm going to do this in canonical order.","width":192},{"text":"new node next","width":64},{"text":"equals temp next","width":320},{"text":"yeah","width":64},{"text":"right. is that true?","width":256},{"text":"that the right thing to say?","width":128},{"text":"ok","width":64},{"text":"and then....","width":128},{"text":"tmp equals tmp next","width":256},{"text":"ummmmmm. equals","width":192}],
  [{"text":"Where's temp next? It's this one right? Where do I want it to be pointing?","width":501},{"text":"To my new node, Good. Good Good Good","width":384},{"text":"Alright. You happy with it? Yes? Very Good! Exactly! This code's a mess!","width":384},{"text":"It doesn't even work if we want to insert in the first position, but we have a function that inserts in the first position.","width":512},{"text":"So, if location is one ( if loc == 1) insert at front(e)","width":832},{"text":"else do all of this.","width":320},{"text":"okay, and then... then we know that thing will never be 1, we already know it won't be 0 because 0 has no meaning.","width":448},{"text":"We know it won't be 1 because that's a different case, and so in the worst case it will be 2, right?","width":768},{"text":"This code will go if we're inserting into position 2 and the number of steps we walk forward will be 0 and this code is fine.","width":448},{"text":"Okay, do you like it? I don't like this code. Okay?","width":384},{"text":"I don't like this code because it makes a special case out of something that's the same as everything else? Right?","width":768},{"text":"It made a special case out of inserting in the front of the list, and I think we can write code that avoids that.","width":448},{"text":"So, let's work on that.","width":256},{"text":"Here's what we're going to do... we're going to redefine our implementation of an empty list, okay?","width":640},{"text":"So we're going to redefine... geez","width":256},{"text":"*Pause*","width":1088},{"text":"What we're gonna do is we're gonna say an empty list is a single node.","width":384},{"text":"Followed by the rest of our list. Okay? This single node and then yes...","width":704},{"text":"empty list is a single node, all other lists are this single node followed by our data.","width":512},{"text":"This node, this auxiliary node, that we place in the structure is called a sentinel node.","width":448},{"text":"This is a sentinel node.","width":320},{"text":"*Pause*","width":320},{"text":"This is a sentinel node...","width":448},{"text":"Thank you","width":128},{"text":"And, look what it does for us. So the empty list has a sentinel node; all lists have this sentinel node in front of this. Look what it does for us.","width":640},{"text":"No matter where we insert into the structure, we're always going to be after a list node, right?","width":640},{"text":"If we insert into the first place in the list, it's going to be after the sentinel node. ","width":448},{"text":"If we insert into the second place, the third place, etc. and so we remove this special case of not being able to grab the pointer before because every node that we insert will have a pointer before. Okay?","width":1088},{"text":"Any questions about that? That means that the code we write to actually insert this thing looks more like this.","width":576},{"text":"This is no special case because we've created an invariant situation where we're always inserting between two nodes even though at the front of the list that node is kinda meaningless.","width":768},{"text":"Okay, any question about it? Yeah?","width":384},{"text":"*Pause*","width":192},{"text":"So that would have to be handled via error handling.","width":512},{"text":"Right? We're not talking about that, we're assuming the user is going to honor our abstract data type which says it starts at 1.","width":448},{"text":"Okay, so how do we make this happen? How do we create an empty list with a sentinel node in it?","width":384},{"text":"In the constructor! That's right. Your opportunity to shape memory upon declaration is in the constructor. So this is where we'll start next time.","width":704},{"text":"Oh my gosh...","width":576},{"text":"*End of recording*","width":704},{"text":"*very end*","width":3200}],
  [{"text":"okay","width":5760},{"text":"so i mess that today, and here is what I need","width":384},{"text":"I think in this room here's the collector, that my problem is going to be solzed ","width":576},{"text":"there is collective expertise ","width":64},{"text":"I need to know if I can get a PDF on my surface pro. will, first of all, how to download, because I cannot see how to do that","width":1088},{"text":"and second of all, how I can put it some place so I can annotate PDF for the lecture. Is there simple way to do this? I apologize, I forgot to upload to PowerPoint. I dont have the powerpoint document.","width":704},{"text":"I have one node ","width":128},{"text":"who is talking to me","width":128},{"text":" do you know how to solve my prob","width":192},{"text":"not only that","width":128},{"text":"I can barely ","width":192},{"text":"okay","width":192},{"text":"these are the slides in PDF form","width":256},{"text":"I usually do it ppt","width":192},{"text":"I dont know how to do","width":192},{"text":"okay I will wait for it","width":512}],
  [{"text":"ummm","width":64},{"text":"that was little break because it's friday.","width":256},{"text":"how about that","width":64},{"text":"I owe you 5 minutes in your life","width":128},{"text":"sorry","width":64},{"text":"umm","width":64},{"text":"let's see","width":64},{"text":"so I have a new announcement related to the exam","width":192},{"text":"there's going to be a review session","width":192},{"text":"umm","width":64},{"text":"on","width":64},{"text":"saturday from 11 to 12:30","width":128},{"text":"we don't have the room for that yet but we'll be announcing the room saturday","width":384},{"text":"as in tomorrow","width":64},{"text":"but we'll be announce the room on the piazza so","width":256},{"text":"ummm","width":64},{"text":"ah","width":64},{"text":"go to the piazza to find out exactly where it is","width":256},{"text":"so let me write it down. ooohh that's pretty","width":192},{"text":"oh man","width":128},{"text":"getting old sucks","width":448},{"text":"ok","width":365},{"text":"so the review","width":256},{"text":"is","width":64},{"text":"11 to 12:30 o","width":128},{"text":"umm","width":192},{"text":"11 am to 12:30pm","width":64},{"text":"saturday","width":128},{"text":"and that is tomorrow","width":128},{"text":"room","width":192},{"text":"tba","width":128},{"text":"on piazza","width":128},{"text":"and the plan is to do the spring 14","width":448},{"text":"exam","width":64},{"text":"k. so they'll be","width":256},{"text":"ummm","width":64},{"text":"they'll be going over the spring 14 exam","width":256},{"text":"we may have additional","width":128},{"text":"yes","width":64},{"text":"ummmm","width":320},{"text":"it depends on what room it's in. so I will automatically ask for video tape of it. but it depends what room they put it in","width":576},{"text":"so I hope though um","width":128},{"text":"ah if not, you know","width":256},{"text":"the collective intelligence","width":192},{"text":"you know its","width":64},{"text":"you know you guys can recreate that sort of review experience by getting together with other people to study","width":384},{"text":"you know like","width":128},{"text":"that sort of transitive","width":64},{"text":"what they said at the review session was this. and I think that's actually a great way to study because it's good for you and the person who is telling you the stuff ummm so","width":704},{"text":"any other questions about this?","width":128},{"text":"alright. we'll keep you posted","width":128},{"text":"the exam still feels like a long way away to me so I apologize for not having a whole list yet","width":384},{"text":"seems like we've got a lot of time still","width":192},{"text":"ok","width":64},{"text":"ah the extra credit is due tonight","width":320},{"text":"how was the queue last night?","width":128},{"text":"little dicey, right?","width":192},{"text":"I think I heard that there were quite a few people on the queue last night","width":384},{"text":"maybe right after class today you might want to go maybe a good time","width":320},{"text":"ok","width":64},{"text":"so I ended last time kind of in a hurry","width":384},{"text":"and I wanted to revisit","width":128},{"text":"some of the uhhhhh very last closing thoughts from last time because","width":320},{"text":"i wanted it to be clear","width":128},{"text":"ok","width":64},{"text":"so here's the story.","width":192},{"text":"here's what we were trying to implement","width":64},{"text":"we have this chained-together memeory","width":448},{"text":"that we use as an implementation option for an adt","width":320},{"text":"now","width":64},{"text":"this adt allowed us to insert things into particular locations","width":384},{"text":"the application that you should think of I think","width":256},{"text":"or a reasonable application is like","width":192},{"text":"suppose you have a list of your ten favorite movies","width":192},{"text":"your top 10 favorite movies","width":128},{"text":"there they are","width":64},{"text":"and then you see","width":128},{"text":"minions","width":256},{"text":"they you see minions","width":128},{"text":"ok","width":64},{"text":"then you see minions","width":128},{"text":"well, you might need to change your list","width":256},{"text":"right","width":64},{"text":"so ","width":64},{"text":"at the number 3 stop, probably","width":192},{"text":"because minions is not better than prince's bride","width":192},{"text":"or","width":64},{"text":"idk what's your favorite movie?","width":192},{"text":"or back to the future","width":128},{"text":"ok","width":64},{"text":"so in the 3rd spot. you need to make space","width":256},{"text":"for minions and that means sliding everything else down","width":128},{"text":"this is the list adt","width":192},{"text":"that we are intending to implement","width":128},{"text":"ok","width":64},{"text":"any question about that","width":128},{"text":"now","width":64},{"text":"it's not some clasic data structure","width":256},{"text":"ok","width":64},{"text":"it is a this is a adt","width":192},{"text":"that we're sorting crafting for instructional purposes","width":320},{"text":"there are equivalent or there are similar ones","width":320},{"text":"but there is no sort of unified language around this particular umm adt","width":320},{"text":"ok","width":128},{"text":"now","width":64},{"text":"furthermore we were talking about implementing this insert function","width":384},{"text":"insert into the location into a particular location","width":320},{"text":"ok","width":64},{"text":"now think about what is necessary for that to happen","width":192},{"text":"you need a position and a data element that you're putting into uh the list say of movies","width":448},{"text":"ok","width":64},{"text":"that's the interface. that's what calls this function","width":192},{"text":"or what this function is called with um","width":192},{"text":"I have a question for you before we even talk about details here","width":256},{"text":"is insert() in the public or private section of the list class?","width":448},{"text":"definition","width":2175},{"text":"is it in the public or private section","width":128},{"text":"and when you answer. when you raise your hand to answer, I'm going to have a follow-up question","width":256},{"text":"so raise your hand and answer","width":192},{"text":"somebody raise their hand to volunteer","width":128},{"text":"yes","width":64},{"text":"it's in public","width":64},{"text":"how did you know","width":64},{"text":"what did you check","width":64}],
  [{"text":"So there is a little location zero right?. I cannot say to you. I canno say to you. ","width":396},{"text":"So I am gonna take it around the ben. ","width":343},{"text":"So first in principle there is no location zero .","width":199},{"text":"You don't ever say what's your zerothÂ ","width":145},{"text":"favorite movie. ","width":51},{"text":"ok?","width":53},{"text":"So from the client side of things, there is no location 0. But from the implementation side of things ","width":462},{"text":"If it helps you. If it gives you peace to think of that as Â location 0. Perfectly reasonable to do so . ","width":462},{"text":"Â That's a perfectly reasonable way of thinking about it. ","width":156},{"text":"Yes.[question asked]","width":128},{"text":"[asking questions ]","width":118},{"text":"YesÂ ","width":489},{"text":"Ummm.","width":183},{"text":"So location is passed in. ","width":113},{"text":"So remember that the parameter for find is the number of steps you walk forward . ","width":280},{"text":"Right? That is what it means. ","width":128},{"text":"It happens to be a function of the location asked for but itÂ ","width":233},{"text":"right,yup,zero steps[answering question]","width":259},{"text":"ok.","width":42},{"text":"How we doing. Is it better. I felt really bad last time. It's like ahhh...","width":344},{"text":"And then I got 6 so it's like no no I am not gonna be able to make it better .","width":281},{"text":"Is it better. Oh, yeah.Ok. Thank you. You speak for the crowd. ","width":370},{"text":"Ok. ","width":64},{"text":"Alright, any other questions. ","width":148},{"text":"So, so this is kinda fun.This is kinda fun","width":240},{"text":"So here is waht I know about you guys . You guys are here after having taken an introductory class ","width":456},{"text":"which means you are in command of the basic structures, like iteractions and conditionals ","width":435},{"text":"And variables and arrays and functionsÂ ","width":141},{"text":"You are in commoned of those things ","width":138},{"text":"But it is unlikely that you have in your experience had Â an opportunity to think creatively aboutÂ ","width":398},{"text":"how you use memory ","width":128},{"text":"and so this is sort of the first opportunity Â where you can kind of use memory to your advantage. ","width":482},{"text":"Now am I worried about this amount of memory that we used here? It is a little expansive how much do we pay?","width":371},{"text":"for this additional list node?The answer is no. Â I am not worried about it at all. Ok ? ","width":320},{"text":"But it's a reasonable question. And [answering questions ]","width":800},{"text":"So, Â this implementation the list has no tail pointer. This is a singly linked list .","width":470},{"text":"But if it's Â a doubly linked list Â you are gonna initialize the tail to point to the tail. In fact . ","width":438},{"text":"Alright,Let's have this conversation. Let's throw it down right now. ","width":299},{"text":"Alright,so what does an empty doubly linked list look like? ","width":231},{"text":"I think it looks like this, ","width":320},{"text":"Here is head. Here is tail. Umm...The next of head and the previous of ...oh I did this wrong ","width":579},{"text":"Ok?","width":76},{"text":"The next of head and previous of tail point to each other, ok ? ","width":299},{"text":"So I think that's an empty doubly linked list if you are using sentinels","width":320},{"text":"Ok","width":47},{"text":"Now, I really feel bad that mp3, every semester , every single semester. I say we should change mp3 to use sentinels and","width":544},{"text":"Course staff goes, no no no no. They should have to do this. ","width":320},{"text":"So I am on your side on this one. I never ever throw course staff under the bus but this time ....","width":704},{"text":"Yeah?[answering question ]","width":241},{"text":"So our implementation of the list class already doesn't use sentinels. ","width":326},{"text":"Ok? Our constructors don't create sentinels for you. ","width":225},{"text":"So I am sorry this one is not my fault. Just kidding, I am kidding ","width":336},{"text":"I don't even know we had that conversation recently .","width":192},{"text":"Hey  shaw we work on sth new?","width":64},{"text":"ok...","width":192},{"text":"I got another puzzle for you . ","width":320},{"text":"I have another puzzle for you. ","width":64},{"text":"Here is what I am gonna give you ok?","width":184},{"text":"We got some big linked list. We got some big linked list .","width":379},{"text":"Umm, that what's that little dot dot...you can use a a sentinel if you like in fact I think we need one. ","width":383},{"text":"Um, and I am going to point to the node that I want you to remove. So I am going to give you a ","width":586},{"text":"pointer explicitly to the node that i want you to remove. Ok? There it is. I want you to remove that node. ","width":512},{"text":"containing 7. ","width":128},{"text":"From this list ","width":192},{"text":"Ok?","width":234},{"text":"Remove the node containing 7 from this list now I am gonna let you vote. ","width":468},{"text":"Do you want a few minutes to struggle over the code yourself? ","width":269},{"text":"thereby kinda giving a you a testy sort of experience?","width":349},{"text":"Or do you want me talk over writing the code ","width":192},{"text":"Raise your hand if you want to. Umm... Do a little test review by wrting the code ","width":320},{"text":"Raise your hand high so I can see. ","width":169},{"text":"And raise you hand if you want me to talk aloud to do this?","width":287},{"text":"Alright. I am gonna give you guys a few minutes ","width":145},{"text":"To write this code. ","width":72},{"text":"And Then I will talk aloud. We are just never get through this semester. ","width":333},{"text":"Figure out this code. I think it is clear. ","width":221},{"text":"Ummm. You could call this guy head. ","width":256},{"text":"[ending]","width":640}],
  [{"text":"And it is a singly linked list","width":128},{"text":"I'm going to start writing here because I'm bored, so if you're really stuck feel free to follow along","width":3456},{"text":"Okay I wrote my code","width":5696},{"text":"Okay, so raise your hand if you wrote something similar","width":256},{"text":"Okay, good","width":128},{"text":"Okay, let's trace it really quickly, I'm going to give myself, effectively, a way of iterating down the list","width":512},{"text":"Okay, I'm not going to call it an iterator because that's a special word","width":320},{"text":"That we're going to learn about soon; but I'm going to give myself a way of iterating down the list","width":192},{"text":"It's called \"t\" and it's a list node pointer, okay? ","width":256},{"text":"Started at the beginning of the list, walking down to where? Where should I draw the pointer \"t\" after that while loop?","width":640},{"text":"Yeah, it should point to 2, right?","width":256},{"text":"So right there is where it is after the while loop","width":448},{"text":"And then I just, now that things are set up, all I have to do is fix up pointers","width":448},{"text":"I'm pretty sure all I need to do is this and then free up this space","width":448},{"text":"And sure enough, that's exactly what those two lines of code do","width":320},{"text":"Now, seems pretty clean to me","width":128},{"text":"Do you like this code?","width":128},{"text":"No. What don't you like about it - and there is a one word answer for this, starting with w","width":448},{"text":"While, that's right! Think about this","width":320},{"text":"I'm telling you exactly what node I want you to remove","width":256},{"text":"I tell you there it is, I point to it; and yet you have to incur the cost of starting at the front of the list and walking down the list","width":768},{"text":"All the way to the node that you might want to remove, even though I told you it to begin with, right?","width":576},{"text":"This is an expensive problem, this is an expensive proposition","width":320},{"text":"Okay","width":64},{"text":"So","width":64},{"text":"I'm going to show you a potential solution to this problem","width":448},{"text":"Okay, so first of all... what's the running time of this? ","width":704},{"text":"Linear of n, that's right","width":256},{"text":"So what would be better than linear? Constant time, that's right","width":256},{"text":"So I'm going to show you a constant time solution to this problem","width":256},{"text":"And then we'll talk about this choice of word in just a minute, okay?","width":448},{"text":"Alright, so suppose I give you this","width":384},{"text":"And I'm going to ask you a question","width":320},{"text":"I tell you I want to remove that node and then give you that pointer","width":384},{"text":"What node would be easy to remove?","width":384},{"text":"The next one, right?","width":512},{"text":"Oh, but then we'd lose some data... I wonder what we should do with that data","width":512},{"text":"Store where?","width":192},{"text":"Does anybody see it? Does anybody see this completely? Yes?","width":384},{"text":"Do you want to tell us","width":384}],
  [{"text":"d","width":431},{"text":"d","width":207},{"text":"Suggested","width":2048},{"text":"Delete the next node","width":882},{"text":"Write the code that does this. ","width":616},{"text":"I wanna grab hold of the next one","width":2184},{"text":"Put a handle on it.","width":1972},{"text":"Curr next is going to look at this and get that value. Make it more of a chain.","width":1984},{"text":"Data constant for this MP. We can't do stuff like this","width":5687},{"text":"Fix that problem by putting a sentinal there. Now imagine the constructor for that.","width":1152},{"text":"Copying around data uhh yuck","width":1216},{"text":"This should be ok functionally. It could be expensive.","width":1536},{"text":"This class could be expensive. ","width":704}],
  [{"text":"Oh, shoot, I forgot to tell you.","width":128.4},{"text":"You are wondering what the heck is given versus arbitrary.","width":256.4},{"text":"Okay, so the location is known, it is a fixed location.","width":384.4},{"text":"Like, k is equal to three, or something, the location is equal to three.","width":512.4},{"text":"This one is parameterized.","width":192.4},{"text":"So you allow the user to input whatever they like.","width":448.4},{"text":"For the location you gotta go find it.","width":320.4},{"text":"Okay, ready?","width":2880.4},{"text":"Should we talk?","width":64.4},{"text":"So where are the mistakes","width":192.4},{"text":"Where are the mistakes one this?","width":448.4},{"text":"So I guess I will start walking my pen down.","width":320.4},{"text":"Actually I'm gonna start walking my pen up from the bottom, OK?","width":192.4},{"text":"Alright, and you tell me when to stop when there is a mistake.","width":320.4},{"text":"Stop?","width":320.4},{"text":"OK?","width":64.4},{"text":"It doesn't cost you O(n) to shift in an array?","width":320.4},{"text":"Or which of these two is wrong?","width":192.4},{"text":"This one, OK?","width":128.4},{"text":"And why, why can we not do an insertion at any place in a List?","width":512.4},{"text":"'Cause you have to walk down the list right?","width":192.4},{"text":"You cannot just get to any position that you want in a list.","width":256.4},{"text":"So this is Big O of n to find here.","width":320.4},{"text":"Just like removal.","width":128.4},{"text":"Ok, fine?","width":64.4},{"text":"Any question about that?","width":128.4},{"text":"Alright, I'm gonna keep walking up.","width":192.4},{"text":"OK, remove at a given location is OK? Right?","width":320.4},{"text":"Insert at a given location?","width":256.4},{"text":"Which one is wrong?","width":384.4},{"text":"Yeah, this one is wrong because we still have to incur the shift to open up the location, the spot, the space.","width":896.4},{"text":"OK, fine?","width":64.4},{"text":"Should I keep walking up?","width":128.4},{"text":"Okay, so you are happy with these?","width":256.4},{"text":"No? ","width":192.4},{"text":"No, this is a fixed location; I know where it is.","width":512.4},{"text":"Right? Which one? Which one are we talking about?","width":448.4},{"text":"Who I talking to?","width":320.4},{"text":"I forgot (inaudible).","width":64.4},{"text":"Okay, do you see which one you asking about?","width":192.4},{"text":"Okay, alright.","width":128.4},{"text":"Anything else? Is it good?","width":128.4},{"text":"Really?","width":128.4},{"text":"Yeah?","width":64.4},{"text":"Ohhhhhhhhhhhhh. This guy right?","width":512.4},{"text":"This is the red herring. The reason I started at the bottom.","width":256.4},{"text":"I'll make this red. So this is a red herring .","width":320.4}],
  [{"text":"Raise your hand if that phrase isn't familiar to you. Ok, go look it up, this is a, this is a cultural ","width":576},{"text":"Moment for you, we are a inter cultural group here, ok, alright, it means it kind of it's","width":640},{"text":"led there to lead you astray effectively. Alright, so I know, I know that it's true that ","width":512},{"text":"you can come up with, bye, see you, have a great day","width":576},{"text":"I know you can come up with an implementation, they cost you O(n) to insert and remove in the front, using array","width":576},{"text":"to implement the list right? But, I also know that it's not very hard to come-up with ","width":576},{"text":"an implementation that allows for constant time, insertion and removal at the front of the list using an array. And we talked about","width":576},{"text":"it very briefly last time. And that is simply that we put the values","width":576},{"text":"backwards into the array. So the end of your list is here, and ","width":576},{"text":"your favorite movie of front of your list is here and you arranged them backwards, and the only thing you have to do  ","width":576},{"text":"to make that happen, so then inserting and removing is just matter of messing with what happens at the threshold","width":704},{"text":"inset, remove, no big deal, and maintaining  an index that keeps track of where that front is. Ok? ","width":512},{"text":"Any questions about that at all? There is a little bit of discussion to be that might not make you happy. Is it Okay? What is that ","width":576},{"text":"What is that to do with inserting and removing at the end?","width":320},{"text":"makes it expensive maybe we can keep track of where the end is. True right?","width":384},{"text":"what about making it the middle","width":64},{"text":"That I have no answer for. That one expensive. so for this particular example","width":640},{"text":"There is more kind of a clever way of looking at this I mean it doesn't require a whole lot. Fairly clever way of looking at this allows for a constant time max","width":640},{"text":"Ok, I'm gonna go ahead and start on the next stop, because the next slide is very introductory anyway. Look at you flip your paper","width":704},{"text":"Yay! We are closing the book on abstract data type list. ","width":576},{"text":"And here's the deal, here's what I want you, here's what I have want you have taken from experience. ","width":512},{"text":"I want you to have learn the vocabulary abstract data type. And i want you to have internalize","width":640},{"text":"this model of talking about specific implementation of an abstract data type. ","width":576},{"text":"So, you understand vocabulary of abstract data type and then we kind of had discussion of whether implemented using a list or an array ","width":576},{"text":"That's kind of how the rest of semester going to go. I'll introduce an abstract data type and sort of let you know ","width":576},{"text":"what functionality we want  to accomplish and then we will argue over implementation, ok? Now, our next abstract data ","width":576},{"text":"type is called a stack, and I guess it looks like we'll start that on Monday.","width":768}],
  [{"text":"[Video playing]","width":10934},{"text":"Oh my gosh. It's time to work. I am sorry.","width":389},{"text":"I don't...","width":60},{"text":"It drives me crazy.","width":357},{"text":"Ok","width":47},{"text":"hmm, let's work","width":177},{"text":"Back rows, is that better?","width":258},{"text":"Feel like that's better?","width":89},{"text":"OK","width":69},{"text":"Alright, hmm. See you will have an exam this week.","width":221},{"text":"On Wednesday.","width":158},{"text":"We're still writing it.","width":192},{"text":"You're still studying for it.","width":192},{"text":"Hmm...","width":72},{"text":"Classes cancelled on Wednesday here.","width":192},{"text":"But there will be your review session in this place.","width":192},{"text":"So officially you don't have to come.","width":156},{"text":"But you know, you don't have to be here today, either.","width":128},{"text":"but...","width":64},{"text":"Here you are.","width":116},{"text":"And, by that point, we sort of expected we will be answering last-minute type questions.","width":384},{"text":"We may be announcing another review session sometime tomorrow, but I'm meeting with course staff this afternoon or this evening.","width":640},{"text":"So, we will let you know to make sure to advertise any additional review sessions, publicly.","width":396},{"text":"","width":29},{"text":"Are there any questions about the exam, or the preparing for the exam, or?","width":355},{"text":"Yes?","width":46}],
  [{"text":"Umm either or the question is what will be the form. Oh you mean Wednesday what will happen? So the intention will always be to answer student questions. Right? Thats the best case scenario. But a lot of times, we prepare to do that and student don't come with questions. So they fall back on the review papers. ","width":1788},{"text":"No its not on the computer. The first exam will be very much like the previous exams. Though it is written by a new instructor so there is a bit more creativity involved here. ","width":1159},{"text":"But we're on the same page. Mattics don't you say we're on the same page of what constitutes a reasonable exam. Not to put any pressure on your or anything. We can duke it out. ","width":1277},{"text":"Oh yea right, that's right. Don't worry its ok. No thank you for asking that. So the exam is still written with the intention that it should take you that if you came in here you could take it during a single class hour. ","width":1918},{"text":"In the old session, in the old way of doing things that is how it always was. You came and there was some high pressure moment of taking the exam during those 50 minutes and part of the score of based on if you could finish it during that time. I think those exams written for that were probably too long to being with. Probably its not true that the average student would take 50 minute to do our exam. ","width":1938},{"text":"But I'm pretty sure we can get 90% finished in an hour and 15 minutes. ","width":836},{"text":"Does that make sense? But because we don't want time to be such a component of it we spread it out to three hours. ","width":598},{"text":"Two and a half officially but we're not going to leave until 10:30. Alright any questions ","width":782},{"text":"Its gonna be ok. I don't want you to feel like your life depends on this one time period. ","width":730},{"text":"Lets work shall we? ","width":320},{"text":"there is new stuff on the screen. Uhh these things, these little dotted graphs all have something in common. They have a common interface. Now raise your hand if you never felt a pez dispenser. Raise your hands if you never felt a pez dispenser. It is a cultural experience that you really should have. There is a very characteristic feel to a pez dispenser. ","width":2742},{"text":"I should have brought more. ","width":896},{"text":"They usually don't yell at you! Alright, you can pass them around. I don't care. I want them back at the end of the hour but they could rotate around. Just to reinforce the idea that the pez dispenser as a candy dispenser Right? You put the candy in and you can only get the candy off the top. The top of the pez dispenser. This is a real problem if you have a multi-flavored stack of candy. It means in order to get to the purple down here, if you want the purple one you have to go through the top and pull them all off until you get down to the purple one. That make sense? The way I think of it is a constrained access structure. ","width":4331},{"text":"Now in terms of data I'm going to describe it like this. It is a constrained access linear structure.","width":1330}],
  [{"text":"Where our data is going to exist in sequential position somehow, that is, there is a notion of what is the next piece of data or piece of candy.","width":1024},{"text":"There's this notion of next.","width":192},{"text":"But we're only going to allow access to the data through one end of the structure, much like a pez dispenser.","width":384},{"text":"Ok any question about that? Alright","width":384},{"text":"So this is the kind of structure that we're going to study next called a stack.","width":274},{"text":"And I'm going to show you really quickly a couple applications that are that are different than the pez dispenser application.","width":768},{"text":"Ok so what application do I want to do?","width":640},{"text":"Well first of all I'm going to use this as sort of my diagram, the source of my diagram for how a stack is going to work in these contexts.","width":768},{"text":"And as such I'm going to say that the entrance to this structure is at the top, ok, the entrance to the structure is at the top.","width":476},{"text":"And I'm going to be placing data inside of it.","width":212},{"text":"I guess the other analogy we hear all the time is the trays in the dining hall.","width":320},{"text":"And I think the one I'm going to do is this sequence of function calls because I find it kind of interesting.","width":712},{"text":"Ok, we'll talk about maybe these other applications later, but I'm going to start with this one.","width":320},{"text":"So this is intended to be, this is intended to be a sequence of functions inside a main().","width":448},{"text":"So inside of main() you studyHard() and you doGoodWork(), but the process of studyHard() means that you execute functions mps() and exams() etcetera.","width":896},{"text":"So this is the sequence of function calls.","width":256},{"text":"main() calls studyHard() and doGoodWork()","width":192},{"text":"doGoodWork() calls these four functions in sequence","width":320},{"text":"Is that clear how this code, this pseudocode is diagramed here?","width":384},{"text":"Ok, we used, we referred to the stack as stack memory earlier on, and this is what was really meant by that.","width":960},{"text":"This is why that region of memory is called the stack.","width":256},{"text":"When function main() executes, when function main() executes, all of its variables and parameters are set up on the stack.","width":1536},{"text":"And as they are on the stack, they are entered into the stack, and as they are on the stack, we say that they are in scope.","width":512},{"text":"And execution passes then to studyHard().","width":320},{"text":"The second that studyHard() is executed, its variables and parameters, studyHard()'s vars and params, are set up on the stack on top of main.","width":960},{"text":"Effectively on top of main","width":64},{"text":"In the process of executing studyHard(), mps()'s are set up","width":768},{"text":"In the process of setting up mps() we have plan() and then right here, the second that function plan() completes execution, all of plan()'s variables and parameters are removed from the stack.","width":1344},{"text":"Or we say \"popped\" from the stack.","width":256},{"text":"Any question about that?","width":128},{"text":"So we finished our first function here.","width":192},{"text":"And then execution proceeds to code(), the code() function.","width":448},{"text":"And all of, so plan is gone, and now all of code()'s variables and parameters are put on the stack, or pushed onto the stack.","width":1024},{"text":"Then code() finishes execution and it's cleaned off.","width":320},{"text":"Then mps() finish execution, and they are popped from the stack.","width":320},{"text":"And then we hit in the course of execution, exams().","width":448},{"text":"Oh, here we are.","width":64},{"text":"exams()'s function together with all of its variables and parameters are pushed onto the stack.","width":576},{"text":"Winging it, always good advice, pushed onto the stack.","width":512},{"text":"Winging it completes execution, so it's removed from the stack.","width":448},{"text":"We finished exams()","width":128},{"text":"Oh and look, we finished studyHard()","width":256},{"text":"And now we proceed to doGoodWork(), DGW","width":448},{"text":"Ok, any question about that","width":256},{"text":"So you can see that memory is being reused as the execution transfers from one function to another.","width":512},{"text":"And it's kind of easy to see how the interpretation of memory location would kind of get convoluted if you're not very careful to keep track of what you're doing.","width":704}],
  [{"text":"Variables, variables and parameters, so this is main()'s variables and parameters all inside that box.","width":512},{"text":"Ok so the question is: what's in scope? The question is what's in scope.","width":448},{"text":"And the answer is everything on the stack is effectively in scope.","width":320},{"text":"And things go out of scope when they're removed from the stack.","width":192},{"text":"Ok this is just an example albeit a fairly, this is a superficial explanation of what goes on here.","width":704},{"text":"It's not the substance of this course to actually look at this in great detail.","width":192},{"text":"I believe that's a 241 topic to look at how that memory is actually used and allocated and what it looks like.","width":512},{"text":"This is a diagram for what happens.","width":320},{"text":"Alright similarly you've probably seen, you've probably noticed when you use a good editor, I'm going to change the type of my stack here, when you use a good editor, it keeps track of parenthesis for you.","width":1408},{"text":"It keeps track of opening and closing parenthesis for you.","width":192},{"text":"The process of doing this goes something like this","width":384},{"text":"We are going to read this sequence of brackets and parenthesis left to right and you can imagine that there are other strings in between.","width":640},{"text":"But we're going to process this and our whole question is: is this a valid sequence of parenthesis and brackets and square brackets. Is this a valid sequence?","width":1024},{"text":"The algorithm for checking is merely this.","width":320},{"text":"If you see a left bracket of any kind, push it onto the stack.","width":448},{"text":"If you see a right bracket of any kind, pair it with the top of the stack and pop off the left.","width":768},{"text":"Pop off the left.","width":64},{"text":"Alright lets do that really quickly here.","width":192},{"text":"So if you see a left bracket push it on the stack.","width":256},{"text":"I see a left. I see a left.","width":192},{"text":"If you see a right bracket pair it with the top of the stack.","width":512},{"text":"Do they match?","width":128},{"text":"Do these two match?","width":128},{"text":"Yes they do. So pop them off.","width":320},{"text":"And then we see a left. And then we see a right.","width":448},{"text":"They pair. Pop them off.","width":192},{"text":"Then we see a left. And another left, uh oh, and another left.","width":512},{"text":"I'm up to here. We see a left, I mean sorry, a right. It matches, so we pop.","width":640},{"text":"A right, it matches, so we pop.","width":192},{"text":"A left bracket, a left, a left, a right - it matches, etcetera.","width":593},{"text":"So the code for doing this is actually very very simple.","width":236},{"text":"If left bracket, push.","width":161},{"text":"If right bracket, pair and pop.","width":154},{"text":"About two lines, right?","width":192},{"text":"Lets move on here. Any questions about this? Boring? Sorry","width":1152},{"text":"Alright. Let's write some code, that's always comforting right?","width":320},{"text":"Instead of talking lets write code.","width":256},{"text":"So stack is, we have an abstract data type that describes a stack.","width":320},{"text":"Here are the classic functions: push and pop.","width":384},{"text":"Push is our way of inserting data.","width":256}],
  [{"text":"It is not called insert because it is not a generalized notion of inserting into the structure.","width":384},{"text":"We do not have the flexibility of putting the data wherever we want","width":512},{"text":"It has to go at one end of the linear structure.","width":192},{"text":"Similarly for pop, pop is a remove that it is not a generalized remove at all.","width":256},{"text":"It's going to give you a particular value from the stack that is the thing happens to be on top","width":768},{"text":"Now this is the interface or the abstract data types struct.","width":512},{"text":"You may see some modifications of this ","width":128},{"text":"For examples, sometimes pop does not actually return the value","width":448},{"text":"sometimes it just remove it","width":128},{"text":"sometimes there's an additional function called peek","width":256},{"text":"that allows you to look at the top value","width":256},{"text":"almost every implementations of stack i've ever seen has had a function that will tell you whether not the stack is empty","width":704},{"text":"and then you know possibly there are the big three depending on the implementation","width":512},{"text":"alright so three though are classic and part of the abstract data type","width":320},{"text":"now notice that that means we can use the structure now","width":256},{"text":"because if you write code like this you can tell at any given point what the data structure looks like","width":512},{"text":"so i mean this is just, i will warn you again if i go to this","width":384},{"text":"so i mean this is just, i will bore you of o go through this","width":64},{"text":"I'm going to push a three","width":64},{"text":"push an eight, push a four, do a pop","width":384},{"text":"and 4 is returned, do another pop","width":128},{"text":"and eight is returned ","width":128},{"text":"push a six, so right here the appearance of stack is like this, okay?","width":512},{"text":"any questions about that?","width":320},{"text":"alright, so do you feel like you understand how this thing works","width":128},{"text":"okay so know let's talk about this part, the elephant in the room","width":384},{"text":"how we gonna make this happen, how we gonna implement this","width":192},{"text":"it is a linear structure, it is the stack itself is a linear structure","width":448},{"text":"like I said the data there's a notion of the next one","width":256},{"text":"so that suggests particular implementations ","width":320},{"text":"what are some ideas, how could we implement this","width":256},{"text":"what kind of structure do we know about that we can use to support that interface ","width":384},{"text":"somebody raise their hands and have a conversation with me.","width":128},{"text":"nope?","width":320},{"text":"if i close my eyes and point to sombody? you","width":320},{"text":"233333333","width":256},{"text":"what are some ideas can we do","width":192},{"text":"I can use a linkedlist","width":256},{"text":"right very good  I can use a linkedlist ","width":64},{"text":"is that the only alternative?","width":256},{"text":"raise your hand if you were kind of wanting to suggest linkedlist ","width":128},{"text":"but you are glad I pointed him instead of you, okay?","width":256},{"text":"raise your hand if you might have another idea for implementaion","width":384},{"text":"could use an array right, so any time at this point","width":256},{"text":"anytime you have a linear structure that is a structure where your data","width":192},{"text":"falls right next to each other your two alternative consider ","width":384},{"text":"are linkedlist and array","width":64},{"text":"now the technical detail are yet to be discussed,","width":256},{"text":"we have not talked about if it is a dynamic or static array","width":64},{"text":"we have not talked about if it is a singly link or doubly link","width":256},{"text":"or crazily linkedlist?","width":128},{"text":"but nonetheless it is pretty easy to have a conversation about the two and in fact","width":384},{"text":"those are the two we gonna consider for this okay?","width":256},{"text":"any questions about that ? so just out of curiosity","width":320},{"text":"raise your hand if you think, well, if you prefer linkedlist","width":320},{"text":"your favorite choice is linkedlist here, raise your hand high, come on this is fun","width":384},{"text":"and raise your hand if your are sort of array-centric ","width":192},{"text":"if you'd rather use an array in this context","width":256},{"text":"look it is about fifty-fifty ","width":64},{"text":"there's no right answer here both of these are good options","width":256},{"text":"alright, so it turns out the first one i decided to talk about is a linkedlist","width":448},{"text":"and here's how we gonna implement it","width":192},{"text":"we are going to prepare a stack node ","width":256},{"text":"it should look pretty familiar to you, you've seen this before okay?","width":384},{"text":"and we gonna keep a hold on the stack","width":128},{"text":"be at the top that is we are just going to call that pointer that holds towards data on the top","width":512},{"text":"okay? hm.. and we are going to keep track of its size","width":512},{"text":"okay so just because it is a .. any questions about that part at all?","width":704},{"text":"okay is the constructor implemented there? ","width":384},{"text":"no it is not","width":320},{"text":"i'm going ahead and do this","width":192},{"text":"the stack","width":128},{"text":"top equals  null","width":128},{"text":"implements the constructor there","width":320},{"text":"size equals zero","width":256},{"text":"top equals null okay?","width":192},{"text":"I thinks that should leads to a question","width":320}],
  [{"text":"Any other questions about it?","width":93},{"text":"I am so glad that you guys are here.","width":256},{"text":"Debug my code. Wouldn't it be good if we can code like this all the time?","width":277},{"text":"It's pair programming taken to the extreme.","width":256},{"text":"Alright. Fine.","width":128},{"text":"So there is one thing I wanna say about the interface.","width":246},{"text":"I made a simplifying statement and that is, you don't have to worry about popping an empty stack.","width":320},{"text":"If effectively, I mean, in fact, you probably should write code that is a little bit defensive to that.","width":448},{"text":"You should have an exception handled here.","width":192},{"text":"But we are not in a business of doing that.","width":128},{"text":"And moreover, in this class, and moreover, the fact that we gave the client the capability of checking to see whether there's an empty stack.","width":788},{"text":"The fact that we created this empty function means we can say, \"Ho, dude, that your responsibility.\"","width":493},{"text":"You have to check, to the client, you have to check, whether or not this is empty.","width":256},{"text":"I made no promises if you tried to pop an empty stack, Ok?","width":336},{"text":"So, providing a functionality to the client for checking for empty is kind of our way of saying that it's the client's responsibility to do so.","width":687},{"text":"OK","width":75},{"text":"And this is it.","width":64},{"text":"This is about the simplest guess in terms of the implementation.","width":256},{"text":"And I thought you would ask, \"don't we want to use a sentinel node?\"","width":512},{"text":"And the answer is \"no, we don't need a sentinel node here because all of our insertions and deletions are happening in that first spot.\"","width":768},{"text":"Right? We don't need to worry about the general case.","width":192},{"text":"In this case.","width":64},{"text":"So sentinel node is just sort of a waste of time here.","width":207},{"text":"Makes for more complex code.","width":177},{"text":"OK. So let's take about the array-base implement for a minute.","width":362},{"text":"OK. So the interface is the same. We are going to be implementing push and pop and, you know, empty just returns a boolean value referencing sending whether or not the size is zero. So that's easy.","width":1408},{"text":"Here is the constructor","width":516},{"text":"I don't know which order I may wanna talk about this. OK","width":338},{"text":"So in this case, I've gotten an item's poin... I have items which is an SIT pointer.","width":397},{"text":"And because we are implementing this as an array, you recognize this is just a dynamic array.","width":380},{"text":"Right? This is just a dynamic array.","width":143},{"text":"Now size here, is intended to be the number of elements in the stack.","width":448},{"text":"Capacity is the number that our stack can hold.","width":295},{"text":"So this is... Capacity is capacity. Size is size. Right?","width":384},{"text":"Capacity is, the number we can hold.","width":448},{"text":"And size is the number we are currently holding, or the number we do hold.","width":476},{"text":"OK. Any question about that?","width":256},{"text":"Yeah?","width":128},{"text":"Ah, do we wanna make capacity constant.","width":283},{"text":"So this is the moment. This is the moment where, we actually begin to discuss what it means to have a dynamic array.","width":640},{"text":"Because if we did not allow, for the the array to have variable size, then that would present a huge drawback over using a linked list, right?","width":896},{"text":"And so now it is the time we are actually going to first exploit the fact that it is a dynamic array.","width":614},{"text":"OK? Any question about that? So it is exactly the right comment.","width":237},{"text":"Alright. So this is going to be a dynamic array. Capacity is deliberately not going to be something fixed. We are going to allow it to vary.","width":557},{"text":"Alright. So what does the constructor do?","width":192},{"text":"It makes... It starts off with an array of size four.","width":256},{"text":"Arbitraryly chosen. Could 've been one. Probably couldn't be zero though. That would not be accepted probably?","width":463},{"text":"And then it allocates the memory.","width":192},{"text":"So now, effectively, after this thing is constructed, we are dealing with an array of size four.","width":512},{"text":"Any time we push onto it, we're going to check to see whether or not the size is greater than or equal to the capacity.","width":704},{"text":"That is, is the array full?","width":192},{"text":"Is the array......full?","width":256},{"text":"And if it is, we are going to grow the array somehow.","width":448},{"text":"Oh, that's new. That's what we are gonna talk about the whole rest of the day.","width":512},{"text":"OK, we are going to grow the array somehow.","width":128},{"text":"And then, we are going to enter in the element that we want and increment the size.","width":384},{"text":"What does the code look like?","width":320},{"text":"for pop?","width":114},{"text":"What does the code look like for pop?","width":128}],
  [{"text":"yeah","width":280},{"text":"right","width":248},{"text":"we have to return the value or grab this value for returning and then decrement the size, and that is it.","width":625},{"text":"","width":10},{"text":"so pop pieces of cake","width":142},{"text":"","width":7},{"text":"","width":0},{"text":"","width":1},{"text":"alright","width":26},{"text":"now let's talk about this issue of growing the array somehow","width":388},{"text":"okay","width":126},{"text":"so this discussion we are about to have apply not just for stack but also for queue","width":562},{"text":"any linear structure that uses dynamic array","width":270},{"text":"list 2 I just obfuscated it for list. ","width":164},{"text":"I said we are not gonna talk about it","width":142},{"text":"Umm, so here is the scheme","width":248},{"text":"suppose your array is full","width":206},{"text":"and another piece of data comes along","width":213},{"text":"okÂ ","width":247},{"text":"the idea is going to be","width":165},{"text":"that we are going to allocate some new spaces","width":326},{"text":"copy over the data","width":197},{"text":"from the old spaces","width":184},{"text":"yeah, copy the data the data from the old spaces","width":289},{"text":"and then insert the new spaces in its position in the larger array","width":385},{"text":"and then of course, you know, free up the old space and then rename the new spaces","width":425},{"text":"okay? do you like this","width":310},{"text":"ok","width":109},{"text":"that whole copy the data thing","width":185},{"text":"Laaaa","width":51},{"text":"that should make you crench","width":121},{"text":"right?","width":35},{"text":"copy the data ouch","width":117},{"text":"that hurts","width":50},{"text":"so our goal is to make the copy the data something that is rare","width":435},{"text":"our goal is to make it rare and somehow still make it so that we can accommodate flexible data size","width":585},{"text":"so how do we do this resizing?","width":224},{"text":"let's look at three different options, ok?","width":260},{"text":"so for simplexity, all of these resizing schemes are going to start with an array of array of size one","width":481},{"text":"then go build from there.","width":159},{"text":"so we are always gonna start with an array of size one, after it fills, we will do copying","width":355},{"text":"more over in analyzing these particular resizing schemes","width":387},{"text":"we only really gonna care about the copying that happens","width":332},{"text":"the inserting new data would have to happen anyways","width":212},{"text":"so it is sort of the extra work that we are gonna count for","width":241},{"text":"alright so","width":86},{"text":"lets say that our resizing scheme says well if new data comes along, if your array is full, and new data comes along","width":805},{"text":"it supposes to look like a person, did you get that, can you tell?","width":361},{"text":"so if your array is full and new data comes along","width":281},{"text":"then what you are gonna do is to make an array just big enough","width":280},{"text":"just big enough, then copy and insert","width":242},{"text":"that is the first scheme","width":132},{"text":"and the question is: how does this scheme do over a sequence of say n pushes to the structure","width":735},{"text":"so this bottom row is supposed to be, supposed to indicate n","width":400},{"text":"ok, alright, lets look at this","width":332},{"text":"in the first case, one thing gets copied","width":231},{"text":"in the second case, two things get copied.","width":226},{"text":"in the third case, three things get copied","width":269},{"text":"so we can write the expression that captures the amount of copying","width":465}],
  [{"text":"it is 1+2+3+ all the way up to how far ","width":556},{"text":"n - 1 right","width":228},{"text":"okay","width":144},{"text":"and then I don't know about you, but I prefer to write this like this: k = 1 to n -1 of k","width":488},{"text":"because that reminds me of the sum, that reminds me of a result","width":343},{"text":"what is that sum?","width":146},{"text":"what is that sum?","width":207},{"text":"the closed form is : n (n-1) / 2","width":729},{"text":"right?","width":53},{"text":"so here is how to calibrate this. ok?","width":388},{"text":"here is how to calibrate this, if you miss defined, you should get your calculus book and look this up, ok?","width":710},{"text":"If you are like, oh yeahhhh, I known that before","width":358},{"text":"in my life","width":51},{"text":"then you should get a 3 by 5 card and write that sum and put that on your mirror so that it get into your subconscious","width":703},{"text":"that is where it should live for you","width":178},{"text":"that sum right there should live like oh yeah, like yeah, I got it, ok?Â ","width":363},{"text":"it is ok if it doesnt yet","width":141},{"text":"because somebody, nobody else might told you that it should live there yet","width":216},{"text":"but it should","width":37},{"text":"alright, any question about that?","width":206},{"text":"ok, so for us","width":198},{"text":"we are concerned with asymptotic results so this is your , this is your index card if you dont have it","width":608},{"text":"we are concerned with the asymptotic results and as you would have learned in your discrete math classes","width":466},{"text":"this function grows like n square","width":287},{"text":"the laregest degree term is n square","width":250},{"text":"but remember this is n square over n push to the structure","width":455},{"text":"so we can just divide through by n","width":249},{"text":"so big O of (n^2) / n pushes implies an average of big O of N per push","width":1100},{"text":"ok, which would kind of make sense because you are doing a lot of copy every time a new piece of data come in","width":633},{"text":"does this make you smile or frown","width":190},{"text":"is this good news of bad news","width":180},{"text":"this is really bad news","width":158},{"text":"ok that is a frown face","width":187},{"text":"and the question is can we do better?","width":184},{"text":"so let's try to do better","width":225},{"text":"instead of just making , um instead of just making the array big enough to handle one more piece of data","width":622},{"text":"what we are going to do is make it big enough to handle some fixed amount more data","width":542},{"text":"ok, we will call this c","width":242},{"text":"so if three and four full fill here","width":207},{"text":"dont put these here","width":127},{"text":"if three and four fill the array","width":187},{"text":"and 6 comes along, then what we would do is copy three and four, insert 6 and then we get a freebie right? ","width":728},{"text":"one more piece of data could come along","width":221},{"text":"and we wouldn't have to encoure any additional copying cost, and in fact in general ","width":438},{"text":"if you allow a fix number, say c of additional spaces","width":347},{"text":"then c - 1 free copy happen in the future, free insert in the future","width":397},{"text":"does that make sense?","width":54},{"text":"so let's see how this does in term of asymptotic running time","width":476},{"text":"do you have an instinct how well it does?","width":183},{"text":"yeah this one is gonna be a sad face too, this one is also going to be n square","width":526},{"text":"umm, should we do the analysis?","width":324},{"text":"probably","width":98},{"text":"ok, so umm, in general we are looking at blocks of size constant, some constant in the picture it is two","width":752},{"text":"and the amount of copying that happenes is some constant , i mean sorry some , Â oops","width":836}],
  [{"text":"Here is my hint. This is n. ","width":209},{"text":"And effectively, if you count, you're counting the number of times you can take n and divide it by half. How do you express that yea?","width":683},{"text":"Log based 2^n. Log is basically log b and number of times you can divide by b. That is the piece that should be internal. It turns out that this is.","width":1199},{"text":"Oh, Log based 2 of n there is this minus one. We're not doing this in a row. Not counting it for the last row. Ok!","width":1359},{"text":"Here let me ask you this. K equals 0 to 2 to the n equals what? I'll make this a T to make it less confusing.","width":856},{"text":"Whats that back pocket sum?","width":264},{"text":"It is 2 to the t plus one minus 1 divided by 2 to the minus one. ","width":832},{"text":"Two to the log based n two of n minus 1 over one. Or N minus one good. ","width":738},{"text":"N minus one copying. N minus one additional work. So how does this scheme do on a sequence of n pushes?","width":736},{"text":"It incurs big O of n work or n pushes or big O of 1 per push. ","width":796},{"text":"So on average, the additional work is just a little bit. Just a constant. OK? Alright I'll see you friday. ","width":1752}],
  [{"text":"Okay, let's work","width":8873},{"text":"Â Okay, I know it's October","width":533},{"text":"It got cold, that's right","width":475},{"text":"Last time I saw you it was before you had an exam","width":195},{"text":"Now it's after you had an exam","width":176},{"text":"Our intention is to return those papers to you next week in section","width":447},{"text":"So, go to the section that you wrote on the exam, cause that's where we're gonna be intending to return it","width":606},{"text":"Did we define? We didn't..","width":146},{"text":"Oh, this is our flaw","width":158},{"text":"This is the flaw with the system","width":296},{"text":"Right, big news!","width":209},{"text":"Huge changes this semester","width":118},{"text":"We're actually scanning your exam","width":172},{"text":"There we go","width":182},{"text":"You'll get your scores back via email","width":245},{"text":"It was me, not you!","width":267},{"text":"Okay","width":146},{"text":"And our intention is to have those back to you by the time sections meet next week","width":475},{"text":"So that we can give you averages and discuss the exam in that context","width":534},{"text":"Let's see, MP3 is still due","width":431},{"text":"Tomorrow night","width":182},{"text":"Today night, I'm a mess","width":304},{"text":"No, I'm sorry, no, no, no, but you said!","width":371},{"text":"IÂ meant tomorrow relative to yesterday","width":290}],
  [{"text":"Stacks and queues are lumped together in almost every data structure for most every written and the reason for that cause the most constrain access linear structure ","width":9280}],
  [{"text":"and then we place the new data element in and now here's the beautiful moment","width":448},{"text":"look at this, look at how much keys we have bought ourselves","width":256},{"text":"we don't have to worry about new data, we don't have to worry about new data arriving for this long","width":640},{"text":"that's a super long time, right?","width":128},{"text":"in fact, it almost does much data as we already had in the limit","width":320},{"text":"you know, we are effectively buying ourselves relaxation in proportion to..","width":448},{"text":"this, you know this stressful copy, okay? does that make sense to what i'm saying there? ","width":448},{"text":"that look, you know? bring it on, bring more data, I've got no problem, I've got faithful for a really long time","width":320},{"text":"question about it? Yeah?","width":320},{"text":"oh i'm gonna address that in just a minute, okay? i'm address that, I have a whole slide about it.","width":448},{"text":"okay? Alright, so we're specifically talking about an array and why and how we're using an array here","width":512},{"text":"Okay, so think about what this means, it means that... where should I start this..","width":640},{"text":"oh, I'll start it here, it means that we've got fast....... right? all of that, no waiting, perfectly fine and then..","width":768},{"text":"when something comes along here, we've got, waiting time for data to be copied","width":1024},{"text":"and then, thing right? so imagine, imagine what this means in the algorithm","width":512},{"text":"it means over the course of your use of stack, sometime things are going green","width":448},{"text":"right? no problem and sometime you have to wait a little bit","width":256},{"text":"now, anytime, you don't have the same thing going on each time, it may becomes more complex","width":448},{"text":"to analyze","width":64},{"text":"so what we're gonna do is we're gonna add full of data we insert right and items","width":512},{"text":"okay, we're gonna look at all of the data that we insert and items","width":320},{"text":"and then we're gonna also look at the amount of time we spend waiting over that time","width":320},{"text":"and it turns out","width":192},{"text":"that if you look at the amount of time you spend waiting","width":320},{"text":"you get, waiting on the order of n, or constant time on average per push, okay?","width":896},{"text":"does that make sense to you?","width":64},{"text":"so it's a rare long wait","width":448},{"text":"alright, so the punch line is, it's order n or n pushes","width":640},{"text":"and the analysis of that comes from last time, was a..","width":512},{"text":"geometric sum? I believe, just a little geometric sum","width":256},{"text":"which means big O of n over n, then you know you can you can go back and look at your discrete math","width":576},{"text":"homeworks for proofing this.... that this is big o of 1 per push","width":768},{"text":"on average.. we admit some of homework are gonna be long, but on average it's just","width":320},{"text":"it's like you're paying a little bit more for each one of them","width":320},{"text":"some of them are gonna go faster, few of them are gonna go the way slower","width":192},{"text":"okay? alright, any question about that? yes?","width":384},{"text":"who else raise their hand, you're number two in the queue","width":256},{"text":"yeah, go","width":256},{"text":"it doesn't matter, no, I mean doubling is really easy, so start off with one","width":704},{"text":"oh, you mean non one? oh yeah, that.. it turns out that isn't gonna make a whole lot of difference","width":384},{"text":"unless your stack is on average much shorter than the small one you start off with","width":320},{"text":"so, if you have reason to believe that your stack is likely to be pretty short","width":320},{"text":"then, you know, yes, that's.. okay, the other question..","width":448}],
  [{"text":"Very good, so you really really really want me to contrast to the linkedlist implementation","width":832},{"text":"I'm fully intending to do that but there's","width":116},{"text":"one more point I want to make before we get there, okay?","width":275},{"text":"Yes?","width":64},{"text":"Clear the heck out to here!","width":636},{"text":"Yeah?","width":151},{"text":"Yep","width":251},{"text":"That is exactly the point that I want to make","width":214},{"text":"Alright","width":38},{"text":"So imagine that we build this thing up","width":121},{"text":"We push a whole ton of stuff on our stack","width":183},{"text":"Way out to here, it's huge","width":162},{"text":"And all of the sudden we decide, oh, we're just gonna pull things off the stack","width":293},{"text":"Then we've got this array, maybe we push a few on here","width":375},{"text":"And, do that a while","width":142},{"text":"and eventually we get down here","width":115},{"text":"and our stack goes for ten year","width":152},{"text":"Just right in here, but we've allocated all this space","width":256},{"text":"That's a problem","width":37},{"text":"Is that what you're asking?","width":112},{"text":"That's his complaint","width":194},{"text":"What do you think?","width":77},{"text":"Yeah?","width":152},{"text":"Very good, exactly","width":196},{"text":"We're not gonna do the details of this","width":182},{"text":"Suffice to say, all of the same arguments hold in the process of resizing down","width":701},{"text":"I like the word I'll use it forever","width":171},{"text":"Resizing downward and in fact the accepted, the practical accepted mechanism ","width":805},{"text":"is to take it down when you're less that a fourth full","width":343},{"text":"If this array got down to here","width":277},{"text":"If this stack got down to about here","width":134},{"text":"We would resize it back to this size","width":280},{"text":"And, it turns out that the math involved in the analysis is exactly the same","width":274},{"text":"You're gonna be adding up a geometric sum","width":152},{"text":"and, you know what the argument you can make then is that you're never using more","width":493},{"text":"four times as much space as you need","width":216},{"text":"You're never using more four times as much space as you need","width":271},{"text":"and that's constant","width":332},{"text":"Does that answer your concern?","width":133},{"text":"Good, okay","width":130},{"text":"Good","width":38},{"text":"Yes?","width":712},{"text":"Yep","width":135},{"text":"Yep","width":721},{"text":"Yeah, very, very, good, very good","width":131},{"text":"That's right, so but, look what we've done","width":323},{"text":"We said we're gonna shrink it","width":156},{"text":"Down to here","width":147},{"text":"Right? We're gonna shrink it down to here","width":133},{"text":"The next thing we're gonna do when this thing... no, sorry","width":334},{"text":"We're gonna shrink this array, I'm talking about this example","width":264},{"text":"We're gonna shrink it when the data gets down to here","width":293},{"text":"So that means all of this","width":174},{"text":"Is available for your back and fourthiness","width":270},{"text":"Right?","width":83},{"text":"Because I'm not gonna resize up to this one again","width":260},{"text":"Until I get to this one","width":98},{"text":"Does that make sense?","width":189},{"text":"Am I pointing to the right things to make that clear?","width":284},{"text":"Yeah?","width":134},{"text":"And it turns out in the analysis, we did it carefully","width":234},{"text":"Allowing for that much of a slosh is good enough to prevent the behavior you're observing","width":589},{"text":"So in practice this is what we do","width":166},{"text":"Alright, any other questions about this?","width":157},{"text":"Actually the analyses hold whether you double it, triple it, go down by thirds, etc.","width":539},{"text":"But you have to use constant fractions or constant factors every time","width":345},{"text":"Alright, questions? ","width":110},{"text":"You good?","width":116},{"text":"Okay","width":73},{"text":"So lets talk about this, the elephant in the room","width":229},{"text":"Why are we even discussing an array based implementation when","width":375},{"text":"we can make the argument directly","width":157},{"text":"That we get constant time push and pop","width":151},{"text":"Remember, push and pop can occur in front of a linked list in constant time","width":312},{"text":"Just allocate a little bit of memeory","width":211},{"text":"Update some pointers, and we're good to go","width":342},{"text":"Oh, maybe I'm just lying to them, maybe I really should go test this out","width":363},{"text":"So I implemented, I did it in the context of a queue","width":280},{"text":"So I implemented a queue instead","width":180},{"text":"and added a whole bunch of data to it","width":116},{"text":"And did about a million operations on it","width":222},{"text":"And compared that with the same interface, the same test case, implemented using linked memory and ","width":664},{"text":"the queue, the array based implementation...","width":320}],
  [{"text":"What do you think the next thing what we will going to do? We talked about the abstract data type. What is the next thing what we will going to do?","width":960},{"text":"We are talking about the implementation that's right. So how think our choices are for implementing a queue. We are implementing using a .... an array...or...a linked list. It feels deja vu.","width":1088},{"text":"Right ok. We used an array or linked list to see how it plays out. Its a surprise for me for the first things what are we talking about. Oh yeah I love it. (Queue)","width":832},{"text":"So we are going to set up a linked memory base implementation and I am playing a game with you. I assert that we only need a linked list to do this because after all you keep blowing in one away for a queue. ","width":1536},{"text":"In addition to the head, holding on to the linked list. I am giving you another pointer at the tail. And that tail is going to point directly to the last element. We are not going to mess with sentimals in this content. ","width":1408},{"text":"The tail is going to point directly to the last element. ","width":448},{"text":"I want to know from you is which of these pointers first is entry to the queue and which of them is exit from the queue? Which of them is entry to the queue and which of them is exit? ","width":1280},{"text":"I am asking you which one is the head. I will be question you about where is entry or exit from the queue? Ok. ","width":1024},{"text":"When are you ready with your answer, put your head in your head. Ok. Right. ","width":704},{"text":"Alright. So raise your hand if you think that is the entry to the queue. The head of entry is the queue. Ok...Everybody see. And raise your hand if you think the head is the exit from the queue. Ok. Good.","width":1152},{"text":"So there is a bit of disagreement here. Right.  The disagreement arises because of way the arrow is making you think. Ok. Because you think Oh look, those arrows tell the person where to go through this process. But think about it. Let's think about what we will have to do if this is the exit. Ok. ","width":1664},{"text":"If that last element is the exit, how are we going to do it. What is that code look like? What is the code look like? You got to get the hold of this guy right. You need a pointer to that know right before. How much does it cost you? Big O of n.","width":1664},{"text":"Ok so, um that's too expensive. You can do better. Ok. Let me summarize it first. Um so a tail exit is a induces-I think is right word-a linear time Big O of n a reset of the tail pointer. Ok.","width":2240},{"text":"Can we do better? Removing this one taking that in the front. Sure. So, the exit needs to be the head all this means the head is the exit.","width":1216}],
  [{"text":"comments","width":64},{"text":"Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  i can resize the array right?","width":448},{"text":"then what should i do?","width":128},{"text":"why not?","width":156},{"text":"cuz I could dequeue all of this and resize the puppy to one day element ","width":273},{"text":"right? so","width":108},{"text":"resizing is what we want to do here","width":110},{"text":"what you wanna observe is the look it","width":99},{"text":"theres all the empty space over here","width":124},{"text":"there is all the empty space in the front of the array","width":168},{"text":"and so effectively what you are gonna do is wrapping the array around, if you are gonna wrap the array around","width":503},{"text":"and move entry to its new spot","width":328},{"text":"okay","width":41},{"text":"and I'll make it a double way to kind of see","width":325},{"text":"okay","width":48},{"text":"any questions about it?","width":62},{"text":"and how do I do that functionally?","width":140},{"text":"mod is your friend","width":121},{"text":"the mod operator is your friend ","width":167},{"text":"here","width":42},{"text":"okay","width":24},{"text":"yeah?","width":148},{"text":"oh very good. So just a second. Let's get there.","width":235},{"text":"Okay. So is it clear where we are here and then I'm gonna dequeue that moves this guy down here and then I'm gonna enqueue nine","width":576},{"text":"nine goes here and in fact what we end up with is this","width":281},{"text":"okay","width":64},{"text":"I think","width":94},{"text":"entry's on the top. This thing should be on the botton","width":256},{"text":"okay","width":332},{"text":"alright. Any questions about it? Yeah? ","width":318},{"text":"You can figure out where entry goes by taking incrementing it mod tablefies and it will always just put it in the right place","width":589},{"text":"okay yeah so in fact in my code, my index is a mod index.","width":401},{"text":"So I know that I will never go outside of the bounds of that array because I'm always going to take mod the array size. Okay","width":576},{"text":"Alright! So lets do this a little bit more. Any questions about it so far? Yeah?","width":320},{"text":"un-huh","width":437},{"text":"un-huh","width":265},{"text":"I'm not quite with you yet. okay?","width":180},{"text":"Hold on just a sec. I wanna just get us there for a sec","width":190},{"text":"okay","width":64},{"text":"so you guys are really bothered by the fact that we are kind of screwing up where the start of the array is. Okay?","width":384},{"text":"Alright! Fine. Let's do a couple more enqueue y, moves this, enqueue i, moves it again, enqueue s, moves it again.","width":896},{"text":"right? so now entry is here, exit is here. so that becomes a task when you enqueue right?","width":640},{"text":"Are they in the same spot? Has there been data, is there data in the array and are they in the same spot?","width":512},{"text":"then you can argue that the array is full. Okay? Alright! and of course, the next thing is dequeue so that doesn't actually happen at that moment ","width":576},{"text":"but happen in a couple more a bit. We are going to keep going okay? Alright!","width":266},{"text":"So. What are you gonna do? I've got this sort of gap here","width":561},{"text":"I got this sort of gap between what's in the start and what's in the rear","width":1006},{"text":"what should I do? ","width":296},{"text":"I'll give you a hint. The hard answer, the complex answer, the one that makes you go like huh?","width":434},{"text":"is not the right one","width":128},{"text":"I know haha right?","width":128},{"text":"I would set a.. okay, well, lets fix this first and then I'll tell you my stories , so let's see","width":832},{"text":"okay. Alright! so all you do is totally easy. All you do is you just reset. ","width":246},{"text":"you take the exit an you put it here","width":229},{"text":"and you increment. Exit increment forward size number of things, items, sub, you know, k ","width":768},{"text":"where k is in the element of exit up to entry mod table size ","width":749},{"text":"and those go in the position 0, 1, 2, 3 up to k capacity. those go up to capacity minus one","width":1033},{"text":"okay. Does that make sense? So don't worry about like Oh there's yeah. there are overlapping here and just start over.","width":448},{"text":"give yourself a clean slate feels great","width":146},{"text":"Alright! Any questions about it?","width":128},{"text":"is it good?","width":80},{"text":"I'll tell you my stories some other times, it's cute.","width":159},{"text":"Alright that's all I have. Look at that we did it. Yay!","width":320}],
  [{"text":"Umm","width":4736},{"text":"So let's see","width":128},{"text":"Mp4 is out","width":192},{"text":"If you are going any extra credit all term","width":256},{"text":"This is the one, this is the one to go for","width":256},{"text":"4.1 is - who's done it. Who's already done 4.1?","width":512},{"text":"How many lines of code did you have to write?","width":128},{"text":"10-ish","width":128},{"text":"on the order of 10-ish","width":64},{"text":"But","width":128},{"text":"There's a cognitive leap that happens","width":320},{"text":"There's a cognitive leap that happens","width":128},{"text":"Umm","width":128},{"text":"For those particular 10 lines of code","width":192},{"text":"So you guys all saw -","width":192},{"text":"Raise your hands if you are done with 4.1.","width":192},{"text":"So then, put your arms down. Okay that's maybe 20% of you tops.","width":448},{"text":"Now","width":64},{"text":"Among you who are done, raise your hand if you were surprised by how it all turned out","width":512},{"text":"Raise your hand if you are kinda surprised by what that code ended up looking like","width":448},{"text":"And raise your hand if you were surprised in a good way with how that code ended up looking","width":512},{"text":"It's really - really?","width":128},{"text":"That's all you want us to do? Okay","width":256},{"text":"Fine\\","width":64},{"text":"Okay","width":192},{"text":"Especially for the queue class","width":192},{"text":"The stack class is little bit more","width":320},{"text":"Alright","width":64},{"text":"So","width":64},{"text":"There was apparently someone posted in Piazza that 4.1 was due tomorrow night","width":512},{"text":"I don't know where they got that idea. It's actually due Friday night.","width":192},{"text":"So you have some time here.","width":192},{"text":"Alright","width":64},{"text":"Are there any other administrative questions or issues you want to address before we start working?","width":384},{"text":"Your exams are being graded. I don't know the status because I couldn't look at the Google docs..","width":512},{"text":"They told the status this morning. So I don't know the status. We'll all find out together.","width":384},{"text":"I have some code for you.","width":256},{"text":"It's my little Monday gift.","width":192},{"text":"And here's what I want you to do:","width":128},{"text":"I want you to figure out this code and put a little dot beside everything that surprises you","width":576},{"text":"So for about the first 10 minutes or so of today","width":192},{"text":"We are going dissect this code","width":256},{"text":"And talk about all the things that surprise you about it.","width":384},{"text":"Nothing surpises me anymore","width":128},{"text":"But we're gonna talk about the things that surprise you about this code","width":256},{"text":"So scrutinize it","width":192},{"text":"Talk about it with a friend ","width":128},{"text":"I'm gonna take a break","width":320},{"text":"[Silence]","width":5440},{"text":"[Silence]","width":64}],
  [{"text":"Â ","width":64},{"text":"walk my pen down the edge of the code and you yell at me or raise your hand and start dancing or something and tell me when there is something you would like to discuss.","width":5052},{"text":"In the code or it doesnt even have to be something that you think is interesting. let me know if you see something that you think someone else in this room will think is interesting","width":1472},{"text":"So you don't even have to commit to being interested just if you think somebody else is interested. speak for the crowd here.","width":694},{"text":"intertesting yet?","width":127},{"text":"yea okay","width":395},{"text":"guess what","width":81},{"text":"our converstion about adstract data type list was unneccessary. ","width":640},{"text":"we didnt have to have it because the standard template library provides a list for us. a list class for us","width":704},{"text":"We didnt have to define our own interface","width":256},{"text":"So the point is that there is already a list abstract data type defined for you and implented for you in the standard temple library and the only thing you have to do to access it is you use angle brackets","width":1856},{"text":"And its also very well documented so i am not going to spend a lot of time in theis class tlaking about the differences between our list class and their list class. but suffice to stay that most of those differences aris ein the interface between the user and the clss itself so the functions they have for oyu are slightly differnet but larglerly the purpose to fthe thin gis the same ","width":2112},{"text":"Sequentail ordering of objects","width":256},{"text":"That is true for a lot of different container classes so going forward","width":1408},{"text":"it will be true that we will look at some abstract data types that are in fact also avlabile to you via the standrd temple librayr but we will be discussing here is what they look like under the ood so just beyound the interface","width":1152},{"text":"I am going to keep walking down the screen then ","width":448},{"text":"tell me when to stop","width":256},{"text":"i am going to stop ","width":320},{"text":"because okay fine somebody who didnt want me to sotp","width":512},{"text":"You didnt want me to stop so im going to ask you what is that thing and if you dont want to answer than you can name somebody else","width":1152},{"text":"we dont have to stop on structs anymore because they are just classes where the default of everything is public ","width":1152},{"text":"so those are exactly equlvant to what i have just odne there","width":320},{"text":"keep wlaking down the screen","width":773},{"text":"stop","width":628},{"text":"first of all what is that line ","width":320}],
  [{"text":"its a constructor.","width":64},{"text":" oh you snuck in two lines there, you snuck in two lines. ","width":320},{"text":"its a constructor, very good, with an initializer line. ","width":320},{"text":" good. so he snuck in two, did you see that, the constructor,","width":448},{"text":" and then everything after this colon is used to initialize the members of the Animal class, I mean struct.","width":512},{"text":" OK?Any question about that? can I keep going? ","width":393},{"text":"no, I can't keep going, i can't keep going, are you kidding me?","width":320},{"text":" there's some new syntax here. Let me tell..","width":384},{"text":"(crying and laughing..)","width":256},{"text":" Sorry, well, this is, I'm like blushing, I'm sorry. ","width":960},{"text":"I did! I saw you running outta the building! ","width":640},{"text":"Oh they are having so much fun! OK, no more giggles, there shall be no more giggling, ok, for me. ","width":320},{"text":"Alright, take a look at the constructor for a second. ","width":631},{"text":"It's not just one constructor. ","width":192},{"text":"It's a whole bunch of different constructors because it allows you to give default values in the absence of specifications.","width":768},{"text":" So in the absence of specified parameters, this construct allows you to give default values. ","width":832},{"text":"Now, I do have a hard question for you related to this.","width":192},{"text":" And that is how many constructors is it? ","width":384},{"text":"six is one answer. four might be another answer. ","width":640},{"text":"Take a look. ","width":128},{"text":"eight might be another answer. one it's not one, I'll tell you right now it's not one, it's a whole bunch. ","width":512},{"text":"OK, so think about all the different choices here, think about all the different choices. ","width":640},{"text":"What you might think you can do, this is a reasonable thing to think","width":320},{"text":", you might think that inside each of these locations, you can either specify a name or not,","width":704},{"text":" specify a food or not, specify a big or not. ","width":576},{"text":"If that were the case, this would be like eight constructors, right? ","width":448},{"text":"This would be like eight constructors because it's 2 to the 3rd for the different options there, ","width":384},{"text":"but in fact, in fact it doesn't work that way. ","width":320},{"text":"It doesn't work that way.","width":192},{"text":" If you choose to make, let's see how does this go, what's the best way to.","width":448},{"text":" If you choose to specify one, you must start specifing them from the left.","width":640},{"text":" So, the defaults are allowed from the right, so you can leave off the big or not","width":384},{"text":", you can leave off the food and the big,","width":256},{"text":" but not the food and then specify the big. ","width":320},{"text":"Make sense? and you can leave off all three if you like, ","width":256},{"text":"but you can't just pick and choose, you can't say \"ok I'll specify the name and the size\" ","width":384},{"text":"you can't do that. OK?","width":256},{"text":" not even with clever use of commas. The fact of the matter is that the grammar that describes the language doesn't allow you to do this.","width":512},{"text":" Any question about that? That will become clear, I'll talk about that a little bit more as we actually declare some of these things. ","width":704},{"text":"OK, so that said, how many constructors is this? ","width":256},{"text":"four constructors, that's right. There's a no argument constructor. x","width":384},{"text":"What's the no argument initialize things to? ","width":320},{"text":"a big blob that eats, yes, big blob that eats you. ","width":320},{"text":"The default animal is a big blob that eats you, and that's you specify no parameters, ","width":384},{"text":"or you can specify, uh, wait.","width":256},{"text":"Or you can have one parameter, or two parameters, or three parameters. ","width":640},{"text":"Alright, let's see. OK, yes?","width":448},{"text":" that's right, you cannot just initialize the boolean value. ","width":384},{"text":"If you are gonna initialize one thing, if you are gonna pass one parameter to your constructor, ","width":320},{"text":"So, if you're gonna pass one value to the constructor, it's gonna be the name of the animal.","width":704},{"text":" OK? That make sense? If you're gonna pass two, it's gonna be the name and the food. ","width":320},{"text":"If you're gonna pass three it's gonna be all three. Yes?","width":64}],
  [{"text":"Yeah, exactly. Right.","width":192},{"text":"Â ","width":384},{"text":"Yup. Yup. Yup.","width":170},{"text":"Okay, any other questions about the animal class?","width":512},{"text":"The animal struct, whatever?","width":128},{"text":"Ok, it is worth noting that this semicolon is necessary.","width":296},{"text":"Just because it's such a common bug we don't want you to deal with it.","width":233},{"text":"Alright, so now let's use this class a little bit.","width":295},{"text":"These are a sequence of valid declarations.","width":407},{"text":"These are a sequence of valid declarations invoking each of the constructors that we just talked about except the no argument constructor","width":825},{"text":"So, here we are declaring a giraffe that eats leaves. Is it big or not?","width":512},{"text":"It is big. Giraffes are big, duh!","width":232},{"text":"Ok, this one is a penguin who eats fish and its not big. Right?","width":512},{"text":"Okay, and b is a big bear that eats you, that's right.","width":576},{"text":"So blobs and bears eat you.","width":128},{"text":"All right.","width":64},{"text":"Ok, fine, and now I'm gonna walk down just a little bit farther here and ask you about this one.","width":512},{"text":"What's going on here?","width":175},{"text":"What is it?","width":256},{"text":"You might want to use a D-word in describing this.","width":320},{"text":"","width":215},{"text":"Yeah?","width":64},{"text":"","width":128},{"text":"Yeah good. Its name is... So you're declaring a list of animals named \"zoo\".","width":640},{"text":"So \"zoo\" is a list of animals.","width":192},{"text":"So this is using the STL List class.","width":320},{"text":"Now it's a quick Google search away to find out what the interface to the List class looks like,","width":704},{"text":"but I'll tell you that the insert... what we could call \"insert at end\"... if we were to make a function, we would probably call it \"insert at end\"","width":640},{"text":"The standard template library uses \"push_back\".","width":320},{"text":"So, we're adding our giraffe to the zoo. How many things does it have in it, right here?","width":640},{"text":"One, so it's a list of length 1, by here. Then we add another thing to the zoo.","width":384},{"text":"And then we add another thing to the zoo.","width":192},{"text":"Ok? Any questions about that at all?","width":192},{"text":"","width":128},{"text":"Ok, let's take a break then, or take another couple minutes...","width":320},{"text":"...and do the same thing with this code. This is gonna take a little bit more untangling.","width":512},{"text":"You should see something entirely new here, so go on a quest, and try to figure out this code.","width":448},{"text":"And up till here it's the same.","width":256},{"text":"So up till there, this is just a continuation of the code on the previous page. ","width":320},{"text":"Take a couple minutes, and figure it out","width":192}],
  [{"text":"It does this and it does this. so what are you thinking, it kinda looks like? it's got. yes? yes! exactly those operators are overloaded inside the iterator class. that's what the iterator class does, it overloads those operators so that you can do, can work this magic. now the question was, why don't you do this instead and the answer is that that would require that to be overloaded and i'm not sure if it actually is for this standard template library list class. i just don't know ok. um iterators promise that the plus plus will be overloaded and that the asterisk will be overloaded so you can both move this thing and look inside your structure. that is a promise from an iterator k? this is a good time to say uhh where that promise came from like it's a promise but who said, who said thats a promise? So an iterator is a notion that was added onto the language later because it was so frequently deployed, it's called the design pattern.","width":5824},{"text":"It's not fundamentally part of the language but it is a part of the cultural experience of the language to know what it is. So what is an iterator, anybody you talk to about c++ will know what an iterator is. And it is formally described but only functionally not as an inherent part of the language it self. so there is this conventional agreement that iterators will always implement something that increments and something that gives you its value. Nathan? Yeah? right. So how do you know you're overloading dereference, or multiplication and the answer is in the number of arguments, so when you dereference, so remember that a function is in part declared by its parameters, i can have two functions of the same name but if they are parameterized differently, then they are different functions, and the same thing is true for dereference operators. it has one and in fact in this case, effectively there are no arguments, it is just the thing. K. and instead of the binary operator. Yeah? could i accomplish this same thing with primitive types? not nearly so elegantly right? So i could do this if i implemented my own list class with a dynamic array and made it but so i could do this in C is sort of what you're asking me basically right? but i wouldn't want to. i wouldn't want to, this is one of the elegances,  elegancies from having C++ ok? Alright any other questions about this right now? ok alright. so uhh, my question is for you, is what is printed out? this is cout, this is the contents of our list, what is printed out? k so the names so we get giraffe, and leaves, and then the next time through we get penguin, and fish and then... do you? ","width":10560}],
  [{"text":"find the end","width":6296},{"text":"implementation of structure container","width":6528},{"text":"overloading","width":10688}],
  [{"text":"Oh. Going backwards you'd have to come forward and find the next one by coming through the forward.Â Okay fine.","width":795},{"text":"Â What if your encapsulating an array? You're iterator helps you step through an array. How would you keep track of where you were?","width":629},{"text":"Just an integer right? An integer index. I'll call it k.","width":452},{"text":"How do you move forward?","width":293},{"text":"You increment it and lets pretend your array was named 'a'","width":503},{"text":"How would you get your data out?","width":152},{"text":"Your overloaded operator would return a k right?","width":512},{"text":"What if your.. Oh boy. What if your memory were arranged like this. Into some hyper cube. These are still the questions you'd have to ask.","width":820},{"text":"You'd say okay. How do I keep track of state? How do I determine what the next one is? How is my data represented inside? Those are the exact same questions you would have to answer in designing this thing.","width":1024},{"text":"Alright any questions? You good? Okay!","width":320},{"text":"We already talked about a lot of this, but we're gonna go through it again so that you have it all in one place.","width":458},{"text":"I have made a list out of the things that you need to implement an iterator.","width":576},{"text":"I have made a list of the things that you need to implement an iterator. And I wanna remind myself what do they return here?","width":717},{"text":"Here's what I want to know. Where does the iterator class go? You remember? Where am I going to define there is gonna be this class iterator. Where does it go?","width":1063},{"text":"Public or private?","width":153},{"text":"Yeah everybody agree? I heard public is that true? Yes! Because in fact we are writing it for the client to use. That's the whole point!","width":722},{"text":"So... class iterator is going to be an inner class. We call it an inner class to in the public section. Kinda like list nodes but not private.","width":1024},{"text":"We may also have list nodes here who knows.","width":192},{"text":"Okay. Where are begin and end defined and what is their return type?","width":640},{"text":"They are public. ","width":256},{"text":"Begin has no parameters.","width":204},{"text":"What does it return?","width":128},{"text":"It returns something of type iterator. That's right!","width":384},{"text":"Where a re these operator++","width":486},{"text":"and Operator* overloaded?","width":256},{"text":"Inside the iterator class and are they public or private? Public good!","width":448},{"text":"Public inside here you have operator ++ and operator * etc. And where is the private member associated with the iterator?","width":1344},{"text":"Where is the private member that helps you keep track of where you are?","width":448},{"text":"Oh it's private. Duh. Inside what class?","width":384},{"text":"Think you keep it here. Yeah.","width":704},{"text":"Right? You wanna keep track of where you are in whatever is defined in this structure.","width":512},{"text":"So you got a list like this.","width":384},{"text":"Like this and you got something that you're gonna keep track of one of those.","width":374},{"text":"Might as well store it there.","width":256},{"text":"Yeah? No. It's an inner class.","width":640},{"text":"This is an inner class.","width":384},{"text":"Alright. Yes?","width":320}],
  [{"text":"The representation of what?","width":194},{"text":"","width":261},{"text":"So this has to be in order to keep track of this, you have to do it in terms of the way the data structure is defined, right?","width":512},{"text":"Like, its pointers if it's a pointer based structure. Integers if it's an integer based structure, etc.","width":448},{"text":"Does that make sense?","width":128},{"text":"Yeah?","width":64},{"text":"","width":256},{"text":"No, you can have many iterators at a time.","width":256},{"text":"","width":256},{"text":"You'd have different ones for different iterators","width":192},{"text":"You'd have different...Â ","width":256},{"text":"","width":320},{"text":"So the client doesn't know that","width":128},{"text":"They don't know what you're doing","width":128},{"text":"Right? They only know ","width":128},{"text":"What you're referring to by your individual one so you'd have","width":256},{"text":"This would be cur forward iterator","width":320},{"text":"You'd have cur backward iterator","width":128},{"text":"Cur","width":64},{"text":"","width":576},{"text":"Yeah, I see what you're saying. I get it. Lemme think about it, ok?","width":384},{"text":"I'm not gonna be able to able to do it this way. But I think you may be right.","width":320},{"text":"About, about what you're worried about.","width":192},{"text":"But lemme think about it, ok?","width":64}],
  [{"text":"[Pre-lecture]","width":11584},{"text":" Alright lets get started. Sorry about that. I have a couple announcements in addition to the mp4 announcement.","width":512},{"text":"A couple days ago you should have received an email from me about Class Transcribe and I want to tell you a little bit about it.","width":512},{"text":"So wouldn't it be nice if the lecture videos were searchable, yes.","width":576},{"text":"Wouldn't it be nice so you could just enter search term and have it find for you a list of videos where say I talk about pointers or whatever you would like.","width":960},{"text":"Well we can do that if you guys will work together to do so.","width":448},{"text":"So a few students have created a system whereby we can crowdsource video transcriptions.","width":512},{"text":"and the deal is that for any one person video transcription is an overwhelming task.","width":384},{"text":"But if all of us, if each of us contributes to getting this done then the burden is not to extreme on any one person.","width":448},{"text":"In fact, in fact, if each of you give 15 to 20 minutes to this task then we will actually have triple, we'll have fault tolerant transcriptions.","width":896},{"text":"So we'll have three different English translations, captions of all the lecture videos.","width":640},{"text":"So, I would like for you, we would all benefit from you going back to my email, the mass mail.","width":640},{"text":"Clicking on the links, signing up for task, doing a task.","width":256},{"text":"Once the videos are approximately half covered then they will open it up for search.","width":576},{"text":"So you have to get a few of them done before it is worth while actually providing them for search.","width":512},{"text":"Lets see, any questions about it.","width":128},{"text":"[Silence]","width":256}],
  [{"text":"You're late. This is mean to put the hand up in front isn't it? hahaha. Uh oh. OH. Ok. Ok excellent, any questions for him. I will facilitate discussion. Any questions for him? alright. thank you very much. yeah. *claps* that is the cheapest applause you're ever gonna get. ok alright fine, um did anybody have any other speculation on what this function does or any other description they'd like to add to it? so what i want to know next is what what is printer? what is printer? now yeah? it's a functor what the heck is that that's a new word. that's a new word, he said its a functor, i just wanna say it a few times because its so fun to say. try it. functor. that's right. good. ok. in fact that's correct, in fact that's correct, ok. now. but, there's a little bit of ambiguity but i asked the question for a reason. what is printer look like in a the middle of the function there? what is it look like, it looks like a function right? it is applied to some parameters right? with parenthesis so it looks like a function but where did it come from. it came in as an object, it came in as a parameter to the function so in fact, printer is what we call a function object. AKA say it, thank you. also known as a functor ok? alright any questions about that. alright fine well all of that is quite abstract, right? all of it is quite abstract so lets make it a little bit more in the context of this function, so lets make it a bit more concrete. the question is how do we make a functor? what is a functor? well take a look at this code right here, take a look at this code what does it do? overloads the parentheses operator, very good and that's it. that's all it does. it overloads the parentheses operator to do a little tricky function, a little cute function, ok? fine. now but it's a class so we can declare something of that type so the first thing i want you to do is remember the previous example declare something of type animal. anybody want to come up here and do this on my tablet for me? ok how about verbally tell me what to do. how do i declare something of type animal? you remember ? from last time. you know the struct is behind here, you can almost see, oh look look look, right here, you can see it. k? alright who wants to do this, raise your hand. somebody raise their hand, ok close your eyes and raise your hand. close your eyes and now raise your hand. chickens, you bunch of chickens. animals c is a chicken and if you remember its a big chicken that eats you. you right k. ok! so i declared an animal, now printigbig is a class, which means i can declare something of that type right? yes? right i can cover over all of this and it says class printifbig, it's not templatized or anything so i can say, printifbig ","width":20928}],
  [{"text":"What should we call it ","width":192},{"text":"frog","width":256},{"text":"because it doest matter okay just a variable","width":384},{"text":"now frog is of type printifibig","width":320},{"text":"now using your answers for one and two invoke some member function of the printifbig class. well what member function do we have. ","width":512},{"text":"only the overloadded operators so how does that work oh i know just how you go frog.operator() and that takes one parmater so i am goiing to put c in there ","width":1344},{"text":"thats how we invoke member functions right","width":256},{"text":"oooooohhhh ooooohhhhh that is exactly equivalent to saying frog(c);","width":832},{"text":"thats how that overloadded parthensis operator works ","width":384},{"text":"any questions","width":192},{"text":"so now what we can do is declare these functors, these function objects and pass them around into functions like we did up there","width":1088},{"text":"alright any questions","width":128},{"text":"the question is why did i chose more intelligent names for the type paramters in the template statment","width":1600},{"text":"and the answer is because i wanted to give you a hint as to what they do","width":320},{"text":"it could be t","width":384},{"text":"it could be ice cream with no space","width":128},{"text":"iter is not a keyword but it is carefully chose to give you kind of a glimpde into how we are oging to use it. like iter as in short for iterate","width":1408},{"text":"alright fine. ","width":1152},{"text":"your next task your next task is to decode this","width":512},{"text":"Take a couple minutes. draw some circles on your page ","width":512},{"text":"decode, figure out whats going on here ","width":384},{"text":"-nothing- ","width":2432},{"text":"turns out you cant touch the touch screen while youre working ","width":576}],
  [{"text":"Alright, so whats going on","width":256},{"text":"yeah?","width":192},{"text":"yeahhhh, very good, so the output of this, is to print only those animals in the zoo that are big","width":768},{"text":"alright? So from the example of last time that would be the giraffe","width":384},{"text":"and the bear","width":192},{"text":"ok, the giraffe and the bear and the penguin will not be printed","width":192},{"text":"Ok!","width":128},{"text":"Ok, so should we untangle it?","width":64},{"text":"Alright, so, printifbig (Oh, wrong pen), printifbig is called myFun","width":448},{"text":"So the name of the function we gonna pass around is called myFun","width":384},{"text":"Last time it was frog but here we gonna use myFun","width":256},{"text":"As in my functor","width":64},{"text":"Ok, then I'm gonna call, simply call funtion print","width":320},{"text":"Ok, so that's the top function up there","width":192},{"text":"Now what does print needs?","width":128},{"text":"It needs two types and three parameters","width":306},{"text":"Two types and threeparameters","width":192},{"text":"Here are the two types","width":128},{"text":"Ohhhh, it's an animal list iterator","width":256},{"text":"And the type of the functor","width":448},{"text":"Ok? and now it needs three parameters, what is the first parameter?","width":508},{"text":"Oh it better be of this tupe and the intention is that the processes going to go from one to the other","width":704},{"text":"So it make sence that we are gonna walk forward through the zoo.","width":320},{"text":"So make sence that we would choose zoo begin, which is just a member function of the zoo class that returns an iterator","width":512},{"text":"One of these","width":256},{"text":"Right? Something of that type","width":64},{"text":"Zoo end, and then whatever I called that fuction","width":512},{"text":"Name for that fuction.","width":128},{"text":"Ok! So what does it do? ","width":128},{"text":"It applies this function to every element of the zoo between these two iterators.","width":512},{"text":"And print it out if it is big","width":192},{"text":"Ok?","width":177},{"text":"Any question about that?","width":192},{"text":"Yes?","width":64},{"text":"Oh, so we are printing out the very last element, because it's going to go while the first is not equal to the second","width":768},{"text":"So it's gonna keep going until it becomes the same as the second. ","width":443},{"text":"Ok? and then","width":124},{"text":"Oh, end is one pass for last","width":192},{"text":"End is one passable last from that time, that's the key point there.","width":405},{"text":"Ok any other questions","width":98},{"text":"Either question about this?","width":178},{"text":"Ok, so, you know","width":256},{"text":"I am not as eduminded probably as you are but I will tell you how I respond to this","width":448},{"text":"And maybe, maybe you will be a little born mentally flexable","width":384},{"text":"Every time I dont have a mechanism for remembering exactly how this goes every time.","width":384},{"text":"I had to think very hard and very carefully about how to set this up","width":384},{"text":"But what's important is that you know it can be done.","width":192},{"text":"That is you know you can define a function that you can pass around and apply to members of the container.","width":640},{"text":"Ok, that's what is important tha you know, Ok? ","width":320},{"text":"And untangling exactly how to do that every time is a matter of practice","width":320},{"text":"You had to do that everyday you realize that","width":128},{"text":"Oh yeah all you gotta do is declear a couple of iterators .etc","width":704}],
  [{"text":"sure yeah we can pass something different here if we had a different thing.","width":448},{"text":"yes yes ok? yes.","width":128},{"text":"","width":832},{"text":"so the question is can you do more than one function with a functor?","width":576},{"text":"so you can imagine class functors.","width":192},{"text":"and the problem with that is i only know how to overload ","width":256},{"text":"parenthesis one time and that ended depends on that function.","width":320},{"text":"so the thing is that what you probably can do and I haven't tested this","width":384},{"text":"we are in open water here for me","width":256},{"text":"what you probably can do is have a different one with a different parameter here","width":320},{"text":"yes yes I am pretty sure you can do that. you can overload operator parenthesis with different parameterization.","width":640},{"text":"in the same class","width":128},{"text":"pretty sure that will works I don't see why it wouldn't","width":256},{"text":"ok yes steven?","width":119},{"text":"","width":256},{"text":"complie well I will throw back at you","width":128},{"text":"if it can't find that function it will say: yo you didn't define the function","width":320},{"text":"so that the compiler will tell you that","width":192},{"text":"ok any other questions about this?","width":256},{"text":"","width":320},{"text":"oh the question is:","width":64},{"text":"the question is a really good one","width":192},{"text":"","width":128},{"text":"do you only overload the parenthesis operator or can you have other stuff too?","width":320},{"text":"","width":320},{"text":"can you answer that?","width":64},{"text":"based on your experience on this class?","width":256},{"text":"","width":196},{"text":"yeah you can certainly you can probably do anything ","width":140},{"text":"but based on the  experience on this class I assert","width":128},{"text":"that you actually has used a class of this type ","width":384},{"text":"","width":64},{"text":"where was it?","width":64},{"text":"right. so it 's actually the PNG class rightï¼","width":586},{"text":"yeah the PNG class has its parenthesis overloaded","width":192},{"text":"and it is the function that will look up that that position in the table","width":256},{"text":"yes?","width":64},{"text":"","width":813},{"text":"","width":10},{"text":"right","width":128},{"text":"tell me where it is to stop.","width":256},{"text":"right here?","width":64},{"text":"","width":228},{"text":"a value?","width":189},{"text":"so if it is a value ","width":128},{"text":"up here. so I am not ganna say no because maybe I have maybe I am imagining something different than you ","width":320},{"text":"but what has to be true up there its has to be completely generic","width":192},{"text":"there can be no expectation of any particular type.","width":256},{"text":"but it could be something of you could parameterize it to be something of type animal","width":384},{"text":"","width":59},{"text":"in the template and pass one of those an element of ","width":256},{"text":"and then stop when you find so that will be like a find right? find an elephant","width":384},{"text":"for example","width":64},{"text":"","width":192},{"text":"oh you can to change that code completely instead of comparing first and second would have to be compare","width":358},{"text":"the value of first with whatever the second parameter was","width":354},{"text":"so you can do what you are talking about different funcionality","width":245},{"text":"but its fine","width":39},{"text":"thats a nice little adaption of it","width":128},{"text":"","width":437},{"text":"sure inside here","width":86},{"text":"","width":22},{"text":"sure","width":64},{"text":"like the PNG class has a lots methods right","width":216},{"text":"for example","width":64},{"text":"and an overloaded parenthesis operator","width":256}],
  [{"text":"And I don't know how to draw attention to the fact that I ","width":320},{"text":"switch this. Now by convention, we are always going to draw these trees hierarchically. We wouldn't have to.","width":633},{"text":"right? Like we could draw like this andÂ ","width":149},{"text":"say oh you know there you started ","width":198},{"text":"travel clock in their orders determined by a","width":198},{"text":"uh...clockwise rotation around the root. ","width":256},{"text":"But we are not getting to do that. We are always going to draw them with the root at the top.","width":512},{"text":"As backwards. The root at the top. And we won't draw these arrows either, because they are always directed away from the root.","width":599},{"text":"So we won't actually draw them in most of the pictures. ","width":256},{"text":"Ok. Any questions about all that?","width":192},{"text":"Ok. So today is not tree day, it's actually rooted directed ordered tree day. ","width":598},{"text":"Ok? All right. Any questions? You good? ","width":256},{"text":"Alright. So here's the problem. ","width":229},{"text":"A classic course in a discrete data structure would spend a whole day on definitions.","width":553},{"text":"And I can't do that because it will put you to sleep.","width":233},{"text":"You will be asleep at the end of it. So what I'm gonna do instead is ask you to infer and to create your own definitions in your brains  probably review","width":648},{"text":"should be reviewed at this point. Of all of these terms, based on the...based on this example tree, ","width":683},{"text":"right here, and I wanna point out as you answer these questions","width":279},{"text":"that the first two intend for this not be interpreted as a rooted tree. ","width":414},{"text":"And then the rest of them do intend for this to be interpreted as a rooted tree.","width":350},{"text":"So the first two, no root no direction nothing special, uh but then the rest of the exercises assume tree as rooted.","width":532},{"text":"OK? Alright, and directed, and ordered. Ok, any questions about all that? ","width":412},{"text":"So spend a few minutes doing these questions, uh, I think you can use about three minutes for this. Go fast. ","width":681},{"text":"And you can do in pairs. You can do it socially if you like. ","width":215},{"text":"Anybody wanna come up here and do them?","width":186},{"text":"Here?","width":345},{"text":"I want a pair of people like a commonly routine. Like a...like the oscars, right? ","width":531},{"text":"The academy awards to people could come up and share.","width":395},{"text":"All right. What's the longest English word you can make using the vertex labels in the tree?","width":3020},{"text":"What? ","width":113},{"text":"Alphabets? No. There is no F. Oh wait there is an F. There is no P, H. ","width":747},{"text":"No. No just use the vertex labels and make a word. Like I could make \"high\", h-i-g-h, right?","width":433},{"text":"I could make \"high\" like \"high\", but I could also make h-i-g-h as an example, ok?","width":448},{"text":"Sure. Because I'm allowing for re.... It doesn't have to follow any connectivity, just using the vertex labels.","width":448},{"text":"Ok? Yeah, it doesn't have to.......That's the longest word you could make, could those letters? Yeah?","width":492},{"text":"Yeah. So wait! So read the question carefully. It says, using the vertex labels in the tree. ","width":499},{"text":"Ok? It doesn't say that you have to honor the connectivity. ","width":222},{"text":"Ok? I don't care where you walk around on this structure. It's fine. Just use these labels","width":304},{"text":"and come up with the long word.","width":303},{"text":"Or not. ","width":256}],
  [{"text":"binary trees","width":13888}],
  [{"text":"everything else has a child, so 18 has one child, 20 has two children","width":512},{"text":"20 is called the root node","width":64},{"text":"it is the only node in the tree that has no parent","width":192},{"text":"so everything has one... every node has exactly one parent","width":256},{"text":"now, a little bit trivia","width":128},{"text":"there will be, if there are","width":192},{"text":"4 pieces of data in the tree","width":128},{"text":"there will be 5 null pointers","width":192},{"text":"if you think that through like you have one piece of data you have two null pointers","width":448},{"text":"you have two pieces of data you'll have 3 null pointers because one of the","width":256},{"text":"one of the null pointers gets used up to point to the other thing, the new thing you add adds two, right","width":448},{"text":"so you're always leaving one null and adding two new ones every time you add","width":192},{"text":"so here we have 1, 2, 3, 4 , 5 for the 4 pieces of data","width":192},{"text":"the other thing that's really interesting","width":128},{"text":"all the leaf nodes","width":64},{"text":"you take them all together that's called the fronteir of the tree","width":320},{"text":"in a binary tree, half of your data is gonna be in there","width":192},{"text":"so","width":256},{"text":"you can imagine if you wanna do something to this tree","width":384},{"text":"you have a pointer to this","width":64},{"text":"you're gonna have to descend down, go looking around to find your data","width":192},{"text":"half of it is gonna be as far away as possible as it can get from the orot","width":256},{"text":"which is not very far, usually","width":128},{"text":"but that's something to think about","width":192},{"text":"now","width":64},{"text":"try to imagine in your mind how you're gonna implement this thing","width":448},{"text":"you're at the console, you've opened up vim, cursor's blinking at you, what are you gonna type?","width":512},{"text":"try to imagine that, you can look at your handouts i printed something there","width":384},{"text":"i shouldn't have done that, okay a little typo","width":192},{"text":"that should be class <T> but the slides are very forgiving compilers","width":128},{"text":"in that they don't complain if there's an error","width":320},{"text":"so this is just a standard","width":64},{"text":"we have a wrapper class","width":128},{"text":"i'm gonna call binaryTree today","width":192},{"text":"and then inside that wrapper class is gonna be the node which actually contains the data so the wrapper class handles things like maybe keeping track of the size, it needs to keep the root pointer so it knows where to enter the data structure","width":768},{"text":"and then the node class is where all these","width":192},{"text":"all these pretty diagrams come from","width":128},{"text":"so","width":192},{"text":"how's this looking for you guys? do you like this?","width":320},{"text":"it's making sense?","width":64},{"text":"alright","width":192},{"text":"now","width":64},{"text":"this is a recursive data structure, so almost every function you write on these things is going to be recursive","width":448},{"text":"you could use a for loop or a while loop","width":128},{"text":"but it's actually not as natural","width":192},{"text":"uh, how do you guys feel about recursion?","width":192},{"text":"how many of you think \"you know it'd be nice if you reviewed that just a little bit before moving on?\"","width":512},{"text":"yeah?","width":64},{"text":"alright","width":128},{"text":"i mean like \"no way man i'm sick of recursion\"","width":192},{"text":"well really, the only thing you have to do to know recursion is to understand recursion","width":256},{"text":"alright","width":128},{"text":"well let's talk about it","width":128},{"text":"i actually want to draw a recursion","width":256},{"text":"i know cinda's talked about it","width":64},{"text":"i wanna talk about it again because recursion is the second most powerful concept in all of computer science","width":384},{"text":"abstraction","width":128},{"text":"if you know abstraction, you know recursion, you are a computer scientist","width":512},{"text":"so","width":64},{"text":"you don't even need a computer","width":128},{"text":"hahahahaha","width":192},{"text":"it helps","width":64},{"text":"but you don't really need one","width":128},{"text":"alright, so i wanna talk about proof by induction","width":192},{"text":"how many of you are familiar with proof by induction, how many of you feel like \"yeah i got proof by induction and i'm okay with it\"?","width":384},{"text":"how many of you feel like \"ehh\"","width":192},{"text":"i hope it's not on the test","width":128},{"text":"alright","width":64},{"text":"so","width":128},{"text":"proof by induction, this is the wonderful thing about computer science","width":320},{"text":"we have turned being lazy into an art form","width":64},{"text":"and we've tricked people into paying us dearly for it","width":256},{"text":"so here's how it works, proof by induction","width":128},{"text":"we have a property, i'm going to call it P(n)","width":64},{"text":"so some property P","width":192},{"text":"we just give it a name cause","width":64},{"text":"i don't wanna think about a specific one right now","width":256},{"text":"n is some thing, maybe it's integers, maybe it's trees, doesnt matter","width":320},{"text":"uh, as long as you have some idea that there can be... if you have n you have some concept of what a smaller version of that n might look like, so for an integer, it's easy to make a smaller one, just subtract one right?","width":832},{"text":"for a tree","width":128},{"text":"you have this tree, how can you make a smaller tree?","width":256},{"text":"you go to the left or right side","width":128},{"text":"now you've got a smaller tree","width":64},{"text":"now this gonna turn out to be very important that you can do this","width":256},{"text":"the other thing you need is the idea that you have the smallest","width":256},{"text":"version of a tree, the smallest","width":128},{"text":"tree is a leaf","width":64},{"text":"or maybe null","width":128},{"text":"depending on how you're thinking about it, so what you do with induction","width":320},{"text":"is you say that for n=1 or whatever the smallest thing is, you prove that your property is true for that","width":576},{"text":"and that's usually really really easy, almost trivial, right?","width":192},{"text":"and the induction case, what you do is you want to prove p(n)","width":256},{"text":"now some places they'll say you wanna prove p(n+1), doesn't matter","width":192},{"text":"it turns out to be the same","width":128},{"text":"now you just assume that p(n-1) is true, you pretend that you have some grad student go off and do all the work for you, you come back with it and you take all their credit, okay?","width":640},{"text":"so","width":64},{"text":"uh, don't tell the grad student union i said that","width":320},{"text":"the uhh","width":64},{"text":"so what do you do with this?","width":64},{"text":"you use this fact to prove this fact","width":128},{"text":"you say if this is true","width":192},{"text":"then with a little bit more work, then you can prove that this is true also","width":256},{"text":"now here's the beauty of it, you did not pick a specific n","width":256}],
  [{"text":"Therefore, it's like you prove all of them simultaneously.","width":320},{"text":"Now, this whole n minus one thing, the only reason this works is because you prove the base case.","width":448},{"text":"Now have you even those camping cups, where they kind of open up. They're like  inside of other rings. I don't know may not seen it.","width":512},{"text":"Or maybe set up a bunch of dominoes, you have to be able to knock the first one over. That's what the base case does for you.","width":320},{"text":"Now, let me go over a concrete example to illustrate this","width":384},{"text":"Now you may not have known this but if you take the first n odd numbers and add them all together, you actually get n squared.","width":448},{"text":"So next time youre at a party you can tell people this. They'll look at you the way they always do when you talk at parties","width":576},{"text":"Hey we're all geeks here, we're used to this. Right? You go to a party and say yeah, I'm studying CS yeah I;m learning all these theories and these data structures and they look at you","width":640},{"text":"I have this problem with my word processor you know? That's gonna be your life.","width":448},{"text":"Alright so, base case, n = 1 right? This just 1 all by itself, 1 squared is one, so Base case is true. Got it. ","width":768},{"text":"Now what you do is for the induction case, you want to show the P(n) is true but you assume that p of n minus one has already been proven true. What's p of n minus one, you take the n - 1 odd numbers and just assume that they're equal the minus 1 squared","width":1024},{"text":"assume that that worked out, now what do we do? We add the nth odd number to both sides and theres this huge huge cloud of algebra and when the dust settles you got n squared","width":704},{"text":"that's how proof by incuction works","width":256},{"text":"is this making sense?Â ","width":128},{"text":"I'm not gonna make you reproduce this, but looking at this like okay I get what's going on","width":384},{"text":"are there any questions?","width":128},{"text":"there's a nice geometric proof odd this too if you take a square and you go down the south and east ends keep layering more squares you get a nice geometric proof too. Now the reason why im showing you induction","width":1152},{"text":"is that recursion is actually the same thing.","width":256},{"text":"a recursive function is really just a computational proof by induction","width":320},{"text":"because what you have is just some input","width":192},{"text":"you have two cases, you have a base case, and you ahve a recursive case so when I teach I will often use recursive case and incuctive case interchangeably","width":768},{"text":"beacuse it's really the same thing","width":128},{"text":"right?","width":64},{"text":"so here's a cfunction that can computes n square","width":320},{"text":"it's not very efficient but it uses the same algorithm so this is the base case y is 0 this time if i should have wanted to set n = 1 and returns 1","width":576},{"text":"but then when i return i take n square of n  -1 and just assume that it gives you the right answer, dont think about it too much","width":438},{"text":"and then what are you going to do with that? youre' gonna add the nth odd number to that and that gives you the recursive function","width":448},{"text":"the recursion and proof by induction are really the same thing","width":384},{"text":"now uhhhhh one thing about recursion that you need know that this is about CS culture.","width":576},{"text":"have you heard the story about the little kid who asks his  dad what's holding up the world. the dad says well it's an elephant. so the little kid goes away happy and the day later he's thinking about this and comes back and asks, dad what's holding up the elephant? A Hippopotamus. Oh okay kid goes away this time and hour passes. he comes back and goes so what's holding up theÂ Hippopotamus? a turtle. come on dad whats holding up the turtle, he says son its turtles all the way down.","width":1728},{"text":"okay","width":128},{"text":"if you forget this thing that check for the base case, you're gonna get turles all the way down","width":576},{"text":"youre gonna get an infinite loop","width":64},{"text":"and so you'll hear people talk about this. when they talk about recursions if a recursion goes or if you get an infinite loop or something like that youll hear someone say oh it's turtles all the way down. That's what they mean. That is where it is come from.","width":896},{"text":"","width":64},{"text":"this is really just the same thing to say so what do i dofor my base case , what do i do for my recursion case, the only thing different is you have to tell the computer how to tell the difference","width":640},{"text":"so you have an if statement","width":64},{"text":"Hows this? is this good? is this helpful?","width":320},{"text":"If it's not well too bad","width":256},{"text":"sigh....","width":64},{"text":"alright","width":256},{"text":"uhh","width":64},{"text":"I actually like recursion far far better than for loops and while loops","width":384},{"text":"uh they take a little bit of getting used to but once youre used to them they actually tend to be far more reliable and uh when you take cs421 with me I'll tell you all about that but alright","width":896},{"text":"lets see lets go on","width":64},{"text":"so here's what a recursive function on a tree will look like","width":320},{"text":"so the base case for a tree usually its a null","width":448},{"text":"you wanna know what happens if there is a null tree node coming at uh so youll do your base case here","width":576},{"text":"and the recursive case what will happen is you'll call two recursions one you go down the left side one you'll go down the right side and you'll take the data and youll do something to combine them all together","width":832},{"text":"and that's it, that's really all there is to it","width":448},{"text":"alright lets look at an example now try to think about how would you define the height of a tree?","width":640}],
  [{"text":"You sitting down there's an exam and says ok, write a function that computes a tree. How would you do that?","width":595},{"text":"Go to web browser www.google.com? Better not do that on my exam. Alright yah. ","width":526},{"text":"Yeah. So it's longest path from root to the leaf. So to do this recursively, you're gonna have to think about ok, what's my base case? ","width":980},{"text":"Well if you get a NULL, that's a zero height tree. Now, what's your recursive case is gonna look like.","width":461},{"text":"You have a node that's not NULL, you go down the left side take its height, go down the rightside take its height. ","width":473},{"text":"What are you gonna do with that information? Come on, yell it.","width":427},{"text":"Yah compare them. And you're gonna take the biggest one right? ","width":406},{"text":"SO just take the max, and add one for the root that's your holding onto now, the nodes you're holding onto now and that's it.","width":512},{"text":"So, you return zero for the NULL, you take one plus max of the heights of the two children. How's that?","width":832},{"text":"Does this make sense to you everyone? Any questions? ","width":640},{"text":"You probably noticed by now, my lecture sounds very different than Cinda's. I like to do life codings, so if you have any questions or wanna see an example, we can just type it up and run it and see what happens.","width":965},{"text":"Ugh, so here move it down little more. So here's a tree, so 10 is the root, then 20 is one child then 15 and 25s. We want height. ","width":704},{"text":"Let's do this. Take this, paste it in. It's fun showing off. Come on.","width":1664},{"text":"Actually I'm not gonna be very good at showing off. I haven't programmed the C++ since I was undergrad here. So I actually don't remember half of this stuff that we used to do. I don't even remember there's actually a max function.","width":1664},{"text":"There it is, that's good. It'll look something like this. So, if we have something in here, we're just gonna return one plus max of the two things. Otherwise, we'll just return 0. ","width":1344},{"text":"Let's see if it compiles. It compiled, that means it works, right?","width":832},{"text":"uhm... well, let's move on actually. Oh you want me to run it? ","width":576},{"text":"That said three, uhm... that's right this time. Looks like it worked. Let's hook it to the space shuttle.","width":1472},{"text":"Alright now how about the sum of a tree? Pretty similar, right?","width":768},{"text":"Though, here it's NULL. That we'll wanna do for the NULL? No, you'll get a seg fault right? Null, you probably wanna return 0.","width":1024},{"text":"Uhm.. Otherwise, you return a data + sum of the left and sum of the right. ","width":640},{"text":"Good so far. Alright, your turn. On your handout, there's this crazy function that asks you to write. ","width":960},{"text":"So here's what we'll do. Spend maybe 2,3 minutes. Don't feel like that you gotta get every bit of syntax just right, but try to figure how to do it in about two minutes three minutes, I'll say something and then turn to your neighbor, compare your solution. Then after that we'll talk.","width":1472}],
  [{"text":"","width":6784},{"text":"it said binary trees but really there functions are nodes i wil fixed that to","width":320},{"text":"","width":192},{"text":"hows that going?","width":128},{"text":"yes?","width":64},{"text":"yes?","width":64},{"text":"","width":192},{"text":"you wanna call some of your own funcion?","width":192},{"text":"sure","width":64},{"text":"","width":320},{"text":"well so the idea is that you will call calc on the left subtree and the calc on the right subtree","width":256},{"text":"thats gonna give you a value","width":128},{"text":"and the way it ganna combine those is determined by the current node you have","width":320},{"text":"so if it say","width":192},{"text":"if it is a minus one you add them if it is minus two you multiply","width":256},{"text":"","width":256},{"text":"so positive numbers should only come to leaves otherwise  you ganna chunk it a lot of data","width":320},{"text":"I mean","width":64},{"text":"really that what we are computing is that important. the whole idea is ok can you think recursively what we are doing","width":384},{"text":"that's the point","width":128},{"text":"","width":2048},{"text":"alright why not you turn to your neightbour and just outline what you had in mind","width":256},{"text":"I am not really looking for you to write down the full code and have it compiled or ","width":448},{"text":"the reason I do that is ","width":128},{"text":"it turns out if you actually expanded thoughts trained ","width":256},{"text":"work with this your brain figures out that its important it will keep the data longer.","width":256},{"text":"you just watching a lecture and nodding: oh yeah, thats cool! I got it!\\","width":256},{"text":"it turns out that after you leave 5 minutes later","width":128},{"text":"you know what happens","width":64},{"text":"its all gone right?","width":128},{"text":"you ever had the feeling that taking an exam that you took out every information out of your head","width":256},{"text":"you put it on the paper","width":64},{"text":"you give it back to the professor","width":128},{"text":"we try to avoid the situation here","width":192},{"text":"so I want you to turn to some one","width":128},{"text":"show them what you have in minds","width":128},{"text":"see if you agree","width":64}],
  [{"text":"[Video Playing]","width":1719},{"text":"Alright","width":33},{"text":"Let's talk about this, so we're gonna call this calc ","width":316},{"text":"[Video Playing]","width":301},{"text":"What's my code","width":80},{"text":"[Video Playing]","width":789},{"text":"Is there an else if?","width":88},{"text":"[Video Playing]","width":264},{"text":"Else space if alright fine","width":141},{"text":"[Video Playing]","width":234},{"text":"Alright so","width":71},{"text":"[Video Playing]","width":132},{"text":"n data is what?","width":179},{"text":"[Video Playing]","width":173},{"text":"You want to do the greater than equals zero? Ok","width":172},{"text":"[Video playing]","width":234},{"text":"And just return the data right?","width":93},{"text":"[Video Playing]","width":665},{"text":"What are we going to return now?","width":92},{"text":"[Video Playing]","width":844},{"text":"Never type something twice if you can avoid it","width":140},{"text":"Cut and paste and then modify it","width":179},{"text":"[Video Playing]","width":250},{"text":"Alright, lets see if this thing works now.","width":205},{"text":"[Video Playing]","width":232},{"text":"So we have this population. So this was a minus two,  this was a minus one","width":314},{"text":"This a two, this is a one, this a minus one this is a six and a eight","width":523},{"text":"[Video Playing]","width":305},{"text":"And so what we want to do is we populate, we calculate it's height and then we'll calc it","width":283},{"text":"[Video Playing] ","width":970},{"text":"Alright it said forty-two","width":105},{"text":"So the code's right even if the math might not be","width":263},{"text":"Let's bring that back up","width":168},{"text":"So any questions on this code? Does everyone get this?","width":348},{"text":"[Video Playing]","width":260},{"text":"Is there any other fun thing with a tree you might want to see recursively? Anyone want to see an example?","width":405},{"text":"[Video Playing]","width":477},{"text":"Don't worry tree functions will get a little more complicated later on","width":231},{"text":"What's gonna come next is something called a binary search tree","width":326},{"text":"Where there's a lot more constraints. Right now we just have these nodes and the top nodes connected to the bottom nodes","width":375},{"text":"So the recursions tend to be a little simple cause we don't have to worry, we're just traversing","width":465},{"text":"[Video Playing]","width":226},{"text":"Alright, last call. Any questions?","width":140},{"text":"[Video playing]","width":176},{"text":"Do you feel like you could write this now?","width":215},{"text":"Ok good ","width":76},{"text":"[Video playing]","width":109},{"text":"Alright, so there's one really interesting recursion","width":295},{"text":"Looks kinda like this","width":147},{"text":"You have three lines, you print the node and then you preorder the left, you preorder the right and you really should have an if in there to check if it's null but im just showing you the outline","width":707}],
  [{"text":"d","width":320},{"text":"Slides are wrong. This slides show preorder instead.","width":1216},{"text":"Explaining inorder traversal (slides are wrong)","width":1344},{"text":"You can reconstruct the original tree if given the preor","width":2112},{"text":"You can reconstruct the original tree if given the preorder, postorder, or inorder printout","width":64},{"text":"Preorder traversal: + * 2 4 - 9 3","width":5696},{"text":"Postorder traversal: 2 4 * 9 3 - +","width":64},{"text":"Inorder traversal:  2 * 4 + 9 - 3","width":64},{"text":"Explaining process of traversing tree","width":3200},{"text":"See powerpoint slide for the example","width":832}],
  [{"text":"Professor is figuring out why the slides are messed up","width":9216},{"text":"Going over the example","width":832},{"text":"First you want to build the original tree. Did everyone get that tree?","width":1920},{"text":"What's the preorder for this: yell it out","width":640},{"text":"[student answers]","width":576},{"text":"I will post the pdf of the slides to piazza.","width":960},{"text":"I will post the code and the slides to piazza","width":448},{"text":"answer: 2 3 * 9 9 * *","width":768},{"text":"This lecture had over a hund","width":64},{"text":"this lecture had over a hundred slides, i'm crazy","width":64}],
  [{"text":"[Video playing]","width":205},{"text":"Alright, we'll see ya monday!","width":154}],
  [{"text":"The trees, TL and TR, and are they binary trees? Yes! Because they are empty, right? Look. It's there's like an empty tree there and an empty tree there. So this recursion sorta feel sane to us. What if I erased um..This leg. If I erased 5, and asked you to consider this binary tree. Do you like it? Is it ok? Does it feel like a binary tree? Sure, it's a root together with left and right subtrees. The left subtree has some substance and the right subtree is...is empty. So we're OK. Alright, any questions about that recursive definition? OK, well...Uh...Let's see. So we're going to write functions on these structures and these functions can come in lots of different forms and in fact the data contained in this...The data contained in this particular example tells you about one of the functions you can write on binary trees. What does that data look like? What does that data remind you of? Can you imagine? Computation, right. Evaluation of an expression, that's right. So, in fact, you can imagine that every subtree is like a parenthesized phrase, right. So this triangle has parenthesis around it, this one has parenthesis around it. The whole thing has parenthesis. So this is an example of an expression tree and if we know how to get around on this structure, using say...Traversal. Then we may have a good way of evaluating such a structure. But we're not doing that right now. Okay. Alright, so let's write some functions on this structure. The first one we're going to write is height. Now, you guys talked about height last time, right? What's wrong? We didn't...Mattox and I didn't get a chance to talk beforehand and so the definition that he used is a different one then we're going to use. Okay? So, the definition of height that we're going to use in our class is the length of the longest path from the root to a leaf. Okay? So what does that mean about the height of that tree? What's the height of that tree? Height here is 3, good. 1, 2, 3. Okay? Path length is number of steps or number of edges. Okay, that's all good and fine. Uh, what is the height of here's this example. What is the height of this tree? What's the height of that tree? Zero, very good. And what's the height of five's left subtree? This is where there's a problem. We should all be going gulp I don't know. gulp I don't know. Alright, let's talk about it a minute. Alright, so given a height, given a tree T a recursive definition of the height of T. Alright, so this is what I think is true. The height of T is one plus the maximum height. This is what you did last time. H E I G H T of TL and height of TR. Right? Nothing's different than last time. The problem is...The problem is what's the height of an empty tree? So if I draw you a picture of an empty tree, what's it's height? I drew you a picture of an empty tree, see it? It's lovely isn't it, it is both the most beautiful and the ugliest tree you've ever seen. Right? It's an empty tree. So what's the height of the longest path from the root to a leaf? Uh...uhh...What path? What path? OK. So there is no root, there is no leaf, there is no path. It's completely indetermenant. So we can choose any height we want. Now. Because we can have empty trees it makes sense to choose a height for that empty-ness, the absence, to be something that makes sense. Okay? Does something that helps us out mathematically. Well, you were already whispering what helps us out mathematically. It is the solution that gives us a zero for a single node tree. And it is, what is it? Negative one, that's right. So the height of an empty tree is negative one.Â tree? What's the height of that tree? Height here is 3, good. 1, 2, 3. Okay? Path length is number of steps or number of edges. Okay, that's all good and fine. Uh, what is the height of her","width":11712}],
  [{"text":"I'm making a little table here","width":184},{"text":"here's my empty tree","width":184},{"text":"I can't draw anything there. The model doesn't allow me to draw anything there","width":327},{"text":"Now make sure that you believe that it works.","width":463},{"text":"which case applies to that tree","width":320},{"text":"which case applies to the node containing 5 there?","width":172},{"text":"recursive case or base case?","width":129},{"text":"recursive case","width":105},{"text":"that's right","width":64},{"text":"tempting to say that's just one base case but no the recursive case applies","width":294},{"text":"so we're going to look at the height of the subtrees","width":262},{"text":"take the maximum one of those and add one to it","width":287},{"text":"what are the heights of the subtrees?","width":140},{"text":"negative one","width":125},{"text":"we add one and we get","width":153},{"text":"zero","width":71},{"text":"so that works out for us","width":95},{"text":"any questions about that?","width":113},{"text":"Now what gets us that freedom the freedom to ascribe whatever height we want is the fact of the defiinition the english definition is actually indeterminate on an empty tree","width":850},{"text":"so we can choose anything that makes our live convient","width":211},{"text":"maybe it was negative 42","width":141},{"text":"but that would screw things up completely","width":172},{"text":"any other questions about this?","width":128},{"text":"who's yawing?","width":192},{"text":"oh did you get it done?","width":576},{"text":"i was up late last night driving back from green bay","width":320},{"text":"full binary tree","width":276},{"text":"i'm gonna tell you some things that are gonna confuse you","width":313},{"text":"there are three words that used to describe trees they are full, complete, and perfect","width":745},{"text":"three definitions","width":159},{"text":"they mean completely different things","width":153},{"text":"so this is the problem this is the problem with the language that we choose to describe these things","width":357},{"text":"moreover, moreover not unlike height they might have slightly different definitions depending on who you talk to.","width":623},{"text":"mathematicians would call what I call perfect trees a complete tree and they don't have this separate notion of a perfect tree","width":601},{"text":"in this context it pays when you're having a conversation with somebody about the vocabulary associated with the tree to make sure your definitions are clear","width":678},{"text":"i want to point that out before we do the definitions so that you can be confused going into it","width":386},{"text":"clarify it in your own way","width":234},{"text":"ok so i'll tell you an english definition for a full binary tree","width":422},{"text":"it is simply one in which every node has either two or zero children","width":462},{"text":"so is this one a full tree?","width":170},{"text":"sure","width":300},{"text":"is that one a full tree?","width":174},{"text":"no of course not","width":119},{"text":"that's what the example is for","width":164},{"text":"so every node has two or zero children","width":198},{"text":"now what i wanted to do is write a recursive definition for this","width":262},{"text":"this is sorta to prove that not every recursive definition is elegant","width":307},{"text":"unfortunately they are not","width":208},{"text":"i will start though with the fact that f is a binary tree which means it's probably going to be the case that we're going to use empty and not empty as the cases for our definition","width":917},{"text":"and indeed an empty tree is a full tree","width":234},{"text":"now the recursive case is what's interesting","width":281},{"text":"so let's talk about this and note that we have Tl and Tr to use in our definition of this full tree","width":788},{"text":"so what does that definition look like?","width":264},{"text":"what is true about Tl and Tr?","width":387},{"text":"right they're either ","width":900},{"text":"i'm gonna switch it around a bit he said that both valid or both empty","width":307},{"text":"say the empty part first","width":162},{"text":"and valid is a term i haven't given a definition to so i'm just gonna say either both empty or both not empty how bout that?","width":1016},{"text":"so the emphasis is on both right? if i came to you and said 'huh this tree is either empty or not empty' you'll go 'yeah' ","width":633},{"text":"but in this case what we're saying is that they are either both empty or both not empty","width":471},{"text":"and my definition is not complete","width":256}],
  [{"text":"Is this a full binary tree?","width":64},{"text":"NO. Ok. ","width":359},{"text":"ou agree that it is full but it satisfies my condition,","width":348},{"text":"TL and TR are, see? Here is T. Here is TL, itâs not empty.","width":555},{"text":"Here is TR, itâs not empty.","width":336},{"text":"And, what must I say about TL and TR. T","width":631},{"text":"They are both full binary trees.","width":192},{"text":"This is a recursive part.","width":128},{"text":"Ok?","width":320},{"text":" So,if you think you are writing a definition about trees and you havenât use the vocabulary in the recursive definition then you are not finished. ","width":704},{"text":"Ok, any question about it.","width":192},{"text":"So I need to put like a big red. ","width":128},{"text":"This one is not a full binary tree. ","width":256},{"text":"Any questions?","width":128},{"text":"Ok. Letâs work on perfect. ","width":256},{"text":"I give you the definition here I believeâ¦","width":320},{"text":"And I want you to build for me the first couple of perfect binary trees.Ok?","width":704},{"text":"So Iâm defining this thing to be P sub h that is parameterized by the height.","width":512},{"text":"Structure is parameterized by the height. ","width":384},{"text":"So whatâs P0. ","width":320},{"text":"Perfect tree of height zero. What does it look like?","width":384},{"text":"Single node. Very good.","width":128},{"text":"Now, draw me a perfect tree of height one. ","width":320},{"text":" Ok good.","width":1024},{"text":"Now draw me a perfect tree of height two. Pressures on. ","width":192},{"text":" On the fly, ","width":128},{"text":"look at that. Good work. ","width":256},{"text":"Very good. Ok, any questions about it? ","width":128},{"text":"This is just a tree of height H with all the nodes. ","width":320},{"text":"All the nodes are there. Any questions about it. ","width":384},{"text":"As I say before a mathematician may call this complete tree.","width":384},{"text":"Ok, I have a question for you","width":384},{"text":"how many nodes in a tree are height h.","width":192},{"text":"Think about 30 seconds speculating on it. ","width":384},{"text":"There isnât two in the answer.","width":256},{"text":"So when I refer to how many nodes Iâm gonna use the vertical bars here","width":448},{"text":" and represent sizeâ¦to represent size. ","width":320},{"text":"So these vertical bars are gonna represent the size of the trees are going to be number of nodes.","width":320},{"text":"So what is it.","width":128},{"text":"Ok, wait, say it again. ","width":384},{"text":"Itâs two toâ¦I think itâs two to the h+1 -1. Is that work? ","width":512},{"text":"Ok. Ok. Fine. I donât know if that is right or not. ","width":448},{"text":"But what I do know is true is that the size of Ph is definitely ","width":448},{"text":"s all the nodes in each of sub trees plus the root.","width":512},{"text":"Oh and the number of nodes in the tree of height","width":384},{"text":"oh I donât know. ","width":64},{"text":"Zero is one started there. ","width":128},{"text":"This doesnât really matter.","width":128}],
  [{"text":"Anybody want to write it on my tablet?","width":64},{"text":"I will walk around and if you seem to have it I will give it to you.","width":448},{"text":"In case you are having a hard getting start it, I am going to ask you a question. What does the left subtree of this example looks like?","width":1216},{"text":"The left subtree looks like something you seem before, rather than recently. What is it?","width":512},{"text":"Anybody want to write it? ","width":1664},{"text":"um, if somebody over there wants to write I will throw this PC like a frisbee .","width":384},{"text":"That is inceptive right there. ","width":320},{"text":"No way? Alright, tell me what letter I am going to write next.","width":384},{"text":"What does this looks like?","width":256},{"text":"What letter I am going to write next? If I am filling in this blank.","width":448},{"text":"No. p right? I am going to write p. I have a symbol to represent perfect. P and how tall is it?","width":704},{"text":"How tall is it?","width":128},{"text":"P of h minus one good and what does the right subtree look like?","width":576},{"text":"C of it's height is also h minus one, good.","width":512},{"text":"Okay, any question about it?","width":128},{"text":"Okay, fine. What if these node doesn't exist?","width":448},{"text":"Then the left subtree will look like what?","width":192},{"text":"C of , good. How tall? H minus one, good. And then right subtree looks like what? I will give you the h minus two there","width":1152},{"text":"C or P? Raise your hand if you think c. Raise your hand if you think p.","width":384},{"text":"Okay","width":64},{"text":"P of h minus two, that's right. There can't be anything there","width":256},{"text":"Alright, any question about it? Good. So now, now, if you're trying to do some computation on complete binary tree, this is one way you could arrange your computation if you want.","width":832},{"text":"Writing a recursive function on complete binary trees, you just have to defined that function on perfect tree and make a bunch of recursive calls.","width":640},{"text":"Okay, alright. So, I wanted to verify for you that my English definitions were even say all nodes are pushed to the left is actually something official. ","width":960},{"text":"That is what is this link is about. It comes from nist, the National Institute of Standards and Technology. So, this is nist.gov","width":640},{"text":"um, and, I believe the ds here is for data structures. So this is the official defition. What?","width":640},{"text":"I know, isn't that sweet? Dev","width":320},{"text":"All kind of data structure something, and this is their definition in complete binary tree.","width":640},{"text":"There is one vocabulary word in the definition that we have not t talked about.","width":448}],
  [{"text":"What word is in my English definition that we have not talked about?","width":305},{"text":"Level, very good","width":76},{"text":"Level is not defined","width":181},{"text":"But suffice to say, here's level 0","width":201},{"text":"There's level 1","width":94},{"text":"There's level 2","width":98},{"text":"There's, in general, is level h","width":311},{"text":"Sorry, it's just an index for the path length, effectively","width":343},{"text":"From the root, any question about it?","width":610},{"text":"This part right here?","width":126},{"text":"Okay, so the question is, \"What the heck am I talking about there?","width":510},{"text":"So in this recursive definition, we are admitting that this jump from the bottom","width":614},{"text":"level up to the previous level, has to happen somewhere","width":460},{"text":"Now, case one is the situation where that jump up happens in the right sub tree","width":696},{"text":"And case two here is the case where the jump up to the previous level happens in the left subtree","width":784},{"text":"Now, for any opportunity or example where you jump up in the left subtree, that means","width":723},{"text":"that the left subtree itself has all the nodes pushed to the left, right?","width":370},{"text":"And so it is complete","width":238},{"text":"How tall is it?","width":171},{"text":"h-1, very good","width":146},{"text":"Now, the right subtree in that case has no nodes on the bottom level, so?","width":701},{"text":"it's perfect","width":132},{"text":"How tall is it? h-2","width":490},{"text":"Any other questions?","width":449},{"text":"If you added 3 nodes to the original tree? I see what you're doing","width":476},{"text":"Are you asking which of those recursive cases applies?","width":209},{"text":"I believe it is this one (circles first case)","width":256},{"text":"Applies because both subtrees are height h-1, in that case","width":527},{"text":"What does that say about a perfect tree of height h-1","width":323},{"text":"It's also complete, that's right","width":369},{"text":"You can untangle it, I believe it will work","width":668},{"text":"So the question is, so I gave this teaser, right, I saidÂ ","width":327},{"text":"Complete binary trees turn out to be very useful","width":282},{"text":"It's gonna be about two weeks before I give the punchline to that one","width":340},{"text":"This is a two week cliffhanger","width":180},{"text":"I want you to be watching for it","width":370},{"text":"Alright, any other questions about it?","width":178},{"text":"We good?","width":64},{"text":"Okay, is every full tree complete/","width":223},{"text":"No way!","width":95},{"text":"No!","width":47},{"text":"The one we drew was an example of a full tree that was not complete","width":226},{"text":"Is every complete tree full?","width":203},{"text":"No!","width":74},{"text":"Really?","width":69},{"text":"You're right, push on it","width":313},{"text":"Is every complete tree full?","width":631},{"text":"I'm gonna erase everything here","width":640}],
  [{"text":"Ok. By an inductive hypothesis that says","width":316},{"text":"","width":189},{"text":"for any number less than n,Â ","width":362},{"text":"a tree of size, that size, j, has how many node pointers for any j less than n, a binary tree ","width":768},{"text":"of j nodes has how many node pointers? j+1 node pointers.","width":832},{"text":"Ok? By, we know","width":394},{"text":"T(L) has how many node pointers? And I'll give you a hint. ","width":372},{"text":"The size of T(L) is that. ","width":192},{"text":"How many node pointers does T(L) have? ","width":256},{"text":"T(L) has how many?Â ","width":320},{"text":"","width":155},{"text":"this many? Does it have this many node pointers?","width":320},{"text":"This many plus one. ","width":576},{"text":"And how many does T(R) have?","width":384},{"text":"The number of nodes in T(R) plus one. ","width":256},{"text":"So, T has the size of T(L) plus one plus the size of T(R) plus one nodes.","width":960},{"text":"Tell me something interesting about this. ","width":292},{"text":"Some of time to.......Oh it is time to go. I need only one more thing.","width":292},{"text":"Tell me something interesting about this sum. ","width":249},{"text":"Yes?","width":199},{"text":"It's the size of T. Look at this. This is the number of nodes in the left subtree, the number of nodes in the right subtree, ","width":480},{"text":"and the root, right? This is n. So this is n plus one.","width":524},{"text":"Done.","width":72},{"text":"Magical.","width":134},{"text":"Ok. Bye. Sorry keep you over. ","width":320}],
  [{"text":"Um... back row, can you hear me?","width":12224},{"text":"You guys are not in back row... OK...","width":320},{"text":"OK...UM...","width":768},{"text":"Let's see I have an announcement.","width":256},{"text":"Guess what it is...Midterms coming back in sections this week","width":512},{"text":" It's coming back in your section, yeah I know I'm sorry.","width":128},{"text":"We try something new. Shame on us.","width":128},{"text":"Haven't forbid we actually make some changes.","width":256},{"text":"um...okay, so um... your midterms are coming back to you in section this week. Um..","width":384},{"text":"I have here... the data, on the midterm, you can kinda see the... it's a normal curve...sort of","width":640},{"text":"which I like to see, um.. the median is 75, it's a perfect exam! It's a perfect exam.","width":640},{"text":"OMG","width":192},{"text":"and the average is 72","width":320},{"text":"so...a perfect exam will have them be the same, but what I'm thinking is that there were few of you just sort of hunting. They got exam and they said Oh yeah I have to drop this class... ","width":576},{"text":"and that's what brings typically brings the average down lower than the median.","width":384},{"text":"ok.. so I should've write all that down...","width":320},{"text":"I think...um... mean of your exam was 75,.... no no no...72, median was 75. YES!!!","width":832},{"text":"PERFECT!!!","width":384},{"text":"One life is perfect","width":192},{"text":"ok...","width":64},{"text":"can you tell what happens really... alright","width":192},{"text":"umm","width":64},{"text":"what that mean so there unlikely to be a curve umm... a curve on this exam, or any kind of accommodation for .. ummmm....","width":576},{"text":"the difficulty of the exam...yes?","width":320}],
  [{"text":"Youre guessing right. A traversal.","width":110},{"text":"But heres what I want you think about","width":289},{"text":"What I think about if you had this structure in front of you","width":256},{"text":"And your're talking on the phone to somebody","width":281},{"text":"How could you tell them the data, not the connectivity, necessarily, but how you would tell them the data that is arranged in the structure in front of you?","width":840},{"text":"Okay?","width":64},{"text":"So, write down a traversal of this data","width":320},{"text":"In a way that","width":128},{"text":"you would tell it, tell that data to someone who was sitting on the other line","width":517},{"text":"I know nobody talks on the phone okay. The order you would put it in a text message","width":300},{"text":"Does that make sense?","width":88},{"text":"You have to tell you aunt rosie about this super cool set of data contained in this tree","width":474},{"text":"How would you do it?","width":89},{"text":"After all, that's what a traversal is. Right?","width":192},{"text":"Go ahead and write it down","width":94},{"text":"Write down some traversal","width":192},{"text":"of this tree","width":439},{"text":"","width":653},{"text":"Oh and do it in silence","width":92},{"text":"Oh you already are","width":211},{"text":"","width":384},{"text":"Its very polite of you to let me drink my coffee","width":178},{"text":"","width":448},{"text":"Okay, got it done?","width":216},{"text":"Raise your hand if you have it done","width":94},{"text":"Some traversal of the structure","width":81},{"text":"take a couple more seconds then","width":235},{"text":"","width":640},{"text":"No just write down these nodes in some order. I dont care what order","width":238},{"text":"Not the code.","width":119},{"text":"Just write the data in some order","width":94},{"text":"I'm sorry","width":128},{"text":"Write down the data in some order","width":156},{"text":"No code","width":64},{"text":"This is not a code day","width":64},{"text":"Until later","width":118},{"text":"No no code!","width":384},{"text":"Write down the data.","width":27},{"text":"The order in which you are going to tell it to your aunt","width":297},{"text":"Okay got it?","width":619},{"text":"In some orde","width":145},{"text":"Now what I want you to do","width":128},{"text":"is turn to the person next to you","width":139},{"text":"Hi. ","width":105},{"text":"Turn to the person next to you and share your traversal of yours","width":301},{"text":"and raise your hands if theyre the same","width":165},{"text":"Oh now youre talking to each other","width":520},{"text":"Pair of you","width":128},{"text":"Raise your hands if theyre the same","width":128},{"text":"I wish I had a prize. You guys did the same one","width":334},{"text":"","width":64},{"text":"","width":256},{"text":"Okay","width":27},{"text":"Okay. Lets pull it in","width":415},{"text":"So, the pairs of you that had the same ones raise your hand","width":412},{"text":"Raise your hands so Imma have littler conversations with you","width":243},{"text":"You had the same ones as yourself","width":108},{"text":"Very good","width":64},{"text":"Alright what traversal did you use","width":321},{"text":"What name would you put on the name of traversal that you used?","width":196},{"text":"Post order traversal?","width":224},{"text":"You both happened to use a post order traversal","width":448},{"text":"Raise you hand if you both happened to use a post order traversal and tell me what that order is","width":29},{"text":"here is a post order traversal of this tree","width":393},{"text":"Tell me those entries","width":548},{"text":"","width":576}],
  [{"text":"The reference to a parameter for the recursive call, right that's like the start of an edge in this picture.","width":960},{"text":"The passing of a parameter is like the path past this edge going forward. Yes, do you buy it?","width":1088},{"text":"So when I do cRoot->right, it's like I'm walking down that edge, kind of.","width":512},{"text":"And the actual visit of a vertex corresponds to this moment or this moment or this moment.","width":960},{"text":"So those three red dots correspond to actually being inside this program code here or here or here. ","width":896},{"text":"The evaluation of this conditional is constant time. So we're actually not going to worry about it very much.","width":704},{"text":"But now what we observe, is thinking about the vertices and the edges actually corresponds to exactly the code that sits here.","width":832},{"text":"It corresponds to at least accounting for what happens in the code that sits here.","width":512},{"text":"I forgot the other side of the edge.","width":448},{"text":"I forgot this part of my little walkaround. That corresponds to passing control back to the call function.","width":576},{"text":"What's the punch line here? The punch line is that the amount of work that we do per data element is constant.","width":1152},{"text":"It's three little visits, a function call, a return, a function call, a return.","width":960},{"text":"That's it, that's constant.","width":128},{"text":"But we do that for every vertex. If it's constant per vertex, then what's the running time?","width":448},{"text":"Linear.","width":192},{"text":"So constant O(1) per node implies O(n) for the algorithm.","width":1024},{"text":"Ok, any question about that?","width":448},{"text":"Now notice that this is different than the way we evaluate running times for a iterative algorithm.","width":640},{"text":"Usually, when you see a for loop, you think oh that's a factor of n.","width":384},{"text":"At least that's where you start in your reasoning. When you evaluate things recursively, things get very messy.","width":704},{"text":"Especially when you don't know the size of the recursive call.","width":384},{"text":"It's easy if you know the size of the recursive call is n-1, right. That makes it easy.","width":384},{"text":"But the problem setting up a recurrence here, is we don't really even know how big to make this.","width":512},{"text":"We don't know what the size of the recursive call is here. Because we don't know the size of the other one was.","width":512},{"text":"Another way of evaluating how this algorithm works is to look at what happens for each vertex.","width":576},{"text":"Similarly, if you had a vertex, and for every vertex, you travelled to the root and back. For each one, a good place to start the analysis, is woah, at every vertex I go all the way back up the tree. that would be one way of approaching it.","width":1600},{"text":"Alright, any questions about all that?","width":192},{"text":"The punch line is, traversals run in linear time.","width":384},{"text":"If they don't, something else is going on. And it's not good.","width":448},{"text":"Traversals should run in time proportional to the size of the data.","width":512},{"text":"It fits your instinct.","width":128},{"text":"And anything that smells really does smell for a reason.","width":256},{"text":"OK, I have one more question about this. So, all traversals should run in size proportional to the data.","width":512},{"text":"Is this piece of code which I believe was similar to what you wrote last Friday, is it public or private in the binary tree class?","width":640}],
  [{"text":"T's data should become what? Croot's data, good. And if I'm building that root node I have to do the data, I have to do the left subtree and the right subtree and then the node is built. What is the left subtree? T left is what? Copy of croot's left. Okay I'","width":2560},{"text":"Okay I'll race you for the last line. ","width":128},{"text":"And then what I'm gonna do is return T.","width":1088},{"text":"You like it?","width":256},{"text":"Seems okay, right?","width":384},{"text":"What's the running time?","width":192},{"text":"Waitwhat?","width":192},{"text":"What's the running time of that algorithm?","width":128},{"text":"Big O of N","width":192},{"text":"You did that fast!","width":192},{"text":"How did you do that?","width":128},{"text":"Okay so I'm going to write running time right here.","width":832},{"text":"How do you know it's big o of n","width":640},{"text":"anything else would make you mad anything else would be like ridiculous or ridiulous","width":256},{"text":"Either way","width":192},{"text":"Alright if you squint your eyes","width":180},{"text":"It looks a lot like what?","width":139},{"text":"Pre order traversal","width":256},{"text":"That's right","width":123},{"text":"It's an if statement it's a fat if statement there's a constant amount of decoration around it","width":448},{"text":"but it's an if statement with a constant amount of work and 2 recursive calls","width":512},{"text":"so it's just like preorder so I'm gonna say that the running time is big o of n teh same as preorder by analogu","width":960},{"text":"Can yo ualwayus just make a guess like that?","width":256},{"text":"Big o of n by analogy to traversal","width":606},{"text":"The same amount of work this is just a traversal where instead of yellling out your data you do something else you make a new node and copy some data","width":768},{"text":"okay any questions about that/","width":143},{"text":"okay fine","width":64},{"text":"so it probably doesn't suprise yuou taht the next application of traversal that we are gonna see is the clear function","width":984},{"text":"I","width":192},{"text":"I've got a tree and want to clear out its memeory","width":179},{"text":"so take a look and see if the code does this","width":418},{"text":"What i think the code should do is clear out the left, clear out the right, and free the memory associated with the root","width":867},{"text":"so i think it should do this then this and then this","width":320},{"text":"okay does the code dod taht?","width":341},{"text":"oh, yeah i forgot this is the buggy slide","width":787},{"text":"I could fix it the other wayu the other way would be a little bit better in terms of you know in my binary tree class the root is called really this is the root something","width":734},{"text":"okay so now does the code dodthat?","width":256},{"text":"sorta","width":64},{"text":"this code has a big bug waht is it?","width":594},{"text":"Nope","width":202},{"text":"Here's the root r","width":195},{"text":"this one uses root as r","width":253},{"text":"What's the bug?","width":318}],
  [{"text":"So if the root is equal to NULL, we do nothing there's nothing to be done, there's no memory associated with the thing","width":640},{"text":"So that seems to be OK","width":704},{"text":"Otherwise we clear out....Oh wait","width":320},{"text":"I'm doing something wrong already.","width":192},{"text":"What is root here","width":256},{"text":"Yea","width":448},{"text":"Root is a copy of r.","width":128},{"text":"It's a parameter. It's a copy of the original root. k?","width":512},{"text":"So what this code does is it clears out the left it clear out the right.","width":384},{"text":"It frees this memory. Right? That's what this delete does.","width":320},{"text":"And then it says this guy equal to null.","width":192},{"text":"Is that what we wanted? No.","width":128},{"text":"So how do we fix it?","width":128},{"text":"Pass by reference is the answer, that's right.","width":192},{"text":"So we need to pass by reference there and then this code works fine.","width":320},{"text":"And what is the running time of it?","width":384},{"text":"Big O of n.","width":320},{"text":"Which traversal does it happen to look most like... post order, that's right.","width":320},{"text":"To recursive calls and then a little bit of work.","width":192},{"text":"So by analogy, to post order traversal.","width":704},{"text":"OK, good?","width":64},{"text":"Alright, let's keep going.","width":128},{"text":"Alright, here we go.","width":128},{"text":"This is ...Grammy moment...","width":192},{"text":"Alright, something totally different.","width":128},{"text":"I think level order traversal is a perfectly reasonable way of expressing the content of a tree like this.","width":448},{"text":"The problem is that level order traversal does not use the connectivity of the structure in any way. ","width":576},{"text":"You jump from sub-tree to sub-tree.","width":192},{"text":"And so the approach to writing this algorithm is not a recursive  approach.","width":832},{"text":"Because we can't express the lever order of the main tree elegantly using recursive expression of the level orders of their sub-tree.","width":768},{"text":"Ok? Alright.","width":128},{"text":"So here's how the algorithm goes for a level order traversal.","width":448},{"text":"So the first thing we're gonna do is we going to create a queue and put the root on it.","width":512},{"text":"And here's my queue I'm gonna put the root on it.","width":512},{"text":"Root node.","width":192},{"text":"Probably root node, probably root node pointer.OK?","width":64},{"text":"Alright, so this is make a queue and add root.","width":576},{"text":"K?","width":192},{"text":"And then until the queue is empty, ","width":448},{"text":"do the following,","width":192},{"text":"remove elements from the queue","width":320},{"text":"yell the value","width":704},{"text":"and add it's children on queue","width":640},{"text":"OK","width":64},{"text":"So that means I remove plus from the queue, yell it's value and Onqueue its children,","width":576},{"text":"by conventionally do that left to right.","width":256},{"text":"By convention I'm going to add minus and asterisk to the queue.","width":448},{"text":"Ok?","width":128},{"text":"Can I keep going here?","width":64},{"text":"I'm going to take queue, yell, and add children","width":448},{"text":"It's an empty tree and the slash.","width":512},{"text":"Would you rather I put a NULL there?","width":192},{"text":"I don't know what does a NULL looks like.","width":192},{"text":"It's a little box with a slash in it, right?","width":256}],
  [{"text":"[Video Playing]","width":7488},{"text":"Happy friday!","width":256},{"text":"Barndance!","width":512},{"text":"Alright let's work.","width":825},{"text":"Okay you're not going to the barndance because you have an mp due tonight","width":361},{"text":"And I'm not going to the barndance because I don' have my boots on","width":404},{"text":"Okay so let's see","width":128},{"text":"Your mP is due tonight. Is that too loud?","width":383},{"text":"You good people in the back?","width":318},{"text":"Alright so last time we talked about level order traversal","width":555},{"text":"and i wrote a bunch of code for you and i did it wrong ","width":291},{"text":"do you remember this?","width":133},{"text":"It was bad in lots of different ways","width":274},{"text":"oh no it's gonna be one of those days","width":336},{"text":"okay","width":64},{"text":"so the execution of the algorithm on the tree was fine.","width":640},{"text":"I am going to consider this partial subtree only and pretend like it is the example of the day.","width":1024},{"text":"So level order works like this.","width":320},{"text":"You can trace the code that we wrote and understand the algorithm it matches the steps in the algorithm except when I wrote that code I made a mistake.","width":1024},{"text":"Okay let's see, so I have this queue that's what this line is intended to be. And I am going to enqueue the root, so this is review this should be reiview","width":960},{"text":"And I will try to do it quikcly.","width":256},{"text":"Ok so I enqueued the root remember now this is the root croot i believe it is called.","width":640},{"text":"Alright then now the queue is not empty we have already put something on it now while the queue is not empty we are going to grab hold of the dequeued value so i'm going todequque the minus the node containing the minus and then this is where I made the mistake","width":1856},{"text":"If it is not null, so if T is not equal to null, then I am going to do the following. ","width":896}],
  [{"text":"Fewer iterations the while loop, right. Because we don't put as many things on the queue.","width":673},{"text":"So you're all worried about the number of iterations in the while loop.","width":438},{"text":"Ok now, I argue that as it is, and you're willing to pay for fewer iterations of the while loop, you're willing to pay a little bit of time here to decrease the total number of iterations in the while loop.","width":2005},{"text":"That's dollar, this is your currency. Time is your currency.","width":279},{"text":"Now, I argue it just doesn't matter.","width":384},{"text":"Why?","width":64},{"text":"How many fewer iterations do you get?","width":216},{"text":"How many few iterations do you get?","width":177},{"text":"n+1, that's right","width":384},{"text":"You don't put nulls on.","width":183},{"text":"so the total number of fewer iterations you get is constant per data element.","width":448},{"text":"So you are, order in total, which implies constant per data element.","width":448},{"text":"So that means you are willing to pay constant per element in order to save constant per element.","width":704},{"text":"So it's a wash.","width":128},{"text":"And it's a wash in terms of running time. Overall in terms of asymptotic running time.","width":512},{"text":"I fully intended to go implement it both ways, with the conditionals there, and without them. But I just never did.","width":551},{"text":"Now, I also want to point out that actually putting these here mean you don't need this one, right?","width":504},{"text":"You see that? You actually do save a little bit there, but it just makes the code uglier, and increases the number of test cases.","width":621},{"text":"So the upshot is kind of you want to push your if statement up, so that lots of work is done in either case.","width":565},{"text":"It's more of a software engineering class type question.","width":320},{"text":"Ok, let's see. Oh! The other complexity is that when you start the algorithm you have to be careful.","width":825},{"text":"This as it's written, with these red guys here doesn't work on an initially empty tree.","width":463},{"text":"So what you have to do is that you adopt the principle that every time you ever do an enqueue in this algorithm you check first, and that means you also have to check here.","width":958},{"text":"[Writing].","width":640},{"text":"I have a question for you, so I'm going to blurr my eyes so it's not personal. But i'm just kind of curious how you feel about this. I want to know whether you're sold on my story.","width":1206},{"text":"I think it's very intuitive that putting those nulls on there bugs you. Bugs us.","width":519},{"text":"So I want to know if my argument has been convincing, and the way I want to judge whether it's been convincing is whether you feel like if you went to implement this code yourself, whether you would use the blue or red stategy.","width":1061},{"text":"So I'm trying to tap into your inner feeling about code writing.","width":434},{"text":"Are you prepared to answer? Raise your hand if you would chose the blue strategy for writing this code, and raise your hand if you're not buying it, you would prefer the red strategy. Because it just makes sense.","width":1358},{"text":"They're asymptotically the same, it's almost an issue of elegance. Is it black and blue or gold and white?","width":832},{"text":"Why you need the if statement on the top?","width":768},{"text":"The question is about the if statement on the top","width":192},{"text":"Oh well it's not empty so I'm lying you're telling me? Because it is empty already. I'm wrong, good catch.","width":1136},{"text":"You don't need this.","width":448}],
  [{"text":"Otherwise, do we need to write down this final conditional?","width":362},{"text":"No, because we cover all possible other cases.","width":192},{"text":"Right?","width":64},{"text":"Otherwise, we are going to return the find of cRoot. right?","width":591},{"text":"Yes, what's your question?","width":192},{"text":"Oh, very good.","width":84},{"text":"Sorry,","width":59},{"text":"So, I messed up the arguments here.","width":448},{"text":"[blank]","width":432},{"text":"Any question about that it?","width":192},{"text":"Alright, I'm ask you to about the running time of this, and then let you answer.","width":553},{"text":"So, the running time of this algorithm depend on what characteristic of the tree.","width":832},{"text":"The running time of this part of algorithm depend what characteristic of the tree?","width":384},{"text":"The height of this tree, that's right.","width":192},{"text":"Now, we don't know necessarily what the height of the tree is at any given instance.","width":640},{"text":"We don't know whether it's an almost nice looking tree, like this one.","width":265},{"text":"Where the about the same height on either side.","width":192},{"text":"We don't know whether is like that, whether is dramatic spill.","width":192},{"text":"So, we are going to for now report the running time in term of this parameter whose value we don't yet totally understand.","width":768},{"text":"So, the running time here is big-O of h, where h is the height. ","width":448},{"text":"And notice that the reflecting running time this way does capture accent of the algorithm","width":576},{"text":"It does capture the fact the algorithm start at the top and works way down until it find a leaf perhaps ","width":640},{"text":"Or, in the worst case it find a leaf.","width":128},{"text":"It does't in contrast, it does't explore the whole structure.","width":384},{"text":"That is little bit different than traversal we saw before.","width":256},{"text":"Any question about that?","width":128},{"text":"Ok, fine.","width":256},{"text":"I think the future semester I'll change the order of this because I'll actually like for you to written some code.","width":384},{"text":"But, this one it a little dicer.","width":256},{"text":"So, it would be better to have switch them.","width":128},{"text":"Alright, so, we were going write code for insert. ","width":448},{"text":"And, this one return nothing.","width":256},{"text":"Again, it's a binary search tree member function. ","width":256},{"text":"Now, keep in mind that we might be use BST to actually implement the dictionary.","width":448},{"text":"So, we still got this responsibility to deal with dictionary kind of things.","width":512},{"text":"It's name is insert.","width":256},{"text":"And the parameter include the key in data together with a root to the structure.","width":512},{"text":"So, cRoot insert might be call on root and might be I am inserting number 0.","width":832},{"text":"I don't know 65 was not there, might be we should put it there.","width":192},{"text":"And, data....","width":384},{"text":"I don't know, d.","width":128},{"text":"can be clever there.","width":64},{"text":"Alright, any question about that?","width":192},{"text":"So, this is how would look?","width":64},{"text":"I have a question really quickly before we write the code.","width":192},{"text":"Is insert public or private?","width":64},{"text":"Private because refer to the root, the tree node pointer right.","width":513},{"text":"It refers to the root, it has root as the parameter.","width":192},{"text":"And, you can't expect the client code necessarily know that.","width":256},{"text":"But, it does not said it couldn't insert root, it just have to build a public wrapper for its.","width":384},{"text":"Like we did last time.","width":64},{"text":"Ok, so, it's cRoot is equal to null.","width":352},{"text":"don't think about anything else other than if the root is equal to null, and I want to insert something ","width":704},{"text":"What do I do?","width":128}],
  [{"text":"An abstract data type called a...there's a hint on the screen...dictionary. The Abstract data type","width":576},{"text":"that we were interested in was called a dictionary. Here is the functionality of a dictionary we need to be able to insert","width":640},{"text":"into it given a key. Insert into it given a key and data.","width":704},{"text":"We need to be able to remove elements from it given a key","width":320},{"text":"Find elements given a key and returning probably the key-data pair","width":576},{"text":"Probably that. And then of course we want to be able to see what things we have in a dictionary.","width":640},{"text":"Though this is a gift","width":192},{"text":"This is a gift not necessarily part of the original abstract data type. ","width":576},{"text":"This is by convention is really nice when a dictionary gives you the ability to get all of your data out of it in some efficient way.","width":576},{"text":"So we are talking about implementing dictionaries. What was the particular implementation we were working on?","width":512},{"text":"what was the particular structure we were using to implement dictionaries? ","width":448},{"text":"Binary search trees that's right. Here's an example of one and I think a quick glance will remind you of that thing, okay?","width":704},{"text":"Now, inside this class dictionary, which is templated to accept a key type and a data type. ","width":576},{"text":"I have sort of spelled out the necessary components that we needed to implement the dictionary using the binary search tree. ","width":640},{"text":"But, oh and going along with that, I asked you to just please accept that the contents of each node were keys, and that the data is hiding somewhere behind the node. ","width":1088},{"text":"Then our focus became manipulating the structure based on their keys, okay?","width":384},{"text":"And we got most of the way through this little list of functionality here. ","width":512},{"text":"We did traversal a few days ago, we did inserting and finding in the structure. ","width":384},{"text":"And today we are gonna focus on remove it. Now at this moment I'm gonna stop talking about dictionaries per se. ","width":640},{"text":"And focus on the implementation. The rest of the code you are gonna see today, instead of being class dictionary, ","width":576},{"text":"is going to be class BST. And I'm not gonna focus on the data. ","width":384},{"text":"But suffice to say what we do in forms what might be actually a private member of a dictionary class. ","width":512},{"text":"So you might say that the dictionary contains, or has a binary search tree at the root of its implementation.","width":576},{"text":"Okay it's just a slightly different design. Another motivating factor for this was that I forgot to templatize the data in all the code that I wrote for the rest of the day. ","width":896},{"text":"And we don't need it for what we are talking about so I got rid of it and we are gonna focus on the keys. ","width":448},{"text":"That's all. ","width":128},{"text":"Alright, I want to do a little bit of review, and this is actually one of my very favorite moments. ","width":512},{"text":"If I can pull it together here. So this is a web page but it might be just an image of one, apparently. ","width":768},{"text":"Let me see if I can get it. ","width":512},{"text":"(trying to open up the web page)","width":3072}],
  [{"text":"I look at this tree and something that are super easy to remove. what are the keys that are easy to remove. the leaf that's right the keys are easy to remove because..the leaves are easy to remove because wÂ how to find .e know..walk down the tree we can find something and if it is a leaf we simply snip off,right?","width":1071},{"text":"ok so lets...well we will do that in a minute. so this one is easy","width":640},{"text":"any questions about that?","width":256},{"text":"we look at both code and example to see how this work in a second.","width":256},{"text":"which one is a kind of easy.","width":192},{"text":"what could be a node that does not seem to be that hard.","width":448},{"text":"discuss with some person sits next to you really quickly.","width":576},{"text":"leave nodes that are easy what is also not terribly diffi","width":768},{"text":"ok out of you discussion somebody raise your hand and explain to me why removing 25 will not be too difficult.","width":896},{"text":"why would we remove...","width":192},{"text":"very good notice that this string right here this sort of pieces of trees this is just looks like a linked list, right?","width":1088},{"text":"because there is no branches to deal with in that context you already know how to remove things from a linked list.","width":512},{"text":"so removing 25 or 10 or any other nodes with that many children","width":768},{"text":"it is pretty easy","width":192},{"text":"so this one is ","width":128},{"text":"kinda easy","width":192},{"text":"but different ","width":192},{"text":"it is a different process","width":192},{"text":"on the other hand","width":192},{"text":"the heck","width":192},{"text":"all right","width":128},{"text":"what i wanna do is","width":128},{"text":"how do i switch apps","width":128},{"text":"like can i get back to my browser right now ","width":384},{"text":"swap from left side screen so like this","width":448},{"text":"one finger to three ten","width":192},{"text":"hoo hoo","width":192},{"text":"ok","width":192},{"text":"i think i can get back","width":384},{"text":" one finger","width":128},{"text":"i am gonna show you how to do this two child removes i want you to watch closely","width":640},{"text":"i am gonna do it fast first and then i want you watch closely to what happens to see if you could articulate what  going on .","width":512},{"text":"but before we ....","width":320},{"text":"do this it must drive real windows uses crazy how like in particularly with the whole thing","width":99},{"text":"71I want to remove","width":133},{"text":"yeah","width":320},{"text":"right","width":64},{"text":"71","width":448},{"text":"and delete it","width":192},{"text":"are you ready","width":64},{"text":"it is going pretty quickly","width":128},{"text":"i will slow it down in a minute but i want you ti see it ","width":256},{"text":"we found it","width":64},{"text":"what happened","width":64},{"text":"could we put something back there?","width":1216},{"text":"we are gonna to insert...it does not have sound i am gonna plug in that i cannot help it","width":640},{"text":"it is full sensory experience","width":192},{"text":"ok","width":128},{"text":"now just to give you the feeling for you know what i am gonna do really radical  here.","width":320},{"text":"next we are gonna insert ...oh ","width":448},{"text":"it turn out","width":128},{"text":"i am gonna insert 41","width":64}],
  [{"text":"Yeah, look, think about how messy the boolean would be, it would have 2 cases, for testing just for 1 child.","width":320},{"text":"Screw this, this is all the other cases, and those 2 are super easy.","width":576},{"text":"So when you're doing this, when you're evaluating a collection of booleans whose union is all the possibilities, take your most complex one and make it the else.   ","width":832},{"text":"That's the easiest way to go about it.","width":128},{"text":"Any questions about that?","width":192},{"text":"Now look what I did here.","width":128},{"text":"I took due removal, and said \"oh my gosh\", this is a huge task","width":384},{"text":"In fact it's a task that I don't want to think about all at one time.","width":256},{"text":"I'm going to break it down into these 3 little things.","width":448},{"text":"The first two I'm going to think about are these two.","width":192},{"text":"Because both of them are easy and kind of easy.","width":320},{"text":"So let's write the code for them real quick.","width":384},{"text":"So here's no child removed, and I'll just trace the code.","width":448},{"text":"I'm going to do a no child removed on this pointer, is that okay with you?","width":384},{"text":"I'm going to remove 12 and illustrate what the code does.","width":192},{"text":"It grabs hold of this, with temp, it sets cRoot = null, so this pointer is now gone and there's a null sitting here, and then deletes temp.","width":1472},{"text":"So the end result is a null sitting where that whole thing used to be.","width":256},{"text":"Any questions at all about that?","width":64},{"text":"If I just said delete cRoot, cRoot = null, oh I probably could huh?","width":1216},{"text":"Delete cRoot, cRoot = null","width":640},{"text":"Oh yeah that would be fine.","width":192},{"text":"I was probably on auto pilot here, which says grab ahold of something for deletion.","width":768},{"text":"I was probably on auto pilot here, which says grab ahold of something for deletion, that's all.","width":64},{"text":"I hate it when people come up with more elegant code than I do, I hate it.","width":512},{"text":"Alright, any question about it?","width":256},{"text":"Let's do 1 child removed, and maybe the same issue will exist here.","width":320},{"text":"So where is a 1 child we can remove?","width":256},{"text":"Looks like 25 is good, I'll do this one in green so we can illustrate it.","width":384},{"text":"So here is cRoot coming in, and we're going to remove 25.","width":320},{"text":"So the thing is that I don't have to, that I will already have found it back here, because cRoot = key here, and then I'm going to pass that through to here.","width":1792},{"text":"So I will already have a hold on exactly the one I want to remove, and I have it by reference, so I can kind of be changing the parent as I go.","width":640},{"text":"Now, we could argue a bit about whether this is good style.","width":320},{"text":"What is does do is it keeps an empty tree from being a special case, that's why I'm going to leave that right there.","width":448},{"text":"So let's do this 1 child remove.","width":768},{"text":"Oh, again! It's not a lot of code, let's see if it does what we think it should do.","width":128},{"text":"So the first thing I'm going to do is grab hold of the node that I'm eventually going to remove.","width":640},{"text":"And then, I'm going to either reset this pointer, the 13's right child, effectively to be 25's right child or 25's left child, which ever one exists.","width":960},{"text":"That's what that conditional is doing.","width":192},{"text":"And in this case, it happens to be this assignment statement that goes.","width":512},{"text":"Because 25's left child is null.","width":256},{"text":"That means that in the end this one points there, or 37 gets kind of drawn up, and now I do delete temp. ","width":896},{"text":"You like it, does it seem good?","width":256},{"text":"Well that was easy.","width":256},{"text":"It was even better than kind of easy.","width":192},{"text":"Alright, you ready for 2 child remove? Don't peak, how many lines of code is 2 child remove?","width":384},{"text":"It must be really hard.","width":256},{"text":"Because, you got to do all this stuff, and you got to do all that stuff.","width":320}],
  [{"text":"This one is not, it's still gonna be hanging off clinging to memory we have deleted","width":612},{"text":"So That's the bug, do you see it, and it's all because IOP does not","width":448},{"text":"refer to one of the pointers in the tree, there's a couple ways of fixing this, we could rightmost child again","width":541},{"text":"here, uh c root's left but that feels wasteful right","width":630},{"text":"We could find it again and pass by the reference to it so we're holding on to it","width":448},{"text":"or this is something new, this is a new thing, but it won't surprise you, we can declare something ","width":512},{"text":"to be a reference variable. And i'll put this in a different color ink. We can declare something to be","width":576},{"text":"reference variable and if we do that","width":256},{"text":"then it becomes another name for whatever it was ","width":277},{"text":"that we assigned to it","width":92},{"text":"so then in that case, IOP would be a name for that variable in the tree","width":512},{"text":"So reference variables behave exactly the same way as reference parameters do","width":499},{"text":"okay yes,","width":128},{"text":"yeah","width":576},{"text":"Oh I don't have to swap, I don't have to do the swap 'cause I'm just gonna cut the other one off","width":320},{"text":"Right","width":896},{"text":"That's fine though because do removal takes, it doesn't care about key value","width":384},{"text":"At that point, it just says it just concerned with structure","width":230},{"text":"We've already said I want to remove you, we've already done all key evaluations","width":424},{"text":"That happened here, way out here","width":192},{"text":"Do removal is after we've already identified which one we want to remove okay does that make sense ","width":448},{"text":"Okay, alright, any other questions about this","width":256},{"text":"Okay, fine","width":320},{"text":"Uhh, what slide number is that, so second to last one","width":384},{"text":"Okay I have a question for you, what's the running time of this function of remove","width":256},{"text":"What's the running time of remove ","width":192},{"text":"And as you reflect on this answer","width":576},{"text":"Oh it isn't oh there's one more right okay","width":384},{"text":"We're not quite done, not quite done there's one more function right","width":256},{"text":"We need to write the code that gives up the rightmost child of the left subtree.","width":422},{"text":"How many lines of code is this one gonna be","width":192},{"text":"Uh, my question for you is is it code that contains a keyword that has a \"w\"?","width":512},{"text":"Like while? so raise your hand if you automatically would think to write this thing recursively","width":320},{"text":"Okay, yeah me too the people always yell at me for it","width":448},{"text":"Uh so if the right subtree is already to null, then we found what we're looking for","width":427},{"text":"Otherwise, we're just gonna keep walking down the tree okay","width":304},{"text":"So, there you go, and what you should notice from this is","width":329},{"text":"that we are returning it by reference so that","width":448},{"text":"The thing that came in is actually going to be the handle on the thing that came out","width":448},{"text":"That's why it's okay to assign IOP to it","width":274},{"text":"It's not a copy to begin with it's actually in the tree","width":192},{"text":"And I'll leave that to you to untangle and goodbye ","width":278},{"text":"Oh what is the run time? Big O of h, big O of the height of the tree, we'll talk about it next time","width":640},{"text":"Uh let's see so you wanna know","width":960}],
];

if (typeof module !== 'undefined') {
  module.exports = videoCaptions;
}